/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/boot"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$<<', '$receivers', '$set_var', '$new', '$each', '$call']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a;

    if ($truthy((($a = Opal.const_get_relative($nesting, 'Operation', 'skip_raise')) ? 'constant' : nil))) {
      } else {
      
      (function($base, $super, $parent_nesting) {
        function $Operation(){};
        var self = $Operation = $klass($base, $super, 'Operation', $Operation);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $Application(){};
        var self = $Application = $klass($base, $super, 'Application', $Application);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Boot(){};
          var self = $Boot = $klass($base, $super, 'Boot', $Boot);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          
          (function($base, $super, $parent_nesting) {
            function $ReactDummyParams(){};
            var self = $ReactDummyParams = $klass($base, $super, 'ReactDummyParams', $ReactDummyParams);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ReactDummyParams_initialize_1;

            
            self.$attr_reader("context");
            return (Opal.defn(self, '$initialize', TMP_ReactDummyParams_initialize_1 = function $$initialize(context) {
              var self = this;

              return (self.context = context)
            }, TMP_ReactDummyParams_initialize_1.$$arity = 1), nil) && 'initialize';
          })($nesting[0], null, $nesting);
          return (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_on_dispatch_2, TMP_receivers_4, TMP_run_6;

            
            
            Opal.defn(self, '$on_dispatch', TMP_on_dispatch_2 = function $$on_dispatch() {
              var self = this, $iter = TMP_on_dispatch_2.$$p, block = $iter || nil;

              if ($iter) TMP_on_dispatch_2.$$p = null;
              return self.$receivers()['$<<'](block)
            }, TMP_on_dispatch_2.$$arity = 0);
            
            Opal.defn(self, '$receivers', TMP_receivers_4 = function $$receivers() {
              var TMP_3, self = this;

              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@receivers", $hash2(["force"], {"force": true})], (TMP_3 = function(){var self = TMP_3.$$s || this;

              return []}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
            }, TMP_receivers_4.$$arity = 0);
            return (Opal.defn(self, '$run', TMP_run_6 = function $$run($kwargs) {
              var TMP_5, self = this, context, params = nil;

              if ($kwargs == null || !$kwargs.$$is_hash) {
                if ($kwargs == null) {
                  $kwargs = $hash2([], {});
                } else {
                  throw Opal.ArgumentError.$new('expected kwargs');
                }
              }
              context = $kwargs.$$smap["context"];
              if (context == null) {
                context = nil
              }
              
              params = Opal.const_get_relative($nesting, 'ReactDummyParams').$new(context);
              return $send(self.$receivers(), 'each', [], (TMP_5 = function(receiver){var self = TMP_5.$$s || this;
if (receiver == null) receiver = nil;
              return receiver.$call(params)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
            }, TMP_run_6.$$arity = -1), nil) && 'run';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], Opal.const_get_relative($nesting, 'Operation'), $nesting)
      })($nesting[0], null, $nesting);
    }
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/deprecation_warning"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$production?', '$env', '$include?', '$<<']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_deprecation_warning_1;

    Opal.defs(self, '$deprecation_warning', TMP_Hyperstack_deprecation_warning_1 = function $$deprecation_warning(name, message) {
      var $a, self = this;
      if (self.deprecation_messages == null) self.deprecation_messages = nil;

      
      if ($truthy(self.$env()['$production?']())) {
        return nil};
      self.deprecation_messages = ($truthy($a = self.deprecation_messages) ? $a : []);
      message = "" + "Warning: Deprecated feature used in " + (name) + ". " + (message);
      if ($truthy(self.deprecation_messages['$include?'](message))) {
        return nil};
      self.deprecation_messages['$<<'](message);
      return console.warn.apply(console, [message]);
    }, TMP_Hyperstack_deprecation_warning_1.$$arity = 2)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_json_1;

    return (Opal.defn(self, '$to_json', TMP_String_to_json_1 = function $$to_json() {
      var self = this;

      return JSON.stringify(self)
    }, TMP_String_to_json_1.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/client_stubs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_import_1, TMP_imports_2, TMP_import_tree_3;

      
      
      Opal.defn(self, '$import', TMP_import_1 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_import_1.$$arity = -1);
      
      Opal.defn(self, '$imports', TMP_imports_2 = function $$imports($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_imports_2.$$arity = -1);
      return (Opal.defn(self, '$import_tree', TMP_import_tree_3 = function $$import_tree($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_import_tree_3.$$arity = -1), nil) && 'import_tree';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/context"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_variable_get', '$!', '$key?', '$[]', '$dup', '$[]=', '$-', '$instance_variable_set', '$each', '$run', '$new']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Context, self = $Context = $module($base, 'Context');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Context_set_var_1, TMP_Context_reset$B_5;

      
      Opal.defs(self, '$set_var', TMP_Context_set_var_1 = function $$set_var(ctx, var$, $kwargs) {
        var $a, $b, self = this, force, $iter = TMP_Context_set_var_1.$$p, $yield = $iter || nil, inst_value_b4 = nil, $writer = nil;
        if (self.context == null) self.context = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        force = $kwargs.$$smap["force"];
        if (force == null) {
          force = nil
        }
        if ($iter) TMP_Context_set_var_1.$$p = null;
        
        inst_value_b4 = ctx.$instance_variable_get(var$);
        if ($truthy(($truthy($a = ($truthy($b = self.context) ? self.context['$[]'](ctx)['$key?'](var$)['$!']() : $b)) ? ($truthy($b = force) ? $b : inst_value_b4['$!']()) : $a))) {
          
          $writer = [var$, ($truthy($a = inst_value_b4) ? inst_value_b4.$dup() : $a)];
          $send(self.context['$[]'](ctx), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return ($truthy($a = inst_value_b4) ? $a : ctx.$instance_variable_set(var$, Opal.yieldX($yield, [])));
      }, TMP_Context_set_var_1.$$arity = -3);
      Opal.defs(self, '$reset!', TMP_Context_reset$B_5 = function(reboot) {
        var TMP_2, TMP_4, self = this;
        if (self.context == null) self.context = nil;

        if (reboot == null) {
          reboot = true;
        }
        if ($truthy(self.context)) {
          
          $send(self.context, 'each', [], (TMP_2 = function(ctx, vars){var self = TMP_2.$$s || this, TMP_3;
if (ctx == null) ctx = nil;if (vars == null) vars = nil;
          return $send(vars, 'each', [], (TMP_3 = function(var$, init){var self = TMP_3.$$s || this, $a;
if (var$ == null) var$ = nil;if (init == null) init = nil;
            return ctx.$instance_variable_set(var$, ($truthy($a = init) ? init.$dup() : $a))}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3))}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2));
          if ($truthy(reboot)) {
            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Application'), 'Boot').$run()
            } else {
            return nil
          };
          } else {
          return (self.context = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_4 = function(h, k){var self = TMP_4.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
          
            $writer = [k, $hash2([], {})];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4)))
        }
      }, TMP_Context_reset$B_5.$$arity = -1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/js_imports"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$!=', '$!', '$each', '$raise']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_js_import_2;

      return (Opal.defn(self, '$js_import', TMP_js_import_2 = function $$js_import(value, $kwargs) {
        var $a, $b, TMP_1, self = this, client_only, server_only, defines, on_server = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        client_only = $kwargs.$$smap["client_only"];
        if (client_only == null) {
          client_only = nil
        }
        server_only = $kwargs.$$smap["server_only"];
        if (server_only == null) {
          server_only = nil
        }
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'defines')) {
          throw Opal.ArgumentError.$new('missing keyword: defines');
        }
        defines = $kwargs.$$smap["defines"];
        
        defines = [].concat(Opal.to_a(defines));
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          return nil
          } else {
          
          on_server = typeof Opal.global.document === 'undefined';
          if ($truthy(($truthy($a = ($truthy($b = server_only) ? on_server['$!']() : $b)) ? $a : ($truthy($b = client_only) ? on_server : $b)))) {
            return nil};
          return $send(defines, 'each', [], (TMP_1 = function(name){var self = TMP_1.$$s || this;
if (name == null) name = nil;
          
            if ($truthy(Opal.global[name] === undefined)) {
              } else {
              return nil;
            };
            return self.$raise("" + ("" + "The package " + (name) + " was not found. Add it to the webpack ") + ("" + ((function() {if ($truthy(client_only)) {
              return "client_only.js"
              } else {
              return "client_and_server.js"
            }; return nil; })()) + " manifest."));}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        };
      }, TMP_js_import_2.$$arity = 2), nil) && 'js_import'
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/on_client"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$!']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_on_client$q_1;

    Opal.defs(self, '$on_client?', TMP_Hyperstack_on_client$q_1 = function() {
      var self = this;

      if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        return (typeof Opal.global.document === 'undefined')['$!']()
        } else {
        return nil
      }
    }, TMP_Hyperstack_on_client$q_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/active_support_string_inquirer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$private', '$==', '$[]']);
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $StringInquirer(){};
      var self = $StringInquirer = $klass($base, $super, 'StringInquirer', $StringInquirer);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StringInquirer_respond_to_missing$q_1, TMP_StringInquirer_method_missing_2;

      
      self.$private();
      
      Opal.defn(self, '$respond_to_missing?', TMP_StringInquirer_respond_to_missing$q_1 = function(method_name, include_private) {
        var $a, self = this, $iter = TMP_StringInquirer_respond_to_missing$q_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (include_private == null) {
          include_private = false;
        }
        if ($iter) TMP_StringInquirer_respond_to_missing$q_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return ($truthy($a = method_name['$[]'](-1)['$==']("?")) ? $a : $send(self, Opal.find_super_dispatcher(self, 'respond_to_missing?', TMP_StringInquirer_respond_to_missing$q_1, false), $zuper, $iter))
      }, TMP_StringInquirer_respond_to_missing$q_1.$$arity = -2);
      return (Opal.defn(self, '$method_missing', TMP_StringInquirer_method_missing_2 = function $$method_missing(method_name, $a_rest) {
        var self = this, arguments$, $iter = TMP_StringInquirer_method_missing_2.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        arguments$ = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          arguments$[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_StringInquirer_method_missing_2.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if (method_name['$[]'](-1)['$==']("?")) {
          return self['$=='](method_name['$[]']($range(0, -2, false)))
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_StringInquirer_method_missing_2, false), $zuper, $iter)
        }
      }, TMP_StringInquirer_method_missing_2.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'String'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack_env"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_env_1;

    Opal.defs(self, '$env', TMP_Hyperstack_env_1 = function $$env() {
      var $a, self = this;
      if (self.environment == null) self.environment = nil;

      return (self.environment = ($truthy($a = self.environment) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'StringInquirer').$new("development")))
    }, TMP_Hyperstack_env_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/hotloader/stub"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a;

    if ($truthy((($a = Opal.const_get_relative($nesting, 'Hotloader', 'skip_raise')) ? 'constant' : nil))) {
      } else {
      (function($base, $super, $parent_nesting) {
        function $Hotloader(){};
        var self = $Hotloader = $klass($base, $super, 'Hotloader', $Hotloader);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hotloader_when_file_updates_1;

        return Opal.defs(self, '$when_file_updates', TMP_Hotloader_when_file_updates_1 = function $$when_file_updates() {
          var self = this, $iter = TMP_Hotloader_when_file_updates_1.$$p, block = $iter || nil;

          if ($iter) TMP_Hotloader_when_file_updates_1.$$p = null;
          return nil
        }, TMP_Hotloader_when_file_updates_1.$$arity = 0)
      })($nesting[0], null, $nesting)
    }
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack-config"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$==']);
  
  self.$require("hyperstack/boot");
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_naming_convention_1;

    Opal.defs(self, '$naming_convention', TMP_Hyperstack_naming_convention_1 = function $$naming_convention() {
      var self = this;

      return "camelize_params"
    }, TMP_Hyperstack_naming_convention_1.$$arity = 0)
  })($nesting[0], $nesting);
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("hyperstack/deprecation_warning");
    self.$require("hyperstack/string");
    self.$require("hyperstack/client_stubs");
    self.$require("hyperstack/context");
    self.$require("hyperstack/js_imports");
    self.$require("hyperstack/on_client");
    self.$require("hyperstack/active_support_string_inquirer.rb");
    self.$require("hyperstack_env");
    return self.$require("hyperstack/hotloader/stub");
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$!=', '$attr_accessor']);
  
  self.$require("hyperstack-config");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
      nil};
    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          return self.$attr_accessor("after_error_args")
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/callbacks"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$!=', '$extend', '$each', '$flatten', '$callbacks_for', '$class', '$is_a?', '$instance_exec', '$to_proc', '$send', '$define_singleton_method', '$set_var', '$<<', '$push', '$when_file_updates', '$delete_if', '$equal?', '$call', '$+', '$respond_to?', '$superclass', '$any?']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Callbacks, self = $Callbacks = $module($base, 'Callbacks');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Callbacks_included_1, TMP_Callbacks_run_callback_3;

        
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil};
        Opal.defs(self, '$included', TMP_Callbacks_included_1 = function $$included(base) {
          var self = this;

          return base.$extend(Opal.const_get_relative($nesting, 'ClassMethods'))
        }, TMP_Callbacks_included_1.$$arity = 1);
        
        Opal.defn(self, '$run_callback', TMP_Callbacks_run_callback_3 = function $$run_callback(name, $a_rest) {
          var TMP_2, self = this, args, $iter = TMP_Callbacks_run_callback_3.$$p, $yield = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Callbacks_run_callback_3.$$p = null;
          
          $send(self.$class().$callbacks_for(name).$flatten(), 'each', [], (TMP_2 = function(callback){var self = TMP_2.$$s || this, result = nil;
if (callback == null) callback = nil;
          
            result = (function() {if ($truthy(callback['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
              return $send(self, 'instance_exec', Opal.to_a(args), callback.$to_proc())
              } else {
              return $send(self, 'send', [callback].concat(Opal.to_a(args)))
            }; return nil; })();
            if (($yield !== nil)) {
              return (args = Opal.yield1($yield, result))
              } else {
              return nil
            };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
          return args;
        }, TMP_Callbacks_run_callback_3.$$arity = -2);
        (function($base, $parent_nesting) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_define_callback_4, TMP_ClassMethods_callbacks_for_10, TMP_ClassMethods_callbacks$q_11;

          
          
          Opal.defn(self, '$define_callback', TMP_ClassMethods_define_callback_4 = function $$define_callback(callback_name) {
            var TMP_5, TMP_7, self = this, $iter = TMP_ClassMethods_define_callback_4.$$p, after_define_hook = $iter || nil, wrapper_name = nil;

            if ($iter) TMP_ClassMethods_define_callback_4.$$p = null;
            
            wrapper_name = "" + "_" + (callback_name) + "_callbacks";
            $send(self, 'define_singleton_method', [wrapper_name], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

            return $send(Opal.const_get_relative($nesting, 'Context'), 'set_var', [self, "" + "@" + (wrapper_name), $hash2(["force"], {"force": true})], (TMP_6 = function(){var self = TMP_6.$$s || this;

              return []}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
            return $send(self, 'define_singleton_method', [callback_name], (TMP_7 = function($a_rest){var self = TMP_7.$$s || this, block, args, TMP_8;

              block = TMP_7.$$p || nil;
              if (block) TMP_7.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              if ((block !== nil)) {
                args['$<<'](block)};
              self.$send(wrapper_name).$push(args);
              $send(Opal.const_get_relative($nesting, 'Hotloader'), 'when_file_updates', [], (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_9;

              return $send(self.$send(wrapper_name), 'delete_if', [], (TMP_9 = function(item){var self = TMP_9.$$s || this;
if (item == null) item = nil;
                return item['$equal?'](args)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));
              if ($truthy(after_define_hook)) {
                return $send(after_define_hook, 'call', Opal.to_a(args), block.$to_proc())
                } else {
                return nil
              };}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7));
          }, TMP_ClassMethods_define_callback_4.$$arity = 1);
          
          Opal.defn(self, '$callbacks_for', TMP_ClassMethods_callbacks_for_10 = function $$callbacks_for(callback_name) {
            var self = this, wrapper_name = nil;

            
            wrapper_name = "" + "_" + (callback_name) + "_callbacks";
            return $rb_plus((function() {if ($truthy(self.$superclass()['$respond_to?']("callbacks_for"))) {
              return self.$superclass().$callbacks_for(callback_name)
              } else {
              return []
            }; return nil; })(), self.$send(wrapper_name));
          }, TMP_ClassMethods_callbacks_for_10.$$arity = 1);
          
          Opal.defn(self, '$callbacks?', TMP_ClassMethods_callbacks$q_11 = function(name) {
            var self = this;

            return self.$callbacks_for(name)['$any?']()
          }, TMP_ClassMethods_callbacks$q_11.$$arity = 1);
        })($nesting[0], $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/auto_unmount"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$class_eval', '$define_callback', '$run_callback', '$each', '$[]', '$objects_to_unmount', '$to_proc', '$delete', '$instance_variables', '$instance_variable_get', '$respond_to?', '$unmount', '$==', '$unmounted?', '$tap', '$define_singleton_method', '$abort', '$<<', '$new', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $AutoUnmount, self = $AutoUnmount = $module($base, 'AutoUnmount');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AutoUnmount_included_2, TMP_AutoUnmount_unmounted$q_3, TMP_AutoUnmount_unmount_5, TMP_AutoUnmount_every_6, TMP_AutoUnmount_after_9;

        
        Opal.defs(self, '$included', TMP_AutoUnmount_included_2 = function $$included(base) {
          var TMP_1, self = this;

          
          base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Callbacks'));
          return $send(base, 'class_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this;

          return self.$define_callback("before_unmount")}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
        }, TMP_AutoUnmount_included_2.$$arity = 1);
        
        Opal.defn(self, '$unmounted?', TMP_AutoUnmount_unmounted$q_3 = function() {
          var self = this;
          if (self.__hyperstack_internal_auto_unmount_unmounted == null) self.__hyperstack_internal_auto_unmount_unmounted = nil;

          return self.__hyperstack_internal_auto_unmount_unmounted
        }, TMP_AutoUnmount_unmounted$q_3.$$arity = 0);
        
        Opal.defn(self, '$unmount', TMP_AutoUnmount_unmount_5 = function $$unmount() {
          var TMP_4, self = this;

          
          self.$run_callback("before_unmount");
          $send(Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self), 'each', [], "unmount".$to_proc());
          Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount().$delete(self);
          $send(self.$instance_variables(), 'each', [], (TMP_4 = function(var$){var self = TMP_4.$$s || this, val = nil;
if (var$ == null) var$ = nil;
          
            val = self.$instance_variable_get(var$);
            
            try {
              if ($truthy(val['$respond_to?']("unmount"))) {
                return val.$unmount()
                } else {
                return nil
              }
            } catch ($err) {
              if (Opal.rescue($err, [(function() {if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
                return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'JS'), 'Error')
                } else {
                return nil
              }; return nil; })()])) {
                try {
                  return nil
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
          return (self.__hyperstack_internal_auto_unmount_unmounted = true);
        }, TMP_AutoUnmount_unmount_5.$$arity = 0);
        
        Opal.defn(self, '$every', TMP_AutoUnmount_every_6 = function $$every($a_rest) {
          var TMP_7, self = this, args, $iter = TMP_AutoUnmount_every_6.$$p, block = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_AutoUnmount_every_6.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self['$unmounted?']())) {
            return nil};
          return $send($send(self, Opal.find_super_dispatcher(self, 'every', TMP_AutoUnmount_every_6, false), $zuper, $iter), 'tap', [], (TMP_7 = function(id){var self = TMP_7.$$s || this, TMP_8, sself = nil;
if (id == null) id = nil;
          
            sself = self;
            $send(id, 'define_singleton_method', ["unmount"], (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$abort()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));
            return Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self)['$<<'](id);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        }, TMP_AutoUnmount_every_6.$$arity = -1);
        
        Opal.defn(self, '$after', TMP_AutoUnmount_after_9 = function $$after($a_rest) {
          var TMP_10, self = this, args, $iter = TMP_AutoUnmount_after_9.$$p, block = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_AutoUnmount_after_9.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self['$unmounted?']())) {
            return nil};
          return $send($send(self, Opal.find_super_dispatcher(self, 'after', TMP_AutoUnmount_after_9, false), $zuper, $iter), 'tap', [], (TMP_10 = function(id){var self = TMP_10.$$s || this, TMP_11, sself = nil;
if (id == null) id = nil;
          
            sself = self;
            $send(id, 'define_singleton_method', ["unmount"], (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$abort()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
            return Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self)['$<<'](id);}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
        }, TMP_AutoUnmount_after_9.$$arity = -1);
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_objects_to_unmount_13;

          return (Opal.defn(self, '$objects_to_unmount', TMP_objects_to_unmount_13 = function $$objects_to_unmount() {
            var $a, TMP_12, self = this;
            if (self.objects_to_unmount == null) self.objects_to_unmount = nil;

            return (self.objects_to_unmount = ($truthy($a = self.objects_to_unmount) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_12 = function(h, k){var self = TMP_12.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
            
              $writer = [k, Opal.const_get_relative($nesting, 'Set').$new()];
              $send(h, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))))
          }, TMP_objects_to_unmount_13.$$arity = 0), nil) && 'objects_to_unmount'
        })(Opal.get_singleton_class(self), $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  
  (function($base, $parent_nesting) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Native_is_a$q_1, TMP_Native_try_convert_2, TMP_Native_convert_3, TMP_Native_call_4, TMP_Native_proc_5, TMP_Native_included_19, TMP_Native_initialize_20, TMP_Native_to_n_21;

    
    Opal.defs(self, '$is_a?', TMP_Native_is_a$q_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, TMP_Native_is_a$q_1.$$arity = 2);
    Opal.defs(self, '$try_convert', TMP_Native_try_convert_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    
    }, TMP_Native_try_convert_2.$$arity = -2);
    Opal.defs(self, '$convert', TMP_Native_convert_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, TMP_Native_convert_3.$$arity = 1);
    Opal.defs(self, '$call', TMP_Native_call_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_Native_call_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ($iter) TMP_Native_call_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    
    }, TMP_Native_call_4.$$arity = -3);
    Opal.defs(self, '$proc', TMP_Native_proc_5 = function $$proc() {
      var TMP_6, self = this, $iter = TMP_Native_proc_5.$$p, block = $iter || nil;

      if ($iter) TMP_Native_proc_5.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
      };
      return $send(Opal.const_get_qualified('::', 'Kernel'), 'proc', [], (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, args, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        $send(args, 'map!', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6));
    }, TMP_Native_proc_5.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_alias_native_11, TMP_Helpers_native_reader_14, TMP_Helpers_native_writer_17, TMP_Helpers_native_accessor_18;

      
      
      Opal.defn(self, '$alias_native', TMP_Helpers_alias_native_11 = function $$alias_native(new$, $old, $kwargs) {
        var TMP_8, TMP_9, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          
            self["native"][old['$[]']($range(0, -2, false))] = Opal.const_get_relative($nesting, 'Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], (TMP_9 = function($a_rest){var self = TMP_9.$$s || this, block, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil;
            if (block) TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ($truthy((value = $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9))
          } else {
          return $send(self, 'define_method', [new$], (TMP_10 = function($a_rest){var self = TMP_10.$$s || this, block, args;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil;
            if (block) TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10))
        }
      }, TMP_Helpers_alias_native_11.$$arity = -2);
      
      Opal.defn(self, '$native_reader', TMP_Helpers_native_reader_14 = function $$native_reader($a_rest) {
        var TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_12 = function(name){var self = TMP_12.$$s || this, TMP_13;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
      }, TMP_Helpers_native_reader_14.$$arity = -1);
      
      Opal.defn(self, '$native_writer', TMP_Helpers_native_writer_17 = function $$native_writer($a_rest) {
        var TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_15 = function(name){var self = TMP_15.$$s || this, TMP_16;
if (name == null) name = nil;
        return $send(self, 'define_method', ["" + (name) + "="], (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
      }, TMP_Helpers_native_writer_17.$$arity = -1);
      
      Opal.defn(self, '$native_accessor', TMP_Helpers_native_accessor_18 = function $$native_accessor($a_rest) {
        var self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, TMP_Helpers_native_accessor_18.$$arity = -1);
    })($nesting[0], $nesting);
    Opal.defs(self, '$included', TMP_Native_included_19 = function $$included(klass) {
      var self = this;

      return klass.$extend(Opal.const_get_relative($nesting, 'Helpers'))
    }, TMP_Native_included_19.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Native_initialize_20 = function $$initialize(native$) {
      var self = this;

      
      if ($truthy(Opal.const_get_qualified('::', 'Kernel')['$native?'](native$))) {
        } else {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return (self["native"] = native$);
    }, TMP_Native_initialize_20.$$arity = 1);
    
    Opal.defn(self, '$to_n', TMP_Native_to_n_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"]
    }, TMP_Native_to_n_21.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_native$q_22, TMP_Kernel_Native_25, TMP_Kernel_Array_26;

    
    
    Opal.defn(self, '$native?', TMP_Kernel_native$q_22 = function(value) {
      var self = this;

      return value == null || !value.$$class
    }, TMP_Kernel_native$q_22.$$arity = 1);
    
    Opal.defn(self, '$Native', TMP_Kernel_Native_25 = function $$Native(obj) {
      var TMP_23, TMP_24, self = this;

      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
        return $send(obj, 'map', [], (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
        return $send(self, 'proc', [], (TMP_24 = function($a_rest){var self = TMP_24.$$s || this, block, args;

          block = TMP_24.$$p || nil;
          if (block) TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24))
        } else {
        return obj
      }
    }, TMP_Kernel_Native_25.$$arity = 1);
    self.$alias_method("_Array", "Array");
    
    Opal.defn(self, '$Array', TMP_Kernel_Array_26 = function $$Array(object, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_Array_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_Array_26.$$p = null;
      
      if ($truthy(self['$native?'](object))) {
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, TMP_Kernel_Array_26.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_$eq$eq_27, TMP_Object_has_key$q_28, TMP_Object_each_29, TMP_Object_$$_30, TMP_Object_$$$eq_31, TMP_Object_merge$B_32, TMP_Object_respond_to$q_33, TMP_Object_respond_to_missing$q_34, TMP_Object_method_missing_35, TMP_Object_nil$q_36, TMP_Object_is_a$q_37, TMP_Object_instance_of$q_38, TMP_Object_class_39, TMP_Object_to_a_40, TMP_Object_inspect_41;

    def["native"] = nil;
    
    self.$include(Opal.const_get_qualified('::', 'Native'));
    
    Opal.defn(self, '$==', TMP_Object_$eq$eq_27 = function(other) {
      var self = this;

      return self["native"] === Opal.const_get_qualified('::', 'Native').$try_convert(other)
    }, TMP_Object_$eq$eq_27.$$arity = 1);
    
    Opal.defn(self, '$has_key?', TMP_Object_has_key$q_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_has_key$q_28.$$arity = 1);
    Opal.alias(self, "key?", "has_key?");
    Opal.alias(self, "include?", "has_key?");
    Opal.alias(self, "member?", "has_key?");
    
    Opal.defn(self, '$each', TMP_Object_each_29 = function $$each($a_rest) {
      var self = this, args, $iter = TMP_Object_each_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_each_29.$$p = null;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      }
    }, TMP_Object_each_29.$$arity = -1);
    
    Opal.defn(self, '$[]', TMP_Object_$$_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.const_get_qualified('::', 'Native').$call(self["native"], key)
      }
    
    }, TMP_Object_$$_30.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Object_$$$eq_31 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = Opal.const_get_qualified('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
        } else {
        return self["native"][key] = native$
      };
    }, TMP_Object_$$$eq_31.$$arity = 2);
    
    Opal.defn(self, '$merge!', TMP_Object_merge$B_32 = function(other) {
      var self = this;

      
      
      other = Opal.const_get_qualified('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_Object_merge$B_32.$$arity = 1);
    
    Opal.defn(self, '$respond_to?', TMP_Object_respond_to$q_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.const_get_qualified('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all)
    }, TMP_Object_respond_to$q_33.$$arity = -2);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Object_respond_to_missing$q_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_respond_to_missing$q_34.$$arity = -2);
    
    Opal.defn(self, '$method_missing', TMP_Object_method_missing_35 = function $$method_missing(mid, $a_rest) {
      var self = this, args, $iter = TMP_Object_method_missing_35.$$p, block = $iter || nil, $writer = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_method_missing_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send(Opal.const_get_qualified('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    
    }, TMP_Object_method_missing_35.$$arity = -2);
    
    Opal.defn(self, '$nil?', TMP_Object_nil$q_36 = function() {
      var self = this;

      return false
    }, TMP_Object_nil$q_36.$$arity = 0);
    
    Opal.defn(self, '$is_a?', TMP_Object_is_a$q_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass)
    }, TMP_Object_is_a$q_37.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$instance_of?', TMP_Object_instance_of$q_38 = function(klass) {
      var self = this;

      return self.$$class === klass
    }, TMP_Object_instance_of$q_38.$$arity = 1);
    
    Opal.defn(self, '$class', TMP_Object_class_39 = function() {
      var self = this;

      return self.$$class
    }, TMP_Object_class_39.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Object_to_a_40 = function $$to_a(options) {
      var self = this, $iter = TMP_Object_to_a_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Object_to_a_40.$$p = null;
      return $send(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a()
    }, TMP_Object_to_a_40.$$arity = -1);
    return (Opal.defn(self, '$inspect', TMP_Object_inspect_41 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, TMP_Object_inspect_41.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_initialize_42, TMP_Array_each_43, TMP_Array_$$_44, TMP_Array_$$$eq_45, TMP_Array_last_46, TMP_Array_length_47, TMP_Array_inspect_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Native'));
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    
    Opal.defn(self, '$initialize', TMP_Array_initialize_42 = function $$initialize(native$, options) {
      var $a, self = this, $iter = TMP_Array_initialize_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Array_initialize_42.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_42, false), [native$], null);
      self.get = ($truthy($a = options['$[]']("get")) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ($truthy($a = options['$[]']("set")) ? $a : options['$[]']("access"));
      self.length = ($truthy($a = options['$[]']("length")) ? $a : "length");
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_Array_initialize_42.$$arity = -2);
    
    Opal.defn(self, '$each', TMP_Array_each_43 = function $$each() {
      var self = this, $iter = TMP_Array_each_43.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_43.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_Array_each_43.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Array_$$_44 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if (Opal.const_get_relative($nesting, 'String')['$===']($case) || Opal.const_get_relative($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
        } else {
        return self["native"][index]
      }}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
        } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_Array_$$_44.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Array_$$$eq_45 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, Opal.const_get_relative($nesting, 'Native').$convert(value))
        } else {
        return self["native"][index] = Opal.const_get_relative($nesting, 'Native').$convert(value)
      }
    }, TMP_Array_$$$eq_45.$$arity = 2);
    
    Opal.defn(self, '$last', TMP_Array_last_46 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      }
    }, TMP_Array_last_46.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_Array_length_47 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, TMP_Array_length_47.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    return (Opal.defn(self, '$inspect', TMP_Array_inspect_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, TMP_Array_inspect_48.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_n_49;

    return (Opal.defn(self, '$to_n', TMP_Numeric_to_n_49 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Numeric_to_n_49.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_to_n_50;

    return (Opal.defn(self, '$to_n', TMP_Proc_to_n_50 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Proc_to_n_50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_n_51;

    return (Opal.defn(self, '$to_n', TMP_String_to_n_51 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_String_to_n_51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Regexp_to_n_52;

    return (Opal.defn(self, '$to_n', TMP_Regexp_to_n_52 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Regexp_to_n_52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_to_n_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_MatchData_to_n_53 = function $$to_n() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_n_53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Struct_to_n_55;

    return (Opal.defn(self, '$to_n', TMP_Struct_to_n_55 = function $$to_n() {
      var TMP_54, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value)}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54));
      return result;
    }, TMP_Struct_to_n_55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_n_56;

    return (Opal.defn(self, '$to_n', TMP_Array_to_n_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push(Opal.const_get_relative($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_Array_to_n_56.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_n_57;

    return (Opal.defn(self, '$to_n', TMP_Boolean_to_n_57 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Boolean_to_n_57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_n_58;

    return (Opal.defn(self, '$to_n', TMP_Time_to_n_58 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Time_to_n_58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_n_59;

    return (Opal.defn(self, '$to_n', TMP_NilClass_to_n_59 = function $$to_n() {
      var self = this;

      return null
    }, TMP_NilClass_to_n_59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_initialize_60, TMP_Hash_to_n_61;

    
    self.$alias_method("_initialize", "initialize");
    
    Opal.defn(self, '$initialize', TMP_Hash_initialize_60 = function $$initialize(defaults) {
      var self = this, $iter = TMP_Hash_initialize_60.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_initialize_60.$$p = null;
      
      if (defaults != null &&
           (defaults.constructor === undefined ||
             defaults.constructor === Object)) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value &&
               (value.constructor === undefined ||
                 value.constructor === Object)) {
            smap[key] = Opal.const_get_relative($nesting, 'Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item &&
                   (item.constructor === undefined ||
                     item.constructor === Object)) {
                return Opal.const_get_relative($nesting, 'Hash').$new(item);
              }

              return self.$Native(item);
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return $send(self, '_initialize', [defaults], block.$to_proc());
    
    }, TMP_Hash_initialize_60.$$arity = -1);
    return (Opal.defn(self, '$to_n', TMP_Hash_to_n_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_Hash_to_n_61.$$arity = 0), nil) && 'to_n';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_native_module_62;

    return (Opal.defn(self, '$native_module', TMP_Module_native_module_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, TMP_Module_native_module_62.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_native_alias_63, TMP_Class_native_class_64;

    
    
    Opal.defn(self, '$native_alias', TMP_Class_native_alias_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    
    }, TMP_Class_native_alias_63.$$arity = 2);
    return (Opal.defn(self, '$native_class', TMP_Class_native_class_64 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, TMP_Class_native_class_64.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/state/observer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$observing', '$to_proc', '$update_objects_to_observe', '$remove']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Observer, self = $Observer = $module($base, 'Observer');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Observer_observing_1, TMP_Observer_update_objects_to_observe_2, TMP_Observer_remove_3;

        
        
        Opal.defn(self, '$observing', TMP_Observer_observing_1 = function $$observing($kwargs) {
          var self = this, immediate_update, rendering, update_objects, $iter = TMP_Observer_observing_1.$$p, block = $iter || nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          immediate_update = $kwargs.$$smap["immediate_update"];
          if (immediate_update == null) {
            immediate_update = false
          }
          rendering = $kwargs.$$smap["rendering"];
          if (rendering == null) {
            rendering = false
          }
          update_objects = $kwargs.$$smap["update_objects"];
          if (update_objects == null) {
            update_objects = false
          }
          if ($iter) TMP_Observer_observing_1.$$p = null;
          return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper'), 'observing', [self, immediate_update, rendering, update_objects], block.$to_proc())
        }, TMP_Observer_observing_1.$$arity = -1);
        
        Opal.defn(self, '$update_objects_to_observe', TMP_Observer_update_objects_to_observe_2 = function $$update_objects_to_observe() {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper').$update_objects_to_observe(self)
        }, TMP_Observer_update_objects_to_observe_2.$$arity = 0);
        
        Opal.defn(self, '$remove', TMP_Observer_remove_3 = function $$remove() {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper').$remove(self)
        }, TMP_Observer_remove_3.$$arity = 0);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/validator"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$private', '$tap', '$new', '$each', '$instance_variable_set', '$dup', '$instance_variable_get', '$build', '$to_proc', '$instance_eval', '$[]=', '$-', '$define_rule', '$coerce_native_hash_values', '$rules', '$define_all_others', '$props_wrapper', '$reject', '$[]', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$defined_props', '$validate_required', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$define_param', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$each_with_index', '$Native']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $Validator(){};
          var self = $Validator = $klass($base, $super, 'Validator', $Validator);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Validator_copy_3, TMP_Validator_initialize_4, TMP_Validator_build_5, TMP_Validator_build_6, TMP_Validator_requires_7, TMP_Validator_optional_8, TMP_Validator_event_9, TMP_Validator_all_other_params_12, TMP_Validator_validate_14, TMP_Validator_default_props_17, TMP_Validator_defined_props_19, TMP_Validator_allow_undefined_props$q_20, TMP_Validator_rules_21, TMP_Validator_define_rule_22, TMP_Validator_errors_23, TMP_Validator_validate_types_24, TMP_Validator_type_check_25, TMP_Validator_validate_allowed_26, TMP_Validator_validate_required_28, TMP_Validator_validate_undefined_30, TMP_Validator_validate_value_array_32, TMP_Validator_coerce_native_hash_values_34;

          def.allow_undefined_props = def.rules = def.errors = nil;
          
          self.$attr_accessor("errors");
          self.$attr_reader("props_wrapper");
          self.$private("errors", "props_wrapper");
          
          Opal.defn(self, '$copy', TMP_Validator_copy_3 = function $$copy(new_props_wrapper) {
            var TMP_1, self = this;

            return $send(Opal.const_get_relative($nesting, 'Validator').$new(new_props_wrapper), 'tap', [], (TMP_1 = function(c){var self = TMP_1.$$s || this, TMP_2;
if (c == null) c = nil;
            return $send(["@allow_undefined_props", "@rules", "@errors"], 'each', [], (TMP_2 = function(var$){var self = TMP_2.$$s || this;
if (var$ == null) var$ = nil;
              return c.$instance_variable_set(var$, self.$instance_variable_get(var$).$dup())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1))
          }, TMP_Validator_copy_3.$$arity = 1);
          
          Opal.defn(self, '$initialize', TMP_Validator_initialize_4 = function $$initialize(props_wrapper) {
            var self = this;

            if (props_wrapper == null) {
              props_wrapper = Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'PropsWrapper'));
            }
            return (self.props_wrapper = props_wrapper)
          }, TMP_Validator_initialize_4.$$arity = -1);
          Opal.defs(self, '$build', TMP_Validator_build_5 = function $$build() {
            var self = this, $iter = TMP_Validator_build_5.$$p, block = $iter || nil;

            if ($iter) TMP_Validator_build_5.$$p = null;
            return $send(self.$new(), 'build', [], block.$to_proc())
          }, TMP_Validator_build_5.$$arity = 0);
          
          Opal.defn(self, '$build', TMP_Validator_build_6 = function $$build() {
            var self = this, $iter = TMP_Validator_build_6.$$p, block = $iter || nil;

            if ($iter) TMP_Validator_build_6.$$p = null;
            
            $send(self, 'instance_eval', [], block.$to_proc());
            return self;
          }, TMP_Validator_build_6.$$arity = 0);
          
          Opal.defn(self, '$requires', TMP_Validator_requires_7 = function $$requires(name, options) {
            var self = this, $writer = nil;

            if (options == null) {
              options = $hash2([], {});
            }
            
            
            $writer = ["required", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$define_rule(name, options);
          }, TMP_Validator_requires_7.$$arity = -2);
          
          Opal.defn(self, '$optional', TMP_Validator_optional_8 = function $$optional(name, options) {
            var self = this, $writer = nil;

            if (options == null) {
              options = $hash2([], {});
            }
            
            
            $writer = ["required", false];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$define_rule(name, options);
          }, TMP_Validator_optional_8.$$arity = -2);
          
          Opal.defn(self, '$event', TMP_Validator_event_9 = function $$event(name) {
            var self = this, $writer = nil;

            
            $writer = [name, self.$coerce_native_hash_values($hash2(["default", "type", "allow_nil"], {"default": nil, "type": Opal.const_get_relative($nesting, 'Proc'), "allow_nil": true}))];
            $send(self.$rules(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_Validator_event_9.$$arity = 1);
          
          Opal.defn(self, '$all_other_params', TMP_Validator_all_other_params_12 = function $$all_other_params(name) {
            var TMP_10, self = this;

            
            self.allow_undefined_props = true;
            return $send(self.$props_wrapper(), 'define_all_others', [name], (TMP_10 = function(props){var self = TMP_10.$$s || this, TMP_11;
if (props == null) props = nil;
            return $send(props, 'reject', [], (TMP_11 = function(name, value){var self = TMP_11.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
              return self.$rules()['$[]'](name)}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11))}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
          }, TMP_Validator_all_other_params_12.$$arity = 1);
          
          Opal.defn(self, '$validate', TMP_Validator_validate_14 = function $$validate(props) {
            var TMP_13, self = this, $writer = nil;

            
            
            $writer = [[]];
            $send(self, 'errors=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(self['$allow_undefined_props?']())) {
              } else {
              self.$validate_undefined(props)
            };
            props = self.$coerce_native_hash_values(self.$defined_props(props));
            self.$validate_required(props);
            $send(props, 'each', [], (TMP_13 = function(name, value){var self = TMP_13.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            
              self.$validate_types(name, value);
              return self.$validate_allowed(name, value);}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13));
            return self.$errors();
          }, TMP_Validator_validate_14.$$arity = 1);
          
          Opal.defn(self, '$default_props', TMP_Validator_default_props_17 = function $$default_props() {
            var TMP_15, TMP_16, self = this;

            return $send($send(self.$rules(), 'select', [], (TMP_15 = function(key, value){var self = TMP_15.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
            return value.$keys()['$include?']("default")}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15)), 'inject', [$hash2([], {})], (TMP_16 = function(memo, $a){var self = TMP_16.$$s || this, $a_args, k, v, $writer = nil;

              if ($a == null) {
                $a = nil;
              }
              $a = Opal.to_ary($a);
              $a_args = Opal.slice.call($a, 0, $a.length);
              k = $a_args.splice(0,1)[0];
              if (k == null) {
                k = nil;
              }
              v = $a_args.splice(0,1)[0];
              if (v == null) {
                v = nil;
              }if (memo == null) memo = nil;
            
              
              $writer = [k, v['$[]']("default")];
              $send(memo, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return memo;}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16.$$has_top_level_mlhs_arg = true, TMP_16))
          }, TMP_Validator_default_props_17.$$arity = 0);
          self.$private();
          
          Opal.defn(self, '$defined_props', TMP_Validator_defined_props_19 = function $$defined_props(props) {
            var TMP_18, self = this;

            return $send(props, 'select', [], (TMP_18 = function(name){var self = TMP_18.$$s || this;
if (name == null) name = nil;
            return self.$rules().$keys()['$include?'](name)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18))
          }, TMP_Validator_defined_props_19.$$arity = 1);
          
          Opal.defn(self, '$allow_undefined_props?', TMP_Validator_allow_undefined_props$q_20 = function() {
            var self = this;

            return self.allow_undefined_props['$!']()['$!']()
          }, TMP_Validator_allow_undefined_props$q_20.$$arity = 0);
          
          Opal.defn(self, '$rules', TMP_Validator_rules_21 = function $$rules() {
            var $a, self = this;

            return (self.rules = ($truthy($a = self.rules) ? $a : $hash2(["children"], {"children": $hash2(["required"], {"required": false})})))
          }, TMP_Validator_rules_21.$$arity = 0);
          
          Opal.defn(self, '$define_rule', TMP_Validator_define_rule_22 = function $$define_rule(name, options) {
            var self = this, $writer = nil;

            if (options == null) {
              options = $hash2([], {});
            }
            
            
            $writer = [name, self.$coerce_native_hash_values(options)];
            $send(self.$rules(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$props_wrapper().$define_param(name, options['$[]']("type"), options['$[]']("alias"));
          }, TMP_Validator_define_rule_22.$$arity = -2);
          
          Opal.defn(self, '$errors', TMP_Validator_errors_23 = function $$errors() {
            var $a, self = this;

            return (self.errors = ($truthy($a = self.errors) ? $a : []))
          }, TMP_Validator_errors_23.$$arity = 0);
          
          Opal.defn(self, '$validate_types', TMP_Validator_validate_types_24 = function $$validate_types(prop_name, value) {
            var self = this, klass = nil, allow_nil = nil;

            
            if ($truthy((klass = self.$rules()['$[]'](prop_name)['$[]']("type")))) {
              } else {
              return nil
            };
            if ($truthy(klass['$is_a?'](Opal.const_get_relative($nesting, 'Array'))['$!']())) {
              
              allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
              return self.$type_check("" + "`" + (prop_name) + "`", value, klass, allow_nil);
            } else if ($truthy($rb_gt(klass.$length(), 0))) {
              return self.$validate_value_array(prop_name, value)
              } else {
              
              allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
              return self.$type_check("" + "`" + (prop_name) + "`", value, Opal.const_get_relative($nesting, 'Array'), allow_nil);
            };
          }, TMP_Validator_validate_types_24.$$arity = 2);
          
          Opal.defn(self, '$type_check', TMP_Validator_type_check_25 = function $$type_check(prop_name, value, klass, allow_nil) {
            var $a, self = this;

            
            if ($truthy(($truthy($a = allow_nil) ? value['$nil?']() : $a))) {
              return nil};
            if ($truthy(value['$is_a?'](klass))) {
              return nil};
            if ($truthy(($truthy($a = klass['$respond_to?']("_react_param_conversion")) ? klass.$_react_param_conversion(value, "validate_only") : $a))) {
              return nil};
            return self.$errors()['$<<']("" + "Provided prop " + (prop_name) + " could not be converted to " + (klass));
          }, TMP_Validator_type_check_25.$$arity = 4);
          
          Opal.defn(self, '$validate_allowed', TMP_Validator_validate_allowed_26 = function $$validate_allowed(prop_name, value) {
            var self = this, values = nil;

            
            if ($truthy((values = self.$rules()['$[]'](prop_name)['$[]']("values")))) {
              } else {
              return nil
            };
            if ($truthy(values['$include?'](value))) {
              return nil};
            return self.$errors()['$<<']("" + "Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
          }, TMP_Validator_validate_allowed_26.$$arity = 2);
          
          Opal.defn(self, '$validate_required', TMP_Validator_validate_required_28 = function $$validate_required(props) {
            var TMP_27, self = this;

            return $send($rb_minus(self.$rules().$keys(), props.$keys()), 'each', [], (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
            
              if ($truthy(self.$rules()['$[]'](name)['$[]']("required"))) {
                } else {
                return nil;
              };
              return self.$errors()['$<<']("" + "Required prop `" + (name) + "` was not specified");}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
          }, TMP_Validator_validate_required_28.$$arity = 1);
          
          Opal.defn(self, '$validate_undefined', TMP_Validator_validate_undefined_30 = function $$validate_undefined(props) {
            var TMP_29, self = this;

            return $send($rb_minus(props.$keys(), self.$rules().$keys()), 'each', [], (TMP_29 = function(prop_name){var self = TMP_29.$$s || this;
if (prop_name == null) prop_name = nil;
            return self.$errors()['$<<']("" + "Provided prop `" + (prop_name) + "` not specified in spec")}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29))
          }, TMP_Validator_validate_undefined_30.$$arity = 1);
          
          Opal.defn(self, '$validate_value_array', TMP_Validator_validate_value_array_32 = function $$validate_value_array(name, value) {
            var TMP_31, self = this, klass = nil, allow_nil = nil;

            try {
              
              klass = self.$rules()['$[]'](name)['$[]']("type");
              allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
              return $send(value, 'each_with_index', [], (TMP_31 = function(item, index){var self = TMP_31.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
              return self.$type_check("" + "`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil)}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31));
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NoMethodError')])) {
                try {
                  return self.$errors()['$<<']("" + "Provided prop `" + (name) + "` was not an Array")
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_Validator_validate_value_array_32.$$arity = 2);
          return (Opal.defn(self, '$coerce_native_hash_values', TMP_Validator_coerce_native_hash_values_34 = function $$coerce_native_hash_values(hash) {
            var TMP_33, self = this;

            return $send(hash, 'each', [], (TMP_33 = function(key, value){var self = TMP_33.$$s || this, $writer = nil;
if (key == null) key = nil;if (value == null) value = nil;
            
              $writer = [key, self.$Native(value)];
              $send(hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_33.$$s = self, TMP_33.$$arity = 2, TMP_33))
          }, TMP_Validator_coerce_native_hash_values_34.$$arity = 1), nil) && 'coerce_native_hash_values';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_event_camelize_1;

    return (Opal.defn(self, '$event_camelize', TMP_String_event_camelize_1 = function $$event_camelize() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    })
    }, TMP_String_event_camelize_1.$$arity = 0), nil) && 'event_camelize'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/element"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$alias_native', '$attr_reader', '$attr_accessor', '$_update_ref', '$[]', '$properties', '$raise', '$type', '$ref', '$dom_node', '$each', '$!=', '$strip', '$merge_event_prop!', '$to_proc', '$shallow_to_n', '$empty?', '$render', '$convert_props', '$new', '$block', '$delete', '$private', '$=~', '$merge_component_event_prop!', '$gsub', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$==', '$key_code', '$instance_variable_get', '$merge!', '$Array', '$ignore_bulk_updates']);
  
  self.$require("hyperstack/ext/component/string");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_initialize_1, TMP_Element__update_ref_2, TMP_Element_ref_3, TMP_Element_dom_node_4, TMP_Element_on_5, TMP_Element_render_7, TMP_Element_delete_8, TMP_Element_merge_event_prop$B_9, TMP_Element_merge_built_in_event_prop$B_11, TMP_Element_merge_component_event_prop$B_12;

        def._child_element = def.ref = def["native"] = def.properties = def.type = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        self.$alias_native("element_type", "type");
        self.$alias_native("props", "props");
        self.$attr_reader("type");
        self.$attr_reader("properties");
        self.$attr_reader("block");
        self.$attr_accessor("waiting_on_resources");
        
        Opal.defn(self, '$initialize', TMP_Element_initialize_1 = function $$initialize(native_element, type, properties, block) {
          var $a, self = this;

          if (type == null) {
            type = nil;
          }
          if (properties == null) {
            properties = $hash2([], {});
          }
          if (block == null) {
            block = nil;
          }
          
          self.type = type;
          self.properties = ($truthy($a = (function() {if ($truthy(typeof properties === 'undefined')) {
            return nil
            } else {
            return properties
          }; return nil; })()) ? $a : $hash2([], {}));
          self.block = block;
          return (self["native"] = native_element);
        }, TMP_Element_initialize_1.$$arity = -2);
        
        Opal.defn(self, '$_update_ref', TMP_Element__update_ref_2 = function $$_update_ref(x) {
          var self = this;

          
          self.ref = x;
          if ($truthy(self._child_element)) {
            return self._child_element.$_update_ref(x)
            } else {
            return nil
          };
        }, TMP_Element__update_ref_2.$$arity = 1);
        
        Opal.defn(self, '$ref', TMP_Element_ref_3 = function $$ref() {
          var self = this;

          
          if ($truthy(self.ref)) {
            return self.ref};
          if ($truthy(self.$properties()['$[]']("ref"))) {
            self.$raise("" + "The instance of " + (self.$type()) + " has not been mounted yet")};
          return self.$raise("" + "Attempt to get a ref on " + (self.$type()) + " which is a static component.");
        }, TMP_Element_ref_3.$$arity = 0);
        
        Opal.defn(self, '$dom_node', TMP_Element_dom_node_4 = function $$dom_node() {
          var self = this;

          if ($truthy(typeof self.$ref().$dom_node == 'function')) {
            return self.$ref().$dom_node()
            } else {
            return self.$ref()
          }
        }, TMP_Element_dom_node_4.$$arity = 0);
        
        Opal.defn(self, '$on', TMP_Element_on_5 = function $$on($a_rest) {
          var TMP_6, self = this, event_names, $iter = TMP_Element_on_5.$$p, block = $iter || nil, any_found = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          event_names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            event_names[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Element_on_5.$$p = null;
          
          any_found = false;
          $send(event_names, 'each', [], (TMP_6 = function(event_name){var self = TMP_6.$$s || this, $a;
if (event_name == null) event_name = nil;
          
            if ($truthy(($truthy($a = event_name) ? event_name.$strip()['$!=']("") : $a))) {
              } else {
              return nil;
            };
            $send(self, 'merge_event_prop!', [event_name], block.$to_proc());
            return (any_found = true);}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
          if ($truthy(any_found)) {
            self["native"] = React.cloneElement(self["native"], self.properties.$shallow_to_n())};
          return self;
        }, TMP_Element_on_5.$$arity = -1);
        
        Opal.defn(self, '$render', TMP_Element_render_7 = function $$render($a_rest) {
          var self = this, props;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          props = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            props[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(props['$empty?']())) {
            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render(self)
            } else {
            
            props = $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper'), 'convert_props', [self.type, self.properties].concat(Opal.to_a(props)));
            return (self._child_element = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render(Opal.const_get_relative($nesting, 'Element').$new(React.cloneElement(self["native"], props.$shallow_to_n()), self.$type(), props, self.$block())));
          }
        }, TMP_Element_render_7.$$arity = -1);
        
        Opal.defn(self, '$delete', TMP_Element_delete_8 = function() {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$delete(self)
        }, TMP_Element_delete_8.$$arity = 0);
        Opal.alias(self, "as_node", "delete");
        self.$private();
        
        Opal.defn(self, '$merge_event_prop!', TMP_Element_merge_event_prop$B_9 = function(event_name) {
          var TMP_10, self = this, $iter = TMP_Element_merge_event_prop$B_9.$$p, block = $iter || nil, name = nil;

          if ($iter) TMP_Element_merge_event_prop$B_9.$$p = null;
          if ($truthy(event_name['$=~'](/^<(.+)>$/))) {
            return $send(self, 'merge_component_event_prop!', [event_name.$gsub(/^<(.+)>$/, "\\1")], block.$to_proc())
          } else if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'BUILT_IN_EVENTS')['$include?']((name = "" + "on" + (event_name.$event_camelize()))))) {
            return $send(self, 'merge_built_in_event_prop!', [name], block.$to_proc())
          } else if (event_name['$==']("enter")) {
            return $send(self, 'merge_built_in_event_prop!', ["onKeyDown"], (TMP_10 = function(evt){var self = TMP_10.$$s || this;
if (evt == null) evt = nil;
            if (evt.$key_code()['$=='](13)) {
                return Opal.yield1(block, evt);
                } else {
                return nil
              }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10))
          } else if ($truthy(self.type.$instance_variable_get("@native_import"))) {
            return $send(self, 'merge_component_event_prop!', [name], block.$to_proc())
            } else {
            return $send(self, 'merge_component_event_prop!', ["" + "on_" + (event_name)], block.$to_proc())
          }
        }, TMP_Element_merge_event_prop$B_9.$$arity = 1);
        
        Opal.defn(self, '$merge_built_in_event_prop!', TMP_Element_merge_built_in_event_prop$B_11 = function(prop_name) {
          var self = this, $iter = TMP_Element_merge_built_in_event_prop$B_11.$$p, block = $iter || nil;

          if ($iter) TMP_Element_merge_built_in_event_prop$B_11.$$p = null;
          return self.properties['$merge!']($hash(prop_name, 
            function(){
              var react_event = arguments[0];
              if (arguments.length == 0 || !react_event.nativeEvent) {
                return Opal.yieldX(block, Opal.to_a(self.$Array(arguments)))
              }
              var all_args;
              var other_args;
              if (arguments.length > 1) {
                all_args = Array.prototype.slice.call(arguments);
                other_args = all_args.slice(1, arguments.length);
                return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper'), 'ignore_bulk_updates', [Opal.const_get_relative($nesting, 'Event').$new(react_event)].concat(Opal.to_a((other_args))), block.$to_proc());
              } else {
                return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper'), 'ignore_bulk_updates', [Opal.const_get_relative($nesting, 'Event').$new(react_event)], block.$to_proc());
              }
            }
          ))
        }, TMP_Element_merge_built_in_event_prop$B_11.$$arity = 1);
        return (Opal.defn(self, '$merge_component_event_prop!', TMP_Element_merge_component_event_prop$B_12 = function(prop_name) {
          var self = this, $iter = TMP_Element_merge_component_event_prop$B_12.$$p, $yield = $iter || nil;

          if ($iter) TMP_Element_merge_component_event_prop$B_12.$$p = null;
          return self.properties['$merge!']($hash(prop_name, 
            function(){
              return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
            }
          ))
        }, TMP_Element_merge_component_event_prop$B_12.$$arity = 1), nil) && 'merge_component_event_prop!';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/native_library"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$const_defined?', '$const_get', '$render', '$to_proc', '$private', '$native_react_component?', '$const_set', '$imports', '$new', '$class_eval', '$include']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $NativeLibrary(){};
        var self = $NativeLibrary = $klass($base, $super, 'NativeLibrary', $NativeLibrary);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_imports_1, TMP_rename_3, TMP_import_const_from_native_4, TMP_const_missing_5, TMP_method_missing_6, TMP_lookup_native_name_7, TMP_scope_native_name_8, TMP_create_component_wrapper_10, TMP_create_library_wrapper_11;

          
          
          Opal.defn(self, '$imports', TMP_imports_1 = function $$imports(native_name) {
            var self = this;

            
            self.__hyperstack_component_native_prefix = "" + (native_name) + ".";
            return self;
          }, TMP_imports_1.$$arity = 1);
          
          Opal.defn(self, '$rename', TMP_rename_3 = function $$rename(rename_list) {
            var TMP_2, self = this;

            return $send(rename_list, 'each', [], (TMP_2 = function(js_name, ruby_name){var self = TMP_2.$$s || this, $a, native_name = nil;
if (js_name == null) js_name = nil;if (ruby_name == null) ruby_name = nil;
            
              native_name = self.$lookup_native_name(js_name);
              if ($truthy(self.$lookup_native_name(js_name))) {
                return ($truthy($a = self.$create_component_wrapper(self, native_name, ruby_name)) ? $a : self.$create_library_wrapper(self, native_name, ruby_name))
                } else {
                return self.$raise("" + ("" + "class " + (self.$name()) + " < Hyperstack::Component::NativeLibrary could not import " + (js_name) + ". ") + ("" + "Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
              };}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2))
          }, TMP_rename_3.$$arity = 1);
          
          Opal.defn(self, '$import_const_from_native', TMP_import_const_from_native_4 = function $$import_const_from_native(klass, const_name, create_library) {
            var $a, $b, $c, self = this, native_name = nil;

            
            native_name = ($truthy($a = self.$lookup_native_name(const_name)) ? $a : self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false)))));
            return ($truthy($a = native_name) ? ($truthy($b = self.$create_component_wrapper(klass, native_name, const_name)) ? $b : ($truthy($c = create_library) ? self.$create_library_wrapper(klass, native_name, const_name) : $c)) : $a);
          }, TMP_import_const_from_native_4.$$arity = 3);
          
          Opal.defn(self, '$const_missing', TMP_const_missing_5 = function $$const_missing(const_name) {
            var $a, self = this, $iter = TMP_const_missing_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) TMP_const_missing_5.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            return ($truthy($a = self.$import_const_from_native(self, const_name, true)) ? $a : $send(self, Opal.find_super_dispatcher(self, 'const_missing', TMP_const_missing_5, false), $zuper, $iter))
          }, TMP_const_missing_5.$$arity = 1);
          
          Opal.defn(self, '$method_missing', TMP_method_missing_6 = function $$method_missing(method, $a_rest) {
            var $b, self = this, args, $iter = TMP_method_missing_6.$$p, block = $iter || nil, component_class = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_method_missing_6.$$p = null;
            
            if ($truthy(self['$const_defined?'](method, false))) {
              component_class = self.$const_get(method)};
            component_class = ($truthy($b = component_class) ? $b : self.$import_const_from_native(self, method, false));
            if ($truthy(component_class)) {
              } else {
              self.$raise("" + "could not import a react component named: " + ("" + (self.$scope_native_name(method))))
            };
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [component_class].concat(Opal.to_a(args)), block.$to_proc());
          }, TMP_method_missing_6.$$arity = -2);
          self.$private();
          
          Opal.defn(self, '$lookup_native_name', TMP_lookup_native_name_7 = function $$lookup_native_name(js_name) {
            var self = this, native_name = nil;

            try {
              
              native_name = self.$scope_native_name(js_name);
              return eval(native_name) !== undefined && native_name;
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
                try {
                  return nil
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_lookup_native_name_7.$$arity = 1);
          
          Opal.defn(self, '$scope_native_name', TMP_scope_native_name_8 = function $$scope_native_name(js_name) {
            var self = this;
            if (self.__hyperstack_component_native_prefix == null) self.__hyperstack_component_native_prefix = nil;

            return "" + (self.__hyperstack_component_native_prefix) + (js_name)
          }, TMP_scope_native_name_8.$$arity = 1);
          
          Opal.defn(self, '$create_component_wrapper', TMP_create_component_wrapper_10 = function $$create_component_wrapper(klass, native_name, ruby_name) {
            var TMP_9, self = this, new_klass = nil;

            if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper')['$native_react_component?'](native_name))) {
              
              new_klass = klass.$const_set(ruby_name, Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'NativeLibrary')).$imports(native_name));
              $send(new_klass, 'class_eval', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

              
                self.$include(Opal.const_get_relative($nesting, 'Component'));
                return self.$imports(native_name);}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
              return new_klass;
              } else {
              return nil
            }
          }, TMP_create_component_wrapper_10.$$arity = 3);
          return (Opal.defn(self, '$create_library_wrapper', TMP_create_library_wrapper_11 = function $$create_library_wrapper(klass, native_name, ruby_name) {
            var self = this;

            return klass.$const_set(ruby_name, Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'NativeLibrary')).$imports(native_name))
          }, TMP_create_library_wrapper_11.$$arity = 3), nil) && 'create_library_wrapper';
        })(Opal.get_singleton_class(self), $nesting);
        return self.$imports("NativeLibrary");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/react_wrapper"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$-', '$raise', '$stateless?', '$eval_native_react_component', '$add_after_error_hook_to_native', '$[]', '$!', '$method_defined?', '$respond_to?', '$native_mixins', '$to_n', '$static_call_backs', '$new', '$name', '$default_props', '$prop_types', '$callbacks?', '$<<', '$is_a?', '$create_native_react_class', '$include?', '$lambda', '$_update_ref', '$convert_props', '$shallow_to_n', '$flatten', '$call', '$each', '$split', '$==', '$merge', '$lower_camelize', '$join', '$to_key', '$ignore_mutations', '$const_defined?', '$gsub', '$html_attr?', '$private', '$first', '$concat', '$map', '$+', '$upcase']);
  
  self.$require("hyperstack/component/native_library");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $ReactWrapper(){};
          var self = $ReactWrapper = $klass($base, $super, 'ReactWrapper', $ReactWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ReactWrapper_stateless$q_1, TMP_ReactWrapper_import_native_component_2, TMP_ReactWrapper_eval_native_react_component_3, TMP_ReactWrapper_native_react_component$q_4, TMP_ReactWrapper_add_after_error_hook_5, TMP_ReactWrapper_add_after_error_hook_to_native_6, TMP_ReactWrapper_create_native_react_class_7, TMP_ReactWrapper_create_element_8, TMP_ReactWrapper_clear_component_class_cache_10, TMP_ReactWrapper_convert_props_21, TMP_ReactWrapper_lower_camelize_23;

          
          (Opal.class_variable_set($ReactWrapper, '@@component_classes', $hash2([], {})));
          Opal.defs(self, '$stateless?', TMP_ReactWrapper_stateless$q_1 = function(ncc) {
            var self = this;

            return typeof ncc === 'function' && !(ncc.prototype && ncc.prototype.isReactComponent)
          }, TMP_ReactWrapper_stateless$q_1.$$arity = 1);
          Opal.defs(self, '$import_native_component', TMP_ReactWrapper_import_native_component_2 = function $$import_native_component(opal_class, native_class) {
            var $a, self = this, $writer = nil;

            
            opal_class.$instance_variable_set("@native_import", true);
            
            $writer = [opal_class, native_class];
            $send((($a = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $a), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, TMP_ReactWrapper_import_native_component_2.$$arity = 2);
          Opal.defs(self, '$eval_native_react_component', TMP_ReactWrapper_eval_native_react_component_3 = function $$eval_native_react_component(name) {
            var $a, $b, self = this, component = nil, is_component_class = nil, has_render_method = nil;

            
            component = eval(name);
            if ($truthy(component === undefined)) {
              self.$raise("" + (name) + " is not defined")};
            if ($truthy(component.__esModule)) {
              component = component.default};
            is_component_class = ($truthy($a = component.prototype !== undefined) ? ($truthy($b = !!component.prototype.isReactComponent) ? $b : !!component.prototype.render) : $a);
            has_render_method = typeof component.render === "function";
            if ($truthy(($truthy($a = ($truthy($b = is_component_class) ? $b : self['$stateless?'](component))) ? $a : has_render_method))) {
              } else {
              self.$raise("does not appear to be a native react component")
            };
            return component;
          }, TMP_ReactWrapper_eval_native_react_component_3.$$arity = 1);
          Opal.defs(self, '$native_react_component?', TMP_ReactWrapper_native_react_component$q_4 = function(name) {
            var self = this;

            if (name == null) {
              name = nil;
            }
            try {
              
              if ($truthy(name)) {
                } else {
                return false
              };
              self.$eval_native_react_component(name);
              return true;
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  return false
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_ReactWrapper_native_react_component$q_4.$$arity = -1);
          Opal.defs(self, '$add_after_error_hook', TMP_ReactWrapper_add_after_error_hook_5 = function $$add_after_error_hook(klass) {
            var $a, self = this;

            return self.$add_after_error_hook_to_native((($a = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $a)['$[]'](klass))
          }, TMP_ReactWrapper_add_after_error_hook_5.$$arity = 1);
          Opal.defs(self, '$add_after_error_hook_to_native', TMP_ReactWrapper_add_after_error_hook_to_native_6 = function $$add_after_error_hook_to_native(native_comp) {
            var self = this;

            
            if ($truthy(native_comp)) {
              } else {
              return nil
            };
            
            native_comp.prototype.componentDidCatch = function(error, info) {
              this.__opalInstanceSyncSetState = false;
              this.__opalInstance.$component_did_catch(error, Opal.Hash.$new(info));
            }
          ;
          }, TMP_ReactWrapper_add_after_error_hook_to_native_6.$$arity = 1);
          Opal.defs(self, '$create_native_react_class', TMP_ReactWrapper_create_native_react_class_7 = function $$create_native_react_class(type) {
            var $a, $b, self = this, render_fn = nil, $writer = nil, comp = nil;

            
            if ($truthy(typeof(createReactClass)=='undefined')) {
              self.$raise("createReactClass is undefined. Add the 'react-create-class' npm module, and import it as 'createReactClass'")};
            if ($truthy(type['$method_defined?']("render")['$!']())) {
              self.$raise("Provided class should define `render` method")};
            render_fn = (function() {if ($truthy(type['$method_defined?']("_render_wrapper"))) {
              return "_render_wrapper"
              } else {
              return "render"
            }; return nil; })();
            return ($truthy($a = (($b = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $b)['$[]'](type)) ? $a : (($writer = [type, ((comp = 
              createReactClass({
                getInitialState: function() {
                  this.mixins = (function() {if ($truthy(type['$respond_to?']("native_mixins"))) {
              return type.$native_mixins()
              } else {
              return []
            }; return nil; })();
                  this.statics = (function() {if ($truthy(type['$respond_to?']("static_call_backs"))) {
              return type.$static_call_backs().$to_n()
              } else {
              return {}
            }; return nil; })();
                  this.__opalInstanceInitializedState = false;
                  this.__opalInstanceSyncSetState = true;
                  this.__opalInstance = type.$new(this);
                  this.__opalInstanceInitializedState = true;
                  this.__opalInstanceSyncSetState = false;
                  this.__name = type.$name();
                  return {}
                },
                displayName: type.$name(),
                getDefaultProps: function() {
                  return (function() {if ($truthy(type['$respond_to?']("default_props"))) {
              return type.$default_props().$to_n()
              } else {
              return {}
            }; return nil; })();
                },
                propTypes: (function() {if ($truthy(type['$respond_to?']("prop_types"))) {
              return type.$prop_types().$to_n()
              } else {
              return {}
            }; return nil; })(),
                componentWillMount: function() {
                  if (type['$method_defined?']("component_will_mount")) {
                    this.__opalInstanceSyncSetState = true;
                    this.__opalInstance.$component_will_mount();
                    this.__opalInstanceSyncSetState = false;
                  }
                },
                componentDidMount: function() {
                  this.__opalInstance.__hyperstack_component_is_mounted = true
                  if (type['$method_defined?']("component_did_mount")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_did_mount();
                  }
                },
                componentWillReceiveProps: function(next_props) {
                  if (type['$method_defined?']("component_will_receive_props")) {
                    this.__opalInstanceSyncSetState = true;
                    this.__opalInstance.$component_will_receive_props(Opal.Hash.$new(next_props));
                    this.__opalInstanceSyncSetState = false;
                  }
                },
                shouldComponentUpdate: function(next_props, next_state) {
                  if (type['$method_defined?']("should_component_update?")) {
                    this.__opalInstanceSyncSetState = false;
                    return this.__opalInstance["$should_component_update?"](Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
                  } else { return true; }
                },
                componentWillUpdate: function(next_props, next_state) {
                  if (type['$method_defined?']("component_will_update")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_will_update(Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
                  }
                },
                componentDidUpdate: function(prev_props, prev_state) {
                  if (type['$method_defined?']("component_did_update")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_did_update(Opal.Hash.$new(prev_props), Opal.Hash.$new(prev_state));
                  }
                },
                componentWillUnmount: function() {
                  if (type['$method_defined?']("component_will_unmount")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_will_unmount();
                  }
                  this.__opalInstance.__hyperstack_component_is_mounted = false;
                },
                render: function() {
                  this.__opalInstanceSyncSetState = false;
                  return this.__opalInstance.$send(render_fn).$to_n();
                }
              })
            ), (function() {if ($truthy(($truthy($b = type['$respond_to?']("callbacks?")) ? type['$callbacks?']("after_error") : $b))) {
              return self.$add_after_error_hook_to_native(comp)
              } else {
              return nil
            }; return nil; })(), comp)]), $send((($b = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $b), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          }, TMP_ReactWrapper_create_native_react_class_7.$$arity = 1);
          Opal.defs(self, '$create_element', TMP_ReactWrapper_create_element_8 = function $$create_element(type, $a_rest) {
            var $b, TMP_9, self = this, args, $iter = TMP_ReactWrapper_create_element_8.$$p, block = $iter || nil, params = nil, ncc = nil, ele = nil, ref = nil, properties = nil, a = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_ReactWrapper_create_element_8.$$p = null;
            
            params = [];
            ncc = (($b = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $b)['$[]'](type);
            if ($truthy(ncc)) {
              params['$<<'](ncc)
            } else if ($truthy(type['$is_a?'](Opal.const_get_relative($nesting, 'Class')))) {
              params['$<<'](self.$create_native_react_class(type))
            } else if ($truthy(($truthy($b = (block !== nil)) ? $b : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Tags'), 'HTML_TAGS')['$include?'](type)))) {
              params['$<<'](type)
            } else if ($truthy(type['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
              return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element').$new(type)
              } else {
              self.$raise("" + (type) + " not implemented")
            };
            ele = nil;
            if ($truthy(self['$stateless?'](ncc))) {
              } else {
              ref = $send(self, 'lambda', [], (TMP_9 = function(ref){var self = TMP_9.$$s || this;
if (ref == null) ref = nil;
              return ele.$_update_ref(ref)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))
            };
            properties = $send(self, 'convert_props', [type, $hash2(["ref"], {"ref": ref})].concat(Opal.to_a(args)));
            params['$<<'](properties.$shallow_to_n());
            if ($truthy(block)) {
              
              a = [block.$call()].$flatten();
              
              for(var i=0, l=a.length; i<l; i++) {
                params.push(a[i].$to_n());
              }
            ;};
            return (ele = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element').$new(React.createElement.apply(null, params), type, properties, block));
          }, TMP_ReactWrapper_create_element_8.$$arity = -2);
          Opal.defs(self, '$clear_component_class_cache', TMP_ReactWrapper_clear_component_class_cache_10 = function $$clear_component_class_cache() {
            var self = this;

            return (Opal.class_variable_set($ReactWrapper, '@@component_classes', $hash2([], {})))
          }, TMP_ReactWrapper_clear_component_class_cache_10.$$arity = 0);
          Opal.defs(self, '$convert_props', TMP_ReactWrapper_convert_props_21 = function $$convert_props(type, $a_rest) {
            var TMP_11, TMP_13, self = this, args, properties = nil, props = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            
            properties = $hash2([], {});
            $send(args, 'each', [], (TMP_11 = function(arg){var self = TMP_11.$$s || this, TMP_12, $writer = nil;
if (arg == null) arg = nil;
            if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                
                $writer = [arg, true];
                $send(properties, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
                return $send(arg, 'each', [], (TMP_12 = function(key, value){var self = TMP_12.$$s || this, $a;
if (key == null) key = nil;if (value == null) value = nil;
                if ($truthy(["class", "className", "class_name"]['$include?'](key))) {
                    
                    if ($truthy(value)) {
                      } else {
                      return nil;
                    };
                    if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                      value = value.$split(" ")
                    } else if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Array'))['$!']())) {
                      self.$raise("The class param must be a string or array of strings")};
                    
                    $writer = ["className", [].concat(Opal.to_a(properties['$[]']("className"))).concat(Opal.to_a(value))];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;
                  } else if (key['$==']("style")) {
                    
                    if ($truthy(value)) {
                      } else {
                      return nil;
                    };
                    if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))['$!']())) {
                      self.$raise("The style param must be a Hash")};
                    
                    $writer = ["style", ($truthy($a = properties['$[]']("style")) ? $a : $hash2([], {})).$merge(value)];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;
                  } else if ($truthy(($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'ReactAPI'), 'HASH_ATTRIBUTES')['$include?'](key)) ? value['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
                    
                    $writer = [key, ($truthy($a = properties['$[]'](key)) ? $a : $hash2([], {})).$merge(value)];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                    } else {
                    
                    $writer = [key, value];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  }}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))
                } else {
                return nil
              }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
            props = $hash2([], {});
            $send(properties, 'each', [], (TMP_13 = function(key, value){var self = TMP_13.$$s || this, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, $a, TMP_20, $writer = nil, fn = nil;
if (key == null) key = nil;if (value == null) value = nil;
            if ($truthy(["style", "dangerously_set_inner_HTML"]['$include?'](key))) {
                
                $writer = [self.$lower_camelize(key), value.$to_n()];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("className")) {
                
                $writer = [key, value.$join(" ")];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("key")) {
                
                $writer = ["key", value.$to_key()];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("init")) {
                
                if ($truthy(["select", "textarea"]['$include?'](type))) {
                  key = "defaultValue"
                } else if (type['$==']("input")) {
                  key = (function() {if ($truthy(["radio", "checkbox"]['$include?'](properties['$[]']("type")))) {
                    return "defaultChecked"
                    } else {
                    return "defaultValue"
                  }; return nil; })()};
                
                $writer = [key, value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("ref")) {
                
                if ($truthy(value)) {
                  } else {
                  return nil;
                };
                if ($truthy(value['$respond_to?']("call"))) {
                  } else {
                  self.$raise("" + "The ref and dom params must be given a Proc.\n" + "If you want to capture the ref in an instance variable use the `set` method.\n" + "For example `ref: set(:TheRef)` will capture assign the ref to `@TheRef`\n")
                };
                if ($truthy(value.__hyperstack_component_ref_is_already_wrapped)) {
                  } else {
                  
                  fn = value;
                  value = 
                          function(dom_node){
                            if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                              $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_14 = function(){var self = TMP_14.$$s || this;

                  return fn.$call(dom_node.__opalInstance)}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14));
                            } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                              $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_15 = function(){var self = TMP_15.$$s || this;

                  return fn.$call(ReactDOM.findDOMNode(dom_node))}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
                            } else if(dom_node !== null){
                              $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_16 = function(){var self = TMP_16.$$s || this;

                  return fn.$call(dom_node)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16));
                            }
                          }
                        ;
                  value.__hyperstack_component_ref_is_already_wrapped = true;
                };
                
                $writer = [key, value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("jq_ref")) {
                
                if ($truthy(value['$respond_to?']("call"))) {
                  } else {
                  self.$raise("" + "The ref and dom params must be given a Proc.\n" + "If you want to capture the dom node in an instance variable use the `set` method.\n" + "For example `dom: set(:DomNode)` will assign the dom node to `@DomNode`\n")
                };
                if ($truthy(Opal.const_get_relative($nesting, 'Module')['$const_defined?']("Element"))) {
                  } else {
                  self.$raise("" + "You must include 'hyperstack/component/jquery' " + "in your manifest to use the `dom` reference key.\n" + "For example if using rails include " + "`config.import 'hyperstack/component/jquery', client_only: true`" + "in your config/initializer/hyperstack.rb file")
                };
                
                $writer = ["ref", 
                              function(dom_node){
                                if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                                  $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_17 = function(){var self = TMP_17.$$s || this;

                return value.$call(Opal.const_get_qualified('::', 'Element')['$[]'](dom_node.__opalInstance))}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17));
                                } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                                  $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_18 = function(){var self = TMP_18.$$s || this;

                return value.$call(Opal.const_get_qualified('::', 'Element')['$[]'](ReactDOM.findDOMNode(dom_node)))}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18));
                                } else if(dom_node !== null) {
                                  $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_19 = function(){var self = TMP_19.$$s || this;

                return value.$call(Opal.const_get_qualified('::', 'Element')['$[]'](dom_node))}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19));
                                }
                              }
                            ];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if ($truthy(($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'ReactAPI'), 'HASH_ATTRIBUTES')['$include?'](key)) ? value['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
                return $send(value, 'each', [], (TMP_20 = function(k, v){var self = TMP_20.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
                
                  $writer = ["" + (key) + "-" + (k.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}))), v.$to_n()];
                  $send(props, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20))
                } else {
                
                $writer = [(function() {if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'ReactAPI')['$html_attr?'](self.$lower_camelize(key)))) {
                  return self.$lower_camelize(key)
                  } else {
                  return key
                }; return nil; })(), value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13));
            return props;
          }, TMP_ReactWrapper_convert_props_21.$$arity = -2);
          self.$private();
          return Opal.defs(self, '$lower_camelize', TMP_ReactWrapper_lower_camelize_23 = function $$lower_camelize(snake_cased_word) {
            var TMP_22, self = this, words = nil, result = nil;

            
            words = snake_cased_word.$split("_");
            result = [words.$first()];
            return result.$concat($send(words['$[]']($range(1, -1, false)), 'map', [], (TMP_22 = function(word){var self = TMP_22.$$s || this;
if (word == null) word = nil;
            return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)))}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22))).$join("");
          }, TMP_ReactWrapper_lower_camelize_23.$$arity = 1);
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each']);
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_shallow_to_n_2;

    return (Opal.defn(self, '$shallow_to_n', TMP_Hash_shallow_to_n_2 = function $$shallow_to_n() {
      var TMP_1, self = this, hash = nil;

      
      hash = {};
      $send(self, 'each', [], (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
      return hash[key] = value}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1));
      return hash;
    }, TMP_Hash_shallow_to_n_2.$$arity = 0), nil) && 'shallow_to_n'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$class_eval', '$singleton_class', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_class_eval_1;

    
    Opal.defn(self, '$class_eval', TMP_Kernel_class_eval_1 = function $$class_eval($a_rest) {
      var self = this, args, $iter = TMP_Kernel_class_eval_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_class_eval_1.$$p = null;
      return $send(self.$singleton_class(), 'class_eval', Opal.to_a(args), block.$to_proc())
    }, TMP_Kernel_class_eval_1.$$arity = -1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_remove_possible_method_1, TMP_Module_redefine_method_2;

    
    
    Opal.defn(self, '$remove_possible_method', TMP_Module_remove_possible_method_1 = function $$remove_possible_method(method) {
      var $a, self = this;

      if ($truthy(($truthy($a = self['$method_defined?'](method)) ? $a : self['$private_method_defined?'](method)))) {
        return self.$undef_method(method)
        } else {
        return nil
      }
    }, TMP_Module_remove_possible_method_1.$$arity = 1);
    return (Opal.defn(self, '$redefine_method', TMP_Module_redefine_method_2 = function $$redefine_method(method) {
      var self = this, $iter = TMP_Module_redefine_method_2.$$p, block = $iter || nil;

      if ($iter) TMP_Module_redefine_method_2.$$p = null;
      
      self.$remove_possible_method(method);
      return $send(self, 'define_method', [method], block.$to_proc());
    }, TMP_Module_redefine_method_2.$$arity = 1), nil) && 'redefine_method';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_extractable_options$q_1;

    return (Opal.defn(self, '$extractable_options?', TMP_Hash_extractable_options$q_1 = function() {
      var self = this;

      return self['$instance_of?'](Opal.const_get_relative($nesting, 'Hash'))
    }, TMP_Hash_extractable_options$q_1.$$arity = 0), nil) && 'extractable_options?'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_extract_options$B_2;

    return (Opal.defn(self, '$extract_options!', TMP_Array_extract_options$B_2 = function() {
      var $a, self = this;

      if ($truthy(($truthy($a = self.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))) ? self.$last()['$extractable_options?']() : $a))) {
        return self.$pop()
        } else {
        return $hash2([], {})
      }
    }, TMP_Array_extract_options$B_2.$$arity = 0), nil) && 'extract_options!'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$singleton_class', '$remove_possible_method', '$define_method', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_class_attribute_11, TMP_Class_singleton_class$q_12;

    
    
    Opal.defn(self, '$class_attribute', TMP_Class_class_attribute_11 = function $$class_attribute($a_rest) {
      var $b, TMP_1, self = this, attrs, options = nil, instance_reader = nil, instance_writer = nil, instance_predicate = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      attrs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        attrs[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      options = attrs['$extract_options!']();
      instance_reader = ($truthy($b = options.$fetch("instance_accessor", true)) ? options.$fetch("instance_reader", true) : $b);
      instance_writer = ($truthy($b = options.$fetch("instance_accessor", true)) ? options.$fetch("instance_writer", true) : $b);
      instance_predicate = options.$fetch("instance_predicate", true);
      return $send(attrs, 'each', [], (TMP_1 = function(name){var self = TMP_1.$$s || this, TMP_2, TMP_3, TMP_4, TMP_9, TMP_10, ivar = nil;
if (name == null) name = nil;
      
        $send(self, 'define_singleton_method', [name], (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
        if ($truthy(instance_predicate)) {
          $send(self, 'define_singleton_method', ["" + (name) + "?"], (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$public_send(name)['$!']()['$!']()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))};
        ivar = "" + "@" + (name);
        $send(self, 'define_singleton_method', ["" + (name) + "="], (TMP_4 = function(val){var self = TMP_4.$$s || this, TMP_5, TMP_7;
if (val == null) val = nil;
        
          $send(self.$singleton_class(), 'class_eval', [], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

          
            self.$remove_possible_method(name);
            return $send(self, 'define_method', [name], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return val}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
          if ($truthy(self['$singleton_class?']())) {
            $send(self, 'class_eval', [], (TMP_7 = function(){var self = TMP_7.$$s || this, TMP_8;

            
              self.$remove_possible_method(name);
              return $send(self, 'define_method', [name], (TMP_8 = function(){var self = TMP_8.$$s || this;

              if ($truthy(self['$instance_variable_defined?'](ivar))) {
                  return self.$instance_variable_get(ivar)
                  } else {
                  return self.$singleton_class().$send(name)
                }}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))};
          return val;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        if ($truthy(instance_reader)) {
          
          self.$remove_possible_method(name);
          $send(self, 'define_method', [name], (TMP_9 = function(){var self = TMP_9.$$s || this;

          if ($truthy(self['$instance_variable_defined?'](ivar))) {
              return self.$instance_variable_get(ivar)
              } else {
              return self.$class().$public_send(name)
            }}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
          if ($truthy(instance_predicate)) {
            $send(self, 'define_method', ["" + (name) + "?"], (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$public_send(name)['$!']()['$!']()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))};};
        if ($truthy(instance_writer)) {
          return self.$attr_writer(name)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
    }, TMP_Class_class_attribute_11.$$arity = -1);
    self.$private();
    if ($truthy(self['$respond_to?']("singleton_class?"))) {
      return nil
      } else {
      return (Opal.defn(self, '$singleton_class?', TMP_Class_singleton_class$q_12 = function() {
        var $a, self = this;

        return ($truthy($a = true) ? $a : self.$ancestors().$first()['$!='](self))
      }, TMP_Class_singleton_class$q_12.$$arity = 0), nil) && 'singleton_class?'
    };
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/rendering_context"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$waiting_on_resources', '$raise_if_not_quiet?', '$raise', '$new', '$!', '$remove_nodes_from_args', '$build', '$waiting_on_resources=', '$-', '$run_child_block', '$nil?', '$to_proc', '$dup', '$tap', '$create_element', '$detect', '$respond_to?', '$is_a?', '$last', '$to_s', '$render', '$<<', '$delete', '$include?', '$index', '$[]=', '$[]', '$each', '$acts_as_string?', '$empty?', '$!=', '$raise_render_error', '$==', '$count', '$improper_render', '$>', '$try', '$class', '$define_method', '$unshift', '$hyper_component?', '$send']);
  
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $RenderingContext(){};
          var self = $RenderingContext = $klass($base, $super, 'RenderingContext', $RenderingContext);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          
          (function($base, $super, $parent_nesting) {
            function $NotQuiet(){};
            var self = $NotQuiet = $klass($base, $super, 'NotQuiet', $NotQuiet);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting);

            return nil
          })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
          return (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_raise_if_not_quiet$q_1, TMP_raise_if_not_quiet$eq_2, TMP_quiet_test_3, TMP_render_4, TMP_build_12, TMP_delete_13, TMP_rendered$q_14, TMP_replace_15, TMP_remove_nodes_from_args_17, TMP_run_child_block_18, TMP_raise_render_error_20, TMP_improper_render_21;

            
            self.$attr_accessor("waiting_on_resources");
            
            Opal.defn(self, '$raise_if_not_quiet?', TMP_raise_if_not_quiet$q_1 = function() {
              var self = this;
              if (self.raise_if_not_quiet == null) self.raise_if_not_quiet = nil;

              return self.raise_if_not_quiet
            }, TMP_raise_if_not_quiet$q_1.$$arity = 0);
            
            Opal.defn(self, '$raise_if_not_quiet=', TMP_raise_if_not_quiet$eq_2 = function(x) {
              var self = this;

              return (self.raise_if_not_quiet = x)
            }, TMP_raise_if_not_quiet$eq_2.$$arity = 1);
            
            Opal.defn(self, '$quiet_test', TMP_quiet_test_3 = function $$quiet_test(component) {
              var $a, self = this;

              
              if ($truthy(($truthy($a = component.$waiting_on_resources()) ? self['$raise_if_not_quiet?']() : $a))) {
                } else {
                return nil
              };
              return self.$raise(Opal.const_get_relative($nesting, 'NotQuiet').$new("" + (component) + " is waiting on resources"));
            }, TMP_quiet_test_3.$$arity = 1);
            
            Opal.defn(self, '$render', TMP_render_4 = function $$render(name, $a_rest) {
              var $b, TMP_5, self = this, args, $iter = TMP_render_4.$$p, block = $iter || nil, was_outer_most = nil, element = nil, $writer = nil;
              if (self.not_outer_most == null) self.not_outer_most = nil;
              if (self.buffer == null) self.buffer = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 1;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 1] = arguments[$arg_idx];
              }
              if ($iter) TMP_render_4.$$p = null;
              return (function() { try {
              
              was_outer_most = self.not_outer_most['$!']();
              self.not_outer_most = true;
              self.$remove_nodes_from_args(args);
              if ($truthy(self.buffer)) {
                } else {
                self.buffer = ($truthy($b = self.buffer) ? $b : [])
              };
              if ($truthy(block)) {
                element = $send(self, 'build', [], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, saved_waiting_on_resources = nil, $writer = nil, buffer = nil, buffer_s = nil;
                  if (self.buffer == null) self.buffer = nil;

                
                  saved_waiting_on_resources = nil;
                  
                  $writer = [nil];
                  $send(self, 'waiting_on_resources=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  $send(self, 'run_child_block', [name['$nil?']()], block.$to_proc());
                  if ($truthy(name)) {
                    
                    buffer = self.buffer.$dup();
                    return $send($send(Opal.const_get_relative($nesting, 'ReactWrapper'), 'create_element', [name].concat(Opal.to_a(args)), (TMP_6 = function(){var self = TMP_6.$$s || this;

                    return buffer}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6)), 'tap', [], (TMP_7 = function(element){var self = TMP_7.$$s || this, $a, TMP_8;
if (element == null) element = nil;
                    
                      
                      $writer = [($truthy($a = saved_waiting_on_resources) ? $a : $send(buffer, 'detect', [], (TMP_8 = function(e){var self = TMP_8.$$s || this;
if (e == null) e = nil;
                      if ($truthy(e['$respond_to?']("waiting_on_resources"))) {
                          return e.$waiting_on_resources()
                          } else {
                          return nil
                        }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))['$!']()['$!']())];
                      $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      if ($truthy(buffer.$last()['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                        return ($truthy($a = element.$waiting_on_resources()) ? $a : (($writer = [self.$waiting_on_resources()]), $send(element, 'waiting_on_resources=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                        } else {
                        return nil
                      };}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
                  } else if ($truthy(self.buffer.$last()['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                    return $send(self.buffer.$last(), 'tap', [], (TMP_9 = function(element){var self = TMP_9.$$s || this, $a;
if (element == null) element = nil;
                    return ($truthy($a = element.$waiting_on_resources()) ? $a : (($writer = [saved_waiting_on_resources]), $send(element, 'waiting_on_resources=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))
                    } else {
                    
                    buffer_s = self.buffer.$last().$to_s();
                    return $send($send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', ["span"], (TMP_10 = function(){var self = TMP_10.$$s || this;

                    return buffer_s}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10)), 'tap', [], (TMP_11 = function(element){var self = TMP_11.$$s || this;
if (element == null) element = nil;
                    
                      $writer = [saved_waiting_on_resources];
                      $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                      return $writer[$rb_minus($writer["length"], 1)];}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
                  };}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))
              } else if ($truthy(name['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                element = name
                } else {
                
                element = $send(Opal.const_get_relative($nesting, 'ReactWrapper'), 'create_element', [name].concat(Opal.to_a(args)));
                
                $writer = [self.$waiting_on_resources()];
                $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              };
              self.buffer['$<<'](element);
              
              $writer = [nil];
              $send(self, 'waiting_on_resources=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return element;
              } finally {
                (function() {if ($truthy(was_outer_most)) {
                  return (self.not_outer_most = (self.buffer = nil))
                  } else {
                  return nil
                }; return nil; })()
              }; })()
            }, TMP_render_4.$$arity = -2);
            
            Opal.defn(self, '$build', TMP_build_12 = function $$build() {
              var self = this, $iter = TMP_build_12.$$p, $yield = $iter || nil, current = nil, return_val = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) TMP_build_12.$$p = null;
              
              current = self.buffer;
              self.buffer = [];
              return_val = Opal.yield1($yield, self.buffer);
              self.buffer = current;
              return return_val;
            }, TMP_build_12.$$arity = 0);
            
            Opal.defn(self, '$delete', TMP_delete_13 = function(element) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              
              self.buffer.$delete(element);
              return element;
            }, TMP_delete_13.$$arity = 1);
            Opal.alias(self, "as_node", "delete");
            
            Opal.defn(self, '$rendered?', TMP_rendered$q_14 = function(element) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              return self.buffer['$include?'](element)
            }, TMP_rendered$q_14.$$arity = 1);
            
            Opal.defn(self, '$replace', TMP_replace_15 = function $$replace(e1, e2) {
              var self = this, $writer = nil;
              if (self.buffer == null) self.buffer = nil;

              
              $writer = [self.buffer.$index(e1), e2];
              $send(self.buffer, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, TMP_replace_15.$$arity = 2);
            
            Opal.defn(self, '$remove_nodes_from_args', TMP_remove_nodes_from_args_17 = function $$remove_nodes_from_args(args) {
              var $a, TMP_16, self = this;

              if ($truthy(($truthy($a = args['$[]'](0)) ? args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
                return $send(args['$[]'](0), 'each', [], (TMP_16 = function(key, value){var self = TMP_16.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
                
                  try {
                    if ($truthy(value['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                      return value.$delete()
                      } else {
                      return nil
                    }
                  } catch ($err) {
                    if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
                      try {
                        return nil
                      } finally { Opal.pop_exception() }
                    } else { throw $err; }
                  };}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16))
                } else {
                return nil
              }
            }, TMP_remove_nodes_from_args_17.$$arity = 1);
            
            Opal.defn(self, '$run_child_block', TMP_run_child_block_18 = function $$run_child_block(is_outer_scope) {
              var $a, TMP_19, $b, self = this, $iter = TMP_run_child_block_18.$$p, $yield = $iter || nil, result = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) TMP_run_child_block_18.$$p = null;
              
              result = Opal.yieldX($yield, []);
              if ($truthy(($truthy($a = result['$respond_to?']("acts_as_string?")) ? result['$acts_as_string?']() : $a))) {
                $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', ["span"], (TMP_19 = function(){var self = TMP_19.$$s || this;

                return result.$to_s()}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19))
              } else if ($truthy(($truthy($a = result['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? $a : ($truthy($b = result['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element'))) ? self.buffer['$empty?']() : $b)))) {
                self.buffer['$<<'](result)};
              if ($truthy(($truthy($a = is_outer_scope) ? self.buffer['$!=']([result]) : $a))) {
                return self.$raise_render_error(result)
                } else {
                return nil
              };
            }, TMP_run_child_block_18.$$arity = 1);
            
            Opal.defn(self, '$raise_render_error', TMP_raise_render_error_20 = function $$raise_render_error(result) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              
              if (self.buffer.$count()['$=='](1)) {
                self.$improper_render("A different element was returned than was generated within the DSL.", "Possibly improper use of Element#delete.")};
              if ($truthy($rb_gt(self.buffer.$count(), 1))) {
                self.$improper_render("" + "Instead " + (self.buffer.$count()) + " elements were generated.", "Do you want to wrap your elements in a div?")};
              if ($truthy(result.$try("hyper_component?"))) {
                self.$improper_render("" + "Instead the component " + (result) + " was returned.", "" + "Did you mean " + (result) + "()?")};
              return self.$improper_render("" + "Instead the " + (result.$class()) + " " + (result) + " was returned.", "You may need to convert this to a string.");
            }, TMP_raise_render_error_20.$$arity = 1);
            return (Opal.defn(self, '$improper_render', TMP_improper_render_21 = function $$improper_render(message, solution) {
              var self = this;

              return self.$raise("" + "a component's render method must generate and return exactly 1 element or a string.\n" + ("" + "    " + (message) + "  " + (solution)))
            }, TMP_improper_render_21.$$arity = 2), nil) && 'improper_render';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_22, TMP_Object_para_25, TMP_Object_br_28;

    
    $send(["span", "td", "th"], 'each', [], (TMP_Object_22 = function(tag){var self = TMP_Object_22.$$s || this, TMP_23;
if (tag == null) tag = nil;
    return $send(self, 'define_method', [tag], (TMP_23 = function($a_rest){var self = TMP_23.$$s || this, block, args, $b, TMP_24;

        block = TMP_23.$$p || nil;
        if (block) TMP_23.$$p = null;
        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        args.$unshift(tag);
        if ($truthy(($truthy($b = self['$respond_to?']("hyper_component?")) ? self['$hyper_component?']() : $b))) {
          return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
        return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', Opal.to_a(args), (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$to_s()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24));}, TMP_23.$$s = self, TMP_23.$$arity = -1, TMP_23))}, TMP_Object_22.$$s = self, TMP_Object_22.$$arity = 1, TMP_Object_22));
    
    Opal.defn(self, '$para', TMP_Object_para_25 = function $$para($a_rest) {
      var $b, TMP_26, self = this, args, $iter = TMP_Object_para_25.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_para_25.$$p = null;
      
      args.$unshift("p");
      if ($truthy(($truthy($b = self['$respond_to?']("hyper_component?")) ? self['$hyper_component?']() : $b))) {
        return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
      return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', Opal.to_a(args), (TMP_26 = function(){var self = TMP_26.$$s || this;

      return self.$to_s()}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26));
    }, TMP_Object_para_25.$$arity = -1);
    return (Opal.defn(self, '$br', TMP_Object_br_28 = function $$br() {
      var $a, TMP_27, self = this;

      
      if ($truthy(($truthy($a = self['$respond_to?']("hyper_component?")) ? self['$hyper_component?']() : $a))) {
        return self.$send("br")};
      return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', ["span"], (TMP_27 = function(){var self = TMP_27.$$s || this;

      
        Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render(self.$to_s());
        return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render("br");}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27));
    }, TMP_Object_br_28.$$arity = 0), nil) && 'br';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/children"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$each', '$to_proc', '$lambda', '$render', '$to_enum', '$length', '$>', '$new', '$call', '$<<', '$alias_method']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Children(){};
        var self = $Children = $klass($base, $super, 'Children', $Children);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Children_initialize_1, TMP_Children_render_2, TMP_Children_to_proc_4, TMP_Children_each_5, TMP_Children_length_7;

        def.children = def.length = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
        
        Opal.defn(self, '$initialize', TMP_Children_initialize_1 = function $$initialize(children) {
          var self = this;

          return (self.children = children)
        }, TMP_Children_initialize_1.$$arity = 1);
        
        Opal.defn(self, '$render', TMP_Children_render_2 = function $$render() {
          var self = this;

          return $send(self, 'each', [], "render".$to_proc())
        }, TMP_Children_render_2.$$arity = 0);
        
        Opal.defn(self, '$to_proc', TMP_Children_to_proc_4 = function $$to_proc() {
          var TMP_3, self = this;

          return $send(self, 'lambda', [], (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$render()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
        }, TMP_Children_to_proc_4.$$arity = 0);
        
        Opal.defn(self, '$each', TMP_Children_each_5 = function $$each() {
          var TMP_6, self = this, $iter = TMP_Children_each_5.$$p, block = $iter || nil, collection = nil, element = nil;

          if ($iter) TMP_Children_each_5.$$p = null;
          
          if ((block !== nil)) {
            } else {
            return $send(self, 'to_enum', ["each"], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$length()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
          };
          if ($truthy($rb_gt(self.$length(), 0))) {
            } else {
            return []
          };
          collection = [];
          
          React.Children.forEach(self.children, function(context){
            ((element = Opal.const_get_relative($nesting, 'Element').$new(context)), block.$call(element), collection['$<<'](element))
          })
        ;
          return collection;
        }, TMP_Children_each_5.$$arity = 0);
        
        Opal.defn(self, '$length', TMP_Children_length_7 = function $$length() {
          var $a, self = this;

          return (self.length = ($truthy($a = self.length) ? $a : React.Children.count(self.children)))
        }, TMP_Children_length_7.$$arity = 0);
        return self.$alias_method("size", "length");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/instance_methods"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$include?', '$param_accessor_style', '$raise', '$[]', '$dom_node', '$==', '$=~', '$pluralize', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$lambda', '$instance_eval', '$callbacks?', '$class', '$RescueWrapper', '$call', '$after_error_args=', '$-', '$__hyperstack_component_run_post_render_hooks', '$__hyperstack_component_rescue_wrapper', '$__hyperstack_router_wrapper', '$shallow_to_n']);
  
  self.$require("hyperstack/component/children");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InstanceMethods_children_1, TMP_InstanceMethods_params_2, TMP_InstanceMethods_props_3, TMP_InstanceMethods_dom_node_4, TMP_InstanceMethods_jq_node_5, TMP_InstanceMethods_mounted$q_6, TMP_InstanceMethods_pluralize_7, TMP_InstanceMethods_force_update$B_8, TMP_InstanceMethods_set_state_9, TMP_InstanceMethods_set_state$B_10, TMP_InstanceMethods___hyperstack_router_wrapper_11, TMP_InstanceMethods___hyperstack_component_rescue_wrapper_13, TMP_InstanceMethods___hyperstack_component_select_wrappers_14, TMP_InstanceMethods_set_or_replace_state_or_prop_15;

          
          
          Opal.defn(self, '$children', TMP_InstanceMethods_children_1 = function $$children() {
            var self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Children').$new(self.__hyperstack_component_native.props.children)
          }, TMP_InstanceMethods_children_1.$$arity = 0);
          
          Opal.defn(self, '$params', TMP_InstanceMethods_params_2 = function $$params() {
            var self = this;
            if (self.__hyperstack_component_params_wrapper == null) self.__hyperstack_component_params_wrapper = nil;

            
            if ($truthy(["hyperstack", "accessors"]['$include?'](self.__hyperstack_component_params_wrapper.$param_accessor_style()))) {
              self.$raise("" + "params are now directly accessible via instance variables.\n" + "  to access the legacy behavior add `param_accessor_style = :legacy` " + "to your component class\n" + "  to access both behaviors add `param_accessor_style = :both` " + "to your component class")};
            return self.__hyperstack_component_params_wrapper;
          }, TMP_InstanceMethods_params_2.$$arity = 0);
          
          Opal.defn(self, '$props', TMP_InstanceMethods_props_3 = function $$props() {
            var self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            return Opal.const_get_relative($nesting, 'Hash').$new(self.__hyperstack_component_native.props)
          }, TMP_InstanceMethods_props_3.$$arity = 0);
          
          Opal.defn(self, '$dom_node', TMP_InstanceMethods_dom_node_4 = function $$dom_node() {
            var self = this;

            return ReactDOM.findDOMNode(self.__hyperstack_component_native)
          }, TMP_InstanceMethods_dom_node_4.$$arity = 0);
          
          Opal.defn(self, '$jq_node', TMP_InstanceMethods_jq_node_5 = function $$jq_node() {
            var self = this;

            return Opal.const_get_qualified('::', 'Element')['$[]'](self.$dom_node())
          }, TMP_InstanceMethods_jq_node_5.$$arity = 0);
          
          Opal.defn(self, '$mounted?', TMP_InstanceMethods_mounted$q_6 = function() {
            var self = this;

            return (self.__hyperstack_component_is_mounted === undefined) ? false : self.__hyperstack_component_is_mounted
          }, TMP_InstanceMethods_mounted$q_6.$$arity = 0);
          
          Opal.defn(self, '$pluralize', TMP_InstanceMethods_pluralize_7 = function $$pluralize(count, singular, plural) {
            var $a, self = this, word = nil;

            if (plural == null) {
              plural = nil;
            }
            
            word = (function() {if ($truthy(($truthy($a = count['$=='](1)) ? $a : count['$=~'](/^1(\.0+)?$/)))) {
              return singular
              } else {
              return ($truthy($a = plural) ? $a : singular.$pluralize())
            }; return nil; })();
            return "" + (($truthy($a = count) ? $a : 0)) + " " + (word);
          }, TMP_InstanceMethods_pluralize_7.$$arity = -3);
          
          Opal.defn(self, '$force_update!', TMP_InstanceMethods_force_update$B_8 = function() {
            var self = this;

            
            self.__hyperstack_component_native.forceUpdate();
            return self;
          }, TMP_InstanceMethods_force_update$B_8.$$arity = 0);
          
          Opal.defn(self, '$set_state', TMP_InstanceMethods_set_state_9 = function $$set_state(state) {
            var self = this, $iter = TMP_InstanceMethods_set_state_9.$$p, block = $iter || nil;

            if ($iter) TMP_InstanceMethods_set_state_9.$$p = null;
            return $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc())
          }, TMP_InstanceMethods_set_state_9.$$arity = 1);
          
          Opal.defn(self, '$set_state!', TMP_InstanceMethods_set_state$B_10 = function(state) {
            var self = this, $iter = TMP_InstanceMethods_set_state$B_10.$$p, block = $iter || nil;

            if ($iter) TMP_InstanceMethods_set_state$B_10.$$p = null;
            
            $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc());
            return self.__hyperstack_component_native.forceUpdate();
          }, TMP_InstanceMethods_set_state$B_10.$$arity = 1);
          self.$private();
          
          Opal.defn(self, '$__hyperstack_router_wrapper', TMP_InstanceMethods___hyperstack_router_wrapper_11 = function $$__hyperstack_router_wrapper() {
            var TMP_12, self = this, $iter = TMP_InstanceMethods___hyperstack_router_wrapper_11.$$p, block = $iter || nil;

            if ($iter) TMP_InstanceMethods___hyperstack_router_wrapper_11.$$p = null;
            return $send(self, 'lambda', [], (TMP_12 = function(){var self = TMP_12.$$s || this;

            return $send(self, 'instance_eval', [], block.$to_proc())}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12))
          }, TMP_InstanceMethods___hyperstack_router_wrapper_11.$$arity = 0);
          
          Opal.defn(self, '$__hyperstack_component_rescue_wrapper', TMP_InstanceMethods___hyperstack_component_rescue_wrapper_13 = function $$__hyperstack_component_rescue_wrapper(child) {
            var self = this;

            if ($truthy(self.$class()['$callbacks?']("__hyperstack_component_rescue_hook"))) {
              return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component').$RescueWrapper($hash2(["child", "children_elements"], {"child": self, "children_elements": child}))
              } else {
              return child.$call()
            }
          }, TMP_InstanceMethods___hyperstack_component_rescue_wrapper_13.$$arity = 1);
          
          Opal.defn(self, '$__hyperstack_component_select_wrappers', TMP_InstanceMethods___hyperstack_component_select_wrappers_14 = function $$__hyperstack_component_select_wrappers() {
            var self = this, $iter = TMP_InstanceMethods___hyperstack_component_select_wrappers_14.$$p, block = $iter || nil, $writer = nil;

            if ($iter) TMP_InstanceMethods___hyperstack_component_select_wrappers_14.$$p = null;
            
            
            $writer = [nil];
            $send(Opal.const_get_relative($nesting, 'RescueWrapper'), 'after_error_args=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$__hyperstack_component_run_post_render_hooks(self.$__hyperstack_component_rescue_wrapper($send(self, '__hyperstack_router_wrapper', [], block.$to_proc())));
          }, TMP_InstanceMethods___hyperstack_component_select_wrappers_14.$$arity = 0);
          
          Opal.defn(self, '$set_or_replace_state_or_prop', TMP_InstanceMethods_set_or_replace_state_or_prop_15 = function $$set_or_replace_state_or_prop(state_or_prop, method) {
            var self = this, $iter = TMP_InstanceMethods_set_or_replace_state_or_prop_15.$$p, block = $iter || nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            if ($iter) TMP_InstanceMethods_set_or_replace_state_or_prop_15.$$p = null;
            
            if ($truthy(self.__hyperstack_component_native)) {
              } else {
              self.$raise("No native ReactComponent associated")
            };
            var state_prop_n = state_or_prop.$shallow_to_n();
            if ($truthy(block)) {
              
              if (self.__hyperstack_component_native.__opalInstanceInitializedState === true) {
                self.__hyperstack_component_native[method](state_prop_n, function(){
                  block.$call();
                });
              } else {
                for (var sp in state_prop_n) {
                  if (state_prop_n.hasOwnProperty(sp)) {
                    self.__hyperstack_component_native.state[sp] = state_prop_n[sp];
                  }
                }
              }
            
              } else {
              
              if (self.__hyperstack_component_native.__opalInstanceInitializedState === true) {
                self.__hyperstack_component_native[method](state_prop_n);
              } else {
                for (var sp in state_prop_n) {
                  if (state_prop_n.hasOwnProperty(sp)) {
                    self.__hyperstack_component_native.state[sp] = state_prop_n[sp];
                  }
                }
              }
            
            };
          }, TMP_InstanceMethods_set_or_replace_state_or_prop_15.$$arity = 2);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/class_methods"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$create_element', '$to_proc', '$render', '$deprecation_warning', '$select', '$mounted_components', '$<=', '$class', '$param_accessor_style', '$props_wrapper', '$==', '$[]', '$<<', '$each', '$before_new_params', '$included', '$is_a?', '$type', '$define_method', '$__hyperstack_component_select_wrappers', '$instance_eval', '$__hyperstack_component_after_render_hook', '$on', '$instance_exec', '$empty?', '$__hyperstack_component_rescue_hook', '$!', '$detect', '$before_mount', '$before_update', '$after_mount', '$after_update', '$any?', '$respond_to?', '$haml_class_name', '$superclass', '$copy', '$validator', '$new', '$validate', '$>', '$count', '$+', '$name', '$join', '$default_props', '$build', '$first', '$delete', '$merge!', '$[]=', '$-', '$key?', '$optional', '$requires', '$all_other_params', '$props', '$=~', '$gsub', '$include?', '$event_camelize', '$event', '$call', '$arity', '$last', '$pop', '$state', '$singleton_class', '$__send__', '$mutate', '$native_mixins', '$static_call_backs', '$split', '$to_n', '$add_item_to_tree', '$Native', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$raise', '$message', '$!=', '$length', '$inject']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_create_element_1, TMP_ClassMethods_insert_element_2, TMP_ClassMethods_deprecation_warning_3, TMP_ClassMethods_hyper_component$q_4, TMP_ClassMethods_allow_deprecated_render_definition$q_5, TMP_ClassMethods_mounted_components_7, TMP_ClassMethods_param_accessor_style_8, TMP_ClassMethods_backtrace_9, TMP_ClassMethods_append_backtrace_11, TMP_ClassMethods_before_receive_props_12, TMP_ClassMethods_render_13, TMP_ClassMethods_on_19, TMP_ClassMethods_rescues_22, TMP_ClassMethods_before_render_25, TMP_ClassMethods_after_render_26, TMP_ClassMethods_method_missing_27, TMP_ClassMethods_validator_28, TMP_ClassMethods_prop_types_29, TMP_ClassMethods_default_props_30, TMP_ClassMethods_params_31, TMP_ClassMethods_props_wrapper_32, TMP_ClassMethods_param_33, TMP_ClassMethods_collect_other_params_as_35, TMP_ClassMethods_fires_37, TMP_ClassMethods_define_state_38, TMP_ClassMethods_export_state_41, TMP_ClassMethods_native_mixin_45, TMP_ClassMethods_native_mixins_46, TMP_ClassMethods_static_call_back_47, TMP_ClassMethods_static_call_backs_48, TMP_ClassMethods_export_component_49, TMP_ClassMethods_imports_51, TMP_ClassMethods_add_item_to_tree_53, TMP_ClassMethods_to_n_54;

          
          
          Opal.defn(self, '$create_element', TMP_ClassMethods_create_element_1 = function $$create_element($a_rest) {
            var self = this, params, $iter = TMP_ClassMethods_create_element_1.$$p, children = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_create_element_1.$$p = null;
            return $send(Opal.const_get_relative($nesting, 'ReactWrapper'), 'create_element', [self].concat(Opal.to_a(params)), children.$to_proc())
          }, TMP_ClassMethods_create_element_1.$$arity = -1);
          
          Opal.defn(self, '$insert_element', TMP_ClassMethods_insert_element_2 = function $$insert_element($a_rest) {
            var self = this, params, $iter = TMP_ClassMethods_insert_element_2.$$p, children = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_insert_element_2.$$p = null;
            return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [self].concat(Opal.to_a(params)), children.$to_proc())
          }, TMP_ClassMethods_insert_element_2.$$arity = -1);
          
          Opal.defn(self, '$deprecation_warning', TMP_ClassMethods_deprecation_warning_3 = function $$deprecation_warning(message) {
            var self = this;

            return Opal.const_get_relative($nesting, 'Hyperstack').$deprecation_warning(self, message)
          }, TMP_ClassMethods_deprecation_warning_3.$$arity = 1);
          
          Opal.defn(self, '$hyper_component?', TMP_ClassMethods_hyper_component$q_4 = function() {
            var self = this;

            return true
          }, TMP_ClassMethods_hyper_component$q_4.$$arity = 0);
          
          Opal.defn(self, '$allow_deprecated_render_definition?', TMP_ClassMethods_allow_deprecated_render_definition$q_5 = function() {
            var self = this;

            return false
          }, TMP_ClassMethods_allow_deprecated_render_definition$q_5.$$arity = 0);
          
          Opal.defn(self, '$mounted_components', TMP_ClassMethods_mounted_components_7 = function $$mounted_components() {
            var TMP_6, self = this;

            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component').$mounted_components(), 'select', [], (TMP_6 = function(c){var self = TMP_6.$$s || this;
if (c == null) c = nil;
            return $rb_le(c.$class(), self)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
          }, TMP_ClassMethods_mounted_components_7.$$arity = 0);
          
          Opal.defn(self, '$param_accessor_style', TMP_ClassMethods_param_accessor_style_8 = function $$param_accessor_style($a_rest) {
            var self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            return $send(self.$props_wrapper(), 'param_accessor_style', Opal.to_a(args))
          }, TMP_ClassMethods_param_accessor_style_8.$$arity = -1);
          
          Opal.defn(self, '$backtrace', TMP_ClassMethods_backtrace_9 = function $$backtrace($a_rest) {
            var $b, self = this, args;
            if (self.__hyperstack_component_dont_catch_exceptions == null) self.__hyperstack_component_dont_catch_exceptions = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            self.__hyperstack_component_dont_catch_exceptions = args['$[]'](0)['$==']("none");
            return (self.__hyperstack_component_backtrace_off = ($truthy($b = self.__hyperstack_component_dont_catch_exceptions) ? $b : args['$[]'](0)['$==']("off")));
          }, TMP_ClassMethods_backtrace_9.$$arity = -1);
          
          Opal.defn(self, '$append_backtrace', TMP_ClassMethods_append_backtrace_11 = function $$append_backtrace(message_array, backtrace) {
            var TMP_10, self = this;

            
            message_array['$<<']("" + "    " + (backtrace['$[]'](0)));
            return $send(backtrace['$[]']($range(1, -1, false)), 'each', [], (TMP_10 = function(line){var self = TMP_10.$$s || this;
if (line == null) line = nil;
            return message_array['$<<'](line)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
          }, TMP_ClassMethods_append_backtrace_11.$$arity = 2);
          
          Opal.defn(self, '$before_receive_props', TMP_ClassMethods_before_receive_props_12 = function $$before_receive_props($a_rest) {
            var self = this, args, $iter = TMP_ClassMethods_before_receive_props_12.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_before_receive_props_12.$$p = null;
            
            self.$deprecation_warning("'before_receive_props' is deprecated. Use the 'before_new_params' macro instead.");
            return $send(self, 'before_new_params', Opal.to_a(args), block.$to_proc());
          }, TMP_ClassMethods_before_receive_props_12.$$arity = -1);
          
          Opal.defn(self, '$render', TMP_ClassMethods_render_13 = function $$render(container, params) {
            var TMP_14, TMP_17, self = this, $iter = TMP_ClassMethods_render_13.$$p, block = $iter || nil;

            if (container == null) {
              container = nil;
            }
            if (params == null) {
              params = $hash2([], {});
            }
            if ($iter) TMP_ClassMethods_render_13.$$p = null;
            
            Opal.const_get_relative($nesting, 'Tags').$included(self);
            if ($truthy(container)) {
              
              if ($truthy(container['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                container = container.$type()};
              return $send(self, 'define_method', ["__hyperstack_component_render"], (TMP_14 = function(){var self = TMP_14.$$s || this, TMP_15;

              return $send(self, '__hyperstack_component_select_wrappers', [], (TMP_15 = function(){var self = TMP_15.$$s || this, TMP_16;

                return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [container, params], (TMP_16 = function(){var self = TMP_16.$$s || this;

                  if ($truthy(block)) {
                      return $send(self, 'instance_eval', [], block.$to_proc())
                      } else {
                      return nil
                    }}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15))}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14));
              } else {
              return $send(self, 'define_method', ["__hyperstack_component_render"], (TMP_17 = function(){var self = TMP_17.$$s || this, TMP_18;

              return $send(self, '__hyperstack_component_select_wrappers', [], (TMP_18 = function(){var self = TMP_18.$$s || this;

                return $send(self, 'instance_eval', [], block.$to_proc())}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18))}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17))
            };
          }, TMP_ClassMethods_render_13.$$arity = -1);
          
          Opal.defn(self, '$on', TMP_ClassMethods_on_19 = function $$on($a_rest) {
            var TMP_20, self = this, args, $iter = TMP_ClassMethods_on_19.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_on_19.$$p = null;
            return $send(self, '__hyperstack_component_after_render_hook', [], (TMP_20 = function(element){var self = TMP_20.$$s || this, TMP_21;
if (element == null) element = nil;
            return $send(element, 'on', Opal.to_a(args), (TMP_21 = function($a_rest){var self = TMP_21.$$s || this, aargs;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                aargs = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  aargs[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(self, 'instance_exec', Opal.to_a(aargs), block.$to_proc())}, TMP_21.$$s = self, TMP_21.$$arity = -1, TMP_21))}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20))
          }, TMP_ClassMethods_on_19.$$arity = -1);
          
          Opal.defn(self, '$rescues', TMP_ClassMethods_rescues_22 = function $$rescues($a_rest) {
            var TMP_23, self = this, klasses, $iter = TMP_ClassMethods_rescues_22.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            klasses = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              klasses[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_rescues_22.$$p = null;
            
            if ($truthy(klasses['$empty?']())) {
              klasses = [Opal.const_get_relative($nesting, 'StandardError')]};
            return $send(self, '__hyperstack_component_rescue_hook', [], (TMP_23 = function(found, $a_rest){var self = TMP_23.$$s || this, args, $b, TMP_24;

              var $args_len = arguments.length, $rest_len = $args_len - 1;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 1] = arguments[$arg_idx];
              }if (found == null) found = nil;
            
              if ($truthy(($truthy($b = found) ? $b : $send(klasses, 'detect', [], (TMP_24 = function(klass){var self = TMP_24.$$s || this;
if (klass == null) klass = nil;
              return args['$[]'](0)['$is_a?'](klass)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24))['$!']()))) {
                return [found].concat(Opal.to_a(args));};
              $send(self, 'instance_exec', Opal.to_a(args), block.$to_proc());
              return [true].concat(Opal.to_a(args));}, TMP_23.$$s = self, TMP_23.$$arity = -2, TMP_23));
          }, TMP_ClassMethods_rescues_22.$$arity = -1);
          
          Opal.defn(self, '$before_render', TMP_ClassMethods_before_render_25 = function $$before_render($a_rest) {
            var self = this, args, $iter = TMP_ClassMethods_before_render_25.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_before_render_25.$$p = null;
            
            $send(self, 'before_mount', Opal.to_a(args), block.$to_proc());
            return $send(self, 'before_update', Opal.to_a(args), block.$to_proc());
          }, TMP_ClassMethods_before_render_25.$$arity = -1);
          
          Opal.defn(self, '$after_render', TMP_ClassMethods_after_render_26 = function $$after_render($a_rest) {
            var self = this, args, $iter = TMP_ClassMethods_after_render_26.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_after_render_26.$$p = null;
            
            $send(self, 'after_mount', Opal.to_a(args), block.$to_proc());
            return $send(self, 'after_update', Opal.to_a(args), block.$to_proc());
          }, TMP_ClassMethods_after_render_26.$$arity = -1);
          
          Opal.defn(self, '$method_missing', TMP_ClassMethods_method_missing_27 = function $$method_missing(name, $a_rest) {
            var $b, self = this, args, $iter = TMP_ClassMethods_method_missing_27.$$p, children = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_method_missing_27.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            if ($truthy(($truthy($b = args['$any?']()) ? $b : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')['$respond_to?']("haml_class_name")['$!']()))) {
              return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_ClassMethods_method_missing_27, false), $zuper, $iter)
              } else {
              return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [self, $hash2(["class"], {"class": Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element').$haml_class_name(name)})], children.$to_proc())
            }
          }, TMP_ClassMethods_method_missing_27.$$arity = -2);
          
          Opal.defn(self, '$validator', TMP_ClassMethods_validator_28 = function $$validator() {
            var self = this;
            if (self.__hyperstack_component_validator == null) self.__hyperstack_component_validator = nil;

            
            if ($truthy(self.__hyperstack_component_validator)) {
              return self.__hyperstack_component_validator};
            if ($truthy(self.$superclass()['$respond_to?']("validator"))) {
              return (self.__hyperstack_component_validator = self.$superclass().$validator().$copy(self.$props_wrapper()))
              } else {
              return (self.__hyperstack_component_validator = Opal.const_get_relative($nesting, 'Validator').$new(self.$props_wrapper()))
            };
          }, TMP_ClassMethods_validator_28.$$arity = 0);
          
          Opal.defn(self, '$prop_types', TMP_ClassMethods_prop_types_29 = function $$prop_types() {
            var self = this;

            if ($truthy(self.$validator())) {
              return $hash2(["_componentValidator"], {"_componentValidator": 
                function(props, propName, componentName) {
                  var errors = self.$validator().$validate(Opal.const_get_relative($nesting, 'Hash').$new(props));
                  return (function() {if ($truthy($rb_gt((errors).$count(), 0))) {
                return new Error($rb_plus("" + "In component `" + (self.$name()) + "`\n", (errors).$join("\n")))
                } else {
                return undefined
              }; return nil; })();
                }
              })
              } else {
              return $hash2([], {})
            }
          }, TMP_ClassMethods_prop_types_29.$$arity = 0);
          
          Opal.defn(self, '$default_props', TMP_ClassMethods_default_props_30 = function $$default_props() {
            var self = this;

            return self.$validator().$default_props()
          }, TMP_ClassMethods_default_props_30.$$arity = 0);
          
          Opal.defn(self, '$params', TMP_ClassMethods_params_31 = function $$params() {
            var self = this, $iter = TMP_ClassMethods_params_31.$$p, block = $iter || nil;

            if ($iter) TMP_ClassMethods_params_31.$$p = null;
            return $send(self.$validator(), 'build', [], block.$to_proc())
          }, TMP_ClassMethods_params_31.$$arity = 0);
          
          Opal.defn(self, '$props_wrapper', TMP_ClassMethods_props_wrapper_32 = function $$props_wrapper() {
            var $a, self = this;
            if (self.__hyperstack_component_props_wrapper == null) self.__hyperstack_component_props_wrapper = nil;

            
            if ($truthy(self.__hyperstack_component_props_wrapper)) {
              return self.__hyperstack_component_props_wrapper};
            if ($truthy(self.$superclass()['$respond_to?']("props_wrapper"))) {
              return (self.__hyperstack_component_props_wrapper = Opal.const_get_relative($nesting, 'Class').$new(self.$superclass().$props_wrapper()))
              } else {
              return (self.__hyperstack_component_props_wrapper = ($truthy($a = self.__hyperstack_component_props_wrapper) ? $a : Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'PropsWrapper'))))
            };
          }, TMP_ClassMethods_props_wrapper_32.$$arity = 0);
          
          Opal.defn(self, '$param', TMP_ClassMethods_param_33 = function $$param($a_rest) {
            var $b, self = this, args, options = nil, name = nil, default$ = nil, $writer = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            if ($truthy(args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              
              options = args['$[]'](0);
              name = options.$first()['$[]'](0);
              default$ = options.$first()['$[]'](1);
              options.$delete(name);
              options['$merge!']($hash2(["default"], {"default": default$}));
              } else {
              
              name = args['$[]'](0);
              options = ($truthy($b = args['$[]'](1)) ? $b : $hash2([], {}));
            };
            if (options['$[]']("type")['$=='](Opal.const_get_relative($nesting, 'Proc'))) {
              
              ($truthy($b = options['$[]']("default")) ? $b : (($writer = ["default", nil]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
              if ($truthy(options['$key?']("allow_nil"))) {
                } else {
                
                $writer = ["allow_nil", true];
                $send(options, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
            if (name['$==']("class")) {
              
              name = "className";
              ($truthy($b = options['$[]']("alias")) ? $b : (($writer = ["alias", "Class"]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));};
            if ($truthy(options['$[]']("default"))) {
              return self.$validator().$optional(name, options)
              } else {
              return self.$validator().$requires(name, options)
            };
          }, TMP_ClassMethods_param_33.$$arity = -1);
          
          Opal.defn(self, '$collect_other_params_as', TMP_ClassMethods_collect_other_params_as_35 = function $$collect_other_params_as(name) {
            var TMP_34, self = this;

            return $send(self.$validator(), 'all_other_params', [name], (TMP_34 = function(){var self = TMP_34.$$s || this;

            return self.$props()}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))
          }, TMP_ClassMethods_collect_other_params_as_35.$$arity = 1);
          Opal.alias(self, "other_params", "collect_other_params_as");
          Opal.alias(self, "others", "collect_other_params_as");
          Opal.alias(self, "other", "collect_other_params_as");
          Opal.alias(self, "opts", "collect_other_params_as");
          
          Opal.defn(self, '$fires', TMP_ClassMethods_fires_37 = function $$fires(name, opts) {
            var $a, TMP_36, self = this, aka = nil;

            if (opts == null) {
              opts = $hash2([], {});
            }
            
            aka = ($truthy($a = opts['$[]']("alias")) ? $a : "" + (name) + "!");
            name = (function() {if ($truthy(name['$=~'](/^<(.+)>$/))) {
              return name.$gsub(/^<(.+)>$/, "\\1")
            } else if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Event'), 'BUILT_IN_EVENTS')['$include?']("" + "on" + (name.$event_camelize())))) {
              return "" + "on" + (name.$event_camelize())
              } else {
              return "" + "on_" + (name)
            }; return nil; })();
            self.$validator().$event(name);
            return $send(self, 'define_method', [aka], (TMP_36 = function($b_rest){var self = TMP_36.$$s || this, args, $c;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($c = self.$props()['$[]'](name), ($c === nil || $c == null) ? nil : $send($c, 'call', Opal.to_a(args)))}, TMP_36.$$s = self, TMP_36.$$arity = -1, TMP_36));
          }, TMP_ClassMethods_fires_37.$$arity = -2);
          Opal.alias(self, "triggers", "fires");
          
          Opal.defn(self, '$define_state', TMP_ClassMethods_define_state_38 = function $$define_state($a_rest) {
            var $b, TMP_39, TMP_40, self = this, states, $iter = TMP_ClassMethods_define_state_38.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            states = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              states[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_define_state_38.$$p = null;
            
            self.$deprecation_warning("'define_state' is deprecated. Use the 'state' macro to declare states.");
            default_initial_value = (function() {if ($truthy(($truthy($b = block) ? block.$arity()['$=='](0) : $b))) {
              return Opal.yieldX(block, []);
              } else {
              return nil
            }; return nil; })();
            states_hash = (function() {if ($truthy(states.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              return states.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            $send(states, 'each', [], (TMP_39 = function(name){var self = TMP_39.$$s || this;
if (name == null) name = nil;
            return self.$state($hash(name, default_initial_value))}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39));
            return $send(states_hash, 'each', [], (TMP_40 = function(name, value){var self = TMP_40.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return self.$state($hash(name, value))}, TMP_40.$$s = self, TMP_40.$$arity = 2, TMP_40));
          }, TMP_ClassMethods_define_state_38.$$arity = -1);
          
          Opal.defn(self, '$export_state', TMP_ClassMethods_export_state_41 = function $$export_state($a_rest) {
            var $b, TMP_42, TMP_43, self = this, states, $iter = TMP_ClassMethods_export_state_41.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            states = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              states[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_export_state_41.$$p = null;
            
            self.$deprecation_warning("'export_state' is deprecated. Use the 'state' macro to declare states.");
            default_initial_value = (function() {if ($truthy(($truthy($b = block) ? block.$arity()['$=='](0) : $b))) {
              return Opal.yieldX(block, []);
              } else {
              return nil
            }; return nil; })();
            states_hash = (function() {if ($truthy(states.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              return states.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            $send(states, 'each', [], (TMP_42 = function(name){var self = TMP_42.$$s || this, $writer = nil;
if (name == null) name = nil;
            
              $writer = [name, default_initial_value];
              $send(states_hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42));
            return $send(states_hash, 'each', [], (TMP_43 = function(name, value){var self = TMP_43.$$s || this, TMP_44;
if (name == null) name = nil;if (value == null) value = nil;
            
              self.$state($hash(name, value, "scope", "class", "reader", true));
              return $send(self.$singleton_class(), 'define_method', ["" + (name) + "!"], (TMP_44 = function($a_rest){var self = TMP_44.$$s || this, args;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(self.$mutate(), '__send__', [name].concat(Opal.to_a(args)))}, TMP_44.$$s = self, TMP_44.$$arity = -1, TMP_44));}, TMP_43.$$s = self, TMP_43.$$arity = 2, TMP_43));
          }, TMP_ClassMethods_export_state_41.$$arity = -1);
          
          Opal.defn(self, '$native_mixin', TMP_ClassMethods_native_mixin_45 = function $$native_mixin(item) {
            var self = this;

            return self.$native_mixins()['$<<'](item)
          }, TMP_ClassMethods_native_mixin_45.$$arity = 1);
          
          Opal.defn(self, '$native_mixins', TMP_ClassMethods_native_mixins_46 = function $$native_mixins() {
            var $a, self = this;
            if (self.__hyperstack_component_native_mixins == null) self.__hyperstack_component_native_mixins = nil;

            return (self.__hyperstack_component_native_mixins = ($truthy($a = self.__hyperstack_component_native_mixins) ? $a : []))
          }, TMP_ClassMethods_native_mixins_46.$$arity = 0);
          
          Opal.defn(self, '$static_call_back', TMP_ClassMethods_static_call_back_47 = function $$static_call_back(name) {
            var self = this, $iter = TMP_ClassMethods_static_call_back_47.$$p, block = $iter || nil, $writer = nil;

            if ($iter) TMP_ClassMethods_static_call_back_47.$$p = null;
            
            $writer = [name, block];
            $send(self.$static_call_backs(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_ClassMethods_static_call_back_47.$$arity = 1);
          
          Opal.defn(self, '$static_call_backs', TMP_ClassMethods_static_call_backs_48 = function $$static_call_backs() {
            var $a, self = this;
            if (self.__hyperstack_component_static_call_backs == null) self.__hyperstack_component_static_call_backs = nil;

            return (self.__hyperstack_component_static_call_backs = ($truthy($a = self.__hyperstack_component_static_call_backs) ? $a : $hash2([], {})))
          }, TMP_ClassMethods_static_call_backs_48.$$arity = 0);
          
          Opal.defn(self, '$export_component', TMP_ClassMethods_export_component_49 = function $$export_component(opts) {
            var $a, self = this, export_name = nil, first_name = nil, $writer = nil;

            if (opts == null) {
              opts = $hash2([], {});
            }
            
            export_name = ($truthy($a = opts['$[]']("as")) ? $a : self.$name()).$split("::");
            first_name = export_name.$first();
            
            $writer = [first_name, self.$add_item_to_tree(self.$Native(Opal.global)['$[]'](first_name), $rb_plus([Opal.const_get_relative($nesting, 'ReactWrapper').$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n()];
            $send(self.$Native(Opal.global), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, TMP_ClassMethods_export_component_49.$$arity = -1);
          
          Opal.defn(self, '$imports', TMP_ClassMethods_imports_51 = function $$imports(component_name) {
            var TMP_50, self = this, e = nil;

            return (function() { try {
            try {
              
              Opal.const_get_relative($nesting, 'ReactWrapper').$import_native_component(self, Opal.const_get_relative($nesting, 'ReactWrapper').$eval_native_react_component(component_name));
              return $send(self, 'render', [], (TMP_50 = function(){var self = TMP_50.$$s || this;

              return nil}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50));
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
                try {
                  return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
            } finally {
              self
            }; })()
          }, TMP_ClassMethods_imports_51.$$arity = 1);
          
          Opal.defn(self, '$add_item_to_tree', TMP_ClassMethods_add_item_to_tree_53 = function $$add_item_to_tree(current_tree, new_item) {
            var $a, TMP_52, self = this, $writer = nil;

            if ($truthy(($truthy($a = self.$Native(current_tree).$class()['$!='](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object'))) ? $a : new_item.$length()['$=='](1)))) {
              return $send(new_item, 'inject', [], (TMP_52 = function(a, e){var self = TMP_52.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
              return $hash(e, a)}, TMP_52.$$s = self, TMP_52.$$arity = 2, TMP_52))
              } else {
              
              
              $writer = [new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false)))];
              $send(self.$Native(current_tree), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return current_tree;
            }
          }, TMP_ClassMethods_add_item_to_tree_53.$$arity = 2);
          
          Opal.defn(self, '$to_n', TMP_ClassMethods_to_n_54 = function $$to_n() {
            var self = this;

            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$create_native_react_class(self)
          }, TMP_ClassMethods_to_n_54.$$arity = 0);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/string/filters"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$>', '$length', '$dup', '$[]', '$-', '$rindex']);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_truncate_1;

    return (Opal.defn(self, '$truncate', TMP_String_truncate_1 = function $$truncate(truncate_at, options) {
      var $a, self = this, omission = nil, length_with_room_for_omission = nil, stop = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      
      if ($truthy($rb_gt(self.$length(), truncate_at))) {
        } else {
        return self.$dup()
      };
      omission = ($truthy($a = options['$[]']("omission")) ? $a : "...");
      length_with_room_for_omission = $rb_minus(truncate_at, omission.$length());
      stop = (function() {if ($truthy(options['$[]']("separator"))) {
        return ($truthy($a = self.$rindex(options['$[]']("separator"), length_with_room_for_omission)) ? $a : length_with_room_for_omission)
        } else {
        return length_with_room_for_omission
      }; return nil; })();
      return "" + (self['$[]'](0, stop)) + (omission);
    }, TMP_String_truncate_1.$$arity = -2), nil) && 'truncate'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["set"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Set_$$_1, TMP_Set_initialize_2, TMP_Set_dup_4, TMP_Set_$_5, TMP_Set_inspect_6, TMP_Set_$eq$eq_8, TMP_Set_add_9, TMP_Set_classify_10, TMP_Set_collect$B_13, TMP_Set_delete_15, TMP_Set_delete$q_16, TMP_Set_delete_if_17, TMP_Set_add$q_20, TMP_Set_each_21, TMP_Set_empty$q_22, TMP_Set_eql$q_24, TMP_Set_clear_25, TMP_Set_include$q_26, TMP_Set_merge_28, TMP_Set_replace_29, TMP_Set_size_30, TMP_Set_subtract_32, TMP_Set_$_33, TMP_Set_superset$q_35, TMP_Set_proper_superset$q_37, TMP_Set_subset$q_39, TMP_Set_proper_subset$q_41, TMP_Set_to_a_42;

    def.hash = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', TMP_Set_$$_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary)
    }, TMP_Set_$$_1.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Set_initialize_2 = function $$initialize(enum$) {
      var TMP_3, self = this, $iter = TMP_Set_initialize_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      if ($iter) TMP_Set_initialize_2.$$p = null;
      
      self.hash = Opal.const_get_relative($nesting, 'Hash').$new();
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy(Opal.const_get_relative($nesting, 'Enumerable')['$==='](enum$))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
        } else {
        return self.$merge(enum$)
      };
    }, TMP_Set_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$dup', TMP_Set_dup_4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_Set_dup_4.$$arity = 0);
    
    Opal.defn(self, '$-', TMP_Set_$_5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_Set_$_5.$$arity = 1);
    Opal.alias(self, "difference", "-");
    
    Opal.defn(self, '$inspect', TMP_Set_inspect_6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, TMP_Set_inspect_6.$$arity = 0);
    
    Opal.defn(self, '$==', TMP_Set_$eq$eq_8 = function(other) {
      var $a, TMP_7, self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy(($truthy($a = other['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {
        return $send(other, 'all?', [], (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
        } else {
        return false
      }
    }, TMP_Set_$eq$eq_8.$$arity = 1);
    
    Opal.defn(self, '$add', TMP_Set_add_9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, TMP_Set_add_9.$$arity = 1);
    Opal.alias(self, "<<", "add");
    
    Opal.defn(self, '$classify', TMP_Set_classify_10 = function $$classify() {
      var TMP_11, TMP_12, self = this, $iter = TMP_Set_classify_10.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Set_classify_10.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_11 = function(h, k){var self = TMP_11.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
      
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
      $send(self, 'each', [], (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
      return result;
    }, TMP_Set_classify_10.$$arity = 0);
    
    Opal.defn(self, '$collect!', TMP_Set_collect$B_13 = function() {
      var TMP_14, self = this, $iter = TMP_Set_collect$B_13.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Set_collect$B_13.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
      return self.$replace(result);
    }, TMP_Set_collect$B_13.$$arity = 0);
    Opal.alias(self, "map!", "collect!");
    
    Opal.defn(self, '$delete', TMP_Set_delete_15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, TMP_Set_delete_15.$$arity = 1);
    
    Opal.defn(self, '$delete?', TMP_Set_delete$q_16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
        } else {
        return nil
      }
    }, TMP_Set_delete$q_16.$$arity = 1);
    
    Opal.defn(self, '$delete_if', TMP_Set_delete_if_17 = function $$delete_if() {try {

      var $a, TMP_18, TMP_19, self = this, $iter = TMP_Set_delete_if_17.$$p, $yield = $iter || nil;

      if ($iter) TMP_Set_delete_if_17.$$p = null;
      
      ($truthy($a = ($yield !== nil)) ? $a : Opal.ret(self.$enum_for("delete_if")));
      $send($send(self, 'select', [], (TMP_18 = function(o){var self = TMP_18.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18)), 'each', [], (TMP_19 = function(o){var self = TMP_19.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Set_delete_if_17.$$arity = 0);
    
    Opal.defn(self, '$add?', TMP_Set_add$q_20 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
        } else {
        return self.$add(o)
      }
    }, TMP_Set_add$q_20.$$arity = 1);
    
    Opal.defn(self, '$each', TMP_Set_each_21 = function $$each() {
      var self = this, $iter = TMP_Set_each_21.$$p, block = $iter || nil;

      if ($iter) TMP_Set_each_21.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, TMP_Set_each_21.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Set_empty$q_22 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, TMP_Set_empty$q_22.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Set_eql$q_24 = function(other) {
      var TMP_23, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23)))
    }, TMP_Set_eql$q_24.$$arity = 1);
    
    Opal.defn(self, '$clear', TMP_Set_clear_25 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, TMP_Set_clear_25.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Set_include$q_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, TMP_Set_include$q_26.$$arity = 1);
    Opal.alias(self, "member?", "include?");
    
    Opal.defn(self, '$merge', TMP_Set_merge_28 = function $$merge(enum$) {
      var TMP_27, self = this;

      
      $send(enum$, 'each', [], (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
      return self;
    }, TMP_Set_merge_28.$$arity = 1);
    
    Opal.defn(self, '$replace', TMP_Set_replace_29 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_Set_replace_29.$$arity = 1);
    
    Opal.defn(self, '$size', TMP_Set_size_30 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, TMP_Set_size_30.$$arity = 0);
    Opal.alias(self, "length", "size");
    
    Opal.defn(self, '$subtract', TMP_Set_subtract_32 = function $$subtract(enum$) {
      var TMP_31, self = this;

      
      $send(enum$, 'each', [], (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
      return self;
    }, TMP_Set_subtract_32.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Set_$_33 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_Set_$_33.$$arity = 1);
    
    Opal.defn(self, '$superset?', TMP_Set_superset$q_35 = function(set) {
      var $a, TMP_34, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));
    }, TMP_Set_superset$q_35.$$arity = 1);
    Opal.alias(self, ">=", "superset?");
    
    Opal.defn(self, '$proper_superset?', TMP_Set_proper_superset$q_37 = function(set) {
      var $a, TMP_36, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
    }, TMP_Set_proper_superset$q_37.$$arity = 1);
    Opal.alias(self, ">", "proper_superset?");
    
    Opal.defn(self, '$subset?', TMP_Set_subset$q_39 = function(set) {
      var $a, TMP_38, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
    }, TMP_Set_subset$q_39.$$arity = 1);
    Opal.alias(self, "<=", "subset?");
    
    Opal.defn(self, '$proper_subset?', TMP_Set_proper_subset$q_41 = function(set) {
      var $a, TMP_40, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
    }, TMP_Set_proper_subset$q_41.$$arity = 1);
    Opal.alias(self, "<", "proper_subset?");
    Opal.alias(self, "+", "|");
    Opal.alias(self, "union", "|");
    return (Opal.defn(self, '$to_a', TMP_Set_to_a_42 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, TMP_Set_to_a_42.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_set_43;

    
    Opal.defn(self, '$to_set', TMP_Enumerable_to_set_43 = function $$to_set(klass, $a_rest) {
      var self = this, args, $iter = TMP_Enumerable_to_set_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = Opal.const_get_relative($nesting, 'Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_to_set_43.$$p = null;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc())
    }, TMP_Enumerable_to_set_43.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/inflector/inflections"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$add', '$map', '$flatten', '$to_proc', '$concat', '$include?', '$downcase', '$new', '$[]', '$[]=', '$-', '$attr_reader', '$each', '$instance_variable_set', '$dup', '$send', '$is_a?', '$delete', '$unshift', '$==', '$upcase', '$plural', '$+', '$singular', '$===', '$instance']);
  
  self.$require("set");
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Inflector, self = $Inflector = $module($base, 'Inflector');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inflector_inflections_15;

      
      self.$extend(self);
      (function($base, $super, $parent_nesting) {
        function $Inflections(){};
        var self = $Inflections = $klass($base, $super, 'Inflections', $Inflections);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inflections_instance_5, TMP_Inflections_initialize_6, TMP_Inflections_initialize_dup_8, TMP_Inflections_plural_9, TMP_Inflections_singular_10, TMP_Inflections_uncountable_11, TMP_Inflections_human_12, TMP_Inflections_irregular_13, TMP_Inflections_clear_14;

        def.uncountables = def.plurals = def.singulars = def.humans = nil;
        
        self.__instance__ = $hash2([], {});
        (function($base, $super, $parent_nesting) {
          function $Uncountables(){};
          var self = $Uncountables = $klass($base, $super, 'Uncountables', $Uncountables);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Uncountables_$lt$lt_1, TMP_Uncountables_add_2, TMP_Uncountables_uncountable$q_3, TMP_Uncountables_dup_4;

          
          
          Opal.defn(self, '$<<', TMP_Uncountables_$lt$lt_1 = function($a_rest) {
            var self = this, word;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            word = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              word[$arg_idx - 0] = arguments[$arg_idx];
            }
            return self.$add(word)
          }, TMP_Uncountables_$lt$lt_1.$$arity = -1);
          
          Opal.defn(self, '$add', TMP_Uncountables_add_2 = function $$add(words) {
            var self = this;

            
            words = $send(words.$flatten(), 'map', [], "downcase".$to_proc());
            self.$concat(words);
            return self;
          }, TMP_Uncountables_add_2.$$arity = 1);
          
          Opal.defn(self, '$uncountable?', TMP_Uncountables_uncountable$q_3 = function(str) {
            var self = this;

            return self['$include?'](str.$downcase())
          }, TMP_Uncountables_uncountable$q_3.$$arity = 1);
          return (Opal.defn(self, '$dup', TMP_Uncountables_dup_4 = function $$dup() {
            var self = this, copy = nil;

            
            copy = Opal.const_get_relative($nesting, 'Uncountables').$new();
            copy.$add(self);
            return copy;
          }, TMP_Uncountables_dup_4.$$arity = 0), nil) && 'dup';
        })($nesting[0], Opal.const_get_relative($nesting, 'Array'), $nesting);
        Opal.defs(self, '$instance', TMP_Inflections_instance_5 = function $$instance(locale) {
          var $a, self = this, $writer = nil;
          if (self.__instance__ == null) self.__instance__ = nil;

          return ($truthy($a = self.__instance__['$[]'](locale)) ? $a : (($writer = [locale, self.$new()]), $send(self.__instance__, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, TMP_Inflections_instance_5.$$arity = 1);
        self.$attr_reader("plurals", "singulars", "uncountables", "humans");
        
        Opal.defn(self, '$initialize', TMP_Inflections_initialize_6 = function $$initialize() {
          var $a, self = this;

          return $a = [[], [], Opal.const_get_relative($nesting, 'Uncountables').$new(), []], (self.plurals = $a[0]), (self.singulars = $a[1]), (self.uncountables = $a[2]), (self.humans = $a[3]), $a
        }, TMP_Inflections_initialize_6.$$arity = 0);
        
        Opal.defn(self, '$initialize_dup', TMP_Inflections_initialize_dup_8 = function $$initialize_dup(orig) {
          var TMP_7, self = this;

          return $send(["plurals", "singulars", "uncountables", "humans"], 'each', [], (TMP_7 = function(scope){var self = TMP_7.$$s || this;
if (scope == null) scope = nil;
          return self.$instance_variable_set("" + "@" + (scope), orig.$send(scope).$dup())}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
        }, TMP_Inflections_initialize_dup_8.$$arity = 1);
        
        Opal.defn(self, '$plural', TMP_Inflections_plural_9 = function $$plural(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.plurals.$unshift([rule, replacement]);
        }, TMP_Inflections_plural_9.$$arity = 2);
        
        Opal.defn(self, '$singular', TMP_Inflections_singular_10 = function $$singular(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.singulars.$unshift([rule, replacement]);
        }, TMP_Inflections_singular_10.$$arity = 2);
        
        Opal.defn(self, '$uncountable', TMP_Inflections_uncountable_11 = function $$uncountable($a_rest) {
          var self = this, words;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          words = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            words[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.uncountables.$add(words)
        }, TMP_Inflections_uncountable_11.$$arity = -1);
        
        Opal.defn(self, '$human', TMP_Inflections_human_12 = function $$human(rule, replacement) {
          var self = this;

          return self.humans.$unshift([rule, replacement])
        }, TMP_Inflections_human_12.$$arity = 2);
        
        Opal.defn(self, '$irregular', TMP_Inflections_irregular_13 = function $$irregular(singular, plural) {
          var self = this, s0 = nil, srest = nil, p0 = nil, prest = nil;

          
          self.uncountables.$delete(singular);
          self.uncountables.$delete(plural);
          s0 = singular['$[]'](0);
          srest = singular['$[]']($range(1, -1, false));
          p0 = plural['$[]'](0);
          prest = plural['$[]']($range(1, -1, false));
          if (s0.$upcase()['$=='](p0.$upcase())) {
            
            self.$plural(new RegExp("" + "(" + (s0) + ")" + (srest) + "$", 'i'), $rb_plus("\\1", prest));
            self.$plural(new RegExp("" + "(" + (p0) + ")" + (prest) + "$", 'i'), $rb_plus("\\1", prest));
            self.$singular(new RegExp("" + "(" + (s0) + ")" + (srest) + "$", 'i'), $rb_plus("\\1", srest));
            return self.$singular(new RegExp("" + "(" + (p0) + ")" + (prest) + "$", 'i'), $rb_plus("\\1", srest));
            } else {
            
            self.$plural(new RegExp("" + (s0.$upcase()) + (srest) + "$", 'i'), $rb_plus(p0.$upcase(), prest));
            self.$plural(new RegExp("" + (s0.$downcase()) + (srest) + "$", 'i'), $rb_plus(p0.$downcase(), prest));
            self.$plural(new RegExp("" + (p0.$upcase()) + (prest) + "$", 'i'), $rb_plus(p0.$upcase(), prest));
            self.$plural(new RegExp("" + (p0.$downcase()) + (prest) + "$", 'i'), $rb_plus(p0.$downcase(), prest));
            self.$singular(new RegExp("" + (s0.$upcase()) + (srest) + "$", 'i'), $rb_plus(s0.$upcase(), srest));
            self.$singular(new RegExp("" + (s0.$downcase()) + (srest) + "$", 'i'), $rb_plus(s0.$downcase(), srest));
            self.$singular(new RegExp("" + (p0.$upcase()) + (prest) + "$", 'i'), $rb_plus(s0.$upcase(), srest));
            return self.$singular(new RegExp("" + (p0.$downcase()) + (prest) + "$", 'i'), $rb_plus(s0.$downcase(), srest));
          };
        }, TMP_Inflections_irregular_13.$$arity = 2);
        return (Opal.defn(self, '$clear', TMP_Inflections_clear_14 = function $$clear(scope) {
          var $a, self = this, $case = nil;

          if (scope == null) {
            scope = "all";
          }
          return (function() {$case = scope;
          if ("all"['$===']($case)) {return $a = [[], [], Opal.const_get_relative($nesting, 'Uncountables').$new(), []], (self.plurals = $a[0]), (self.singulars = $a[1]), (self.uncountables = $a[2]), (self.humans = $a[3]), $a}
          else {return self.$instance_variable_set("" + "@" + (scope), [])}})()
        }, TMP_Inflections_clear_14.$$arity = -1), nil) && 'clear';
      })($nesting[0], null, $nesting);
      
      Opal.defn(self, '$inflections', TMP_Inflector_inflections_15 = function $$inflections(locale) {
        var self = this, $iter = TMP_Inflector_inflections_15.$$p, $yield = $iter || nil;

        if (locale == null) {
          locale = "en";
        }
        if ($iter) TMP_Inflector_inflections_15.$$p = null;
        if (($yield !== nil)) {
          return Opal.yield1($yield, Opal.const_get_relative($nesting, 'Inflections').$instance(locale));
          } else {
          return Opal.const_get_relative($nesting, 'Inflections').$instance(locale)
        }
      }, TMP_Inflector_inflections_15.$$arity = -1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/inflections"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$require', '$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  
  self.$require("active_support/inflector/inflections");
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ActiveSupport_1;

    $send(Opal.const_get_relative($nesting, 'Inflector'), 'inflections', ["en"], (TMP_ActiveSupport_1 = function(inflect){var self = TMP_ActiveSupport_1.$$s || this;
if (inflect == null) inflect = nil;
    
      inflect.$plural(/$/, "s");
      inflect.$plural(/s$/i, "s");
      inflect.$plural(/^(ax|test)is$/i, "\\1es");
      inflect.$plural(/(octop|vir)us$/i, "\\1i");
      inflect.$plural(/(octop|vir)i$/i, "\\1i");
      inflect.$plural(/(alias|status)$/i, "\\1es");
      inflect.$plural(/(bu)s$/i, "\\1ses");
      inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
      inflect.$plural(/([ti])um$/i, "\\1a");
      inflect.$plural(/([ti])a$/i, "\\1a");
      inflect.$plural(/sis$/i, "ses");
      inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
      inflect.$plural(/(hive)$/i, "\\1s");
      inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
      inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
      inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
      inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
      inflect.$plural(/^(m|l)ice$/i, "\\1ice");
      inflect.$plural(/^(ox)$/i, "\\1en");
      inflect.$plural(/^(oxen)$/i, "\\1");
      inflect.$plural(/(quiz)$/i, "\\1zes");
      inflect.$singular(/s$/i, "");
      inflect.$singular(/(ss)$/i, "\\1");
      inflect.$singular(/(n)ews$/i, "\\1ews");
      inflect.$singular(/([ti])a$/i, "\\1um");
      inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/([^f])ves$/i, "\\1fe");
      inflect.$singular(/(hive)s$/i, "\\1");
      inflect.$singular(/(tive)s$/i, "\\1");
      inflect.$singular(/([lr])ves$/i, "\\1f");
      inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
      inflect.$singular(/(s)eries$/i, "\\1eries");
      inflect.$singular(/(m)ovies$/i, "\\1ovie");
      inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
      inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
      inflect.$singular(/(bus)(es)?$/i, "\\1");
      inflect.$singular(/(o)es$/i, "\\1");
      inflect.$singular(/(shoe)s$/i, "\\1");
      inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
      inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
      inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
      inflect.$singular(/(alias|status)(es)?$/i, "\\1");
      inflect.$singular(/^(ox)en/i, "\\1");
      inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
      inflect.$singular(/(matr)ices$/i, "\\1ix");
      inflect.$singular(/(quiz)zes$/i, "\\1");
      inflect.$singular(/(database)s$/i, "\\1");
      inflect.$irregular("person", "people");
      inflect.$irregular("man", "men");
      inflect.$irregular("child", "children");
      inflect.$irregular("sex", "sexes");
      inflect.$irregular("move", "moves");
      inflect.$irregular("zombie", "zombies");
      return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, TMP_ActiveSupport_1.$$s = self, TMP_ActiveSupport_1.$$arity = 1, TMP_ActiveSupport_1))
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/inflector/methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$to_s', '$sub', '$capitalize', '$downcase', '$gsub', '$freeze', '$match?', '$tr', '$dup', '$each', '$humans', '$is_a?', '$=~', '$==', '$upcase', '$>', '$length', '$+', '$[]', '$humanize', '$underscore', '$pluralize', '$camelize', '$singularize', '$rindex', '$demodulize', '$split', '$empty?', '$raise', '$size', '$first', '$shift', '$inject', '$const_get', '$const_defined?', '$ancestors', '$constantize', '$name', '$!', '$include?', '$const_regexp', '$message', '$abs', '$to_i', '$%', '$===', '$ordinal', '$private', '$blank?', '$escape', '$pop', '$reverse', '$uncountable?', '$uncountables']);
  
  self.$require("active_support/inflections");
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Inflector, self = $Inflector = $module($base, 'Inflector');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inflector_pluralize_1, TMP_Inflector_singularize_2, TMP_Inflector_camelize_5, TMP_Inflector_underscore_6, TMP_Inflector_humanize_10, TMP_Inflector_upcase_first_11, TMP_Inflector_titleize_13, TMP_Inflector_tableize_14, TMP_Inflector_classify_15, TMP_Inflector_dasherize_16, TMP_Inflector_demodulize_17, TMP_Inflector_deconstantize_18, TMP_Inflector_foreign_key_19, TMP_Inflector_constantize_22, TMP_Inflector_safe_constantize_23, TMP_Inflector_ordinal_24, TMP_Inflector_ordinalize_25, TMP_Inflector_const_regexp_27, TMP_Inflector_apply_inflections_29;

      
      self.$extend(self);
      
      Opal.defn(self, '$pluralize', TMP_Inflector_pluralize_1 = function $$pluralize(word, locale) {
        var self = this;

        if (locale == null) {
          locale = "en";
        }
        return self.$apply_inflections(word, self.$inflections(locale).$plurals(), locale)
      }, TMP_Inflector_pluralize_1.$$arity = -2);
      
      Opal.defn(self, '$singularize', TMP_Inflector_singularize_2 = function $$singularize(word, locale) {
        var self = this;

        if (locale == null) {
          locale = "en";
        }
        return self.$apply_inflections(word, self.$inflections(locale).$singulars(), locale)
      }, TMP_Inflector_singularize_2.$$arity = -2);
      
      Opal.defn(self, '$camelize', TMP_Inflector_camelize_5 = function $$camelize(term, uppercase_first_letter) {
        var TMP_3, TMP_4, self = this, string = nil;

        if (uppercase_first_letter == null) {
          uppercase_first_letter = true;
        }
        
        string = term.$to_s();
        if ($truthy(uppercase_first_letter)) {
          string = $send(string, 'sub', [/^[a-z\d]*/], (TMP_3 = function(match){var self = TMP_3.$$s || this;
if (match == null) match = nil;
          return match.$capitalize()}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
          } else {
          string = string.$downcase()
        };
        string = $send(string, 'gsub', [/(?:_|(\/))([a-z\d]*)/i], (TMP_4 = function(){var self = TMP_4.$$s || this, $a;

        return "" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$capitalize())}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
        string = string.$gsub("/".$freeze(), "::".$freeze());
        return string;
      }, TMP_Inflector_camelize_5.$$arity = -2);
      
      Opal.defn(self, '$underscore', TMP_Inflector_underscore_6 = function $$underscore(camel_cased_word) {
        var self = this, word = nil;

        
        if ($truthy(/[A-Z-]|::/['$match?'](camel_cased_word))) {
          } else {
          return camel_cased_word
        };
        word = camel_cased_word.$to_s().$gsub("::".$freeze(), "/".$freeze());
        word = word.$gsub(/([A-Z\d]+)([A-Z][a-z])/, "\\1_\\2".$freeze());
        word = word.$gsub(/([a-z\d])([A-Z])/, "\\1_\\2".$freeze());
        word = word.$tr("-".$freeze(), "_".$freeze());
        word = word.$downcase();
        return word;
      }, TMP_Inflector_underscore_6.$$arity = 1);
      
      Opal.defn(self, '$humanize', TMP_Inflector_humanize_10 = function $$humanize(lower_case_and_underscored_word, $kwargs) {
        var TMP_7, TMP_8, TMP_9, self = this, capitalize, keep_id_suffix, result = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        capitalize = $kwargs.$$smap["capitalize"];
        if (capitalize == null) {
          capitalize = true
        }
        keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
        if (keep_id_suffix == null) {
          keep_id_suffix = false
        }
        
        result = lower_case_and_underscored_word.$to_s().$dup();
        (function(){var $brk = Opal.new_brk(); try {return $send(self.$inflections().$humans(), 'each', [], (TMP_7 = function($a){var self = TMP_7.$$s || this, $a_args, rule, replacement, $b, $c;

          if ($a == null) {
            $a = nil;
          }
          $a = Opal.to_ary($a);
          $a_args = Opal.slice.call($a, 0, $a.length);
          rule = $a_args.splice(0,1)[0];
          if (rule == null) {
            rule = nil;
          }
          replacement = $a_args.splice(0,1)[0];
          if (replacement == null) {
            replacement = nil;
          }
        if ($truthy(($truthy($b = ($truthy($c = rule['$is_a?'](Opal.const_get_relative($nesting, 'Regexp'))) ? result['$=~'](rule) : $c)) ? $b : ($truthy($c = rule['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? result['$=='](rule) : $c)))) {
            
            result = result.$sub(rule, replacement);
            
            Opal.brk(nil, $brk);
            } else {
            return nil
          }}, TMP_7.$$s = self, TMP_7.$$brk = $brk, TMP_7.$$arity = 1, TMP_7.$$has_top_level_mlhs_arg = true, TMP_7))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        result = result.$sub(/^_+/, "".$freeze());
        if ($truthy(keep_id_suffix)) {
          } else {
          result = result.$sub(/_id$/, "".$freeze())
        };
        result = result.$tr("_".$freeze(), " ".$freeze());
        result = $send(result, 'gsub', [/([a-z\d]*)/i], (TMP_8 = function(match){var self = TMP_8.$$s || this;
if (match == null) match = nil;
        return "" + (match.$downcase())}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
        if ($truthy(capitalize)) {
          result = $send(result, 'sub', [/^\w/], (TMP_9 = function(match){var self = TMP_9.$$s || this;
if (match == null) match = nil;
          return match.$upcase()}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))};
        return result;
      }, TMP_Inflector_humanize_10.$$arity = -2);
      
      Opal.defn(self, '$upcase_first', TMP_Inflector_upcase_first_11 = function $$upcase_first(string) {
        var self = this;

        if ($truthy($rb_gt(string.$length(), 0))) {
          return $rb_plus(string['$[]'](0).$upcase(), string['$[]']($range(1, -1, false)))
          } else {
          return ""
        }
      }, TMP_Inflector_upcase_first_11.$$arity = 1);
      
      Opal.defn(self, '$titleize', TMP_Inflector_titleize_13 = function $$titleize(word, $kwargs) {
        var TMP_12, self = this, keep_id_suffix;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
        if (keep_id_suffix == null) {
          keep_id_suffix = false
        }
        return $send(self.$humanize(self.$underscore(word), $hash2(["keep_id_suffix"], {"keep_id_suffix": keep_id_suffix})), 'gsub', [/([a-zA-Z'’`])[a-z]*/], (TMP_12 = function(match){var self = TMP_12.$$s || this;
if (match == null) match = nil;
        return match.$capitalize()}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
      }, TMP_Inflector_titleize_13.$$arity = -2);
      
      Opal.defn(self, '$tableize', TMP_Inflector_tableize_14 = function $$tableize(class_name) {
        var self = this;

        return self.$pluralize(self.$underscore(class_name))
      }, TMP_Inflector_tableize_14.$$arity = 1);
      
      Opal.defn(self, '$classify', TMP_Inflector_classify_15 = function $$classify(table_name) {
        var self = this;

        return self.$camelize(self.$singularize(table_name.$to_s().$sub(/.*\./, "".$freeze())))
      }, TMP_Inflector_classify_15.$$arity = 1);
      
      Opal.defn(self, '$dasherize', TMP_Inflector_dasherize_16 = function $$dasherize(underscored_word) {
        var self = this;

        return underscored_word.$tr("_".$freeze(), "-".$freeze())
      }, TMP_Inflector_dasherize_16.$$arity = 1);
      
      Opal.defn(self, '$demodulize', TMP_Inflector_demodulize_17 = function $$demodulize(path) {
        var self = this, i = nil;

        
        path = path.$to_s();
        if ($truthy((i = path.$rindex("::")))) {
          return path['$[]'](Opal.Range.$new($rb_plus(i, 2), -1, false))
          } else {
          return path
        };
      }, TMP_Inflector_demodulize_17.$$arity = 1);
      
      Opal.defn(self, '$deconstantize', TMP_Inflector_deconstantize_18 = function $$deconstantize(path) {
        var $a, self = this;

        return path.$to_s()['$[]'](0, ($truthy($a = path.$rindex("::")) ? $a : 0))
      }, TMP_Inflector_deconstantize_18.$$arity = 1);
      
      Opal.defn(self, '$foreign_key', TMP_Inflector_foreign_key_19 = function $$foreign_key(class_name, separate_class_name_and_id_with_underscore) {
        var self = this;

        if (separate_class_name_and_id_with_underscore == null) {
          separate_class_name_and_id_with_underscore = true;
        }
        return $rb_plus(self.$underscore(self.$demodulize(class_name)), (function() {if ($truthy(separate_class_name_and_id_with_underscore)) {
          return "_id"
          } else {
          return "id"
        }; return nil; })())
      }, TMP_Inflector_foreign_key_19.$$arity = -2);
      
      Opal.defn(self, '$constantize', TMP_Inflector_constantize_22 = function $$constantize(camel_cased_word) {
        var $a, TMP_20, self = this, names = nil;

        
        names = camel_cased_word.$split("::");
        if ($truthy(names['$empty?']())) {
          self.$raise(Opal.const_get_relative($nesting, 'NameError'), "wrong constant name ")};
        if ($truthy(($truthy($a = $rb_gt(names.$size(), 1)) ? names.$first()['$empty?']() : $a))) {
          names.$shift()};
        return (function(){var $brk = Opal.new_brk(); try {return $send(names, 'inject', [Opal.const_get_relative($nesting, 'Object')], (TMP_20 = function(constant, name){var self = TMP_20.$$s || this, TMP_21, candidate = nil;
if (constant == null) constant = nil;if (name == null) name = nil;
        if (constant['$=='](Opal.const_get_relative($nesting, 'Object'))) {
            return constant.$const_get(name)
            } else {
            
            candidate = constant.$const_get(name);
            if ($truthy(constant['$const_defined?'](name, false))) {
              return candidate;};
            if ($truthy(Opal.const_get_relative($nesting, 'Object')['$const_defined?'](name))) {
              } else {
              return candidate;
            };
            constant = (function(){var $brk = Opal.new_brk(); try {return $send(constant.$ancestors(), 'inject', [constant], (TMP_21 = function(const$, ancestor){var self = TMP_21.$$s || this;
if (const$ == null) const$ = nil;if (ancestor == null) ancestor = nil;
            
              if (ancestor['$=='](Opal.const_get_relative($nesting, 'Object'))) {
                
                Opal.brk(const$, $brk)};
              if ($truthy(ancestor['$const_defined?'](name, false))) {
                
                Opal.brk(ancestor, $brk)};
              return const$;}, TMP_21.$$s = self, TMP_21.$$brk = $brk, TMP_21.$$arity = 2, TMP_21))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
            return constant.$const_get(name, false);
          }}, TMP_20.$$s = self, TMP_20.$$brk = $brk, TMP_20.$$arity = 2, TMP_20))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, TMP_Inflector_constantize_22.$$arity = 1);
      
      Opal.defn(self, '$safe_constantize', TMP_Inflector_safe_constantize_23 = function $$safe_constantize(camel_cased_word) {
        var $a, $b, self = this, e = nil;

        try {
          return self.$constantize(camel_cased_word)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {e = $err;
            try {
              if ($truthy(($truthy($a = e.$name()) ? ($truthy($b = camel_cased_word.$to_s().$split("::")['$include?'](e.$name().$to_s())) ? $b : e.$name().$to_s()['$=='](camel_cased_word.$to_s()))['$!']() : $a))) {
                return self.$raise()
                } else {
                return nil
              }
            } finally { Opal.pop_exception() }
          } else 
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {e = $err;
            try {
              if ($truthy(new RegExp("" + "not missing constant " + (self.$const_regexp(camel_cased_word)) + "!$")['$match?'](e.$message()))) {
                return nil
                } else {
                return self.$raise()
              }
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_Inflector_safe_constantize_23.$$arity = 1);
      
      Opal.defn(self, '$ordinal', TMP_Inflector_ordinal_24 = function $$ordinal(number) {
        var self = this, abs_number = nil, $case = nil;

        
        abs_number = number.$to_i().$abs();
        if ($truthy($range(11, 13, false)['$include?'](abs_number['$%'](100)))) {
          return "th"
          } else {
          return (function() {$case = abs_number['$%'](10);
          if ((1)['$===']($case)) {return "st"}
          else if ((2)['$===']($case)) {return "nd"}
          else if ((3)['$===']($case)) {return "rd"}
          else {return "th"}})()
        };
      }, TMP_Inflector_ordinal_24.$$arity = 1);
      
      Opal.defn(self, '$ordinalize', TMP_Inflector_ordinalize_25 = function $$ordinalize(number) {
        var self = this;

        return "" + (number) + (self.$ordinal(number))
      }, TMP_Inflector_ordinalize_25.$$arity = 1);
      self.$private();
      
      Opal.defn(self, '$const_regexp', TMP_Inflector_const_regexp_27 = function $$const_regexp(camel_cased_word) {
        var TMP_26, self = this, parts = nil, last = nil;

        
        parts = camel_cased_word.$split("::".$freeze());
        if ($truthy(parts['$blank?']())) {
          return Opal.const_get_relative($nesting, 'Regexp').$escape(camel_cased_word)};
        last = parts.$pop();
        return $send(parts.$reverse(), 'inject', [last], (TMP_26 = function(acc, part){var self = TMP_26.$$s || this;
if (acc == null) acc = nil;if (part == null) part = nil;
        if ($truthy(part['$empty?']())) {
            return acc
            } else {
            return "" + (part) + "(::" + (acc) + ")?"
          }}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26));
      }, TMP_Inflector_const_regexp_27.$$arity = 1);
      
      Opal.defn(self, '$apply_inflections', TMP_Inflector_apply_inflections_29 = function $$apply_inflections(word, rules, locale) {
        var $a, TMP_28, self = this, result = nil;

        if (locale == null) {
          locale = "en";
        }
        
        result = word.$to_s().$dup();
        if ($truthy(($truthy($a = word['$empty?']()) ? $a : self.$inflections(locale).$uncountables()['$uncountable?'](result)))) {
          return result
          } else {
          
          (function(){var $brk = Opal.new_brk(); try {return $send(rules, 'each', [], (TMP_28 = function($b){var self = TMP_28.$$s || this, $b_args, rule, replacement, $c, $d;

            if ($b == null) {
              $b = nil;
            }
            $b = Opal.to_ary($b);
            $b_args = Opal.slice.call($b, 0, $b.length);
            rule = $b_args.splice(0,1)[0];
            if (rule == null) {
              rule = nil;
            }
            replacement = $b_args.splice(0,1)[0];
            if (replacement == null) {
              replacement = nil;
            }
          if ($truthy(($truthy($c = ($truthy($d = rule['$is_a?'](Opal.const_get_relative($nesting, 'Regexp'))) ? result['$=~'](rule) : $d)) ? $c : ($truthy($d = rule['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? result['$=='](rule) : $d)))) {
              
              result = result.$sub(rule, replacement);
              
              Opal.brk(nil, $brk);
              } else {
              return nil
            }}, TMP_28.$$s = self, TMP_28.$$brk = $brk, TMP_28.$$arity = 1, TMP_28.$$has_top_level_mlhs_arg = true, TMP_28))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        };
      }, TMP_Inflector_apply_inflections_29.$$arity = -3);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/inflector"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/inflector/inflections");
  self.$require("active_support/inflector/methods");
  self.$require("active_support/inflections");
  return self.$require("active_support/core_ext/string/inflections");
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/string/inflections"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$is_a?', '$==', '$dup', '$pluralize', '$singularize', '$constantize', '$safe_constantize', '$===', '$camelize', '$raise', '$alias_method', '$titleize', '$underscore', '$dasherize', '$demodulize', '$deconstantize', '$tableize', '$classify', '$humanize', '$upcase_first', '$foreign_key']);
  
  self.$require("active_support/inflector");
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_pluralize_1, TMP_String_singularize_2, TMP_String_constantize_3, TMP_String_safe_constantize_4, TMP_String_camelize_5, TMP_String_titleize_6, TMP_String_underscore_7, TMP_String_dasherize_8, TMP_String_demodulize_9, TMP_String_deconstantize_10, TMP_String_tableize_11, TMP_String_classify_12, TMP_String_humanize_13, TMP_String_upcase_first_14, TMP_String_foreign_key_15;

    
    
    Opal.defn(self, '$pluralize', TMP_String_pluralize_1 = function $$pluralize(count, locale) {
      var self = this;

      if (count == null) {
        count = nil;
      }
      if (locale == null) {
        locale = "en";
      }
      
      if ($truthy(count['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
        locale = count};
      if (count['$=='](1)) {
        return self.$dup()
        } else {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$pluralize(self, locale)
      };
    }, TMP_String_pluralize_1.$$arity = -1);
    
    Opal.defn(self, '$singularize', TMP_String_singularize_2 = function $$singularize(locale) {
      var self = this;

      if (locale == null) {
        locale = "en";
      }
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$singularize(self, locale)
    }, TMP_String_singularize_2.$$arity = -1);
    
    Opal.defn(self, '$constantize', TMP_String_constantize_3 = function $$constantize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$constantize(self)
    }, TMP_String_constantize_3.$$arity = 0);
    
    Opal.defn(self, '$safe_constantize', TMP_String_safe_constantize_4 = function $$safe_constantize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$safe_constantize(self)
    }, TMP_String_safe_constantize_4.$$arity = 0);
    
    Opal.defn(self, '$camelize', TMP_String_camelize_5 = function $$camelize(first_letter) {
      var self = this, $case = nil;

      if (first_letter == null) {
        first_letter = "upper";
      }
      return (function() {$case = first_letter;
      if ("upper"['$===']($case)) {return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$camelize(self, true)}
      else if ("lower"['$===']($case)) {return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$camelize(self, false)}
      else {return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Invalid option, use either :upper or :lower.")}})()
    }, TMP_String_camelize_5.$$arity = -1);
    self.$alias_method("camelcase", "camelize");
    
    Opal.defn(self, '$titleize', TMP_String_titleize_6 = function $$titleize($kwargs) {
      var self = this, keep_id_suffix;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
      if (keep_id_suffix == null) {
        keep_id_suffix = false
      }
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$titleize(self, $hash2(["keep_id_suffix"], {"keep_id_suffix": keep_id_suffix}))
    }, TMP_String_titleize_6.$$arity = -1);
    self.$alias_method("titlecase", "titleize");
    
    Opal.defn(self, '$underscore', TMP_String_underscore_7 = function $$underscore() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$underscore(self)
    }, TMP_String_underscore_7.$$arity = 0);
    
    Opal.defn(self, '$dasherize', TMP_String_dasherize_8 = function $$dasherize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$dasherize(self)
    }, TMP_String_dasherize_8.$$arity = 0);
    
    Opal.defn(self, '$demodulize', TMP_String_demodulize_9 = function $$demodulize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$demodulize(self)
    }, TMP_String_demodulize_9.$$arity = 0);
    
    Opal.defn(self, '$deconstantize', TMP_String_deconstantize_10 = function $$deconstantize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$deconstantize(self)
    }, TMP_String_deconstantize_10.$$arity = 0);
    
    Opal.defn(self, '$tableize', TMP_String_tableize_11 = function $$tableize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$tableize(self)
    }, TMP_String_tableize_11.$$arity = 0);
    
    Opal.defn(self, '$classify', TMP_String_classify_12 = function $$classify() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$classify(self)
    }, TMP_String_classify_12.$$arity = 0);
    
    Opal.defn(self, '$humanize', TMP_String_humanize_13 = function $$humanize($kwargs) {
      var self = this, capitalize, keep_id_suffix;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      capitalize = $kwargs.$$smap["capitalize"];
      if (capitalize == null) {
        capitalize = true
      }
      keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
      if (keep_id_suffix == null) {
        keep_id_suffix = false
      }
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$humanize(self, $hash2(["capitalize", "keep_id_suffix"], {"capitalize": capitalize, "keep_id_suffix": keep_id_suffix}))
    }, TMP_String_humanize_13.$$arity = -1);
    
    Opal.defn(self, '$upcase_first', TMP_String_upcase_first_14 = function $$upcase_first() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$upcase_first(self)
    }, TMP_String_upcase_first_14.$$arity = 0);
    return (Opal.defn(self, '$foreign_key', TMP_String_foreign_key_15 = function $$foreign_key(separate_class_name_and_id_with_underscore) {
      var self = this;

      if (separate_class_name_and_id_with_underscore == null) {
        separate_class_name_and_id_with_underscore = true;
      }
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$foreign_key(self, separate_class_name_and_id_with_underscore)
    }, TMP_String_foreign_key_15.$$arity = -1), nil) && 'foreign_key';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub', '$strip', '$downcase']);
  
  self.$require("active_support/core_ext/string/filters");
  self.$require("active_support/core_ext/string/inflections");
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_parameterize_1;

    return (Opal.defn(self, '$parameterize', TMP_String_parameterize_1 = function $$parameterize() {
      var self = this;

      return self.$downcase().$strip().$gsub(/\W+/, "-")
    }, TMP_String_parameterize_1.$$arity = 0), nil) && 'parameterize'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/props_wrapper"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_reader', '$naming_convention', '$===', '$fix_suffix', '$camelize', '$=~', '$+', '$[]', '$respond_to?', '$superclass', '$param_accessor_style', '$dup', '$param_definitions', '$new', '$!=', '$instance_var_name_for', '$lambda', '$instance_variable_set', '$fetch_from_cache', '$==', '$[]=', '$-', '$include?', '$define_method', '$to_sym', '$props', '$call', '$to_proc', '$class', '$each_value', '$instance_exec', '$initialize', '$private', '$cache', '$equal?', '$tap', '$convert_param', '$_react_param_conversion', '$is_a?', '$collect', '$component', '$instance_variable_get']);
  
  self.$require("active_support/core_ext/string");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $PropsWrapper(){};
          var self = $PropsWrapper = $klass($base, $super, 'PropsWrapper', $PropsWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PropsWrapper_param_accessor_style_12, TMP_PropsWrapper_initialize_14, TMP_PropsWrapper_reload_15, TMP_PropsWrapper_$$_16, TMP_PropsWrapper_fetch_from_cache_18, TMP_PropsWrapper_convert_param_20, TMP_PropsWrapper_cache_22, TMP_PropsWrapper_props_23, TMP_PropsWrapper_value_for_24;

          def.component = def.cache = nil;
          
          self.$attr_reader("component");
          (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_instance_var_name_for_1, TMP_fix_suffix_2, TMP_param_accessor_style_3, TMP_param_definitions_4, TMP_define_param_8, TMP_define_all_others_10;

            
            
            Opal.defn(self, '$instance_var_name_for', TMP_instance_var_name_for_1 = function $$instance_var_name_for(name) {
              var self = this, $case = nil;

              return (function() {$case = Opal.const_get_relative($nesting, 'Hyperstack').$naming_convention();
              if ("camelize_params"['$===']($case)) {return self.$fix_suffix(name.$camelize())}
              else if ("prefix_params"['$===']($case)) {return "" + "_" + (name)}
              else {return name}})()
            }, TMP_instance_var_name_for_1.$$arity = 1);
            
            Opal.defn(self, '$fix_suffix', TMP_fix_suffix_2 = function $$fix_suffix(name) {
              var self = this;

              
              if ($truthy(name)) {
                } else {
                return nil
              };
              if ($truthy(name['$=~'](/\?$/))) {
                return $rb_plus(name['$[]']($range(0, -2, false)), "_q")
              } else if ($truthy(name['$=~'](/\!$/))) {
                return $rb_plus(name['$[]']($range(0, -2, false)), "_b")
                } else {
                return name
              };
            }, TMP_fix_suffix_2.$$arity = 1);
            
            Opal.defn(self, '$param_accessor_style', TMP_param_accessor_style_3 = function $$param_accessor_style(style) {
              var $a, self = this;
              if (self.param_accessor_style == null) self.param_accessor_style = nil;

              if (style == null) {
                style = nil;
              }
              
              if ($truthy(style)) {
                self.param_accessor_style = style};
              return (self.param_accessor_style = ($truthy($a = self.param_accessor_style) ? $a : (function() {if ($truthy(self.$superclass()['$respond_to?']("param_accessor_style"))) {
                return self.$superclass().$param_accessor_style()
                } else {
                return "hyperstack"
              }; return nil; })()));
            }, TMP_param_accessor_style_3.$$arity = -1);
            
            Opal.defn(self, '$param_definitions', TMP_param_definitions_4 = function $$param_definitions() {
              var $a, self = this;
              if (self.param_definitions == null) self.param_definitions = nil;

              return (self.param_definitions = ($truthy($a = self.param_definitions) ? $a : (function() {if ($truthy(self.$superclass()['$respond_to?']("param_definitions"))) {
                return self.$superclass().$param_definitions().$dup()
                } else {
                return Opal.const_get_relative($nesting, 'Hash').$new()
              }; return nil; })()))
            }, TMP_param_definitions_4.$$arity = 0);
            
            Opal.defn(self, '$define_param', TMP_define_param_8 = function $$define_param(name, param_type, aka) {
              var $a, TMP_5, TMP_6, TMP_7, self = this, meth_name = nil, var_name = nil, $writer = nil;

              if (aka == null) {
                aka = nil;
              }
              
              if ($truthy(($truthy($a = self.$param_accessor_style()['$!=']("legacy")) ? $a : aka))) {
                
                meth_name = ($truthy($a = aka) ? $a : name);
                var_name = ($truthy($a = self.$fix_suffix(aka)) ? $a : self.$instance_var_name_for(name));
                
                $writer = [name, $send(self, 'lambda', [], (TMP_5 = function(props){var self = TMP_5.$$s || this, val = nil;
                  if (self.component == null) self.component = nil;
if (props == null) props = nil;
                
                  self.component.$instance_variable_set("" + "@" + (var_name), (val = self.$fetch_from_cache(name, param_type, props)));
                  if (self.$param_accessor_style()['$==']("accessors")) {
                    } else {
                    return nil;
                  };
                  return self.component["" + "$" + (meth_name)] = function() { return val };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))];
                $send(self.$param_definitions(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy(["hyperstack", "accessors"]['$include?'](self.$param_accessor_style()))) {
                  return nil};};
              if (param_type['$=='](Opal.const_get_relative($nesting, 'Proc'))) {
                return $send(self, 'define_method', [name.$to_sym()], (TMP_6 = function($b_rest){var self = TMP_6.$$s || this, block, args;

                  block = TMP_6.$$p || nil;
                  if (block) TMP_6.$$p = null;
                  var $args_len = arguments.length, $rest_len = $args_len - 0;
                  if ($rest_len < 0) { $rest_len = 0; }
                  args = new Array($rest_len);
                  for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                    args[$arg_idx - 0] = arguments[$arg_idx];
                  }
                if ($truthy(self.$props()['$[]'](name))) {
                    return $send(self.$props()['$[]'](name), 'call', Opal.to_a(args), block.$to_proc())
                    } else {
                    return nil
                  }}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6))
                } else {
                return $send(self, 'define_method', [name.$to_sym()], (TMP_7 = function(){var self = TMP_7.$$s || this;

                return self.$fetch_from_cache(name, param_type, self.$props())}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))
              };
            }, TMP_define_param_8.$$arity = -3);
            return (Opal.defn(self, '$define_all_others', TMP_define_all_others_10 = function $$define_all_others(name) {
              var TMP_9, TMP_11, self = this, $iter = TMP_define_all_others_10.$$p, $yield = $iter || nil, var_name = nil, $writer = nil;

              if ($iter) TMP_define_all_others_10.$$p = null;
              
              var_name = self.$instance_var_name_for(name);
              
              $writer = [name, $send(self, 'lambda', [], (TMP_9 = function(props){var self = TMP_9.$$s || this, val = nil;
                if (self.component == null) self.component = nil;
if (props == null) props = nil;
              
                self.component.$instance_variable_set("" + "@" + (var_name), (val = Opal.yield1($yield, props)));
                if (self.$param_accessor_style()['$==']("accessors")) {
                  } else {
                  return nil;
                };
                return self.component["" + "$" + (name)] = function() { return val };}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))];
              $send(self.$param_definitions(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return $send(self, 'define_method', [name.$to_sym()], (TMP_11 = function(){var self = TMP_11.$$s || this, $a;
                if (self._all_others_cache == null) self._all_others_cache = nil;

              return (self._all_others_cache = ($truthy($a = self._all_others_cache) ? $a : Opal.yield1($yield, self.$props())))}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
            }, TMP_define_all_others_10.$$arity = 1), nil) && 'define_all_others';
          })(Opal.get_singleton_class(self), $nesting);
          
          Opal.defn(self, '$param_accessor_style', TMP_PropsWrapper_param_accessor_style_12 = function $$param_accessor_style() {
            var self = this;

            return self.$class().$param_accessor_style()
          }, TMP_PropsWrapper_param_accessor_style_12.$$arity = 0);
          
          Opal.defn(self, '$initialize', TMP_PropsWrapper_initialize_14 = function $$initialize(component, incoming) {
            var TMP_13, self = this;

            if (incoming == null) {
              incoming = nil;
            }
            
            self.component = component;
            return $send(self.$class().$param_definitions(), 'each_value', [], (TMP_13 = function(initializer){var self = TMP_13.$$s || this, $a;
if (initializer == null) initializer = nil;
            return $send(self, 'instance_exec', [($truthy($a = incoming) ? $a : self.$props())], initializer.$to_proc())}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13));
          }, TMP_PropsWrapper_initialize_14.$$arity = -2);
          
          Opal.defn(self, '$reload', TMP_PropsWrapper_reload_15 = function $$reload(next_props) {
            var self = this;

            
            self._all_others_cache = nil;
            return self.$initialize(self.component, next_props);
          }, TMP_PropsWrapper_reload_15.$$arity = 1);
          
          Opal.defn(self, '$[]', TMP_PropsWrapper_$$_16 = function(prop) {
            var self = this;

            return self.$props()['$[]'](prop)
          }, TMP_PropsWrapper_$$_16.$$arity = 1);
          self.$private();
          
          Opal.defn(self, '$fetch_from_cache', TMP_PropsWrapper_fetch_from_cache_18 = function $$fetch_from_cache(name, param_type, props) {
            var $a, $b, TMP_17, self = this, last = nil, cached_value = nil;

            
            $b = self.$cache()['$[]'](name), $a = Opal.to_ary($b), (last = ($a[0] == null ? nil : $a[0])), (cached_value = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(last['$equal?'](props['$[]'](name)))) {
              return cached_value};
            return $send(self.$convert_param(name, param_type, props), 'tap', [], (TMP_17 = function(value){var self = TMP_17.$$s || this, $writer = nil;
if (value == null) value = nil;
            
              $writer = [name, [props['$[]'](name), value]];
              $send(self.$cache(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
          }, TMP_PropsWrapper_fetch_from_cache_18.$$arity = 3);
          
          Opal.defn(self, '$convert_param', TMP_PropsWrapper_convert_param_20 = function $$convert_param(name, param_type, props) {
            var $a, TMP_19, self = this;

            if ($truthy(param_type['$respond_to?']("_react_param_conversion"))) {
              return param_type.$_react_param_conversion(props['$[]'](name), nil)
            } else if ($truthy(($truthy($a = param_type['$is_a?'](Opal.const_get_relative($nesting, 'Array'))) ? param_type['$[]'](0)['$respond_to?']("_react_param_conversion") : $a))) {
              return $send(props['$[]'](name), 'collect', [], (TMP_19 = function(param){var self = TMP_19.$$s || this;
if (param == null) param = nil;
              return param_type['$[]'](0).$_react_param_conversion(param, nil)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
              } else {
              return props['$[]'](name)
            }
          }, TMP_PropsWrapper_convert_param_20.$$arity = 3);
          
          Opal.defn(self, '$cache', TMP_PropsWrapper_cache_22 = function $$cache() {
            var $a, TMP_21, self = this;

            return (self.cache = ($truthy($a = self.cache) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_21 = function(h, k){var self = TMP_21.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
            
              $writer = [k, []];
              $send(h, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21))))
          }, TMP_PropsWrapper_cache_22.$$arity = 0);
          
          Opal.defn(self, '$props', TMP_PropsWrapper_props_23 = function $$props() {
            var self = this;

            return self.$component().$props()
          }, TMP_PropsWrapper_props_23.$$arity = 0);
          return (Opal.defn(self, '$value_for', TMP_PropsWrapper_value_for_24 = function $$value_for(name) {
            var self = this;

            if ($truthy(self['$[]'](name))) {
              return self['$[]'](name).$instance_variable_get("@value")
              } else {
              return nil
            }
          }, TMP_PropsWrapper_value_for_24.$$arity = 1), nil) && 'value_for';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$define_callback', '$add_after_error_hook', '$extend', '$respond_to?', '$!', '$<', '$allow_deprecated_render_definition?', '$deprecation_warning', '$new', '$to_a', '$mounted_components', '$each', '$include?', '$force_update!', '$name', '$class', '$event_camelize', '$to_s', '$call', '$[]', '$params', '$props_wrapper', '$on_opal_client?', '$load_context', '$observing', '$<<', '$run_callback', '$props', '$quiet_test', '$reload', '$unmount', '$remove', '$delete', '$set_state', '$==', '$method_defined?', '$raise', '$first', '$render', '$waiting_on_resources']);
  
  self.$require("hyperstack/ext/component/string");
  self.$require("hyperstack/ext/component/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("hyperstack/internal/auto_unmount");
  self.$require("hyperstack/internal/component/rendering_context");
  self.$require("hyperstack/internal/component");
  self.$require("hyperstack/internal/component/instance_methods");
  self.$require("hyperstack/internal/component/class_methods");
  self.$require("hyperstack/internal/component/props_wrapper");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Component_included_3, TMP_Component_mounted_components_4, TMP_Component_force_update$B_6, TMP_Component_deprecation_warning_7, TMP_Component_deprecation_warning_8, TMP_Component_initialize_9, TMP_Component_emit_10, TMP_Component_component_will_mount_12, TMP_Component_component_did_mount_14, TMP_Component_component_will_receive_props_16, TMP_Component_component_will_update_18, TMP_Component_component_did_update_20, TMP_Component_component_will_unmount_22, TMP_Component_component_did_catch_24, TMP_Component_mutations_25, TMP_Component_update_react_js_state_26, TMP_Component_render_27, TMP_Component_waiting_on_resources_28, TMP_Component___hyperstack_component_run_post_render_hooks_30, TMP_Component__render_wrapper_33;

      
      Opal.defs(self, '$included', TMP_Component_included_3 = function $$included(base) {
        var TMP_1, $a, self = this;

        
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'State'), 'Observer'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'InstanceMethods'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'AutoUnmount'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ShouldComponentUpdate'));
        $send(base, 'class_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2;

        
          self.$class_attribute("initial_state");
          self.$define_callback("before_mount");
          self.$define_callback("after_mount");
          self.$define_callback("before_new_params");
          self.$define_callback("before_update");
          self.$define_callback("after_update");
          self.$define_callback("__hyperstack_component_after_render_hook");
          self.$define_callback("__hyperstack_component_rescue_hook");
          return $send(self, 'define_callback', ["after_error"], (TMP_2 = function(){var self = TMP_2.$$s || this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$add_after_error_hook(base)}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
        base.$extend(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ClassMethods'));
        if ($truthy(Opal.__hyperstack_component_original_defn)) {
          return nil
          } else {
          
          
         Opal.__hyperstack_component_original_defn = Opal.defn
         Opal.defn = function(klass, name, fn) {
           (function() {if ($truthy(($truthy($a = (klass)['$respond_to?']("hyper_component?")) ? $rb_lt(klass, Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'))['$!']() : $a))) {
            if ($truthy(($truthy($a = name == '$render') ? (klass)['$allow_deprecated_render_definition?']()['$!']() : $a))) {
              return Opal.const_get_relative($nesting, 'Hyperstack').$deprecation_warning(klass, "Do not directly define the render method. Use the render macro instead.")
            } else if ($truthy(name == '$__hyperstack_component_render')) {
              return name = '$render'
              } else {
              return nil
            }
            } else {
            return nil
          }; return nil; })()
           Opal.__hyperstack_component_original_defn(klass, name, fn)
           }
         ;
          return nil;
        };
      }, TMP_Component_included_3.$$arity = 1);
      Opal.defs(self, '$mounted_components', TMP_Component_mounted_components_4 = function $$mounted_components() {
        var $a, self = this;
        if (self.__hyperstack_component_mounted_components == null) self.__hyperstack_component_mounted_components = nil;

        return (self.__hyperstack_component_mounted_components = ($truthy($a = self.__hyperstack_component_mounted_components) ? $a : Opal.const_get_relative($nesting, 'Set').$new()))
      }, TMP_Component_mounted_components_4.$$arity = 0);
      Opal.defs(self, '$force_update!', TMP_Component_force_update$B_6 = function() {
        var TMP_5, self = this, components = nil;

        
        components = self.$mounted_components().$to_a();
        return $send(components, 'each', [], (TMP_5 = function(comp){var self = TMP_5.$$s || this;
if (comp == null) comp = nil;
        
          if ($truthy(self.$mounted_components()['$include?'](comp))) {
            } else {
            return nil;
          };
          return comp['$force_update!']();}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
      }, TMP_Component_force_update$B_6.$$arity = 0);
      Opal.defs(self, '$deprecation_warning', TMP_Component_deprecation_warning_7 = function $$deprecation_warning(message) {
        var self = this;

        return Opal.const_get_relative($nesting, 'Hyperstack').$deprecation_warning(self.$name(), message)
      }, TMP_Component_deprecation_warning_7.$$arity = 1);
      
      Opal.defn(self, '$deprecation_warning', TMP_Component_deprecation_warning_8 = function $$deprecation_warning(message) {
        var self = this;

        return Opal.const_get_relative($nesting, 'Hyperstack').$deprecation_warning(self.$class().$name(), message)
      }, TMP_Component_deprecation_warning_8.$$arity = 1);
      
      Opal.defn(self, '$initialize', TMP_Component_initialize_9 = function $$initialize(native_element) {
        var self = this;

        return (self.__hyperstack_component_native = native_element)
      }, TMP_Component_initialize_9.$$arity = 1);
      
      Opal.defn(self, '$emit', TMP_Component_emit_10 = function $$emit(event_name, $a_rest) {
        var self = this, args, built_in_event_name = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'BUILT_IN_EVENTS')['$include?']((built_in_event_name = "" + "on" + (event_name.$to_s().$event_camelize()))))) {
          return $send(self.$params()['$[]'](built_in_event_name), 'call', Opal.to_a(args))
          } else {
          return $send(self.$params()['$[]']("" + "on_" + (event_name)), 'call', Opal.to_a(args))
        }
      }, TMP_Component_emit_10.$$arity = -2);
      
      Opal.defn(self, '$component_will_mount', TMP_Component_component_will_mount_12 = function $$component_will_mount() {
        var TMP_11, self = this;

        
        self.__hyperstack_component_params_wrapper = self.$class().$props_wrapper().$new(self);
        if ($truthy(Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
          Opal.const_get_relative($nesting, 'IsomorphicHelpers').$load_context(true)};
        return $send(self, 'observing', [$hash2(["immediate_update"], {"immediate_update": true})], (TMP_11 = function(){var self = TMP_11.$$s || this;

        
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component').$mounted_components()['$<<'](self);
          return self.$run_callback("before_mount", self.$props());}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
      }, TMP_Component_component_will_mount_12.$$arity = 0);
      
      Opal.defn(self, '$component_did_mount', TMP_Component_component_did_mount_14 = function $$component_did_mount() {
        var TMP_13, self = this;

        return $send(self, 'observing', [$hash2(["update_objects"], {"update_objects": true})], (TMP_13 = function(){var self = TMP_13.$$s || this;

        
          self.$run_callback("after_mount");
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$quiet_test(self);}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))
      }, TMP_Component_component_did_mount_14.$$arity = 0);
      
      Opal.defn(self, '$component_will_receive_props', TMP_Component_component_will_receive_props_16 = function $$component_will_receive_props(next_props) {
        var TMP_15, self = this;

        
        $send(self, 'observing', [$hash2(["immediate_update"], {"immediate_update": true})], (TMP_15 = function(){var self = TMP_15.$$s || this;

        return self.$run_callback("before_new_params", next_props)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
        return (self.__hyperstack_component_receiving_props = true);
      }, TMP_Component_component_will_receive_props_16.$$arity = 1);
      
      Opal.defn(self, '$component_will_update', TMP_Component_component_will_update_18 = function $$component_will_update(next_props, next_state) {
        var TMP_17, self = this;
        if (self.__hyperstack_component_receiving_props == null) self.__hyperstack_component_receiving_props = nil;
        if (self.__hyperstack_component_params_wrapper == null) self.__hyperstack_component_params_wrapper = nil;

        
        $send(self, 'observing', [], (TMP_17 = function(){var self = TMP_17.$$s || this;

        return self.$run_callback("before_update", next_props, next_state)}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17));
        if ($truthy(self.__hyperstack_component_receiving_props)) {
          self.__hyperstack_component_params_wrapper.$reload(next_props)};
        return (self.__hyperstack_component_receiving_props = false);
      }, TMP_Component_component_will_update_18.$$arity = 2);
      
      Opal.defn(self, '$component_did_update', TMP_Component_component_did_update_20 = function $$component_did_update(prev_props, prev_state) {
        var TMP_19, self = this;

        return $send(self, 'observing', [$hash2(["update_objects"], {"update_objects": true})], (TMP_19 = function(){var self = TMP_19.$$s || this;

        
          self.$run_callback("after_update", prev_props, prev_state);
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$quiet_test(self);}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19))
      }, TMP_Component_component_did_update_20.$$arity = 2);
      
      Opal.defn(self, '$component_will_unmount', TMP_Component_component_will_unmount_22 = function $$component_will_unmount() {
        var TMP_21, self = this;

        return $send(self, 'observing', [], (TMP_21 = function(){var self = TMP_21.$$s || this;

        
          self.$unmount();
          self.$remove();
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component').$mounted_components().$delete(self);}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))
      }, TMP_Component_component_will_unmount_22.$$arity = 0);
      
      Opal.defn(self, '$component_did_catch', TMP_Component_component_did_catch_24 = function $$component_did_catch(error, info) {
        var TMP_23, self = this;

        return $send(self, 'observing', [], (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$run_callback("after_error", error, info)}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23))
      }, TMP_Component_component_did_catch_24.$$arity = 2);
      
      Opal.defn(self, '$mutations', TMP_Component_mutations_25 = function $$mutations(_objects) {
        var self = this;

        return self.$set_state($hash2(["***_state_updated_at-***"], {"***_state_updated_at-***": Date.now() + Math.random()}))
      }, TMP_Component_mutations_25.$$arity = 1);
      
      Opal.defn(self, '$update_react_js_state', TMP_Component_update_react_js_state_26 = function $$update_react_js_state(object, name, value) {
        var self = this;

        if ($truthy(object)) {
          
          if (object['$=='](self)) {
            } else {
            name = "" + (object.$class()) + "." + (name)
          };
          return self.$set_state($hash("***_state_updated_at-***", Date.now() + Math.random(), name, value));
          } else {
          return self.$set_state($hash(name, value))
        }
      }, TMP_Component_update_react_js_state_26.$$arity = 3);
      if ($truthy(self['$method_defined?']("render"))) {
        } else {
        
        Opal.defn(self, '$render', TMP_Component_render_27 = function $$render() {
          var self = this;

          return self.$raise("no render defined")
        }, TMP_Component_render_27.$$arity = 0)
      };
      
      Opal.defn(self, '$waiting_on_resources', TMP_Component_waiting_on_resources_28 = function $$waiting_on_resources() {
        var self = this;
        if (self.__hyperstack_component_waiting_on_resources == null) self.__hyperstack_component_waiting_on_resources = nil;

        return self.__hyperstack_component_waiting_on_resources
      }, TMP_Component_waiting_on_resources_28.$$arity = 0);
      
      Opal.defn(self, '$__hyperstack_component_run_post_render_hooks', TMP_Component___hyperstack_component_run_post_render_hooks_30 = function $$__hyperstack_component_run_post_render_hooks(element) {
        var TMP_29, self = this;

        return $send(self, 'run_callback', ["__hyperstack_component_after_render_hook", element], (TMP_29 = function($a_rest){var self = TMP_29.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return args}, TMP_29.$$s = self, TMP_29.$$arity = -1, TMP_29)).$first()
      }, TMP_Component___hyperstack_component_run_post_render_hooks_30.$$arity = 1);
      
      Opal.defn(self, '$_render_wrapper', TMP_Component__render_wrapper_33 = function $$_render_wrapper() {
        var TMP_31, self = this;

        return $send(self, 'observing', [$hash2(["rendering"], {"rendering": true})], (TMP_31 = function(){var self = TMP_31.$$s || this, TMP_32, element = nil;

        
          element = $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [nil], (TMP_32 = function(){var self = TMP_32.$$s || this, $a;

          return ($truthy($a = self.$render()) ? $a : "")}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32));
          if ($truthy(element['$respond_to?']("waiting_on_resources"))) {
            self.__hyperstack_component_waiting_on_resources = element.$waiting_on_resources()};
          return element;}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      }, TMP_Component__render_wrapper_33.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/should_component_update"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$observing', '$respond_to?', '$!', '$call_needs_update', '$props_changed?', '$native_state_changed?', '$define_singleton_method', '$needs_update?', '$new', '$!=']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $ShouldComponentUpdate, self = $ShouldComponentUpdate = $module($base, 'ShouldComponentUpdate');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ShouldComponentUpdate_should_component_update$q_2, TMP_ShouldComponentUpdate_call_needs_update_5, TMP_ShouldComponentUpdate_native_state_changed$q_6, TMP_ShouldComponentUpdate_props_changed$q_7;

          
          
          Opal.defn(self, '$should_component_update?', TMP_ShouldComponentUpdate_should_component_update$q_2 = function(next_props, next_state) {
            var TMP_1, self = this;

            return $send(self, 'observing', [], (TMP_1 = function(){var self = TMP_1.$$s || this, $a;

            if ($truthy(self['$respond_to?']("needs_update?"))) {
                return self.$call_needs_update(next_props, next_state)['$!']()['$!']()
                } else {
                return ($truthy($a = self['$props_changed?'](next_props)) ? $a : self['$native_state_changed?'](next_state))
              }}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1))
          }, TMP_ShouldComponentUpdate_should_component_update$q_2.$$arity = 2);
          
          Opal.defn(self, '$call_needs_update', TMP_ShouldComponentUpdate_call_needs_update_5 = function $$call_needs_update(next_params, next_state) {
            var TMP_3, TMP_4, self = this, component = nil;

            
            component = self;
            $send(next_params, 'define_singleton_method', ["changed?"], (TMP_3 = function(){var self = TMP_3.$$s || this;

            return component['$props_changed?'](self)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));
            $send(next_state, 'define_singleton_method', ["changed?"], (TMP_4 = function(){var self = TMP_4.$$s || this;

            return component['$native_state_changed?'](next_state)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
            return self['$needs_update?'](next_params, next_state);
          }, TMP_ShouldComponentUpdate_call_needs_update_5.$$arity = 2);
          
          Opal.defn(self, '$native_state_changed?', TMP_ShouldComponentUpdate_native_state_changed$q_6 = function(next_state_hash) {
            var self = this, state_hash = nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            
            state_hash = Opal.const_get_relative($nesting, 'Hash').$new(self.__hyperstack_component_native.state);
            return next_state_hash['$!='](state_hash);
          }, TMP_ShouldComponentUpdate_native_state_changed$q_6.$$arity = 1);
          
          Opal.defn(self, '$props_changed?', TMP_ShouldComponentUpdate_props_changed$q_7 = function(next_props) {
            var self = this, props = nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            
            props = Opal.const_get_relative($nesting, 'Hash').$new(self.__hyperstack_component_native.props);
            return next_props['$!='](props);
          }, TMP_ShouldComponentUpdate_props_changed$q_7.$$arity = 1);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/tags"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $klass = Opal.klass;

  Opal.add_stubs(['$+', '$each', '$define_method', '$upcase', '$render', '$to_proc', '$const_set', '$downcase', '$=~', '$include?', '$create_element', '$find_component', '$find_name_and_parent', '$new', '$extend', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$_reactrb_import_component_class', '$reverse', '$to_s', '$class', '$detect', '$const_defined?', '$respond_to?']);
  
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $Tags, self = $Tags = $module($base, 'Tags');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Tags_1, TMP_Tags_html_tag_class_for_3, TMP_Tags_method_missing_4, TMP_Tags_find_component_10, TMP_Tags_lookup_const_13;

          
          Opal.const_set($nesting[0], 'HTML_TAGS', $rb_plus(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], ["circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]));
          $send(Opal.const_get_relative($nesting, 'HTML_TAGS'), 'each', [], (TMP_Tags_1 = function(tag){var self = TMP_Tags_1.$$s || this, TMP_2;
if (tag == null) tag = nil;
          
            $send(self, 'define_method', [tag.$upcase()], (TMP_2 = function($a_rest){var self = TMP_2.$$s || this, children, params;

              children = TMP_2.$$p || nil;
              if (children) TMP_2.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              params = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                params[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [tag].concat(Opal.to_a(params)), children.$to_proc())}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2));
            return self.$const_set(tag.$upcase(), tag);}, TMP_Tags_1.$$s = self, TMP_Tags_1.$$arity = 1, TMP_Tags_1));
          Opal.defs(self, '$html_tag_class_for', TMP_Tags_html_tag_class_for_3 = function $$html_tag_class_for(tag) {
            var $a, self = this, downcased_tag = nil;

            
            downcased_tag = tag.$downcase();
            if ($truthy(($truthy($a = tag['$=~'](/^[A-Z]+$/)) ? Opal.const_get_relative($nesting, 'HTML_TAGS')['$include?'](downcased_tag) : $a))) {
              return Opal.const_get_relative($nesting, 'Object').$const_set(tag, Opal.const_get_relative($nesting, 'ReactWrapper').$create_element(downcased_tag))
              } else {
              return nil
            };
          }, TMP_Tags_html_tag_class_for_3.$$arity = 1);
          
          Opal.defn(self, '$method_missing', TMP_Tags_method_missing_4 = function $$method_missing(name, $a_rest) {
            var self = this, params, $iter = TMP_Tags_method_missing_4.$$p, children = $iter || nil, component = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_Tags_method_missing_4.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            component = self.$find_component(name);
            if ($truthy(component)) {
              return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())};
            return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_Tags_method_missing_4, false), $zuper, $iter);
          }, TMP_Tags_method_missing_4.$$arity = -2);
          (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_included_7, TMP_find_name_and_parent_9;

            
            
            Opal.defn(self, '$included', TMP_included_7 = function $$included(component) {
              var $a, $b, TMP_5, self = this, name = nil, parent = nil, tag_names_module = nil;

              
              $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (parent = ($a[1] == null ? nil : $a[1])), $b;
              tag_names_module = $send(Opal.const_get_relative($nesting, 'Module'), 'new', [], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

              return $send(self, 'define_method', [name], (TMP_6 = function($c_rest){var self = TMP_6.$$s || this, children, params;

                  children = TMP_6.$$p || nil;
                  if (children) TMP_6.$$p = null;
                  var $args_len = arguments.length, $rest_len = $args_len - 0;
                  if ($rest_len < 0) { $rest_len = 0; }
                  params = new Array($rest_len);
                  for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                    params[$arg_idx - 0] = arguments[$arg_idx];
                  }
                return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
              return parent.$extend(tag_names_module);
            }, TMP_included_7.$$arity = 1);
            self.$private();
            return (Opal.defn(self, '$find_name_and_parent', TMP_find_name_and_parent_9 = function $$find_name_and_parent(component) {
              var $a, TMP_8, self = this, split_name = nil;

              
              split_name = ($truthy($a = component.$name()) ? component.$name().$split("::") : $a);
              if ($truthy(($truthy($a = split_name) ? $rb_gt(split_name.$length(), 1) : $a))) {
                return [split_name.$last(), $send(split_name, 'inject', [[Opal.const_get_relative($nesting, 'Module')]], (TMP_8 = function(a, e){var self = TMP_8.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
                return $rb_plus(a, [a.$last().$const_get(e)])}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8))['$[]'](-2)]
                } else {
                return nil
              };
            }, TMP_find_name_and_parent_9.$$arity = 1), nil) && 'find_name_and_parent';
          })(Opal.get_singleton_class(self), $nesting);
          self.$private();
          
          Opal.defn(self, '$find_component', TMP_Tags_find_component_10 = function $$find_component(name) {
            var $a, self = this, component = nil;

            
            component = self.$lookup_const(name);
            if ($truthy(($truthy($a = component) ? component['$method_defined?']("render")['$!']() : $a))) {
              self.$raise("" + (name) + " does not appear to be a react component.")};
            return ($truthy($a = component) ? $a : Opal.const_get_relative($nesting, 'Object').$_reactrb_import_component_class(name));
          }, TMP_Tags_find_component_10.$$arity = 1);
          
          Opal.defn(self, '$lookup_const', TMP_Tags_lookup_const_13 = function $$lookup_const(name) {
            var TMP_11, TMP_12, self = this, scopes = nil, scope = nil;

            
            if ($truthy(name['$=~'](/^[A-Z]/))) {
              } else {
              return nil
            };
            scopes = $send(self.$class().$name().$to_s().$split("::"), 'inject', [[Opal.const_get_relative($nesting, 'Object')]], (TMP_11 = function(nesting, next_const){var self = TMP_11.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
            return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11)).$reverse();
            scope = $send(scopes, 'detect', [], (TMP_12 = function(s){var self = TMP_12.$$s || this;
if (s == null) s = nil;
            return s['$const_defined?'](name, false)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
            if ($truthy(scope)) {
              return scope.$const_get(name, false)
              } else {
              return nil
            };
          }, TMP_Tags_lookup_const_13.$$arity = 1);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  if ($truthy(Opal.const_get_relative($nesting, 'Object')['$respond_to?']("_reactrb_import_component_class"))) {
    return nil
    } else {
    return (function($base, $super, $parent_nesting) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object__reactrb_import_component_class_14;

      return Opal.defs(self, '$_reactrb_import_component_class', TMP_Object__reactrb_import_component_class_14 = function $$_reactrb_import_component_class(_name) {
        var self = this;

        return nil
      }, TMP_Object__reactrb_import_component_class_14.$$arity = 1)
    })($nesting[0], null, $nesting)
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Event(){};
        var self = $Event = $klass($base, $super, 'Event', $Event);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Event_initialize_1;

        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        self.$alias_native("bubbles", "bubbles");
        self.$alias_native("cancelable", "cancelable");
        self.$alias_native("current_target", "currentTarget");
        self.$alias_native("default_prevented", "defaultPrevented");
        self.$alias_native("event_phase", "eventPhase");
        self.$alias_native("is_trusted?", "isTrusted");
        self.$alias_native("native_event", "nativeEvent");
        self.$alias_native("target", "target");
        self.$alias_native("timestamp", "timeStamp");
        self.$alias_native("event_type", "type");
        self.$alias_native("prevent_default", "preventDefault");
        self.$alias_native("stop_propagation", "stopPropagation");
        self.$alias_native("clipboard_data", "clipboardData");
        self.$alias_native("alt_key", "altKey");
        self.$alias_native("char_code", "charCode");
        self.$alias_native("ctrl_key", "ctrlKey");
        self.$alias_native("get_modifier_state", "getModifierState");
        self.$alias_native("key", "key");
        self.$alias_native("key_code", "keyCode");
        self.$alias_native("locale", "locale");
        self.$alias_native("location", "location");
        self.$alias_native("meta_key", "metaKey");
        self.$alias_native("repeat", "repeat");
        self.$alias_native("shift_key", "shiftKey");
        self.$alias_native("which", "which");
        self.$alias_native("related_target", "relatedTarget");
        self.$alias_native("button", "button");
        self.$alias_native("buttons", "buttons");
        self.$alias_native("client_x", "clientX");
        self.$alias_native("client_y", "clientY");
        self.$alias_native("get_modifier_state", "getModifierState");
        self.$alias_native("page_x", "pageX");
        self.$alias_native("page_y", "pageY");
        self.$alias_native("screen_x", "screen_x");
        self.$alias_native("screen_y", "screen_y");
        self.$alias_native("changed_touches", "changedTouches");
        self.$alias_native("target_touches", "targetTouches");
        self.$alias_native("touches", "touches");
        self.$alias_native("detail", "detail");
        self.$alias_native("view", "view");
        self.$alias_native("delta_mode", "deltaMode");
        self.$alias_native("delta_x", "deltaX");
        self.$alias_native("delta_y", "deltaY");
        self.$alias_native("delta_z", "deltaZ");
        Opal.const_set($nesting[0], 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onSelect", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll", "onWheel"]);
        return (Opal.defn(self, '$initialize', TMP_Event_initialize_1 = function $$initialize(native_event) {
          var self = this;

          return (self["native"] = native_event)
        }, TMP_Event_initialize_1.$$arity = 1), nil) && 'initialize';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/object"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$_reactrb_tag_original_const_missing', '$html_tag_class_for', '$raise', '$object_id']);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_key_2;

    
    (function($base, $super, $parent_nesting) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_const_missing_1;

        
        Opal.alias(self, "_reactrb_tag_original_const_missing", "const_missing");
        return (Opal.defn(self, '$const_missing', TMP_const_missing_1 = function $$const_missing(const_name) {
          var $a, self = this, e = nil;

          try {
            return self.$_reactrb_tag_original_const_missing(const_name)
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {e = $err;
              try {
                return ($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags').$html_tag_class_for(const_name)) ? $a : self.$raise(e))
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, TMP_const_missing_1.$$arity = 1), nil) && 'const_missing';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], null, $nesting);
    return (Opal.defn(self, '$to_key', TMP_Object_to_key_2 = function $$to_key() {
      var self = this;

      return self.$object_id()
    }, TMP_Object_to_key_2.$$arity = 0), nil) && 'to_key';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/kernel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$tap', '$new', '$after', '$resolve', '$call']);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_pause_1;

    
    
    Opal.defn(self, '$pause', TMP_Kernel_pause_1 = function $$pause(s) {
      var TMP_2, self = this, $iter = TMP_Kernel_pause_1.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_pause_1.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'Promise').$new(), 'tap', [], (TMP_2 = function(p){var self = TMP_2.$$s || this, TMP_3;
if (p == null) p = nil;
      return $send(self, 'after', [s], (TMP_3 = function(){var self = TMP_3.$$s || this, $a;

        return $send(p, 'resolve', Opal.to_a(($truthy($a = block) ? [block.$call()] : $a)))}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))
    }, TMP_Kernel_pause_1.$$arity = 1);
    Opal.alias(self, "busy_sleep", "sleep");
    Opal.alias(self, "sleep", "pause");
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/number"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Number_to_key_1;

    return (Opal.defn(self, '$to_key', TMP_Number_to_key_1 = function $$to_key() {
      var self = this;

      return self
    }, TMP_Number_to_key_1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/boolean"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_key_1;

    return (Opal.defn(self, '$to_key', TMP_Boolean_to_key_1 = function $$to_key() {
      var self = this;

      return self
    }, TMP_Boolean_to_key_1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_enum', '$size', '$reject!', '$<<']);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_extract$B_1;

    return (Opal.defn(self, '$extract!', TMP_Array_extract$B_1 = function() {
      var TMP_2, TMP_3, self = this, $iter = TMP_Array_extract$B_1.$$p, $yield = $iter || nil, extracted_elements = nil;

      if ($iter) TMP_Array_extract$B_1.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return $send(self, 'to_enum', ["extract!"], (TMP_2 = function(){var self = TMP_2.$$s || this;

        return self.$size()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
      };
      extracted_elements = [];
      $send(self, 'reject!', [], (TMP_3 = function(element){var self = TMP_3.$$s || this;
if (element == null) element = nil;
      if ($truthy(Opal.yield1($yield, element))) {
          return extracted_elements['$<<'](element)
          } else {
          return nil
        }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
      return extracted_elements;
    }, TMP_Array_extract$B_1.$$arity = 0), nil) && 'extract!'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/enumerable"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$private_constant', '$each', '$[]=', '$-', '$!=', '$to_enum', '$respond_to?', '$size']);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_index_with_1;

    
    Opal.const_set($nesting[0], 'INDEX_WITH_DEFAULT', Opal.const_get_relative($nesting, 'Object').$new());
    self.$private_constant("INDEX_WITH_DEFAULT");
    
    Opal.defn(self, '$index_with', TMP_Enumerable_index_with_1 = function $$index_with(default$) {
      var TMP_2, TMP_3, TMP_4, self = this, $iter = TMP_Enumerable_index_with_1.$$p, $yield = $iter || nil, result = nil;

      if (default$ == null) {
        default$ = Opal.const_get_relative($nesting, 'INDEX_WITH_DEFAULT');
      }
      if ($iter) TMP_Enumerable_index_with_1.$$p = null;
      if (($yield !== nil)) {
        
        result = $hash2([], {});
        $send(self, 'each', [], (TMP_2 = function(elem){var self = TMP_2.$$s || this, $writer = nil;
if (elem == null) elem = nil;
        
          $writer = [elem, Opal.yield1($yield, elem)];
          $send(result, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        return result;
      } else if ($truthy(default$['$!='](Opal.const_get_relative($nesting, 'INDEX_WITH_DEFAULT')))) {
        
        result = $hash2([], {});
        $send(self, 'each', [], (TMP_3 = function(elem){var self = TMP_3.$$s || this, $writer = nil;
if (elem == null) elem = nil;
        
          $writer = [elem, default$];
          $send(result, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        return result;
        } else {
        return $send(self, 'to_enum', ["index_with"], (TMP_4 = function(){var self = TMP_4.$$s || this;

        if ($truthy(self['$respond_to?']("size"))) {
            return self.$size()
            } else {
            return nil
          }}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4))
      }
    }, TMP_Enumerable_index_with_1.$$arity = -1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["json"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_JSON_$$_1, TMP_JSON_parse_2, TMP_JSON_parse$B_3, TMP_JSON_load_4, TMP_JSON_from_object_5, TMP_JSON_generate_6, TMP_JSON_dump_7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      function $JSONError(){};
      var self = $JSONError = $klass($base, $super, 'JSONError', $JSONError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ParserError(){};
      var self = $ParserError = $klass($base, $super, 'ParserError', $ParserError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]'](Opal.const_get_relative($nesting, 'JSON').$create_id())) != nil) {
              return Opal.const_get_qualified('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', TMP_JSON_$$_1 = function(value, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      }
    }, TMP_JSON_$$_1.$$arity = -2);
    Opal.defs(self, '$parse', TMP_JSON_parse_2 = function $$parse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})))
    }, TMP_JSON_parse_2.$$arity = -2);
    Opal.defs(self, '$parse!', TMP_JSON_parse$B_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options)
    }, TMP_JSON_parse$B_3.$$arity = -2);
    Opal.defs(self, '$load', TMP_JSON_load_4 = function $$load(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options)
    }, TMP_JSON_load_4.$$arity = -2);
    Opal.defs(self, '$from_object', TMP_JSON_from_object_5 = function $$from_object(js_object, options) {
      var $a, self = this, $writer = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      
      ($truthy($a = options['$[]']("object_class")) ? $a : (($writer = ["object_class", Opal.const_get_relative($nesting, 'Hash')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      ($truthy($a = options['$[]']("array_class")) ? $a : (($writer = ["array_class", Opal.const_get_relative($nesting, 'Array')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return to_opal(js_object, options.$$smap);
    }, TMP_JSON_from_object_5.$$arity = -2);
    Opal.defs(self, '$generate', TMP_JSON_generate_6 = function $$generate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options)
    }, TMP_JSON_generate_6.$$arity = -2);
    Opal.defs(self, '$dump', TMP_JSON_dump_7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_JSON_dump_7.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_json_8;

    return (Opal.defn(self, '$to_json', TMP_Object_to_json_8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Object_to_json_8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_json_9;

    
    Opal.defn(self, '$to_json', TMP_Enumerable_to_json_9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, TMP_Enumerable_to_json_9.$$arity = 0)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_json_10;

    return (Opal.defn(self, '$to_json', TMP_Array_to_json_10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_Array_to_json_10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_json_11;

    return (Opal.defn(self, '$to_json', TMP_Boolean_to_json_11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false'
    }, TMP_Boolean_to_json_11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_to_json_12;

    return (Opal.defn(self, '$to_json', TMP_Hash_to_json_12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    
    }, TMP_Hash_to_json_12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_json_13;

    return (Opal.defn(self, '$to_json', TMP_NilClass_to_json_13 = function $$to_json() {
      var self = this;

      return "null"
    }, TMP_NilClass_to_json_13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_json_14;

    return (Opal.defn(self, '$to_json', TMP_Numeric_to_json_14 = function $$to_json() {
      var self = this;

      return self.toString()
    }, TMP_Numeric_to_json_14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return Opal.alias(self, "to_json", "inspect")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_json_15;

    return (Opal.defn(self, '$to_json', TMP_Time_to_json_15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, TMP_Time_to_json_15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Date_to_json_16, TMP_Date_as_json_17;

    
    
    Opal.defn(self, '$to_json', TMP_Date_to_json_16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Date_to_json_16.$$arity = 0);
    return (Opal.defn(self, '$as_json', TMP_Date_as_json_17 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, TMP_Date_as_json_17.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/isomorphic_helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$!=', '$!', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$production?', '$env', '$+', '$[]', '$class', '$on_opal_client?', '$join', '$collect', '$prerender_footer_blocks', '$call', '$attr_reader', '$[]=', '$-', '$run', '$each', '$before_first_mount_blocks', '$send_to_opal', '$eval', '$length', '$load!', '$tr', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$send', '$result']);
  
  self.$require("hyperstack/internal/component");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $IsomorphicHelpers, self = $IsomorphicHelpers = $module($base, 'IsomorphicHelpers');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IsomorphicHelpers_included_1, TMP_IsomorphicHelpers_load_context_2, TMP_IsomorphicHelpers_context_3, TMP_IsomorphicHelpers_log_4, TMP_IsomorphicHelpers_on_opal_server$q_5, TMP_IsomorphicHelpers_on_opal_client$q_6, TMP_IsomorphicHelpers_log_7, TMP_IsomorphicHelpers_on_opal_server$q_8, TMP_IsomorphicHelpers_on_opal_client$q_9, TMP_IsomorphicHelpers_prerender_footers_11;

        
        Opal.defs(self, '$included', TMP_IsomorphicHelpers_included_1 = function $$included(base) {
          var self = this;

          return base.$extend(Opal.const_get_relative($nesting, 'ClassMethods'))
        }, TMP_IsomorphicHelpers_included_1.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil
          } else {
          Opal.defs(self, '$load_context', TMP_IsomorphicHelpers_load_context_2 = function $$load_context(unique_id, name) {
            var $a, $b, self = this, message = nil;
            if (self.context == null) self.context = nil;

            if (unique_id == null) {
              unique_id = nil;
            }
            if (name == null) {
              name = nil;
            }
            
            if ($truthy(($truthy($a = ($truthy($b = unique_id['$!']()) ? $b : self.context['$!']())) ? $a : self.context.$unique_id()['$!='](unique_id)))) {
              
              message = (function() {if ($truthy(self['$on_opal_server?']())) {
                
                try {
                  console.history = []
                } catch ($err) {
                  if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                    try {
                      nil
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                };
                return "" + "************************ React Prerendering Context Initialized " + (name) + " ***********************";
                } else {
                return "************************ React Browser Context Initialized ****************************"
              }; return nil; })();
              self.$log(message);
              self.context = Opal.const_get_relative($nesting, 'Context').$new(unique_id);};
            return true;
          }, TMP_IsomorphicHelpers_load_context_2.$$arity = -1)
        };
        Opal.defs(self, '$context', TMP_IsomorphicHelpers_context_3 = function $$context() {
          var self = this;
          if (self.context == null) self.context = nil;

          return self.context
        }, TMP_IsomorphicHelpers_context_3.$$arity = 0);
        Opal.defs(self, '$log', TMP_IsomorphicHelpers_log_4 = function $$log(message, message_type) {
          var $a, $b, self = this, style = nil;

          if (message_type == null) {
            message_type = "info";
          }
          
          if ($truthy(message['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
            } else {
            message = [message]
          };
          if ($truthy(($truthy($a = ($truthy($b = message_type['$==']("info")) ? $b : message_type['$==']("warning"))) ? Opal.const_get_relative($nesting, 'Hyperstack').$env()['$production?']() : $a))) {
            return nil};
          if (message_type['$==']("info")) {
            
            if ($truthy(self['$on_opal_server?']())) {
              style = "background: #00FFFF; color: red"
              } else {
              style = "background: #222; color: #bada55"
            };
            message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
            return console.log.apply(console, message);
          } else if (message_type['$==']("warning")) {
            return console.warn.apply(console, message)
            } else {
            return console.error.apply(console, message)
          };
        }, TMP_IsomorphicHelpers_log_4.$$arity = -2);
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil
          } else {
          
          Opal.defs(self, '$on_opal_server?', TMP_IsomorphicHelpers_on_opal_server$q_5 = function() {
            var self = this;

            return typeof Opal.global.document === 'undefined'
          }, TMP_IsomorphicHelpers_on_opal_server$q_5.$$arity = 0);
          Opal.defs(self, '$on_opal_client?', TMP_IsomorphicHelpers_on_opal_client$q_6 = function() {
            var self = this;

            return self['$on_opal_server?']()['$!']()
          }, TMP_IsomorphicHelpers_on_opal_client$q_6.$$arity = 0);
        };
        
        Opal.defn(self, '$log', TMP_IsomorphicHelpers_log_7 = function $$log($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args))
        }, TMP_IsomorphicHelpers_log_7.$$arity = -1);
        
        Opal.defn(self, '$on_opal_server?', TMP_IsomorphicHelpers_on_opal_server$q_8 = function() {
          var self = this;

          return self.$class()['$on_opal_server?']()
        }, TMP_IsomorphicHelpers_on_opal_server$q_8.$$arity = 0);
        
        Opal.defn(self, '$on_opal_client?', TMP_IsomorphicHelpers_on_opal_client$q_9 = function() {
          var self = this;

          return self.$class()['$on_opal_client?']()
        }, TMP_IsomorphicHelpers_on_opal_client$q_9.$$arity = 0);
        Opal.defs(self, '$prerender_footers', TMP_IsomorphicHelpers_prerender_footers_11 = function $$prerender_footers(controller) {
          var TMP_10, self = this, footer = nil;

          if (controller == null) {
            controller = nil;
          }
          
          footer = $send(Opal.const_get_relative($nesting, 'Context').$prerender_footer_blocks(), 'collect', [], (TMP_10 = function(block){var self = TMP_10.$$s || this;
if (block == null) block = nil;
          return block.$call(controller)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10)).$join("\n");
          if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
            nil};
          return footer;
        }, TMP_IsomorphicHelpers_prerender_footers_11.$$arity = -1);
        (function($base, $super, $parent_nesting) {
          function $Context(){};
          var self = $Context = $klass($base, $super, 'Context', $Context);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Context_define_isomorphic_method_12, TMP_Context_before_first_mount_blocks_13, TMP_Context_prerender_footer_blocks_14, TMP_Context_initialize_16, TMP_Context_load_opal_context_17, TMP_Context_eval_18, TMP_Context_send_to_opal_20, TMP_Context_register_before_first_mount_block_21, TMP_Context_register_prerender_footer_block_22;

          def.unique_id = def.cname = def.ctx = nil;
          
          self.$attr_reader("controller");
          self.$attr_reader("unique_id");
          Opal.defs(self, '$define_isomorphic_method', TMP_Context_define_isomorphic_method_12 = function $$define_isomorphic_method(method_name) {
            var $a, $b, self = this, $iter = TMP_Context_define_isomorphic_method_12.$$p, block = $iter || nil, $writer = nil;

            if ($iter) TMP_Context_define_isomorphic_method_12.$$p = null;
            
            (Opal.class_variable_set($Context, '@@ctx_methods', ($truthy($a = (($b = $Context.$$cvars['@@ctx_methods']) == null ? nil : $b)) ? $a : $hash2([], {}))));
            
            $writer = [method_name, block];
            $send((($a = $Context.$$cvars['@@ctx_methods']) == null ? nil : $a), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, TMP_Context_define_isomorphic_method_12.$$arity = 1);
          Opal.defs(self, '$before_first_mount_blocks', TMP_Context_before_first_mount_blocks_13 = function $$before_first_mount_blocks() {
            var $a, self = this;
            if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

            return (self.before_first_mount_blocks = ($truthy($a = self.before_first_mount_blocks) ? $a : []))
          }, TMP_Context_before_first_mount_blocks_13.$$arity = 0);
          Opal.defs(self, '$prerender_footer_blocks', TMP_Context_prerender_footer_blocks_14 = function $$prerender_footer_blocks() {
            var $a, self = this;
            if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

            return (self.prerender_footer_blocks = ($truthy($a = self.prerender_footer_blocks) ? $a : []))
          }, TMP_Context_prerender_footer_blocks_14.$$arity = 0);
          
          Opal.defn(self, '$initialize', TMP_Context_initialize_16 = function $$initialize(unique_id, ctx, controller, cname) {
            var TMP_15, self = this;

            if (ctx == null) {
              ctx = nil;
            }
            if (controller == null) {
              controller = nil;
            }
            if (cname == null) {
              cname = nil;
            }
            
            self.unique_id = unique_id;
            self.cname = cname;
            if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
              nil};
            Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Application'), 'Boot').$run($hash2(["context"], {"context": self}));
            return $send(self.$class().$before_first_mount_blocks(), 'each', [], (TMP_15 = function(block){var self = TMP_15.$$s || this;
if (block == null) block = nil;
            return block.$call(self)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15));
          }, TMP_Context_initialize_16.$$arity = -2);
          
          Opal.defn(self, '$load_opal_context', TMP_Context_load_opal_context_17 = function $$load_opal_context() {
            var self = this;

            return self.$send_to_opal("load_context", self.unique_id, self.cname)
          }, TMP_Context_load_opal_context_17.$$arity = 0);
          
          Opal.defn(self, '$eval', TMP_Context_eval_18 = function(js) {
            var self = this;

            if ($truthy(self.ctx)) {
              return self.ctx.$eval(js)
              } else {
              return nil
            }
          }, TMP_Context_eval_18.$$arity = 1);
          
          Opal.defn(self, '$send_to_opal', TMP_Context_send_to_opal_20 = function $$send_to_opal(method_name, $a_rest) {
            var TMP_19, self = this, args, method_args = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            
            if ($truthy(self.ctx)) {
              } else {
              return nil
            };
            if (args.$length()['$=='](0)) {
              args = [1]};
            Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Rails'), 'ComponentLoader').$new(self.ctx)['$load!']();
            method_args = $send(args, 'collect', [], (TMP_19 = function(arg){var self = TMP_19.$$s || this, quarg = nil;
if (arg == null) arg = nil;
            
              quarg = ("" + (arg)).$tr("\"", "'");
              return "" + "\"" + (quarg) + "\"";}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19)).$join(", ");
            return self.ctx.$eval("" + "Opal.Hyperstack.$const_get('Component').$const_get('IsomorphicHelpers').$" + (method_name) + "(" + (method_args) + ")");
          }, TMP_Context_send_to_opal_20.$$arity = -2);
          Opal.defs(self, '$register_before_first_mount_block', TMP_Context_register_before_first_mount_block_21 = function $$register_before_first_mount_block() {
            var self = this, $iter = TMP_Context_register_before_first_mount_block_21.$$p, block = $iter || nil;

            if ($iter) TMP_Context_register_before_first_mount_block_21.$$p = null;
            return self.$before_first_mount_blocks()['$<<'](block)
          }, TMP_Context_register_before_first_mount_block_21.$$arity = 0);
          return Opal.defs(self, '$register_prerender_footer_block', TMP_Context_register_prerender_footer_block_22 = function $$register_prerender_footer_block() {
            var self = this, $iter = TMP_Context_register_prerender_footer_block_22.$$p, block = $iter || nil;

            if ($iter) TMP_Context_register_prerender_footer_block_22.$$p = null;
            return self.$prerender_footer_blocks()['$<<'](block)
          }, TMP_Context_register_prerender_footer_block_22.$$arity = 0);
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          function $IsomorphicProcCall(){};
          var self = $IsomorphicProcCall = $klass($base, $super, 'IsomorphicProcCall', $IsomorphicProcCall);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IsomorphicProcCall_result_23, TMP_IsomorphicProcCall_initialize_24, TMP_IsomorphicProcCall_when_on_client_25, TMP_IsomorphicProcCall_send_to_server_26, TMP_IsomorphicProcCall_when_on_server_27;

          def.result = def.name = nil;
          
          self.$attr_reader("context");
          
          Opal.defn(self, '$result', TMP_IsomorphicProcCall_result_23 = function $$result() {
            var self = this;

            if ($truthy(self.result)) {
              return self.result.$first()
              } else {
              return nil
            }
          }, TMP_IsomorphicProcCall_result_23.$$arity = 0);
          
          Opal.defn(self, '$initialize', TMP_IsomorphicProcCall_initialize_24 = function $$initialize(name, block, context, $a_rest) {
            var $b, self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 3;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 3] = arguments[$arg_idx];
            }
            
            self.name = name;
            self.context = context;
            $send(block, 'call', [self].concat(Opal.to_a(args)));
            return (self.result = ($truthy($b = self.result) ? $b : $send(self, 'send_to_server', Opal.to_a(args))));
          }, TMP_IsomorphicProcCall_initialize_24.$$arity = -4);
          
          Opal.defn(self, '$when_on_client', TMP_IsomorphicProcCall_when_on_client_25 = function $$when_on_client() {
            var self = this, $iter = TMP_IsomorphicProcCall_when_on_client_25.$$p, block = $iter || nil;

            if ($iter) TMP_IsomorphicProcCall_when_on_client_25.$$p = null;
            if ($truthy(Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
              return (self.result = [block.$call()])
              } else {
              return nil
            }
          }, TMP_IsomorphicProcCall_when_on_client_25.$$arity = 0);
          
          Opal.defn(self, '$send_to_server', TMP_IsomorphicProcCall_send_to_server_26 = function $$send_to_server($a_rest) {
            var self = this, args, method_string = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($truthy(Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']())) {
              
              method_string = $rb_plus($rb_plus($rb_plus($rb_plus("ServerSideIsomorphicMethod.", self.name), "("), args.$to_json()), ")");
              return (self.result = [Opal.const_get_relative($nesting, 'JSON').$parse(eval(method_string))]);
              } else {
              return nil
            }
          }, TMP_IsomorphicProcCall_send_to_server_26.$$arity = -1);
          return (Opal.defn(self, '$when_on_server', TMP_IsomorphicProcCall_when_on_server_27 = function $$when_on_server() {
            var $a, self = this, $iter = TMP_IsomorphicProcCall_when_on_server_27.$$p, block = $iter || nil;

            if ($iter) TMP_IsomorphicProcCall_when_on_server_27.$$p = null;
            if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']()) ? $a : Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']()))) {
              return nil
              } else {
              return (self.result = [block.$call().$to_json()])
            }
          }, TMP_IsomorphicProcCall_when_on_server_27.$$arity = 0), nil) && 'when_on_server';
        })($nesting[0], null, $nesting);
        (function($base, $parent_nesting) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_on_opal_server$q_28, TMP_ClassMethods_on_opal_client$q_29, TMP_ClassMethods_log_30, TMP_ClassMethods_controller_31, TMP_ClassMethods_before_first_mount_32, TMP_ClassMethods_prerender_footer_33, TMP_ClassMethods_isomorphic_method_34;

          
          
          Opal.defn(self, '$on_opal_server?', TMP_ClassMethods_on_opal_server$q_28 = function() {
            var self = this;

            return Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']()
          }, TMP_ClassMethods_on_opal_server$q_28.$$arity = 0);
          
          Opal.defn(self, '$on_opal_client?', TMP_ClassMethods_on_opal_client$q_29 = function() {
            var self = this;

            return Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']()
          }, TMP_ClassMethods_on_opal_client$q_29.$$arity = 0);
          
          Opal.defn(self, '$log', TMP_ClassMethods_log_30 = function $$log($a_rest) {
            var self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            return $send(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args))
          }, TMP_ClassMethods_log_30.$$arity = -1);
          
          Opal.defn(self, '$controller', TMP_ClassMethods_controller_31 = function $$controller() {
            var self = this;

            return Opal.const_get_relative($nesting, 'IsomorphicHelpers').$context().$controller()
          }, TMP_ClassMethods_controller_31.$$arity = 0);
          
          Opal.defn(self, '$before_first_mount', TMP_ClassMethods_before_first_mount_32 = function $$before_first_mount() {
            var self = this, $iter = TMP_ClassMethods_before_first_mount_32.$$p, block = $iter || nil;

            if ($iter) TMP_ClassMethods_before_first_mount_32.$$p = null;
            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'Context'), 'register_before_first_mount_block', [], block.$to_proc())
          }, TMP_ClassMethods_before_first_mount_32.$$arity = 0);
          
          Opal.defn(self, '$prerender_footer', TMP_ClassMethods_prerender_footer_33 = function $$prerender_footer() {
            var self = this, $iter = TMP_ClassMethods_prerender_footer_33.$$p, block = $iter || nil;

            if ($iter) TMP_ClassMethods_prerender_footer_33.$$p = null;
            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'Context'), 'register_prerender_footer_block', [], block.$to_proc())
          }, TMP_ClassMethods_prerender_footer_33.$$arity = 0);
          if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
            nil
            } else {
            
            self.$require("json");
            
            Opal.defn(self, '$isomorphic_method', TMP_ClassMethods_isomorphic_method_34 = function $$isomorphic_method(name) {
              var TMP_35, self = this, $iter = TMP_ClassMethods_isomorphic_method_34.$$p, block = $iter || nil;

              if ($iter) TMP_ClassMethods_isomorphic_method_34.$$p = null;
              return $send(self.$class(), 'send', ["define_method", name], (TMP_35 = function($a_rest){var self = TMP_35.$$s || this, args;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'IsomorphicProcCall'), 'new', [name, block, self].concat(Opal.to_a(args))).$result()}, TMP_35.$$s = self, TMP_35.$$arity = -1, TMP_35))
            }, TMP_ClassMethods_isomorphic_method_34.$$arity = 1);
          };
        })($nesting[0], $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/object/try"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_try_1, TMP_Object_try$B_2;

    
    
    Opal.defn(self, '$try', TMP_Object_try_1 = function($a_rest) {
      var $b, self = this, a, $iter = TMP_Object_try_1.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_try_1.$$p = null;
      if ($truthy(($truthy($b = a['$empty?']()) ? $b : self['$respond_to?'](a.$first())))) {
        return $send(self, 'try!', Opal.to_a(a), b.$to_proc())
        } else {
        return nil
      }
    }, TMP_Object_try_1.$$arity = -1);
    return (Opal.defn(self, '$try!', TMP_Object_try$B_2 = function($a_rest) {
      var $b, self = this, a, $iter = TMP_Object_try$B_2.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_try$B_2.$$p = null;
      if ($truthy(($truthy($b = a['$empty?']()) ? (b !== nil) : $b))) {
        if ($truthy(b.$arity()['$zero?']())) {
          return $send(self, 'instance_eval', [], b.$to_proc())
          } else {
          return Opal.yield1(b, self);
        }
        } else {
        return $send(self, 'public_send', Opal.to_a(a), b.$to_proc())
      }
    }, TMP_Object_try$B_2.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_try_3, TMP_NilClass_try$B_4;

    
    
    Opal.defn(self, '$try', TMP_NilClass_try_3 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil
    }, TMP_NilClass_try_3.$$arity = -1);
    return (Opal.defn(self, '$try!', TMP_NilClass_try$B_4 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil
    }, TMP_NilClass_try$B_4.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/react_api"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$+', '$create_element', '$to_proc', '$raise', '$to_n', '$kind_of?', '$!', '$build']);
  
  self.$require("native");
  self.$require("active_support/core_ext/object/try");
  self.$require("hyperstack/internal/component/tags");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $ReactAPI, self = $ReactAPI = $module($base, 'ReactAPI');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ReactAPI_html_tag$q_1, TMP_ReactAPI_html_attr$q_2, TMP_ReactAPI_create_element_3, TMP_ReactAPI_render_4, TMP_ReactAPI_is_valid_element_5, TMP_ReactAPI_is_valid_element$q_6, TMP_ReactAPI_render_to_string_8, TMP_ReactAPI_render_to_static_markup_10, TMP_ReactAPI_unmount_component_at_node_11;

        
        Opal.const_set($nesting[0], 'ATTRIBUTES', $rb_plus(["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"], ["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]));
        Opal.const_set($nesting[0], 'HASH_ATTRIBUTES', ["data", "aria"]);
        Opal.const_set($nesting[0], 'HTML_TAGS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'HTML_TAGS'));
        Opal.defs(self, '$html_tag?', TMP_ReactAPI_html_tag$q_1 = function(name) {
          var self = this, tags = nil;

          
          tags = Opal.const_get_relative($nesting, 'HTML_TAGS');
          
          for(var i = 0; i < tags.length; i++) {
            if(tags[i] === name)
              return true;
          }
          return false;
        ;
        }, TMP_ReactAPI_html_tag$q_1.$$arity = 1);
        Opal.defs(self, '$html_attr?', TMP_ReactAPI_html_attr$q_2 = function(name) {
          var self = this, attrs = nil;

          
          attrs = Opal.const_get_relative($nesting, 'ATTRIBUTES');
          
          for(var i = 0; i < attrs.length; i++) {
            if(attrs[i] === name)
              return true;
          }
          return false;
        ;
        }, TMP_ReactAPI_html_attr$q_2.$$arity = 1);
        Opal.defs(self, '$create_element', TMP_ReactAPI_create_element_3 = function $$create_element(type, $a_rest) {
          var self = this, properties, $iter = TMP_ReactAPI_create_element_3.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          properties = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            properties[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_ReactAPI_create_element_3.$$p = null;
          return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper'), 'create_element', [type].concat(Opal.to_a(properties)), block.$to_proc())
        }, TMP_ReactAPI_create_element_3.$$arity = -2);
        Opal.defs(self, '$render', TMP_ReactAPI_render_4 = function $$render(element, container) {
          var self = this, $iter = TMP_ReactAPI_render_4.$$p, $yield = $iter || nil, cb = nil, native$ = nil;

          if ($iter) TMP_ReactAPI_render_4.$$p = null;
          
          if ($truthy(typeof ReactDOM === 'undefined')) {
            self.$raise("ReactDOM.render is not defined.  In React >= v15 you must import it with ReactDOM")};
          container = container.$$class ? container[0] : container;
          if (($yield !== nil)) {
            
            cb = 
            function(){
              setTimeout(function(){
                Opal.yieldX($yield, [])
              }, 0)
            }
          ;
            native$ = ReactDOM.render(element.$to_n(), container, cb);
            } else {
            native$ = ReactDOM.render(element.$to_n(), container)
          };
          if ($truthy(native$ !== null)) {
            } else {
            return nil
          };
          if ($truthy(native$.__opalInstance !== undefined && native$.__opalInstance !== null)) {
            return native$.__opalInstance
          } else if ($truthy(ReactDOM.findDOMNode !== undefined && native$.nodeType === undefined)) {
            return ReactDOM.findDOMNode(native$)
            } else {
            return native$
          };
        }, TMP_ReactAPI_render_4.$$arity = 2);
        Opal.defs(self, '$is_valid_element', TMP_ReactAPI_is_valid_element_5 = function $$is_valid_element(element) {
          var $a, self = this;

          
           console.error("Warning: `is_valid_element` is deprecated in favor of `is_valid_element?`."); ;
          return ($truthy($a = element['$kind_of?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element'))) ? React.isValidElement(element.$to_n()) : $a);
        }, TMP_ReactAPI_is_valid_element_5.$$arity = 1);
        Opal.defs(self, '$is_valid_element?', TMP_ReactAPI_is_valid_element$q_6 = function(element) {
          var $a, self = this;

          return ($truthy($a = element['$kind_of?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element'))) ? React.isValidElement(element.$to_n()) : $a)
        }, TMP_ReactAPI_is_valid_element$q_6.$$arity = 1);
        Opal.defs(self, '$render_to_string', TMP_ReactAPI_render_to_string_8 = function $$render_to_string(element) {
          var TMP_7, self = this;

          
           console.error("Warning: `Hyperstack::Component::ReactAPI.render_to_string` is deprecated in favor of `React::Server.render_to_string`."); ;
          if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'build', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

            return ReactDOMServer.renderToString(element.$to_n())}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))
            } else {
            return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
          };
        }, TMP_ReactAPI_render_to_string_8.$$arity = 1);
        Opal.defs(self, '$render_to_static_markup', TMP_ReactAPI_render_to_static_markup_10 = function $$render_to_static_markup(element) {
          var TMP_9, self = this;

          
           console.error("Warning: `Hyperstack::Component::ReactAPI.render_to_static_markup` is deprecated in favor of `React::Server.render_to_static_markup`."); ;
          if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'build', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

            return ReactDOMServer.renderToStaticMarkup(element.$to_n())}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))
            } else {
            return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
          };
        }, TMP_ReactAPI_render_to_static_markup_10.$$arity = 1);
        Opal.defs(self, '$unmount_component_at_node', TMP_ReactAPI_unmount_component_at_node_11 = function $$unmount_component_at_node(node) {
          var self = this;

          if ($truthy((typeof ReactDOM === 'undefined')['$!']())) {
            return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node)
            } else {
            return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
          }
        }, TMP_ReactAPI_unmount_component_at_node_11.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/top_level_rails_component"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$top_level_render', '$start_with?', '$<<', '$const_get', '$each', '$search_path', '$class', '$name', '$!=', '$method_defined?', '$render', '$raise', '$join', '$search_path=', '$-', '$!', '$include?', '$add_to_react_search_path']);
  
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $TopLevelRailsComponent(){};
          var self = $TopLevelRailsComponent = $klass($base, $super, 'TopLevelRailsComponent', $TopLevelRailsComponent);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TopLevelRailsComponent_search_path_1, TMP_TopLevelRailsComponent_allow_deprecated_render_definition$q_2, TMP_TopLevelRailsComponent_render_3, TMP_TopLevelRailsComponent_top_level_render_6;

          def.ComponentName = def.RenderParams = def.Controller = nil;
          
          self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'));
          Opal.defs(self, '$search_path', TMP_TopLevelRailsComponent_search_path_1 = function $$search_path() {
            var $a, self = this;
            if (self.search_path == null) self.search_path = nil;

            return (self.search_path = ($truthy($a = self.search_path) ? $a : [Opal.const_get_relative($nesting, 'Object')]))
          }, TMP_TopLevelRailsComponent_search_path_1.$$arity = 0);
          self.$export_component();
          self.$param("component_name");
          self.$param("controller");
          self.$param("render_params");
          self.$backtrace("off");
          Opal.defs(self, '$allow_deprecated_render_definition?', TMP_TopLevelRailsComponent_allow_deprecated_render_definition$q_2 = function() {
            var self = this;

            return true
          }, TMP_TopLevelRailsComponent_allow_deprecated_render_definition$q_2.$$arity = 0);
          
          Opal.defn(self, '$render', TMP_TopLevelRailsComponent_render_3 = function $$render() {
            var self = this;

            return self.$top_level_render()
          }, TMP_TopLevelRailsComponent_render_3.$$arity = 0);
          return (Opal.defn(self, '$top_level_render', TMP_TopLevelRailsComponent_top_level_render_6 = function $$top_level_render() {
            var TMP_4, TMP_5, $a, self = this, paths_searched = nil, component = nil;

            
            paths_searched = [];
            component = nil;
            if ($truthy(self.ComponentName['$start_with?']("::"))) {
              
              paths_searched['$<<'](self.ComponentName);
              component = (function() { try {
                return Opal.const_get_relative($nesting, 'Object').$const_get(self.ComponentName)
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }})();
              } else {
              
              (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], (TMP_4 = function(scope){var self = TMP_4.$$s || this;
                if (self.Controller == null) self.Controller = nil;
                if (self.ComponentName == null) self.ComponentName = nil;
if (scope == null) scope = nil;
              
                paths_searched['$<<']("" + (scope.$name()) + "::" + (self.Controller) + "::" + (self.ComponentName));
                component = (function() { try {
                  return scope.$const_get(self.Controller, false).$const_get(self.ComponentName, false)
                } catch ($err) {
                  if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                    try {
                      return nil
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }})();
                if ($truthy(component['$!='](nil))) {
                  
                  Opal.brk(nil, $brk)
                  } else {
                  return nil
                };}, TMP_4.$$s = self, TMP_4.$$brk = $brk, TMP_4.$$arity = 1, TMP_4))
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
              if ($truthy(component)) {
                } else {
                (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], (TMP_5 = function(scope){var self = TMP_5.$$s || this;
                  if (self.ComponentName == null) self.ComponentName = nil;
if (scope == null) scope = nil;
                
                  paths_searched['$<<']("" + (scope.$name()) + "::" + (self.ComponentName));
                  component = (function() { try {
                    return scope.$const_get(self.ComponentName, false)
                  } catch ($err) {
                    if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                      try {
                        return nil
                      } finally { Opal.pop_exception() }
                    } else { throw $err; }
                  }})();
                  if ($truthy(component['$!='](nil))) {
                    
                    Opal.brk(nil, $brk)
                    } else {
                    return nil
                  };}, TMP_5.$$s = self, TMP_5.$$brk = $brk, TMP_5.$$arity = 1, TMP_5))
                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
              };
            };
            if ($truthy(($truthy($a = component) ? component['$method_defined?']("render") : $a))) {
              return Opal.const_get_relative($nesting, 'RenderingContext').$render(component, self.RenderParams)};
            return self.$raise("" + "Could not find component class '" + (self.ComponentName) + "' for @Controller '" + (self.Controller) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
          }, TMP_TopLevelRailsComponent_top_level_render_6.$$arity = 0), nil) && 'top_level_render';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_add_to_react_search_path_7;

    return (Opal.defn(self, '$add_to_react_search_path', TMP_Module_add_to_react_search_path_7 = function $$add_to_react_search_path(replace_search_path) {
      var self = this, $writer = nil;

      if (replace_search_path == null) {
        replace_search_path = nil;
      }
      if ($truthy(replace_search_path)) {
        
        $writer = [[self]];
        $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent'), 'search_path=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      } else if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent').$search_path()['$include?'](self)['$!']())) {
        return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent').$search_path()['$<<'](self)
        } else {
        return nil
      }
    }, TMP_Module_add_to_react_search_path_7.$$arity = -1), nil) && 'add_to_react_search_path'
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    self.$add_to_react_search_path()
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/while_loading"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$WhileLoadingWrapper', '$!', '$on_opal_client?']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $WhileLoading, self = $WhileLoading = $module($base, 'WhileLoading');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_WhileLoading___hyperstack_component_rescue_wrapper_1, TMP_WhileLoading_resources_loading$q_2, TMP_WhileLoading_resources_loaded$q_3;

        
        
        Opal.defn(self, '$__hyperstack_component_rescue_wrapper', TMP_WhileLoading___hyperstack_component_rescue_wrapper_1 = function $$__hyperstack_component_rescue_wrapper(child) {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component').$WhileLoadingWrapper($hash2(["child", "children_elements"], {"child": self, "children_elements": child}))
        }, TMP_WhileLoading___hyperstack_component_rescue_wrapper_1.$$arity = 1);
        
        Opal.defn(self, '$resources_loading?', TMP_WhileLoading_resources_loading$q_2 = function() {
          var self = this;
          if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

          return self.__hyperstack_while_loading_waiting_on_resources
        }, TMP_WhileLoading_resources_loading$q_2.$$arity = 0);
        
        Opal.defn(self, '$resources_loaded?', TMP_WhileLoading_resources_loaded$q_3 = function() {
          var self = this;
          if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

          return self.__hyperstack_while_loading_waiting_on_resources['$!']()
        }, TMP_WhileLoading_resources_loaded$q_3.$$arity = 0);
        if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers')['$on_opal_client?']())) {
          
          function onError(event) {
            if (event.message.match(/^Uncaught NotQuiet: /)) event.preventDefault();
          }

          window.addEventListener('error', onError);
         };
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/free_render"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$instance_eval', '$const_defined?', '$const_get', '$is_a?', '$method_defined?', '$include?', '$render', '$to_proc', '$hyperstack_component_original_meth_missing']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $FreeRender, self = $FreeRender = $module($base, 'FreeRender');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_FreeRender_included_3;

        Opal.defs(self, '$included', TMP_FreeRender_included_3 = function $$included(base) {
          var TMP_1, self = this;

          return $send(base, 'instance_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_method_missing_2;

          
            Opal.alias(self, "hyperstack_component_original_meth_missing", "method_missing");
            return (Opal.def(self, '$method_missing', TMP_method_missing_2 = function $$method_missing(name, $a_rest) {
              var $b, $c, $d, self = this, args, $iter = TMP_method_missing_2.$$p, block = $iter || nil, klass = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 1;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 1] = arguments[$arg_idx];
              }
              if ($iter) TMP_method_missing_2.$$p = null;
              if ($truthy(($truthy($b = ($truthy($c = self['$const_defined?'](name)) ? (klass = self.$const_get(name)) : $c)) ? ($truthy($c = ($truthy($d = klass['$is_a?'](Opal.const_get_relative($nesting, 'Class'))) ? klass['$method_defined?']("render") : $d)) ? $c : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'HTML_TAGS')['$include?'](klass)) : $b))) {
                return $send(self, 'render', [klass].concat(Opal.to_a(args)), block.$to_proc())
                } else {
                return $send(self, 'hyperstack_component_original_meth_missing', [name].concat(Opal.to_a(args)), block.$to_proc())
              }
            }, TMP_method_missing_2.$$arity = -2), nil) && 'method_missing';}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1))
        }, TMP_FreeRender_included_3.$$arity = 1)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/rescue_wrapper"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$param', '$render', '$call', '$attr_accessor', '$RescueMetaWrapper', '$after_error', '$after_error_args', '$run_callback', '$after_error_args=', '$-', '$raise', '$force_update!']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        
        (function($base, $super, $parent_nesting) {
          function $RescueMetaWrapper(){};
          var self = $RescueMetaWrapper = $klass($base, $super, 'RescueMetaWrapper', $RescueMetaWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_RescueMetaWrapper_1;

          
          self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'));
          self.$param("children_elements");
          return $send(self, 'render', [], (TMP_RescueMetaWrapper_1 = function(){var self = TMP_RescueMetaWrapper_1.$$s || this;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

          return self.ChildrenElements.$call()}, TMP_RescueMetaWrapper_1.$$s = self, TMP_RescueMetaWrapper_1.$$arity = 0, TMP_RescueMetaWrapper_1));
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          function $RescueWrapper(){};
          var self = $RescueWrapper = $klass($base, $super, 'RescueWrapper', $RescueWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_RescueWrapper_2, TMP_RescueWrapper_3;

          
          (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting);

            return self.$attr_accessor("after_error_args")
          })(Opal.get_singleton_class(self), $nesting);
          self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'));
          self.$param("child");
          self.$param("children_elements");
          $send(self, 'render', [], (TMP_RescueWrapper_2 = function(){var self = TMP_RescueWrapper_2.$$s || this;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

          return self.$RescueMetaWrapper($hash2(["children_elements"], {"children_elements": self.ChildrenElements}))}, TMP_RescueWrapper_2.$$s = self, TMP_RescueWrapper_2.$$arity = 0, TMP_RescueWrapper_2));
          return $send(self, 'after_error', [], (TMP_RescueWrapper_3 = function(error, info){var self = TMP_RescueWrapper_3.$$s || this, $a, $b, TMP_4, args = nil, found = nil, $writer = nil;
            if (self.Child == null) self.Child = nil;
if (error == null) error = nil;if (info == null) info = nil;
          
            args = ($truthy($a = Opal.const_get_relative($nesting, 'RescueWrapper').$after_error_args()) ? $a : [error, info]);
            $b = $send(self.Child, 'run_callback', ["__hyperstack_component_rescue_hook", found].concat(Opal.to_a(args)), (TMP_4 = function(a){var self = TMP_4.$$s || this;
if (a == null) a = nil;
            return a}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4)), $a = Opal.to_ary($b), (found = ($a[0] == null ? nil : $a[0])), $b;
            if ($truthy(found)) {
              } else {
              
              
              $writer = [args];
              $send(Opal.const_get_relative($nesting, 'RescueWrapper'), 'after_error_args=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.$raise(error);
            };
            return self.Child['$force_update!']();}, TMP_RescueWrapper_3.$$s = self, TMP_RescueWrapper_3.$$arity = 2, TMP_RescueWrapper_3));
        })($nesting[0], null, $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/while_loading_wrapper"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$render', '$!', '$quiet?', '$raise_if_not_quiet=', '$-', '$instance_eval', '$mutate', '$RescueMetaWrapper', '$before_mount', '$rescues', '$class', '$instance_variable_set']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $WhileLoadingWrapper(){};
          var self = $WhileLoadingWrapper = $klass($base, $super, 'WhileLoadingWrapper', $WhileLoadingWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_WhileLoadingWrapper_1, TMP_WhileLoadingWrapper_3;

          
          $send(self, 'render', [], (TMP_WhileLoadingWrapper_1 = function(){var self = TMP_WhileLoadingWrapper_1.$$s || this, $a, TMP_2, $writer = nil;
            if (self.waiting_on_resources == null) self.waiting_on_resources = nil;
            if (self.Child == null) self.Child = nil;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

          
            if ($truthy(($truthy($a = self.waiting_on_resources) ? self['$quiet?']()['$!']() : $a))) {
              
              $writer = [false];
              $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'raise_if_not_quiet=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              } else {
              
              self.waiting_on_resources = false;
              $send(self.Child, 'instance_eval', [], (TMP_2 = function(){var self = TMP_2.$$s || this;
                if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

              
                if ($truthy(self.__hyperstack_while_loading_waiting_on_resources)) {
                  self.$mutate()};
                return (self.__hyperstack_while_loading_waiting_on_resources = false);}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
              
              $writer = [true];
              $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'raise_if_not_quiet=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            return self.$RescueMetaWrapper($hash2(["children_elements"], {"children_elements": self.ChildrenElements}));}, TMP_WhileLoadingWrapper_1.$$s = self, TMP_WhileLoadingWrapper_1.$$arity = 0, TMP_WhileLoadingWrapper_1));
          return $send(self, 'before_mount', [], (TMP_WhileLoadingWrapper_3 = function(){var self = TMP_WhileLoadingWrapper_3.$$s || this, TMP_4, wrapper = nil;
            if (self.Child == null) self.Child = nil;

          
            wrapper = self;
            return $send(self.Child.$class(), 'rescues', [Opal.const_get_qualified(Opal.const_get_relative($nesting, 'RenderingContext'), 'NotQuiet')], (TMP_4 = function(){var self = TMP_4.$$s || this;

            
              wrapper.$instance_variable_set("@waiting_on_resources", true);
              return (self.__hyperstack_while_loading_waiting_on_resources = true);}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));}, TMP_WhileLoadingWrapper_3.$$s = self, TMP_WhileLoadingWrapper_3.$$arity = 0, TMP_WhileLoadingWrapper_3));
        })($nesting[0], Opal.const_get_relative($nesting, 'RescueWrapper'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'VERSION', "1.0.alpha1.5")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-component"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$import', '$js_import', '$==']);
  
  self.$require("hyperstack/internal/component");
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyper-state");
  Opal.const_get_relative($nesting, 'Hyperstack').$js_import("react/react-source-browser", $hash2(["client_only", "defines"], {"client_only": true, "defines": ["ReactDOM", "React"]}));
  Opal.const_get_relative($nesting, 'Hyperstack').$js_import("react/react-source-server", $hash2(["server_only", "defines"], {"server_only": true, "defines": "React"}));
  Opal.const_get_relative($nesting, 'Hyperstack').$import("browser/delay", $hash2(["client_only"], {"client_only": true}));
  Opal.const_get_relative($nesting, 'Hyperstack').$js_import("react_ujs", $hash2(["defines"], {"defines": "ReactRailsUJS"}));
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyper-component");
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyperstack/component/auto-import");
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("hyperstack/internal/callbacks");
    self.$require("hyperstack/internal/auto_unmount");
    self.$require("native");
    self.$require("hyperstack/state/observer");
    self.$require("hyperstack/internal/component/validator");
    self.$require("hyperstack/component/element");
    self.$require("hyperstack/internal/component/react_wrapper");
    self.$require("hyperstack/component");
    self.$require("hyperstack/internal/component/should_component_update");
    self.$require("hyperstack/internal/component/tags");
    self.$require("hyperstack/component/event");
    self.$require("hyperstack/internal/component/rendering_context");
    self.$require("hyperstack/ext/component/object");
    self.$require("hyperstack/ext/component/kernel");
    self.$require("hyperstack/ext/component/number");
    self.$require("hyperstack/ext/component/boolean");
    self.$require("hyperstack/ext/component/array");
    self.$require("hyperstack/ext/component/enumerable");
    self.$require("hyperstack/component/isomorphic_helpers");
    self.$require("hyperstack/component/react_api");
    self.$require("hyperstack/internal/component/top_level_rails_component");
    self.$require("hyperstack/component/while_loading");
    self.$require("hyperstack/component/free_render");
    self.$require("hyperstack/internal/component/rescue_wrapper");
    self.$require("hyperstack/internal/component/while_loading_wrapper");
    return self.$require("hyperstack/component/version");
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["react/router"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$imports']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$imports("ReactRouter")
    })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["react/router/dom"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$imports']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DOM(){};
        var self = $DOM = $klass($base, $super, 'DOM', $DOM);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return self.$imports("ReactRouterDOM")
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["react/router/history"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$new', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $History(){};
        var self = $History = $klass($base, $super, 'History', $History);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_History_current_1, TMP_History_initialize_2, TMP_History_to_n_3;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        Opal.defs(self, '$current', TMP_History_current_1 = function $$current() {
          var self = this;

          return self.$new(History)
        }, TMP_History_current_1.$$arity = 0);
        
        Opal.defn(self, '$initialize', TMP_History_initialize_2 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, TMP_History_initialize_2.$$arity = 1);
        
        Opal.defn(self, '$to_n', TMP_History_to_n_3 = function $$to_n() {
          var self = this;

          return self["native"]
        }, TMP_History_to_n_3.$$arity = 0);
        self.$alias_native("create_browser_history", "createBrowserHistory");
        self.$alias_native("create_hash_history", "createHashHistory");
        self.$alias_native("create_location", "createLocation");
        self.$alias_native("create_memory_history", "createMemoryHistory");
        return self.$alias_native("create_path", "createPath");
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/router/isomorphic_methods"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$prerender_footer', '$on_opal_server?', '$new', '$[]', '$raise', '$isomorphic_method', '$when_on_client', '$send_to_server', '$when_on_server', '$fullpath', '$request', '$controller', '$context']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Router, self = $Router = $module($base, 'Router');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $IsomorphicMethods(){};
          var self = $IsomorphicMethods = $klass($base, $super, 'IsomorphicMethods', $IsomorphicMethods);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IsomorphicMethods_ctx_1, TMP_IsomorphicMethods_2, TMP_IsomorphicMethods_3;

          
          self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers'));
          Opal.defs(self, '$ctx', TMP_IsomorphicMethods_ctx_1 = function $$ctx() {
            var $a, self = this;
            if (self.ctx == null) self.ctx = nil;

            return (self.ctx = ($truthy($a = self.ctx) ? $a : {}))
          }, TMP_IsomorphicMethods_ctx_1.$$arity = 0);
          $send(self, 'prerender_footer', [], (TMP_IsomorphicMethods_2 = function(_controller){var self = TMP_IsomorphicMethods_2.$$s || this, ctx_as_hash = nil;
            if (self.ctx == null) self.ctx = nil;
if (_controller == null) _controller = nil;
          
            if ($truthy(self['$on_opal_server?']())) {
              } else {
              return nil;
            };
            ctx_as_hash = Opal.const_get_relative($nesting, 'Hash').$new(self.ctx);
            self.ctx = {};
            if ($truthy(ctx_as_hash['$[]']("url"))) {
              return self.$raise("" + "Hyperstack::Internal::Component::Redirect " + (ctx_as_hash['$[]']("url")) + " status: " + (ctx_as_hash['$[]']("status")))
              } else {
              return nil
            };}, TMP_IsomorphicMethods_2.$$s = self, TMP_IsomorphicMethods_2.$$arity = 1, TMP_IsomorphicMethods_2));
          return $send(self, 'isomorphic_method', ["request_fullpath"], (TMP_IsomorphicMethods_3 = function(f){var self = TMP_IsomorphicMethods_3.$$s || this, TMP_4, TMP_5;
if (f == null) f = nil;
          
            $send(f, 'when_on_client', [], (TMP_4 = function(){var self = TMP_4.$$s || this;

            return window.location.pathname}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
            f.$send_to_server();
            return $send(f, 'when_on_server', [], (TMP_5 = function(){var self = TMP_5.$$s || this;

            return f.$context().$controller().$request().$fullpath()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));}, TMP_IsomorphicMethods_3.$$s = self, TMP_IsomorphicMethods_3.$$arity = 1, TMP_IsomorphicMethods_3));
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/router/history"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$new', '$native_block', '$to_n', '$native_listen', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Router, self = $Router = $module($base, 'Router');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $History(){};
        var self = $History = $klass($base, $super, 'History', $History);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_History_initialize_1, TMP_History_to_n_2, TMP_History_location_3, TMP_History_block_5, TMP_History_listen_7;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        
        Opal.defn(self, '$initialize', TMP_History_initialize_1 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, TMP_History_initialize_1.$$arity = 1);
        
        Opal.defn(self, '$to_n', TMP_History_to_n_2 = function $$to_n() {
          var self = this;

          return self["native"]
        }, TMP_History_to_n_2.$$arity = 0);
        
        Opal.defn(self, '$location', TMP_History_location_3 = function $$location() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Location').$new(self["native"].location)
        }, TMP_History_location_3.$$arity = 0);
        
        Opal.defn(self, '$block', TMP_History_block_5 = function $$block(message) {
          var TMP_4, self = this, $iter = TMP_History_block_5.$$p, $yield = $iter || nil;

          if (message == null) {
            message = nil;
          }
          if ($iter) TMP_History_block_5.$$p = null;
          if ($truthy(message)) {
            return self.$native_block(message.$to_n())
            } else {
            return $send(self, 'native_block', [], (TMP_4 = function(location, action){var self = TMP_4.$$s || this;
if (location == null) location = nil;if (action == null) action = nil;
            return Opal.yieldX($yield, [Opal.const_get_relative($nesting, 'Location').$new(location), action]);}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4))
          }
        }, TMP_History_block_5.$$arity = -1);
        
        Opal.defn(self, '$listen', TMP_History_listen_7 = function $$listen() {
          var TMP_6, self = this, $iter = TMP_History_listen_7.$$p, $yield = $iter || nil;

          if ($iter) TMP_History_listen_7.$$p = null;
          return $send(self, 'native_listen', [], (TMP_6 = function(location, action){var self = TMP_6.$$s || this;
if (location == null) location = nil;if (action == null) action = nil;
          return Opal.yieldX($yield, [Opal.const_get_relative($nesting, 'Location').$new(location), action]);}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6))
        }, TMP_History_listen_7.$$arity = 0);
        self.$alias_native("action");
        self.$alias_native("native_block", "block");
        self.$alias_native("create_href", "createHref");
        self.$alias_native("entries");
        self.$alias_native("go");
        self.$alias_native("go_back", "goBack");
        self.$alias_native("go_forward", "goForward");
        self.$alias_native("index");
        self.$alias_native("length");
        self.$alias_native("native_listen", "listen");
        self.$alias_native("push", "push");
        return self.$alias_native("replace", "replace");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/router/location"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$include', '$blank?', '$search', '$[]', '$map', '$split', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Router, self = $Router = $module($base, 'Router');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Location(){};
        var self = $Location = $klass($base, $super, 'Location', $Location);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Location_initialize_1, TMP_Location_to_n_2, TMP_Location_query_4;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        
        Opal.defn(self, '$initialize', TMP_Location_initialize_1 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, TMP_Location_initialize_1.$$arity = 1);
        
        Opal.defn(self, '$to_n', TMP_Location_to_n_2 = function $$to_n() {
          var self = this;

          return self["native"]
        }, TMP_Location_to_n_2.$$arity = 0);
        
        Opal.defn(self, '$query', TMP_Location_query_4 = function $$query() {
          var TMP_3, self = this;

          
          if ($truthy(self.$search()['$blank?']())) {
            return $hash2([], {})};
          return Opal.const_get_relative($nesting, 'Hash')['$[]']($send(self.$search()['$[]']($range(1, -1, false)).$split("&"), 'map', [], (TMP_3 = function(part){var self = TMP_3.$$s || this, $a, $b, name = nil, value = nil;
if (part == null) part = nil;
          
            $b = part.$split("="), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
            return [decodeURIComponent(name), decodeURIComponent(value)];}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3)));
        }, TMP_Location_query_4.$$arity = 0);
        self.$alias_native("pathname");
        self.$alias_native("search");
        self.$alias_native("hash");
        self.$alias_native("state");
        return self.$alias_native("key");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/router/match"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Router, self = $Router = $module($base, 'Router');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Match(){};
        var self = $Match = $klass($base, $super, 'Match', $Match);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Match_initialize_1, TMP_Match_to_n_2;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        
        Opal.defn(self, '$initialize', TMP_Match_initialize_1 = function $$initialize(native$) {
          var self = this;

          return (self["native"] = native$)
        }, TMP_Match_initialize_1.$$arity = 1);
        
        Opal.defn(self, '$to_n', TMP_Match_to_n_2 = function $$to_n() {
          var self = this;

          return self["native"]
        }, TMP_Match_to_n_2.$$arity = 0);
        self.$alias_native("params");
        self.$alias_native("is_exact", "isExact");
        self.$alias_native("path");
        return self.$alias_native("url");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/router/class_methods"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$positive?', '$count', '$first', '$send', '$new', '$to_n', '$history', '$private', '$create_browser_history', '$current', '$create_hash_history', '$create_memory_history']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Router, self = $Router = $module($base, 'Router');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_history_1, TMP_ClassMethods_location_2, TMP_ClassMethods_browser_history_3, TMP_ClassMethods_hash_history_4, TMP_ClassMethods_memory_history_5;

          
          
          Opal.defn(self, '$history', TMP_ClassMethods_history_1 = function $$history($a_rest) {
            var $b, self = this, args;
            if (self.__history_type == null) self.__history_type = nil;
            if (self.__history == null) self.__history = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($truthy(args.$count()['$positive?']())) {
              return (self.__history_type = args.$first())
            } else if ($truthy(self.__history_type)) {
              return (self.__history = ($truthy($b = self.__history) ? $b : self.$send("" + (self.__history_type) + "_history")))
              } else {
              return nil
            }
          }, TMP_ClassMethods_history_1.$$arity = -1);
          
          Opal.defn(self, '$location', TMP_ClassMethods_location_2 = function $$location() {
            var self = this;

            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Router'), 'Location').$new(self.$history().$to_n().location)
          }, TMP_ClassMethods_location_2.$$arity = 0);
          self.$private();
          
          Opal.defn(self, '$browser_history', TMP_ClassMethods_browser_history_3 = function $$browser_history() {
            var $a, self = this;
            if (self.__browser_history == null) self.__browser_history = nil;

            return (self.__browser_history = ($truthy($a = self.__browser_history) ? $a : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'History').$current().$create_browser_history()))
          }, TMP_ClassMethods_browser_history_3.$$arity = 0);
          
          Opal.defn(self, '$hash_history', TMP_ClassMethods_hash_history_4 = function $$hash_history($a_rest) {
            var $b, self = this, args;
            if (self.__hash_history == null) self.__hash_history = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            return (self.__hash_history = ($truthy($b = self.__hash_history) ? $b : $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'History').$current(), 'create_hash_history', Opal.to_a(args))))
          }, TMP_ClassMethods_hash_history_4.$$arity = -1);
          
          Opal.defn(self, '$memory_history', TMP_ClassMethods_memory_history_5 = function $$memory_history($a_rest) {
            var $b, self = this, args;
            if (self.__memory_history == null) self.__memory_history = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            return (self.__memory_history = ($truthy($b = self.__memory_history) ? $b : $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'History').$current(), 'create_memory_history', Opal.to_a(args))))
          }, TMP_ClassMethods_memory_history_5.$$arity = -1);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/router/helpers"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$tap', '$[]=', '$-', '$[]', '$delete', '$Link', '$to_proc', '$any?', '$&', '$keys', '$observed!', '$NavLink', '$ctx', '$Redirect', '$new', '$lambda', '$format_params', '$create_element', '$values', '$Route', '$Switch']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Router, self = $Router = $module($base, 'Router');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $Helpers, self = $Helpers = $module($base, 'Helpers');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_Link_1, TMP_Helpers_NavLink_3, TMP_Helpers_Redirect_4, TMP_Helpers_format_params_5, TMP_Helpers_Route_6, TMP_Helpers_Switch_9;

          
          
          Opal.defn(self, '$Link', TMP_Helpers_Link_1 = function $$Link(to, opts) {
            var TMP_2, self = this, $iter = TMP_Helpers_Link_1.$$p, children = $iter || nil, $writer = nil;

            if (opts == null) {
              opts = $hash2([], {});
            }
            if ($iter) TMP_Helpers_Link_1.$$p = null;
            
            
            $writer = ["to", $send($hash2([], {}), 'tap', [], (TMP_2 = function(hash){var self = TMP_2.$$s || this;
if (hash == null) hash = nil;
            
              
              $writer = ["pathname", to];
              $send(hash, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(opts['$[]']("search"))) {
                
                $writer = ["search", opts.$delete("search")];
                $send(hash, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(opts['$[]']("hash"))) {
                
                $writer = ["hash", opts.$delete("hash")];
                $send(hash, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                } else {
                return nil
              };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2)).$to_n()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'DOM'), 'Link', [opts], children.$to_proc());
          }, TMP_Helpers_Link_1.$$arity = -2);
          
          Opal.defn(self, '$NavLink', TMP_Helpers_NavLink_3 = function $$NavLink(to, opts) {
            var self = this, $iter = TMP_Helpers_NavLink_3.$$p, children = $iter || nil, $writer = nil;

            if (opts == null) {
              opts = $hash2([], {});
            }
            if ($iter) TMP_Helpers_NavLink_3.$$p = null;
            
            
            $writer = ["to", to.$to_n()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(["active_class", "active_style", "active"]['$&'](opts.$keys())['$any?']())) {
              
              if ($truthy(opts['$[]']("active_class"))) {
                
                $writer = ["activeClassName", opts.$delete("active_class").$to_n()];
                $send(opts, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(opts['$[]']("active_style"))) {
                
                $writer = ["activeStyle", opts.$delete("active_style").$to_n()];
                $send(opts, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(opts['$[]']("active"))) {
                
                $writer = ["isActive", opts.$delete("active").$to_n()];
                $send(opts, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              Opal.const_get_qualified(Opal.const_get_relative($nesting, 'State'), 'Mapper')['$observed!'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Router'), 'Location'));};
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'DOM'), 'NavLink', [opts], children.$to_proc());
          }, TMP_Helpers_NavLink_3.$$arity = -2);
          
          Opal.defn(self, '$Redirect', TMP_Helpers_Redirect_4 = function $$Redirect(to, opts) {
            var $a, self = this, $writer = nil, status = nil;

            if (opts == null) {
              opts = $hash2([], {});
            }
            
            
            $writer = ["to", to.$to_n()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            status = opts.$delete("status");
            status = ($truthy($a = status) ? $a : 302);
            Opal.const_get_relative($nesting, 'IsomorphicMethods').$ctx().status = status;
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router').$Redirect(opts);
          }, TMP_Helpers_Redirect_4.$$arity = -2);
          
          Opal.defn(self, '$format_params', TMP_Helpers_format_params_5 = function $$format_params(e) {
            var self = this;

            return $hash2(["match", "location", "history"], {"match": Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Router'), 'Match').$new(e.match), "location": Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Router'), 'Location').$new(e.location), "history": Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Router'), 'History').$new(e.history)})
          }, TMP_Helpers_format_params_5.$$arity = 1);
          
          Opal.defn(self, '$Route', TMP_Helpers_Route_6 = function $$Route(to, opts) {
            var TMP_7, TMP_8, self = this, $iter = TMP_Helpers_Route_6.$$p, block = $iter || nil, $writer = nil, component = nil;

            if (opts == null) {
              opts = $hash2([], {});
            }
            if ($iter) TMP_Helpers_Route_6.$$p = null;
            
            Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$observed!'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Router'), 'Location'));
            
            $writer = ["path", to.$to_n()];
            $send(opts, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(opts['$[]']("mounts"))) {
              
              component = opts.$delete("mounts");
              
              $writer = ["component", $send(self, 'lambda', [], (TMP_7 = function(e){var self = TMP_7.$$s || this, route_params = nil;
if (e == null) e = nil;
              
                route_params = self.$format_params(e);
                return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'ReactAPI').$create_element(component, route_params).$to_n();}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))];
              $send(opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            if ($truthy(block)) {
              
              $writer = ["render", $send(self, 'lambda', [], (TMP_8 = function(e){var self = TMP_8.$$s || this, route_params = nil;
if (e == null) e = nil;
              
                route_params = self.$format_params(e);
                return Opal.yieldX(block, Opal.to_a(route_params.$values())).$to_n();}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))];
              $send(opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router').$Route(opts);
          }, TMP_Helpers_Route_6.$$arity = -2);
          
          Opal.defn(self, '$Switch', TMP_Helpers_Switch_9 = function $$Switch() {
            var self = this, $iter = TMP_Helpers_Switch_9.$$p, children = $iter || nil;

            if ($iter) TMP_Helpers_Switch_9.$$p = null;
            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'Switch', [], children.$to_proc())
          }, TMP_Helpers_Switch_9.$$arity = 0);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/router/instance_methods"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$history', '$class', '$location']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Router, self = $Router = $module($base, 'Router');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InstanceMethods_history_1, TMP_InstanceMethods_location_2;

          
          
          Opal.defn(self, '$history', TMP_InstanceMethods_history_1 = function $$history() {
            var self = this;

            return self.$class().$history()
          }, TMP_InstanceMethods_history_1.$$arity = 0);
          
          Opal.defn(self, '$location', TMP_InstanceMethods_location_2 = function $$location() {
            var self = this;

            return self.$class().$location()
          }, TMP_InstanceMethods_location_2.$$arity = 0);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/router/helpers"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$class_eval', '$param']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Router, self = $Router = $module($base, 'Router');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Helpers, self = $Helpers = $module($base, 'Helpers');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_match_1, TMP_Helpers_location_2, TMP_Helpers_history_3, TMP_Helpers_included_5;

        
        
        Opal.defn(self, '$match', TMP_Helpers_match_1 = function $$match() {
          var self = this;
          if (self._match_param == null) self._match_param = nil;

          return self._match_param
        }, TMP_Helpers_match_1.$$arity = 0);
        
        Opal.defn(self, '$location', TMP_Helpers_location_2 = function $$location() {
          var self = this;
          if (self._location_param == null) self._location_param = nil;

          return self._location_param
        }, TMP_Helpers_location_2.$$arity = 0);
        
        Opal.defn(self, '$history', TMP_Helpers_history_3 = function $$history() {
          var self = this;
          if (self._history_param == null) self._history_param = nil;

          return self._history_param
        }, TMP_Helpers_history_3.$$arity = 0);
        Opal.defs(self, '$included', TMP_Helpers_included_5 = function $$included(base) {
          var TMP_4, self = this;

          
          base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'Helpers'));
          return $send(base, 'class_eval', [], (TMP_4 = function(){var self = TMP_4.$$s || this;

          
            self.$param("match", $hash2(["default", "alias"], {"default": nil, "alias": "_match_param"}));
            self.$param("location", $hash2(["default", "alias"], {"default": nil, "alias": "_location_param"}));
            return self.$param("history", $hash2(["default", "alias"], {"default": nil, "alias": "_history_param"}));}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
        }, TMP_Helpers_included_5.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/router"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$on_opal_server?', '$lambda', '$__hyperstack_prerender_router', '$to_proc', '$__hyperstack_render_router', '$instance_eval', '$is_a?', '$respond_to?', '$acts_as_string?', '$render', '$to_s', '$history', '$class', '$Router', '$to_n', '$__eval_block', '$split', '$request_fullpath', '$StaticRouter', '$ctx', '$extend', '$include', '$class_eval', '$location', '$after_mount', '$listen', '$mutated!', '$before_unmount', '$call']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Router, self = $Router = $module($base, 'Router');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Router___hyperstack_router_wrapper_1, TMP_Router___eval_block_5, TMP_Router___hyperstack_render_router_6, TMP_Router___hyperstack_prerender_router_9, TMP_Router_included_18;

      
      (function($base, $super, $parent_nesting) {
        function $NoHistoryError(){};
        var self = $NoHistoryError = $klass($base, $super, 'NoHistoryError', $NoHistoryError);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
      
      Opal.defn(self, '$__hyperstack_router_wrapper', TMP_Router___hyperstack_router_wrapper_1 = function $$__hyperstack_router_wrapper() {
        var TMP_2, TMP_3, self = this, $iter = TMP_Router___hyperstack_router_wrapper_1.$$p, block = $iter || nil;

        if ($iter) TMP_Router___hyperstack_router_wrapper_1.$$p = null;
        if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers')['$on_opal_server?']())) {
          return $send(self, 'lambda', [], (TMP_2 = function(){var self = TMP_2.$$s || this;

          return $send(self, '__hyperstack_prerender_router', [], block.$to_proc())}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
          } else {
          return $send(self, 'lambda', [], (TMP_3 = function(){var self = TMP_3.$$s || this;

          return $send(self, '__hyperstack_render_router', [], block.$to_proc())}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
        }
      }, TMP_Router___hyperstack_router_wrapper_1.$$arity = 0);
      
      Opal.defn(self, '$__eval_block', TMP_Router___eval_block_5 = function $$__eval_block(block) {
        var $a, $b, TMP_4, self = this, result = nil;

        
        result = $send(self, 'instance_eval', [], block.$to_proc());
        if ($truthy(($truthy($a = result['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? $a : ($truthy($b = result['$respond_to?']("acts_as_string?")) ? result['$acts_as_string?']() : $b)))) {
          result = $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', ["span"], (TMP_4 = function(){var self = TMP_4.$$s || this;

          return result.$to_s()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4))};
        return result;
      }, TMP_Router___eval_block_5.$$arity = 1);
      
      Opal.defn(self, '$__hyperstack_render_router', TMP_Router___hyperstack_render_router_6 = function $$__hyperstack_render_router() {
        var TMP_7, self = this, $iter = TMP_Router___hyperstack_render_router_6.$$p, block = $iter || nil;

        if ($iter) TMP_Router___hyperstack_render_router_6.$$p = null;
        return $send(self, 'instance_eval', [], (TMP_7 = function(){var self = TMP_7.$$s || this, TMP_8;

        
          if ($truthy(self.$history())) {
            } else {
            self.$class().$history("browser")
          };
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'Router', [$hash2(["history"], {"history": self.$history().$to_n()})], (TMP_8 = function(){var self = TMP_8.$$s || this;

          return self.$__eval_block(block)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))
      }, TMP_Router___hyperstack_render_router_6.$$arity = 0);
      
      Opal.defn(self, '$__hyperstack_prerender_router', TMP_Router___hyperstack_prerender_router_9 = function $$__hyperstack_prerender_router() {
        var TMP_10, self = this, $iter = TMP_Router___hyperstack_prerender_router_9.$$p, block = $iter || nil;

        if ($iter) TMP_Router___hyperstack_prerender_router_9.$$p = null;
        return $send(self, 'instance_eval', [], (TMP_10 = function(){var self = TMP_10.$$s || this, $a, $b, TMP_11, pathname = nil, search = nil, location = nil;

        
          $b = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'IsomorphicMethods').$request_fullpath().$split("?", 2), $a = Opal.to_ary($b), (pathname = ($a[0] == null ? nil : $a[0])), (search = ($a[1] == null ? nil : $a[1])), $b;
          location = $hash2(["pathname", "search"], {"pathname": pathname, "search": (function() {if ($truthy(search)) {
            return "" + "?" + (search)
            } else {
            return ""
          }; return nil; })()}).$to_n();
          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'React'), 'Router'), 'StaticRouter', [$hash2(["location", "context"], {"location": location, "context": Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'IsomorphicMethods').$ctx()})], (TMP_11 = function(){var self = TMP_11.$$s || this;

          return self.$__eval_block(block)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))
      }, TMP_Router___hyperstack_prerender_router_9.$$arity = 0);
      Opal.defs(self, '$included', TMP_Router_included_18 = function $$included(base) {
        var TMP_12, self = this;

        
        base.$extend(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'ClassMethods'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Router'), 'Helpers'));
        return $send(base, 'class_eval', [], (TMP_12 = function(){var self = TMP_12.$$s || this, TMP_history_13, TMP_location_14, TMP_15, TMP_17;

        
          
          Opal.def(self, '$history', TMP_history_13 = function $$history() {
            var self = this;

            return self.$class().$history()
          }, TMP_history_13.$$arity = 0);
          
          Opal.def(self, '$location', TMP_location_14 = function $$location() {
            var self = this;

            return self.$class().$location()
          }, TMP_location_14.$$arity = 0);
          $send(self, 'after_mount', [], (TMP_15 = function(){var self = TMP_15.$$s || this, TMP_16;

          return (self._react_router_unlisten = $send(self.$history(), 'listen', [], (TMP_16 = function(location, _action){var self = TMP_16.$$s || this;
if (location == null) location = nil;if (_action == null) _action = nil;
            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$mutated!'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Router'), 'Location'))}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16)))}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
          return $send(self, 'before_unmount', [], (TMP_17 = function(){var self = TMP_17.$$s || this;
            if (self._react_router_unlisten == null) self._react_router_unlisten = nil;

          if ($truthy(self._react_router_unlisten)) {
              return self._react_router_unlisten.$call()
              } else {
              return nil
            }}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17));}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12));
      }, TMP_Router_included_18.$$arity = 1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$js_import', '$import', '$==']);
  
  self.$require("hyper-component");
  Opal.const_get_relative($nesting, 'Hyperstack').$js_import("hyperstack/router/react-router-source", $hash2(["defines"], {"defines": ["ReactRouter", "ReactRouterDOM", "History"]}));
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyper-router");
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("react/router");
    self.$require("react/router/dom");
    self.$require("react/router/history");
    self.$require("hyperstack/internal/router/isomorphic_methods");
    self.$require("hyperstack/router/history");
    self.$require("hyperstack/router/location");
    self.$require("hyperstack/router/match");
    self.$require("hyperstack/internal/router/class_methods");
    self.$require("hyperstack/internal/router/helpers");
    self.$require("hyperstack/internal/router/instance_methods");
    self.$require("hyperstack/router/helpers");
    return self.$require("hyperstack/router");
    } else {
    return nil
  };
})(Opal);
