/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_extractable_options$q_1;

    return (Opal.defn(self, '$extractable_options?', TMP_Hash_extractable_options$q_1 = function() {
      var self = this;

      return self['$instance_of?'](Opal.const_get_relative($nesting, 'Hash'))
    }, TMP_Hash_extractable_options$q_1.$$arity = 0), nil) && 'extractable_options?'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_extract_options$B_2;

    return (Opal.defn(self, '$extract_options!', TMP_Array_extract_options$B_2 = function() {
      var $a, self = this;

      if ($truthy(($truthy($a = self.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))) ? self.$last()['$extractable_options?']() : $a))) {
        return self.$pop()
        } else {
        return $hash2([], {})
      }
    }, TMP_Array_extract_options$B_2.$$arity = 0), nil) && 'extract_options!'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/array/wrap"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$respond_to?', '$to_ary']);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_wrap_1;

    return Opal.defs(self, '$wrap', TMP_Array_wrap_1 = function $$wrap(object) {
      var $a, self = this;

      if ($truthy(object['$nil?']())) {
        return []
      } else if ($truthy(object['$respond_to?']("to_ary"))) {
        return ($truthy($a = object.$to_ary()) ? $a : [object])
        } else {
        return [object]
      }
    }, TMP_Array_wrap_1.$$arity = 1)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/array/grouping"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$%', '$-', '$size', '$concat', '$dup', '$*', '$each_slice', '$<<', '$div', '$times', '$+', '$>', '$slice', '$!=', '$each', '$inject', '$call', '$last']);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_in_groups_of_1, TMP_Array_in_groups_5, TMP_Array_split_7;

    
    
    Opal.defn(self, '$in_groups_of', TMP_Array_in_groups_of_1 = function $$in_groups_of(number, fill_with) {
      var TMP_2, TMP_3, self = this, $iter = TMP_Array_in_groups_of_1.$$p, $yield = $iter || nil, collection = nil, padding = nil, groups = nil;

      if (fill_with == null) {
        fill_with = nil;
      }
      if ($iter) TMP_Array_in_groups_of_1.$$p = null;
      
      if (fill_with['$=='](false)) {
        collection = self
        } else {
        
        padding = $rb_minus(number, self.$size()['$%'](number))['$%'](number);
        collection = self.$dup().$concat($rb_times([fill_with], padding));
      };
      if (($yield !== nil)) {
        return $send(collection, 'each_slice', [number], (TMP_2 = function(slice){var self = TMP_2.$$s || this;
if (slice == null) slice = nil;
        return Opal.yield1($yield, slice);}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))
        } else {
        
        groups = [];
        $send(collection, 'each_slice', [number], (TMP_3 = function(group){var self = TMP_3.$$s || this;
if (group == null) group = nil;
        return groups['$<<'](group)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        return groups;
      };
    }, TMP_Array_in_groups_of_1.$$arity = -2);
    
    Opal.defn(self, '$in_groups', TMP_Array_in_groups_5 = function $$in_groups(number, fill_with) {
      var TMP_4, TMP_6, self = this, $iter = TMP_Array_in_groups_5.$$p, $yield = $iter || nil, division = nil, modulo = nil, groups = nil, start = nil;

      if (fill_with == null) {
        fill_with = nil;
      }
      if ($iter) TMP_Array_in_groups_5.$$p = null;
      
      division = self.$size().$div(number);
      modulo = self.$size()['$%'](number);
      groups = [];
      start = 0;
      $send(number, 'times', [], (TMP_4 = function(index){var self = TMP_4.$$s || this, $a, $b, length = nil, last_group = nil;
if (index == null) index = nil;
      
        length = $rb_plus(division, (function() {if ($truthy(($truthy($a = $rb_gt(modulo, 0)) ? $rb_gt(modulo, index) : $a))) {
          return 1
          } else {
          return 0
        }; return nil; })());
        groups['$<<']((last_group = self.$slice(start, length)));
        if ($truthy(($truthy($a = ($truthy($b = fill_with['$!='](false)) ? $rb_gt(modulo, 0) : $b)) ? length['$=='](division) : $a))) {
          last_group['$<<'](fill_with)};
        return (start = $rb_plus(start, length));}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
      if (($yield !== nil)) {
        return $send(groups, 'each', [], (TMP_6 = function(g){var self = TMP_6.$$s || this;
if (g == null) g = nil;
        return Opal.yield1($yield, g);}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
        } else {
        return groups
      };
    }, TMP_Array_in_groups_5.$$arity = -2);
    return (Opal.defn(self, '$split', TMP_Array_split_7 = function $$split(value) {
      var TMP_8, self = this, $iter = TMP_Array_split_7.$$p, block = $iter || nil;

      if (value == null) {
        value = nil;
      }
      if ($iter) TMP_Array_split_7.$$p = null;
      return $send(self, 'inject', [[[]]], (TMP_8 = function(results, element){var self = TMP_8.$$s || this, $a, $b;
if (results == null) results = nil;if (element == null) element = nil;
      
        if ($truthy(($truthy($a = ($truthy($b = block) ? block.$call(element) : $b)) ? $a : value['$=='](element)))) {
          results['$<<']([])
          } else {
          results.$last()['$<<'](element)
        };
        return results;}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8))
    }, TMP_Array_split_7.$$arity = -1), nil) && 'split';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/array/extract_options");
  self.$require("active_support/core_ext/array/wrap");
  return self.$require("active_support/core_ext/array/grouping");
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$class_eval', '$singleton_class', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_class_eval_1;

    
    Opal.defn(self, '$class_eval', TMP_Kernel_class_eval_1 = function $$class_eval($a_rest) {
      var self = this, args, $iter = TMP_Kernel_class_eval_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_class_eval_1.$$p = null;
      return $send(self.$singleton_class(), 'class_eval', Opal.to_a(args), block.$to_proc())
    }, TMP_Kernel_class_eval_1.$$arity = -1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_remove_possible_method_1, TMP_Module_redefine_method_2;

    
    
    Opal.defn(self, '$remove_possible_method', TMP_Module_remove_possible_method_1 = function $$remove_possible_method(method) {
      var $a, self = this;

      if ($truthy(($truthy($a = self['$method_defined?'](method)) ? $a : self['$private_method_defined?'](method)))) {
        return self.$undef_method(method)
        } else {
        return nil
      }
    }, TMP_Module_remove_possible_method_1.$$arity = 1);
    return (Opal.defn(self, '$redefine_method', TMP_Module_redefine_method_2 = function $$redefine_method(method) {
      var self = this, $iter = TMP_Module_redefine_method_2.$$p, block = $iter || nil;

      if ($iter) TMP_Module_redefine_method_2.$$p = null;
      
      self.$remove_possible_method(method);
      return $send(self, 'define_method', [method], block.$to_proc());
    }, TMP_Module_redefine_method_2.$$arity = 1), nil) && 'redefine_method';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$singleton_class', '$remove_possible_method', '$define_method', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_class_attribute_11, TMP_Class_singleton_class$q_12;

    
    
    Opal.defn(self, '$class_attribute', TMP_Class_class_attribute_11 = function $$class_attribute($a_rest) {
      var $b, TMP_1, self = this, attrs, options = nil, instance_reader = nil, instance_writer = nil, instance_predicate = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      attrs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        attrs[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      options = attrs['$extract_options!']();
      instance_reader = ($truthy($b = options.$fetch("instance_accessor", true)) ? options.$fetch("instance_reader", true) : $b);
      instance_writer = ($truthy($b = options.$fetch("instance_accessor", true)) ? options.$fetch("instance_writer", true) : $b);
      instance_predicate = options.$fetch("instance_predicate", true);
      return $send(attrs, 'each', [], (TMP_1 = function(name){var self = TMP_1.$$s || this, TMP_2, TMP_3, TMP_4, TMP_9, TMP_10, ivar = nil;
if (name == null) name = nil;
      
        $send(self, 'define_singleton_method', [name], (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
        if ($truthy(instance_predicate)) {
          $send(self, 'define_singleton_method', ["" + (name) + "?"], (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$public_send(name)['$!']()['$!']()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))};
        ivar = "" + "@" + (name);
        $send(self, 'define_singleton_method', ["" + (name) + "="], (TMP_4 = function(val){var self = TMP_4.$$s || this, TMP_5, TMP_7;
if (val == null) val = nil;
        
          $send(self.$singleton_class(), 'class_eval', [], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

          
            self.$remove_possible_method(name);
            return $send(self, 'define_method', [name], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return val}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
          if ($truthy(self['$singleton_class?']())) {
            $send(self, 'class_eval', [], (TMP_7 = function(){var self = TMP_7.$$s || this, TMP_8;

            
              self.$remove_possible_method(name);
              return $send(self, 'define_method', [name], (TMP_8 = function(){var self = TMP_8.$$s || this;

              if ($truthy(self['$instance_variable_defined?'](ivar))) {
                  return self.$instance_variable_get(ivar)
                  } else {
                  return self.$singleton_class().$send(name)
                }}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))};
          return val;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        if ($truthy(instance_reader)) {
          
          self.$remove_possible_method(name);
          $send(self, 'define_method', [name], (TMP_9 = function(){var self = TMP_9.$$s || this;

          if ($truthy(self['$instance_variable_defined?'](ivar))) {
              return self.$instance_variable_get(ivar)
              } else {
              return self.$class().$public_send(name)
            }}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
          if ($truthy(instance_predicate)) {
            $send(self, 'define_method', ["" + (name) + "?"], (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$public_send(name)['$!']()['$!']()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))};};
        if ($truthy(instance_writer)) {
          return self.$attr_writer(name)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
    }, TMP_Class_class_attribute_11.$$arity = -1);
    self.$private();
    if ($truthy(self['$respond_to?']("singleton_class?"))) {
      return nil
      } else {
      return (Opal.defn(self, '$singleton_class?', TMP_Class_singleton_class$q_12 = function() {
        var $a, self = this;

        return ($truthy($a = true) ? $a : self.$ancestors().$first()['$!='](self))
      }, TMP_Class_singleton_class$q_12.$$arity = 0), nil) && 'singleton_class?'
    };
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/class/attribute")
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/enumerable"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$enum_for', '$new', '$destructure', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_index_by_1;

    
    Opal.defn(self, '$index_by', TMP_Enumerable_index_by_1 = function $$index_by() {
      var self = this, $iter = TMP_Enumerable_index_by_1.$$p, block = $iter || nil, hash = nil, $writer = nil;

      if ($iter) TMP_Enumerable_index_by_1.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("index_by")
      };
      hash = Opal.const_get_relative($nesting, 'Hash').$new();
      
      var result;

      self.$each._p = function() {
        var param = Opal.const_get_relative($nesting, 'Opal').$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        (($writer = [value, param]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return hash;
    }, TMP_Enumerable_index_by_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/hash_with_indifferent_access"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$dup', '$respond_to?', '$update', '$to_hash', '$tap', '$new', '$default', '$default=', '$-', '$default_proc', '$default_proc=']);
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $HashWithIndifferentAccess(){};
      var self = $HashWithIndifferentAccess = $klass($base, $super, 'HashWithIndifferentAccess', $HashWithIndifferentAccess);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HashWithIndifferentAccess_extractable_options$q_1, TMP_HashWithIndifferentAccess_with_indifferent_access_2, TMP_HashWithIndifferentAccess_nested_under_indifferent_access_3, TMP_HashWithIndifferentAccess_initialize_4, TMP_HashWithIndifferentAccess_new_from_hash_copying_default_6;

      
      
      Opal.defn(self, '$extractable_options?', TMP_HashWithIndifferentAccess_extractable_options$q_1 = function() {
        var self = this;

        return true
      }, TMP_HashWithIndifferentAccess_extractable_options$q_1.$$arity = 0);
      
      Opal.defn(self, '$with_indifferent_access', TMP_HashWithIndifferentAccess_with_indifferent_access_2 = function $$with_indifferent_access() {
        var self = this;

        return self.$dup()
      }, TMP_HashWithIndifferentAccess_with_indifferent_access_2.$$arity = 0);
      
      Opal.defn(self, '$nested_under_indifferent_access', TMP_HashWithIndifferentAccess_nested_under_indifferent_access_3 = function $$nested_under_indifferent_access() {
        var self = this;

        return self
      }, TMP_HashWithIndifferentAccess_nested_under_indifferent_access_3.$$arity = 0);
      
      Opal.defn(self, '$initialize', TMP_HashWithIndifferentAccess_initialize_4 = function $$initialize(constructor) {
        var self = this, $iter = TMP_HashWithIndifferentAccess_initialize_4.$$p, $yield = $iter || nil;

        if (constructor == null) {
          constructor = $hash2([], {});
        }
        if ($iter) TMP_HashWithIndifferentAccess_initialize_4.$$p = null;
        if ($truthy(constructor['$respond_to?']("to_hash"))) {
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_HashWithIndifferentAccess_initialize_4, false), [], null);
          return self.$update(constructor);
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_HashWithIndifferentAccess_initialize_4, false), [constructor], null)
        }
      }, TMP_HashWithIndifferentAccess_initialize_4.$$arity = -1);
      return Opal.defs(self, '$new_from_hash_copying_default', TMP_HashWithIndifferentAccess_new_from_hash_copying_default_6 = function $$new_from_hash_copying_default(hash) {
        var TMP_5, self = this;

        
        hash = hash.$to_hash();
        return $send(self.$new(hash), 'tap', [], (TMP_5 = function(new_hash){var self = TMP_5.$$s || this, $writer = nil;
if (new_hash == null) new_hash = nil;
        
          
          $writer = [hash.$default()];
          $send(new_hash, 'default=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(hash.$default_proc())) {
            
            $writer = [hash.$default_proc()];
            $send(new_hash, 'default_proc=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
      }, TMP_HashWithIndifferentAccess_new_from_hash_copying_default_6.$$arity = 1);
    })($nesting[0], Opal.const_get_relative($nesting, 'Hash'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/hash/indifferent_access"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$new_from_hash_copying_default']);
  
  self.$require("active_support/hash_with_indifferent_access");
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_with_indifferent_access_1;

    
    
    Opal.defn(self, '$with_indifferent_access', TMP_Hash_with_indifferent_access_1 = function $$with_indifferent_access() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'HashWithIndifferentAccess').$new_from_hash_copying_default(self)
    }, TMP_Hash_with_indifferent_access_1.$$arity = 0);
    return Opal.alias(self, "nested_under_indifferent_access", "with_indifferent_access");
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/hash/indifferent_access")
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/numeric/time"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$*', '$hours', '$days', '$weeks', '$-', '$current', '$+']);
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_seconds_1, TMP_Numeric_minutes_2, TMP_Numeric_hours_3, TMP_Numeric_days_4, TMP_Numeric_weeks_5, TMP_Numeric_fortnights_6, TMP_Numeric_ago_7, TMP_Numeric_since_8;

    
    
    Opal.defn(self, '$seconds', TMP_Numeric_seconds_1 = function $$seconds() {
      var self = this;

      return self
    }, TMP_Numeric_seconds_1.$$arity = 0);
    Opal.alias(self, "second", "seconds");
    
    Opal.defn(self, '$minutes', TMP_Numeric_minutes_2 = function $$minutes() {
      var self = this;

      return $rb_times(self, 60)
    }, TMP_Numeric_minutes_2.$$arity = 0);
    Opal.alias(self, "minute", "minutes");
    
    Opal.defn(self, '$hours', TMP_Numeric_hours_3 = function $$hours() {
      var self = this;

      return $rb_times(self, 3600)
    }, TMP_Numeric_hours_3.$$arity = 0);
    Opal.alias(self, "hour", "hours");
    
    Opal.defn(self, '$days', TMP_Numeric_days_4 = function $$days() {
      var self = this;

      return $rb_times(self, (24).$hours())
    }, TMP_Numeric_days_4.$$arity = 0);
    Opal.alias(self, "day", "days");
    
    Opal.defn(self, '$weeks', TMP_Numeric_weeks_5 = function $$weeks() {
      var self = this;

      return $rb_times(self, (7).$days())
    }, TMP_Numeric_weeks_5.$$arity = 0);
    Opal.alias(self, "week", "weeks");
    
    Opal.defn(self, '$fortnights', TMP_Numeric_fortnights_6 = function $$fortnights() {
      var self = this;

      return $rb_times(self, (2).$weeks())
    }, TMP_Numeric_fortnights_6.$$arity = 0);
    Opal.alias(self, "fortnight", "fortnights");
    
    Opal.defn(self, '$ago', TMP_Numeric_ago_7 = function $$ago(time) {
      var self = this;

      if (time == null) {
        time = Opal.const_get_qualified('::', 'Time').$current();
      }
      return $rb_minus(time, self)
    }, TMP_Numeric_ago_7.$$arity = -1);
    Opal.alias(self, "until", "ago");
    
    Opal.defn(self, '$since', TMP_Numeric_since_8 = function $$since(time) {
      var self = this;

      if (time == null) {
        time = Opal.const_get_qualified('::', 'Time').$current();
      }
      return $rb_plus(time, self)
    }, TMP_Numeric_since_8.$$arity = -1);
    return Opal.alias(self, "from_now", "since");
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/integer/time"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$*', '$days']);
  
  self.$require("active_support/core_ext/numeric/time");
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_months_1, TMP_Numeric_years_2;

    
    
    Opal.defn(self, '$months', TMP_Numeric_months_1 = function $$months() {
      var self = this;

      return $rb_times(self, (30).$days())
    }, TMP_Numeric_months_1.$$arity = 0);
    Opal.alias(self, "month", "months");
    
    Opal.defn(self, '$years', TMP_Numeric_years_2 = function $$years() {
      var self = this;

      return $rb_times(self, (365.25).$days())
    }, TMP_Numeric_years_2.$$arity = 0);
    return Opal.alias(self, "year", "years");
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/integer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/integer/time")
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/kernel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext/kernel/singleton_class")
};

/* Generated by Opal 0.11.4 */
Opal.modules["set"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  
  (function($base, $super, $parent_nesting) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Set_$$_1, TMP_Set_initialize_2, TMP_Set_dup_4, TMP_Set_$_5, TMP_Set_inspect_6, TMP_Set_$eq$eq_8, TMP_Set_add_9, TMP_Set_classify_10, TMP_Set_collect$B_13, TMP_Set_delete_15, TMP_Set_delete$q_16, TMP_Set_delete_if_17, TMP_Set_add$q_20, TMP_Set_each_21, TMP_Set_empty$q_22, TMP_Set_eql$q_24, TMP_Set_clear_25, TMP_Set_include$q_26, TMP_Set_merge_28, TMP_Set_replace_29, TMP_Set_size_30, TMP_Set_subtract_32, TMP_Set_$_33, TMP_Set_superset$q_35, TMP_Set_proper_superset$q_37, TMP_Set_subset$q_39, TMP_Set_proper_subset$q_41, TMP_Set_to_a_42;

    def.hash = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    Opal.defs(self, '$[]', TMP_Set_$$_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary)
    }, TMP_Set_$$_1.$$arity = -1);
    
    Opal.defn(self, '$initialize', TMP_Set_initialize_2 = function $$initialize(enum$) {
      var TMP_3, self = this, $iter = TMP_Set_initialize_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      if ($iter) TMP_Set_initialize_2.$$p = null;
      
      self.hash = Opal.const_get_relative($nesting, 'Hash').$new();
      if ($truthy(enum$['$nil?']())) {
        return nil};
      if ($truthy(Opal.const_get_relative($nesting, 'Enumerable')['$==='](enum$))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      if ($truthy(block)) {
        return $send(enum$, 'each', [], (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
        } else {
        return self.$merge(enum$)
      };
    }, TMP_Set_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$dup', TMP_Set_dup_4 = function $$dup() {
      var self = this, result = nil;

      
      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_Set_dup_4.$$arity = 0);
    
    Opal.defn(self, '$-', TMP_Set_$_5 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_Set_$_5.$$arity = 1);
    Opal.alias(self, "difference", "-");
    
    Opal.defn(self, '$inspect', TMP_Set_inspect_6 = function $$inspect() {
      var self = this;

      return "" + "#<Set: {" + (self.$to_a().$join(",")) + "}>"
    }, TMP_Set_inspect_6.$$arity = 0);
    
    Opal.defn(self, '$==', TMP_Set_$eq$eq_8 = function(other) {
      var $a, TMP_7, self = this;

      if ($truthy(self['$equal?'](other))) {
        return true
      } else if ($truthy(other['$instance_of?'](self.$class()))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ($truthy(($truthy($a = other['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {
        return $send(other, 'all?', [], (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
        } else {
        return false
      }
    }, TMP_Set_$eq$eq_8.$$arity = 1);
    
    Opal.defn(self, '$add', TMP_Set_add_9 = function $$add(o) {
      var self = this, $writer = nil;

      
      
      $writer = [o, true];
      $send(self.hash, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self;
    }, TMP_Set_add_9.$$arity = 1);
    Opal.alias(self, "<<", "add");
    
    Opal.defn(self, '$classify', TMP_Set_classify_10 = function $$classify() {
      var TMP_11, TMP_12, self = this, $iter = TMP_Set_classify_10.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Set_classify_10.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_11 = function(h, k){var self = TMP_11.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
      
        $writer = [k, self.$class().$new()];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11));
      $send(self, 'each', [], (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
      return result;
    }, TMP_Set_classify_10.$$arity = 0);
    
    Opal.defn(self, '$collect!', TMP_Set_collect$B_13 = function() {
      var TMP_14, self = this, $iter = TMP_Set_collect$B_13.$$p, block = $iter || nil, result = nil;

      if ($iter) TMP_Set_collect$B_13.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      $send(self, 'each', [], (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
      return self.$replace(result);
    }, TMP_Set_collect$B_13.$$arity = 0);
    Opal.alias(self, "map!", "collect!");
    
    Opal.defn(self, '$delete', TMP_Set_delete_15 = function(o) {
      var self = this;

      
      self.hash.$delete(o);
      return self;
    }, TMP_Set_delete_15.$$arity = 1);
    
    Opal.defn(self, '$delete?', TMP_Set_delete$q_16 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        
        self.$delete(o);
        return self;
        } else {
        return nil
      }
    }, TMP_Set_delete$q_16.$$arity = 1);
    
    Opal.defn(self, '$delete_if', TMP_Set_delete_if_17 = function $$delete_if() {try {

      var $a, TMP_18, TMP_19, self = this, $iter = TMP_Set_delete_if_17.$$p, $yield = $iter || nil;

      if ($iter) TMP_Set_delete_if_17.$$p = null;
      
      ($truthy($a = ($yield !== nil)) ? $a : Opal.ret(self.$enum_for("delete_if")));
      $send($send(self, 'select', [], (TMP_18 = function(o){var self = TMP_18.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18)), 'each', [], (TMP_19 = function(o){var self = TMP_19.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Set_delete_if_17.$$arity = 0);
    
    Opal.defn(self, '$add?', TMP_Set_add$q_20 = function(o) {
      var self = this;

      if ($truthy(self['$include?'](o))) {
        return nil
        } else {
        return self.$add(o)
      }
    }, TMP_Set_add$q_20.$$arity = 1);
    
    Opal.defn(self, '$each', TMP_Set_each_21 = function $$each() {
      var self = this, $iter = TMP_Set_each_21.$$p, block = $iter || nil;

      if ($iter) TMP_Set_each_21.$$p = null;
      
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      $send(self.hash, 'each_key', [], block.$to_proc());
      return self;
    }, TMP_Set_each_21.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Set_empty$q_22 = function() {
      var self = this;

      return self.hash['$empty?']()
    }, TMP_Set_empty$q_22.$$arity = 0);
    
    Opal.defn(self, '$eql?', TMP_Set_eql$q_24 = function(other) {
      var TMP_23, self = this;

      return self.hash['$eql?']($send(other, 'instance_eval', [], (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23)))
    }, TMP_Set_eql$q_24.$$arity = 1);
    
    Opal.defn(self, '$clear', TMP_Set_clear_25 = function $$clear() {
      var self = this;

      
      self.hash.$clear();
      return self;
    }, TMP_Set_clear_25.$$arity = 0);
    
    Opal.defn(self, '$include?', TMP_Set_include$q_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o)
    }, TMP_Set_include$q_26.$$arity = 1);
    Opal.alias(self, "member?", "include?");
    
    Opal.defn(self, '$merge', TMP_Set_merge_28 = function $$merge(enum$) {
      var TMP_27, self = this;

      
      $send(enum$, 'each', [], (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
      return self;
    }, TMP_Set_merge_28.$$arity = 1);
    
    Opal.defn(self, '$replace', TMP_Set_replace_29 = function $$replace(enum$) {
      var self = this;

      
      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_Set_replace_29.$$arity = 1);
    
    Opal.defn(self, '$size', TMP_Set_size_30 = function $$size() {
      var self = this;

      return self.hash.$size()
    }, TMP_Set_size_30.$$arity = 0);
    Opal.alias(self, "length", "size");
    
    Opal.defn(self, '$subtract', TMP_Set_subtract_32 = function $$subtract(enum$) {
      var TMP_31, self = this;

      
      $send(enum$, 'each', [], (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
      return self;
    }, TMP_Set_subtract_32.$$arity = 1);
    
    Opal.defn(self, '$|', TMP_Set_$_33 = function(enum$) {
      var self = this;

      
      if ($truthy(enum$['$respond_to?']("each"))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_Set_$_33.$$arity = 1);
    
    Opal.defn(self, '$superset?', TMP_Set_superset$q_35 = function(set) {
      var $a, TMP_34, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));
    }, TMP_Set_superset$q_35.$$arity = 1);
    Opal.alias(self, ">=", "superset?");
    
    Opal.defn(self, '$proper_superset?', TMP_Set_proper_superset$q_37 = function(set) {
      var $a, TMP_36, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(self.$size(), set.$size()))) {
        return false};
      return $send(set, 'all?', [], (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
    }, TMP_Set_proper_superset$q_37.$$arity = 1);
    Opal.alias(self, ">", "proper_superset?");
    
    Opal.defn(self, '$subset?', TMP_Set_subset$q_39 = function(set) {
      var $a, TMP_38, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_lt(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
    }, TMP_Set_subset$q_39.$$arity = 1);
    Opal.alias(self, "<=", "subset?");
    
    Opal.defn(self, '$proper_subset?', TMP_Set_proper_subset$q_41 = function(set) {
      var $a, TMP_40, self = this;

      
      ($truthy($a = set['$is_a?'](Opal.const_get_relative($nesting, 'Set'))) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "value must be a set"));
      if ($truthy($rb_le(set.$size(), self.$size()))) {
        return false};
      return $send(self, 'all?', [], (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
    }, TMP_Set_proper_subset$q_41.$$arity = 1);
    Opal.alias(self, "<", "proper_subset?");
    Opal.alias(self, "+", "|");
    Opal.alias(self, "union", "|");
    return (Opal.defn(self, '$to_a', TMP_Set_to_a_42 = function $$to_a() {
      var self = this;

      return self.hash.$keys()
    }, TMP_Set_to_a_42.$$arity = 0), nil) && 'to_a';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_set_43;

    
    Opal.defn(self, '$to_set', TMP_Enumerable_to_set_43 = function $$to_set(klass, $a_rest) {
      var self = this, args, $iter = TMP_Enumerable_to_set_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = Opal.const_get_relative($nesting, 'Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Enumerable_to_set_43.$$p = null;
      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc())
    }, TMP_Enumerable_to_set_43.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/inflector/inflections"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$add', '$map', '$flatten', '$to_proc', '$concat', '$include?', '$downcase', '$new', '$[]', '$[]=', '$-', '$attr_reader', '$each', '$instance_variable_set', '$dup', '$send', '$is_a?', '$delete', '$unshift', '$==', '$upcase', '$plural', '$+', '$singular', '$===', '$instance']);
  
  self.$require("set");
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Inflector, self = $Inflector = $module($base, 'Inflector');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inflector_inflections_15;

      
      self.$extend(self);
      (function($base, $super, $parent_nesting) {
        function $Inflections(){};
        var self = $Inflections = $klass($base, $super, 'Inflections', $Inflections);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inflections_instance_5, TMP_Inflections_initialize_6, TMP_Inflections_initialize_dup_8, TMP_Inflections_plural_9, TMP_Inflections_singular_10, TMP_Inflections_uncountable_11, TMP_Inflections_human_12, TMP_Inflections_irregular_13, TMP_Inflections_clear_14;

        def.uncountables = def.plurals = def.singulars = def.humans = nil;
        
        self.__instance__ = $hash2([], {});
        (function($base, $super, $parent_nesting) {
          function $Uncountables(){};
          var self = $Uncountables = $klass($base, $super, 'Uncountables', $Uncountables);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Uncountables_$lt$lt_1, TMP_Uncountables_add_2, TMP_Uncountables_uncountable$q_3, TMP_Uncountables_dup_4;

          
          
          Opal.defn(self, '$<<', TMP_Uncountables_$lt$lt_1 = function($a_rest) {
            var self = this, word;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            word = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              word[$arg_idx - 0] = arguments[$arg_idx];
            }
            return self.$add(word)
          }, TMP_Uncountables_$lt$lt_1.$$arity = -1);
          
          Opal.defn(self, '$add', TMP_Uncountables_add_2 = function $$add(words) {
            var self = this;

            
            words = $send(words.$flatten(), 'map', [], "downcase".$to_proc());
            self.$concat(words);
            return self;
          }, TMP_Uncountables_add_2.$$arity = 1);
          
          Opal.defn(self, '$uncountable?', TMP_Uncountables_uncountable$q_3 = function(str) {
            var self = this;

            return self['$include?'](str.$downcase())
          }, TMP_Uncountables_uncountable$q_3.$$arity = 1);
          return (Opal.defn(self, '$dup', TMP_Uncountables_dup_4 = function $$dup() {
            var self = this, copy = nil;

            
            copy = Opal.const_get_relative($nesting, 'Uncountables').$new();
            copy.$add(self);
            return copy;
          }, TMP_Uncountables_dup_4.$$arity = 0), nil) && 'dup';
        })($nesting[0], Opal.const_get_relative($nesting, 'Array'), $nesting);
        Opal.defs(self, '$instance', TMP_Inflections_instance_5 = function $$instance(locale) {
          var $a, self = this, $writer = nil;
          if (self.__instance__ == null) self.__instance__ = nil;

          return ($truthy($a = self.__instance__['$[]'](locale)) ? $a : (($writer = [locale, self.$new()]), $send(self.__instance__, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
        }, TMP_Inflections_instance_5.$$arity = 1);
        self.$attr_reader("plurals", "singulars", "uncountables", "humans");
        
        Opal.defn(self, '$initialize', TMP_Inflections_initialize_6 = function $$initialize() {
          var $a, self = this;

          return $a = [[], [], Opal.const_get_relative($nesting, 'Uncountables').$new(), []], (self.plurals = $a[0]), (self.singulars = $a[1]), (self.uncountables = $a[2]), (self.humans = $a[3]), $a
        }, TMP_Inflections_initialize_6.$$arity = 0);
        
        Opal.defn(self, '$initialize_dup', TMP_Inflections_initialize_dup_8 = function $$initialize_dup(orig) {
          var TMP_7, self = this;

          return $send(["plurals", "singulars", "uncountables", "humans"], 'each', [], (TMP_7 = function(scope){var self = TMP_7.$$s || this;
if (scope == null) scope = nil;
          return self.$instance_variable_set("" + "@" + (scope), orig.$send(scope).$dup())}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
        }, TMP_Inflections_initialize_dup_8.$$arity = 1);
        
        Opal.defn(self, '$plural', TMP_Inflections_plural_9 = function $$plural(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.plurals.$unshift([rule, replacement]);
        }, TMP_Inflections_plural_9.$$arity = 2);
        
        Opal.defn(self, '$singular', TMP_Inflections_singular_10 = function $$singular(rule, replacement) {
          var self = this;

          
          if ($truthy(rule['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            self.uncountables.$delete(rule)};
          self.uncountables.$delete(replacement);
          return self.singulars.$unshift([rule, replacement]);
        }, TMP_Inflections_singular_10.$$arity = 2);
        
        Opal.defn(self, '$uncountable', TMP_Inflections_uncountable_11 = function $$uncountable($a_rest) {
          var self = this, words;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          words = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            words[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.uncountables.$add(words)
        }, TMP_Inflections_uncountable_11.$$arity = -1);
        
        Opal.defn(self, '$human', TMP_Inflections_human_12 = function $$human(rule, replacement) {
          var self = this;

          return self.humans.$unshift([rule, replacement])
        }, TMP_Inflections_human_12.$$arity = 2);
        
        Opal.defn(self, '$irregular', TMP_Inflections_irregular_13 = function $$irregular(singular, plural) {
          var self = this, s0 = nil, srest = nil, p0 = nil, prest = nil;

          
          self.uncountables.$delete(singular);
          self.uncountables.$delete(plural);
          s0 = singular['$[]'](0);
          srest = singular['$[]']($range(1, -1, false));
          p0 = plural['$[]'](0);
          prest = plural['$[]']($range(1, -1, false));
          if (s0.$upcase()['$=='](p0.$upcase())) {
            
            self.$plural(new RegExp("" + "(" + (s0) + ")" + (srest) + "$", 'i'), $rb_plus("\\1", prest));
            self.$plural(new RegExp("" + "(" + (p0) + ")" + (prest) + "$", 'i'), $rb_plus("\\1", prest));
            self.$singular(new RegExp("" + "(" + (s0) + ")" + (srest) + "$", 'i'), $rb_plus("\\1", srest));
            return self.$singular(new RegExp("" + "(" + (p0) + ")" + (prest) + "$", 'i'), $rb_plus("\\1", srest));
            } else {
            
            self.$plural(new RegExp("" + (s0.$upcase()) + (srest) + "$", 'i'), $rb_plus(p0.$upcase(), prest));
            self.$plural(new RegExp("" + (s0.$downcase()) + (srest) + "$", 'i'), $rb_plus(p0.$downcase(), prest));
            self.$plural(new RegExp("" + (p0.$upcase()) + (prest) + "$", 'i'), $rb_plus(p0.$upcase(), prest));
            self.$plural(new RegExp("" + (p0.$downcase()) + (prest) + "$", 'i'), $rb_plus(p0.$downcase(), prest));
            self.$singular(new RegExp("" + (s0.$upcase()) + (srest) + "$", 'i'), $rb_plus(s0.$upcase(), srest));
            self.$singular(new RegExp("" + (s0.$downcase()) + (srest) + "$", 'i'), $rb_plus(s0.$downcase(), srest));
            self.$singular(new RegExp("" + (p0.$upcase()) + (prest) + "$", 'i'), $rb_plus(s0.$upcase(), srest));
            return self.$singular(new RegExp("" + (p0.$downcase()) + (prest) + "$", 'i'), $rb_plus(s0.$downcase(), srest));
          };
        }, TMP_Inflections_irregular_13.$$arity = 2);
        return (Opal.defn(self, '$clear', TMP_Inflections_clear_14 = function $$clear(scope) {
          var $a, self = this, $case = nil;

          if (scope == null) {
            scope = "all";
          }
          return (function() {$case = scope;
          if ("all"['$===']($case)) {return $a = [[], [], Opal.const_get_relative($nesting, 'Uncountables').$new(), []], (self.plurals = $a[0]), (self.singulars = $a[1]), (self.uncountables = $a[2]), (self.humans = $a[3]), $a}
          else {return self.$instance_variable_set("" + "@" + (scope), [])}})()
        }, TMP_Inflections_clear_14.$$arity = -1), nil) && 'clear';
      })($nesting[0], null, $nesting);
      
      Opal.defn(self, '$inflections', TMP_Inflector_inflections_15 = function $$inflections(locale) {
        var self = this, $iter = TMP_Inflector_inflections_15.$$p, $yield = $iter || nil;

        if (locale == null) {
          locale = "en";
        }
        if ($iter) TMP_Inflector_inflections_15.$$p = null;
        if (($yield !== nil)) {
          return Opal.yield1($yield, Opal.const_get_relative($nesting, 'Inflections').$instance(locale));
          } else {
          return Opal.const_get_relative($nesting, 'Inflections').$instance(locale)
        }
      }, TMP_Inflector_inflections_15.$$arity = -1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/inflections"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;

  Opal.add_stubs(['$require', '$inflections', '$plural', '$singular', '$irregular', '$uncountable']);
  
  self.$require("active_support/inflector/inflections");
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ActiveSupport_1;

    $send(Opal.const_get_relative($nesting, 'Inflector'), 'inflections', ["en"], (TMP_ActiveSupport_1 = function(inflect){var self = TMP_ActiveSupport_1.$$s || this;
if (inflect == null) inflect = nil;
    
      inflect.$plural(/$/, "s");
      inflect.$plural(/s$/i, "s");
      inflect.$plural(/^(ax|test)is$/i, "\\1es");
      inflect.$plural(/(octop|vir)us$/i, "\\1i");
      inflect.$plural(/(octop|vir)i$/i, "\\1i");
      inflect.$plural(/(alias|status)$/i, "\\1es");
      inflect.$plural(/(bu)s$/i, "\\1ses");
      inflect.$plural(/(buffal|tomat)o$/i, "\\1oes");
      inflect.$plural(/([ti])um$/i, "\\1a");
      inflect.$plural(/([ti])a$/i, "\\1a");
      inflect.$plural(/sis$/i, "ses");
      inflect.$plural(/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves");
      inflect.$plural(/(hive)$/i, "\\1s");
      inflect.$plural(/([^aeiouy]|qu)y$/i, "\\1ies");
      inflect.$plural(/(x|ch|ss|sh)$/i, "\\1es");
      inflect.$plural(/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices");
      inflect.$plural(/^(m|l)ouse$/i, "\\1ice");
      inflect.$plural(/^(m|l)ice$/i, "\\1ice");
      inflect.$plural(/^(ox)$/i, "\\1en");
      inflect.$plural(/^(oxen)$/i, "\\1");
      inflect.$plural(/(quiz)$/i, "\\1zes");
      inflect.$singular(/s$/i, "");
      inflect.$singular(/(ss)$/i, "\\1");
      inflect.$singular(/(n)ews$/i, "\\1ews");
      inflect.$singular(/([ti])a$/i, "\\1um");
      inflect.$singular(/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/(^analy)(sis|ses)$/i, "\\1sis");
      inflect.$singular(/([^f])ves$/i, "\\1fe");
      inflect.$singular(/(hive)s$/i, "\\1");
      inflect.$singular(/(tive)s$/i, "\\1");
      inflect.$singular(/([lr])ves$/i, "\\1f");
      inflect.$singular(/([^aeiouy]|qu)ies$/i, "\\1y");
      inflect.$singular(/(s)eries$/i, "\\1eries");
      inflect.$singular(/(m)ovies$/i, "\\1ovie");
      inflect.$singular(/(x|ch|ss|sh)es$/i, "\\1");
      inflect.$singular(/^(m|l)ice$/i, "\\1ouse");
      inflect.$singular(/(bus)(es)?$/i, "\\1");
      inflect.$singular(/(o)es$/i, "\\1");
      inflect.$singular(/(shoe)s$/i, "\\1");
      inflect.$singular(/(cris|test)(is|es)$/i, "\\1is");
      inflect.$singular(/^(a)x[ie]s$/i, "\\1xis");
      inflect.$singular(/(octop|vir)(us|i)$/i, "\\1us");
      inflect.$singular(/(alias|status)(es)?$/i, "\\1");
      inflect.$singular(/^(ox)en/i, "\\1");
      inflect.$singular(/(vert|ind)ices$/i, "\\1ex");
      inflect.$singular(/(matr)ices$/i, "\\1ix");
      inflect.$singular(/(quiz)zes$/i, "\\1");
      inflect.$singular(/(database)s$/i, "\\1");
      inflect.$irregular("person", "people");
      inflect.$irregular("man", "men");
      inflect.$irregular("child", "children");
      inflect.$irregular("sex", "sexes");
      inflect.$irregular("move", "moves");
      inflect.$irregular("zombie", "zombies");
      return inflect.$uncountable(["equipment", "information", "rice", "money", "species", "series", "fish", "sheep", "jeans", "police"]);}, TMP_ActiveSupport_1.$$s = self, TMP_ActiveSupport_1.$$arity = 1, TMP_ActiveSupport_1))
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/inflector/methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$extend', '$apply_inflections', '$plurals', '$inflections', '$singulars', '$to_s', '$sub', '$capitalize', '$downcase', '$gsub', '$freeze', '$match?', '$tr', '$dup', '$each', '$humans', '$is_a?', '$=~', '$==', '$upcase', '$>', '$length', '$+', '$[]', '$humanize', '$underscore', '$pluralize', '$camelize', '$singularize', '$rindex', '$demodulize', '$split', '$empty?', '$raise', '$size', '$first', '$shift', '$inject', '$const_get', '$const_defined?', '$ancestors', '$constantize', '$name', '$!', '$include?', '$const_regexp', '$message', '$abs', '$to_i', '$%', '$===', '$ordinal', '$private', '$blank?', '$escape', '$pop', '$reverse', '$uncountable?', '$uncountables']);
  
  self.$require("active_support/inflections");
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Inflector, self = $Inflector = $module($base, 'Inflector');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Inflector_pluralize_1, TMP_Inflector_singularize_2, TMP_Inflector_camelize_5, TMP_Inflector_underscore_6, TMP_Inflector_humanize_10, TMP_Inflector_upcase_first_11, TMP_Inflector_titleize_13, TMP_Inflector_tableize_14, TMP_Inflector_classify_15, TMP_Inflector_dasherize_16, TMP_Inflector_demodulize_17, TMP_Inflector_deconstantize_18, TMP_Inflector_foreign_key_19, TMP_Inflector_constantize_22, TMP_Inflector_safe_constantize_23, TMP_Inflector_ordinal_24, TMP_Inflector_ordinalize_25, TMP_Inflector_const_regexp_27, TMP_Inflector_apply_inflections_29;

      
      self.$extend(self);
      
      Opal.defn(self, '$pluralize', TMP_Inflector_pluralize_1 = function $$pluralize(word, locale) {
        var self = this;

        if (locale == null) {
          locale = "en";
        }
        return self.$apply_inflections(word, self.$inflections(locale).$plurals(), locale)
      }, TMP_Inflector_pluralize_1.$$arity = -2);
      
      Opal.defn(self, '$singularize', TMP_Inflector_singularize_2 = function $$singularize(word, locale) {
        var self = this;

        if (locale == null) {
          locale = "en";
        }
        return self.$apply_inflections(word, self.$inflections(locale).$singulars(), locale)
      }, TMP_Inflector_singularize_2.$$arity = -2);
      
      Opal.defn(self, '$camelize', TMP_Inflector_camelize_5 = function $$camelize(term, uppercase_first_letter) {
        var TMP_3, TMP_4, self = this, string = nil;

        if (uppercase_first_letter == null) {
          uppercase_first_letter = true;
        }
        
        string = term.$to_s();
        if ($truthy(uppercase_first_letter)) {
          string = $send(string, 'sub', [/^[a-z\d]*/], (TMP_3 = function(match){var self = TMP_3.$$s || this;
if (match == null) match = nil;
          return match.$capitalize()}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
          } else {
          string = string.$downcase()
        };
        string = $send(string, 'gsub', [/(?:_|(\/))([a-z\d]*)/i], (TMP_4 = function(){var self = TMP_4.$$s || this, $a;

        return "" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$capitalize())}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
        string = string.$gsub("/".$freeze(), "::".$freeze());
        return string;
      }, TMP_Inflector_camelize_5.$$arity = -2);
      
      Opal.defn(self, '$underscore', TMP_Inflector_underscore_6 = function $$underscore(camel_cased_word) {
        var self = this, word = nil;

        
        if ($truthy(/[A-Z-]|::/['$match?'](camel_cased_word))) {
          } else {
          return camel_cased_word
        };
        word = camel_cased_word.$to_s().$gsub("::".$freeze(), "/".$freeze());
        word = word.$gsub(/([A-Z\d]+)([A-Z][a-z])/, "\\1_\\2".$freeze());
        word = word.$gsub(/([a-z\d])([A-Z])/, "\\1_\\2".$freeze());
        word = word.$tr("-".$freeze(), "_".$freeze());
        word = word.$downcase();
        return word;
      }, TMP_Inflector_underscore_6.$$arity = 1);
      
      Opal.defn(self, '$humanize', TMP_Inflector_humanize_10 = function $$humanize(lower_case_and_underscored_word, $kwargs) {
        var TMP_7, TMP_8, TMP_9, self = this, capitalize, keep_id_suffix, result = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        capitalize = $kwargs.$$smap["capitalize"];
        if (capitalize == null) {
          capitalize = true
        }
        keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
        if (keep_id_suffix == null) {
          keep_id_suffix = false
        }
        
        result = lower_case_and_underscored_word.$to_s().$dup();
        (function(){var $brk = Opal.new_brk(); try {return $send(self.$inflections().$humans(), 'each', [], (TMP_7 = function($a){var self = TMP_7.$$s || this, $a_args, rule, replacement, $b, $c;

          if ($a == null) {
            $a = nil;
          }
          $a = Opal.to_ary($a);
          $a_args = Opal.slice.call($a, 0, $a.length);
          rule = $a_args.splice(0,1)[0];
          if (rule == null) {
            rule = nil;
          }
          replacement = $a_args.splice(0,1)[0];
          if (replacement == null) {
            replacement = nil;
          }
        if ($truthy(($truthy($b = ($truthy($c = rule['$is_a?'](Opal.const_get_relative($nesting, 'Regexp'))) ? result['$=~'](rule) : $c)) ? $b : ($truthy($c = rule['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? result['$=='](rule) : $c)))) {
            
            result = result.$sub(rule, replacement);
            
            Opal.brk(nil, $brk);
            } else {
            return nil
          }}, TMP_7.$$s = self, TMP_7.$$brk = $brk, TMP_7.$$arity = 1, TMP_7.$$has_top_level_mlhs_arg = true, TMP_7))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        result = result.$sub(/^_+/, "".$freeze());
        if ($truthy(keep_id_suffix)) {
          } else {
          result = result.$sub(/_id$/, "".$freeze())
        };
        result = result.$tr("_".$freeze(), " ".$freeze());
        result = $send(result, 'gsub', [/([a-z\d]*)/i], (TMP_8 = function(match){var self = TMP_8.$$s || this;
if (match == null) match = nil;
        return "" + (match.$downcase())}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
        if ($truthy(capitalize)) {
          result = $send(result, 'sub', [/^\w/], (TMP_9 = function(match){var self = TMP_9.$$s || this;
if (match == null) match = nil;
          return match.$upcase()}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))};
        return result;
      }, TMP_Inflector_humanize_10.$$arity = -2);
      
      Opal.defn(self, '$upcase_first', TMP_Inflector_upcase_first_11 = function $$upcase_first(string) {
        var self = this;

        if ($truthy($rb_gt(string.$length(), 0))) {
          return $rb_plus(string['$[]'](0).$upcase(), string['$[]']($range(1, -1, false)))
          } else {
          return ""
        }
      }, TMP_Inflector_upcase_first_11.$$arity = 1);
      
      Opal.defn(self, '$titleize', TMP_Inflector_titleize_13 = function $$titleize(word, $kwargs) {
        var TMP_12, self = this, keep_id_suffix;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
        if (keep_id_suffix == null) {
          keep_id_suffix = false
        }
        return $send(self.$humanize(self.$underscore(word), $hash2(["keep_id_suffix"], {"keep_id_suffix": keep_id_suffix})), 'gsub', [/([a-zA-Z'’`])[a-z]*/], (TMP_12 = function(match){var self = TMP_12.$$s || this;
if (match == null) match = nil;
        return match.$capitalize()}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
      }, TMP_Inflector_titleize_13.$$arity = -2);
      
      Opal.defn(self, '$tableize', TMP_Inflector_tableize_14 = function $$tableize(class_name) {
        var self = this;

        return self.$pluralize(self.$underscore(class_name))
      }, TMP_Inflector_tableize_14.$$arity = 1);
      
      Opal.defn(self, '$classify', TMP_Inflector_classify_15 = function $$classify(table_name) {
        var self = this;

        return self.$camelize(self.$singularize(table_name.$to_s().$sub(/.*\./, "".$freeze())))
      }, TMP_Inflector_classify_15.$$arity = 1);
      
      Opal.defn(self, '$dasherize', TMP_Inflector_dasherize_16 = function $$dasherize(underscored_word) {
        var self = this;

        return underscored_word.$tr("_".$freeze(), "-".$freeze())
      }, TMP_Inflector_dasherize_16.$$arity = 1);
      
      Opal.defn(self, '$demodulize', TMP_Inflector_demodulize_17 = function $$demodulize(path) {
        var self = this, i = nil;

        
        path = path.$to_s();
        if ($truthy((i = path.$rindex("::")))) {
          return path['$[]'](Opal.Range.$new($rb_plus(i, 2), -1, false))
          } else {
          return path
        };
      }, TMP_Inflector_demodulize_17.$$arity = 1);
      
      Opal.defn(self, '$deconstantize', TMP_Inflector_deconstantize_18 = function $$deconstantize(path) {
        var $a, self = this;

        return path.$to_s()['$[]'](0, ($truthy($a = path.$rindex("::")) ? $a : 0))
      }, TMP_Inflector_deconstantize_18.$$arity = 1);
      
      Opal.defn(self, '$foreign_key', TMP_Inflector_foreign_key_19 = function $$foreign_key(class_name, separate_class_name_and_id_with_underscore) {
        var self = this;

        if (separate_class_name_and_id_with_underscore == null) {
          separate_class_name_and_id_with_underscore = true;
        }
        return $rb_plus(self.$underscore(self.$demodulize(class_name)), (function() {if ($truthy(separate_class_name_and_id_with_underscore)) {
          return "_id"
          } else {
          return "id"
        }; return nil; })())
      }, TMP_Inflector_foreign_key_19.$$arity = -2);
      
      Opal.defn(self, '$constantize', TMP_Inflector_constantize_22 = function $$constantize(camel_cased_word) {
        var $a, TMP_20, self = this, names = nil;

        
        names = camel_cased_word.$split("::");
        if ($truthy(names['$empty?']())) {
          self.$raise(Opal.const_get_relative($nesting, 'NameError'), "wrong constant name ")};
        if ($truthy(($truthy($a = $rb_gt(names.$size(), 1)) ? names.$first()['$empty?']() : $a))) {
          names.$shift()};
        return (function(){var $brk = Opal.new_brk(); try {return $send(names, 'inject', [Opal.const_get_relative($nesting, 'Object')], (TMP_20 = function(constant, name){var self = TMP_20.$$s || this, TMP_21, candidate = nil;
if (constant == null) constant = nil;if (name == null) name = nil;
        if (constant['$=='](Opal.const_get_relative($nesting, 'Object'))) {
            return constant.$const_get(name)
            } else {
            
            candidate = constant.$const_get(name);
            if ($truthy(constant['$const_defined?'](name, false))) {
              return candidate;};
            if ($truthy(Opal.const_get_relative($nesting, 'Object')['$const_defined?'](name))) {
              } else {
              return candidate;
            };
            constant = (function(){var $brk = Opal.new_brk(); try {return $send(constant.$ancestors(), 'inject', [constant], (TMP_21 = function(const$, ancestor){var self = TMP_21.$$s || this;
if (const$ == null) const$ = nil;if (ancestor == null) ancestor = nil;
            
              if (ancestor['$=='](Opal.const_get_relative($nesting, 'Object'))) {
                
                Opal.brk(const$, $brk)};
              if ($truthy(ancestor['$const_defined?'](name, false))) {
                
                Opal.brk(ancestor, $brk)};
              return const$;}, TMP_21.$$s = self, TMP_21.$$brk = $brk, TMP_21.$$arity = 2, TMP_21))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
            return constant.$const_get(name, false);
          }}, TMP_20.$$s = self, TMP_20.$$brk = $brk, TMP_20.$$arity = 2, TMP_20))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      }, TMP_Inflector_constantize_22.$$arity = 1);
      
      Opal.defn(self, '$safe_constantize', TMP_Inflector_safe_constantize_23 = function $$safe_constantize(camel_cased_word) {
        var $a, $b, self = this, e = nil;

        try {
          return self.$constantize(camel_cased_word)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {e = $err;
            try {
              if ($truthy(($truthy($a = e.$name()) ? ($truthy($b = camel_cased_word.$to_s().$split("::")['$include?'](e.$name().$to_s())) ? $b : e.$name().$to_s()['$=='](camel_cased_word.$to_s()))['$!']() : $a))) {
                return self.$raise()
                } else {
                return nil
              }
            } finally { Opal.pop_exception() }
          } else 
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {e = $err;
            try {
              if ($truthy(new RegExp("" + "not missing constant " + (self.$const_regexp(camel_cased_word)) + "!$")['$match?'](e.$message()))) {
                return nil
                } else {
                return self.$raise()
              }
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_Inflector_safe_constantize_23.$$arity = 1);
      
      Opal.defn(self, '$ordinal', TMP_Inflector_ordinal_24 = function $$ordinal(number) {
        var self = this, abs_number = nil, $case = nil;

        
        abs_number = number.$to_i().$abs();
        if ($truthy($range(11, 13, false)['$include?'](abs_number['$%'](100)))) {
          return "th"
          } else {
          return (function() {$case = abs_number['$%'](10);
          if ((1)['$===']($case)) {return "st"}
          else if ((2)['$===']($case)) {return "nd"}
          else if ((3)['$===']($case)) {return "rd"}
          else {return "th"}})()
        };
      }, TMP_Inflector_ordinal_24.$$arity = 1);
      
      Opal.defn(self, '$ordinalize', TMP_Inflector_ordinalize_25 = function $$ordinalize(number) {
        var self = this;

        return "" + (number) + (self.$ordinal(number))
      }, TMP_Inflector_ordinalize_25.$$arity = 1);
      self.$private();
      
      Opal.defn(self, '$const_regexp', TMP_Inflector_const_regexp_27 = function $$const_regexp(camel_cased_word) {
        var TMP_26, self = this, parts = nil, last = nil;

        
        parts = camel_cased_word.$split("::".$freeze());
        if ($truthy(parts['$blank?']())) {
          return Opal.const_get_relative($nesting, 'Regexp').$escape(camel_cased_word)};
        last = parts.$pop();
        return $send(parts.$reverse(), 'inject', [last], (TMP_26 = function(acc, part){var self = TMP_26.$$s || this;
if (acc == null) acc = nil;if (part == null) part = nil;
        if ($truthy(part['$empty?']())) {
            return acc
            } else {
            return "" + (part) + "(::" + (acc) + ")?"
          }}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26));
      }, TMP_Inflector_const_regexp_27.$$arity = 1);
      
      Opal.defn(self, '$apply_inflections', TMP_Inflector_apply_inflections_29 = function $$apply_inflections(word, rules, locale) {
        var $a, TMP_28, self = this, result = nil;

        if (locale == null) {
          locale = "en";
        }
        
        result = word.$to_s().$dup();
        if ($truthy(($truthy($a = word['$empty?']()) ? $a : self.$inflections(locale).$uncountables()['$uncountable?'](result)))) {
          return result
          } else {
          
          (function(){var $brk = Opal.new_brk(); try {return $send(rules, 'each', [], (TMP_28 = function($b){var self = TMP_28.$$s || this, $b_args, rule, replacement, $c, $d;

            if ($b == null) {
              $b = nil;
            }
            $b = Opal.to_ary($b);
            $b_args = Opal.slice.call($b, 0, $b.length);
            rule = $b_args.splice(0,1)[0];
            if (rule == null) {
              rule = nil;
            }
            replacement = $b_args.splice(0,1)[0];
            if (replacement == null) {
              replacement = nil;
            }
          if ($truthy(($truthy($c = ($truthy($d = rule['$is_a?'](Opal.const_get_relative($nesting, 'Regexp'))) ? result['$=~'](rule) : $d)) ? $c : ($truthy($d = rule['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? result['$=='](rule) : $d)))) {
              
              result = result.$sub(rule, replacement);
              
              Opal.brk(nil, $brk);
              } else {
              return nil
            }}, TMP_28.$$s = self, TMP_28.$$brk = $brk, TMP_28.$$arity = 1, TMP_28.$$has_top_level_mlhs_arg = true, TMP_28))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        };
      }, TMP_Inflector_apply_inflections_29.$$arity = -3);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/string/inflections"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$is_a?', '$==', '$dup', '$pluralize', '$singularize', '$constantize', '$safe_constantize', '$===', '$camelize', '$raise', '$alias_method', '$titleize', '$underscore', '$dasherize', '$demodulize', '$deconstantize', '$tableize', '$classify', '$humanize', '$upcase_first', '$foreign_key']);
  
  self.$require("active_support/inflector");
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_pluralize_1, TMP_String_singularize_2, TMP_String_constantize_3, TMP_String_safe_constantize_4, TMP_String_camelize_5, TMP_String_titleize_6, TMP_String_underscore_7, TMP_String_dasherize_8, TMP_String_demodulize_9, TMP_String_deconstantize_10, TMP_String_tableize_11, TMP_String_classify_12, TMP_String_humanize_13, TMP_String_upcase_first_14, TMP_String_foreign_key_15;

    
    
    Opal.defn(self, '$pluralize', TMP_String_pluralize_1 = function $$pluralize(count, locale) {
      var self = this;

      if (count == null) {
        count = nil;
      }
      if (locale == null) {
        locale = "en";
      }
      
      if ($truthy(count['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
        locale = count};
      if (count['$=='](1)) {
        return self.$dup()
        } else {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$pluralize(self, locale)
      };
    }, TMP_String_pluralize_1.$$arity = -1);
    
    Opal.defn(self, '$singularize', TMP_String_singularize_2 = function $$singularize(locale) {
      var self = this;

      if (locale == null) {
        locale = "en";
      }
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$singularize(self, locale)
    }, TMP_String_singularize_2.$$arity = -1);
    
    Opal.defn(self, '$constantize', TMP_String_constantize_3 = function $$constantize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$constantize(self)
    }, TMP_String_constantize_3.$$arity = 0);
    
    Opal.defn(self, '$safe_constantize', TMP_String_safe_constantize_4 = function $$safe_constantize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$safe_constantize(self)
    }, TMP_String_safe_constantize_4.$$arity = 0);
    
    Opal.defn(self, '$camelize', TMP_String_camelize_5 = function $$camelize(first_letter) {
      var self = this, $case = nil;

      if (first_letter == null) {
        first_letter = "upper";
      }
      return (function() {$case = first_letter;
      if ("upper"['$===']($case)) {return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$camelize(self, true)}
      else if ("lower"['$===']($case)) {return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$camelize(self, false)}
      else {return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Invalid option, use either :upper or :lower.")}})()
    }, TMP_String_camelize_5.$$arity = -1);
    self.$alias_method("camelcase", "camelize");
    
    Opal.defn(self, '$titleize', TMP_String_titleize_6 = function $$titleize($kwargs) {
      var self = this, keep_id_suffix;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
      if (keep_id_suffix == null) {
        keep_id_suffix = false
      }
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$titleize(self, $hash2(["keep_id_suffix"], {"keep_id_suffix": keep_id_suffix}))
    }, TMP_String_titleize_6.$$arity = -1);
    self.$alias_method("titlecase", "titleize");
    
    Opal.defn(self, '$underscore', TMP_String_underscore_7 = function $$underscore() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$underscore(self)
    }, TMP_String_underscore_7.$$arity = 0);
    
    Opal.defn(self, '$dasherize', TMP_String_dasherize_8 = function $$dasherize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$dasherize(self)
    }, TMP_String_dasherize_8.$$arity = 0);
    
    Opal.defn(self, '$demodulize', TMP_String_demodulize_9 = function $$demodulize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$demodulize(self)
    }, TMP_String_demodulize_9.$$arity = 0);
    
    Opal.defn(self, '$deconstantize', TMP_String_deconstantize_10 = function $$deconstantize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$deconstantize(self)
    }, TMP_String_deconstantize_10.$$arity = 0);
    
    Opal.defn(self, '$tableize', TMP_String_tableize_11 = function $$tableize() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$tableize(self)
    }, TMP_String_tableize_11.$$arity = 0);
    
    Opal.defn(self, '$classify', TMP_String_classify_12 = function $$classify() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$classify(self)
    }, TMP_String_classify_12.$$arity = 0);
    
    Opal.defn(self, '$humanize', TMP_String_humanize_13 = function $$humanize($kwargs) {
      var self = this, capitalize, keep_id_suffix;

      if ($kwargs == null || !$kwargs.$$is_hash) {
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else {
          throw Opal.ArgumentError.$new('expected kwargs');
        }
      }
      capitalize = $kwargs.$$smap["capitalize"];
      if (capitalize == null) {
        capitalize = true
      }
      keep_id_suffix = $kwargs.$$smap["keep_id_suffix"];
      if (keep_id_suffix == null) {
        keep_id_suffix = false
      }
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$humanize(self, $hash2(["capitalize", "keep_id_suffix"], {"capitalize": capitalize, "keep_id_suffix": keep_id_suffix}))
    }, TMP_String_humanize_13.$$arity = -1);
    
    Opal.defn(self, '$upcase_first', TMP_String_upcase_first_14 = function $$upcase_first() {
      var self = this;

      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$upcase_first(self)
    }, TMP_String_upcase_first_14.$$arity = 0);
    return (Opal.defn(self, '$foreign_key', TMP_String_foreign_key_15 = function $$foreign_key(separate_class_name_and_id_with_underscore) {
      var self = this;

      if (separate_class_name_and_id_with_underscore == null) {
        separate_class_name_and_id_with_underscore = true;
      }
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$foreign_key(self, separate_class_name_and_id_with_underscore)
    }, TMP_String_foreign_key_15.$$arity = -1), nil) && 'foreign_key';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/inflector"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/inflector/inflections");
  self.$require("active_support/inflector/methods");
  self.$require("active_support/inflections");
  return self.$require("active_support/core_ext/string/inflections");
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/module/introspection"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$=~', '$name', '$freeze', '$parent_name', '$constantize', '$split', '$empty?', '$<<', '$*', '$pop', '$include?', '$constants']);
  
  self.$require("active_support/inflector");
  return (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_parent_name_1, TMP_Module_parent_2, TMP_Module_parents_3, TMP_Module_local_constants_4;

    def.parent_name = nil;
    
    
    Opal.defn(self, '$parent_name', TMP_Module_parent_name_1 = function $$parent_name() {
      var $a, $b, self = this;

      if ($truthy((($a = self['parent_name'], $a != null && $a !== nil) ? 'instance-variable' : nil))) {
        return self.parent_name
        } else {
        return (self.parent_name = (function() {if ($truthy(self.$name()['$=~'](/::[^:]+$/))) {
          return (($b = $gvars['~']) === nil ? nil : $b.$pre_match()).$freeze()
          } else {
          return nil
        }; return nil; })())
      }
    }, TMP_Module_parent_name_1.$$arity = 0);
    
    Opal.defn(self, '$parent', TMP_Module_parent_2 = function $$parent() {
      var self = this;

      if ($truthy(self.$parent_name())) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$constantize(self.$parent_name())
        } else {
        return Opal.const_get_relative($nesting, 'Object')
      }
    }, TMP_Module_parent_2.$$arity = 0);
    
    Opal.defn(self, '$parents', TMP_Module_parents_3 = function $$parents() {
      var $a, self = this, parents = nil, parts = nil;

      
      parents = [];
      if ($truthy(self.$parent_name())) {
        
        parts = self.$parent_name().$split("::");
        while (!($truthy(parts['$empty?']()))) {
          
          parents['$<<'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'Inflector').$constantize($rb_times(parts, "::")));
          parts.$pop();
        };};
      if ($truthy(parents['$include?'](Opal.const_get_relative($nesting, 'Object')))) {
        } else {
        parents['$<<'](Opal.const_get_relative($nesting, 'Object'))
      };
      return parents;
    }, TMP_Module_parents_3.$$arity = 0);
    return (Opal.defn(self, '$local_constants', TMP_Module_local_constants_4 = function $$local_constants() {
      var self = this;

      return self.$constants(false)
    }, TMP_Module_local_constants_4.$$arity = 0), nil) && 'local_constants';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/module/delegation"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$pop', '$is_a?', '$[]', '$raise', '$values_at', '$==', '$=~', '$to_s', '$each', '$+', '$lambda', '$start_with?', '$__send__', '$new', '$inspect', '$define_method', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_delegate_6;

    
    (function($base, $super, $parent_nesting) {
      function $DelegationError(){};
      var self = $DelegationError = $klass($base, $super, 'DelegationError', $DelegationError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'NoMethodError'), $nesting);
    return (Opal.defn(self, '$delegate', TMP_Module_delegate_6 = function $$delegate($a_rest) {
      var $b, $c, TMP_1, self = this, methods, options = nil, to = nil, prefix = nil, allow_nil = nil, method_prefix = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      options = methods.$pop();
      if ($truthy(($truthy($b = options['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))) ? (to = options['$[]']("to")) : $b))) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Delegation needs a target. Supply an options hash with a :to key as the last argument (e.g. delegate :hello, to: :greeter).")
      };
      $c = options.$values_at("prefix", "allow_nil"), $b = Opal.to_ary($c), (prefix = ($b[0] == null ? nil : $b[0])), (allow_nil = ($b[1] == null ? nil : $b[1])), $c;
      if ($truthy((($b = prefix['$=='](true)) ? to['$=~'](/^[^a-z_]/) : prefix['$=='](true)))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Can only automatically set the delegation prefix when delegating to a method.")};
      method_prefix = (function() {if ($truthy(prefix)) {
        return "" + ((function() {if (prefix['$=='](true)) {
          return to
          } else {
          return prefix
        }; return nil; })()) + "_"
        } else {
        return ""
      }; return nil; })();
      to = to.$to_s();
      return $send(methods, 'each', [], (TMP_1 = function(method){var self = TMP_1.$$s || this, TMP_2, TMP_3, TMP_4, TMP_5, has_block = nil, method_name = nil, resolve_to = nil, exception = nil;
if (method == null) method = nil;
      
        has_block = (function() {if ($truthy(method['$=~'](/[^\]]=$/))) {
          return false
          } else {
          return true
        }; return nil; })();
        method_name = $rb_plus(method_prefix, method);
        resolve_to = $send(self, 'lambda', [], (TMP_2 = function(scope){var self = TMP_2.$$s || this, ivar_name = nil;
if (scope == null) scope = nil;
        if ($truthy(to['$start_with?']("@"))) {
            
            ivar_name = to['$[]']($range(1, -1, false));
            return scope[ivar_name];
            } else {
            return scope.$__send__(to)
          }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        exception = $send(self, 'lambda', [], (TMP_3 = function(scope){var self = TMP_3.$$s || this;
if (scope == null) scope = nil;
        return Opal.const_get_relative($nesting, 'DelegationError').$new("" + (scope) + (method_name) + " delegated to " + (to) + "." + (method) + " but " + (to) + " is nil: " + (scope.$inspect()), method_name)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        if ($truthy(has_block)) {
          return $send(self, 'define_method', [method_name], (TMP_4 = function($a_rest){var self = TMP_4.$$s || this, block, args, to_resolved = nil;

            block = TMP_4.$$p || nil;
            if (block) TMP_4.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            to_resolved = resolve_to['$[]'](self);
            if ($truthy(to_resolved)) {
              } else {
              
              if ($truthy(allow_nil)) {
                return nil;};
              self.$raise(exception['$[]'](self));
            };
            return $send(to_resolved, '__send__', [method].concat(Opal.to_a(args)), block.$to_proc());}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4))
          } else {
          return $send(self, 'define_method', [method_name], (TMP_5 = function(arg){var self = TMP_5.$$s || this, to_resolved = nil;
if (arg == null) arg = nil;
          
            to_resolved = resolve_to['$[]'](self);
            if ($truthy(to_resolved)) {
              } else {
              
              if ($truthy(allow_nil)) {
                return nil;};
              self.$raise(exception['$[]'](self));
            };
            return to_resolved.$__send__(method, arg);}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))
        };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
    }, TMP_Module_delegate_6.$$arity = -1), nil) && 'delegate';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/module"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/module/introspection");
  self.$require("active_support/core_ext/module/remove_method");
  return self.$require("active_support/core_ext/module/delegation");
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/numeric/calculations"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  return (function(self, $parent_nesting) {
    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return Opal.alias(self, "current", "now")
  })(Opal.get_singleton_class(Opal.const_get_relative($nesting, 'Time')), $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/numeric"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/numeric/time");
  return self.$require("active_support/core_ext/numeric/calculations");
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/object/blank"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$respond_to?', '$empty?', '$!', '$blank?', '$present?', '$==', '$alias_method', '$!~']);
  
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_blank$q_1, TMP_Object_present$q_2, TMP_Object_presence_3;

    
    
    Opal.defn(self, '$blank?', TMP_Object_blank$q_1 = function() {
      var self = this;

      if ($truthy(self['$respond_to?']("empty?"))) {
        return self['$empty?']()
        } else {
        return self['$!']()
      }
    }, TMP_Object_blank$q_1.$$arity = 0);
    
    Opal.defn(self, '$present?', TMP_Object_present$q_2 = function() {
      var self = this;

      return self['$blank?']()['$!']()
    }, TMP_Object_present$q_2.$$arity = 0);
    return (Opal.defn(self, '$presence', TMP_Object_presence_3 = function $$presence() {
      var self = this;

      if ($truthy(self['$present?']())) {
        return self
        } else {
        return nil
      }
    }, TMP_Object_presence_3.$$arity = 0), nil) && 'presence';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_blank$q_4;

    return (Opal.defn(self, '$blank?', TMP_NilClass_blank$q_4 = function() {
      var self = this;

      return true
    }, TMP_NilClass_blank$q_4.$$arity = 0), nil) && 'blank?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_blank$q_5;

    return (Opal.defn(self, '$blank?', TMP_Boolean_blank$q_5 = function() {
      var self = this;

      return self['$=='](false)
    }, TMP_Boolean_blank$q_5.$$arity = 0), nil) && 'blank?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return self.$alias_method("blank?", "empty?")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return self.$alias_method("blank?", "empty?")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_blank$q_6;

    return (Opal.defn(self, '$blank?', TMP_String_blank$q_6 = function() {
      var self = this;

      return self['$!~'](/[^\s　]/)
    }, TMP_String_blank$q_6.$$arity = 0), nil) && 'blank?'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_blank$q_7;

    return (Opal.defn(self, '$blank?', TMP_Numeric_blank$q_7 = function() {
      var self = this;

      return false
    }, TMP_Numeric_blank$q_7.$$arity = 0), nil) && 'blank?'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/object/try"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_try_1, TMP_Object_try$B_2;

    
    
    Opal.defn(self, '$try', TMP_Object_try_1 = function($a_rest) {
      var $b, self = this, a, $iter = TMP_Object_try_1.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_try_1.$$p = null;
      if ($truthy(($truthy($b = a['$empty?']()) ? $b : self['$respond_to?'](a.$first())))) {
        return $send(self, 'try!', Opal.to_a(a), b.$to_proc())
        } else {
        return nil
      }
    }, TMP_Object_try_1.$$arity = -1);
    return (Opal.defn(self, '$try!', TMP_Object_try$B_2 = function($a_rest) {
      var $b, self = this, a, $iter = TMP_Object_try$B_2.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_try$B_2.$$p = null;
      if ($truthy(($truthy($b = a['$empty?']()) ? (b !== nil) : $b))) {
        if ($truthy(b.$arity()['$zero?']())) {
          return $send(self, 'instance_eval', [], b.$to_proc())
          } else {
          return Opal.yield1(b, self);
        }
        } else {
        return $send(self, 'public_send', Opal.to_a(a), b.$to_proc())
      }
    }, TMP_Object_try$B_2.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_try_3, TMP_NilClass_try$B_4;

    
    
    Opal.defn(self, '$try', TMP_NilClass_try_3 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil
    }, TMP_NilClass_try_3.$$arity = -1);
    return (Opal.defn(self, '$try!', TMP_NilClass_try$B_4 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil
    }, TMP_NilClass_try$B_4.$$arity = -1), nil) && 'try!';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/object"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/object/blank");
  return self.$require("active_support/core_ext/object/try");
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/string/filters"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$>', '$length', '$dup', '$[]', '$-', '$rindex']);
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_truncate_1;

    return (Opal.defn(self, '$truncate', TMP_String_truncate_1 = function $$truncate(truncate_at, options) {
      var $a, self = this, omission = nil, length_with_room_for_omission = nil, stop = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      
      if ($truthy($rb_gt(self.$length(), truncate_at))) {
        } else {
        return self.$dup()
      };
      omission = ($truthy($a = options['$[]']("omission")) ? $a : "...");
      length_with_room_for_omission = $rb_minus(truncate_at, omission.$length());
      stop = (function() {if ($truthy(options['$[]']("separator"))) {
        return ($truthy($a = self.$rindex(options['$[]']("separator"), length_with_room_for_omission)) ? $a : length_with_room_for_omission)
        } else {
        return length_with_room_for_omission
      }; return nil; })();
      return "" + (self['$[]'](0, stop)) + (omission);
    }, TMP_String_truncate_1.$$arity = -2), nil) && 'truncate'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext/string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$gsub', '$strip', '$downcase']);
  
  self.$require("active_support/core_ext/string/filters");
  self.$require("active_support/core_ext/string/inflections");
  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_parameterize_1;

    return (Opal.defn(self, '$parameterize', TMP_String_parameterize_1 = function $$parameterize() {
      var self = this;

      return self.$downcase().$strip().$gsub(/\W+/, "-")
    }, TMP_String_parameterize_1.$$arity = 0), nil) && 'parameterize'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support/core_ext"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("active_support/core_ext/array");
  self.$require("active_support/core_ext/class");
  self.$require("active_support/core_ext/enumerable");
  self.$require("active_support/core_ext/hash");
  self.$require("active_support/core_ext/integer");
  self.$require("active_support/core_ext/kernel");
  self.$require("active_support/core_ext/module");
  self.$require("active_support/core_ext/numeric");
  self.$require("active_support/core_ext/object");
  return self.$require("active_support/core_ext/string");
};

/* Generated by Opal 0.11.4 */
Opal.modules["active_support"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("active_support/core_ext")
};

/* Generated by Opal 0.11.4 */
Opal.modules["time"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$strftime']);
  return (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_parse_1, TMP_Time_iso8601_2;

    
    Opal.defs(self, '$parse', TMP_Time_parse_1 = function $$parse(str) {
      var self = this;

      return new Date(Date.parse(str))
    }, TMP_Time_parse_1.$$arity = 1);
    return (Opal.defn(self, '$iso8601', TMP_Time_iso8601_2 = function $$iso8601() {
      var self = this;

      return self.$strftime("%FT%T%z")
    }, TMP_Time_iso8601_2.$$arity = 0), nil) && 'iso8601';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["date"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$<=>', '$nonzero?', '$d', '$zero?', '$new', '$class', '$-@', '$+@', '$===', '$coerce', '$==', '$>', '$+', '$allocate', '$join', '$compact', '$map', '$to_proc', '$downcase', '$wrap', '$raise', '$clone', '$jd', '$>>', '$wday', '$-', '$to_s', '$alias_method', '$to_i', '$<', '$*', '$reverse', '$step', '$abs', '$each']);
  return (function($base, $super, $parent_nesting) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Date_initialize_17, TMP_Date_$_18, TMP_Date_$_19, TMP_Date_$lt_20, TMP_Date_$lt$eq_21, TMP_Date_$gt_22, TMP_Date_$gt$eq_23, TMP_Date_$lt$eq$gt_24, TMP_Date_$gt$gt_25, TMP_Date_$lt$lt_26, TMP_Date_clone_27, TMP_Date_day_28, TMP_Date_friday$q_29, TMP_Date_jd_30, TMP_Date_julian$q_31, TMP_Date_monday$q_32, TMP_Date_month_33, TMP_Date_next_34, TMP_Date_next_day_35, TMP_Date_next_month_36, TMP_Date_prev_day_37, TMP_Date_prev_month_38, TMP_Date_saturday$q_39, TMP_Date_strftime_40, TMP_Date_sunday$q_41, TMP_Date_thursday$q_42, TMP_Date_to_s_43, TMP_Date_tuesday$q_44, TMP_Date_step_45, TMP_Date_upto_49, TMP_Date_downto_50, TMP_Date_wday_51, TMP_Date_wednesday$q_52, TMP_Date_year_53, TMP_Date_cwday_54, TMP_Date_cweek_55;

    def.date = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Comparable'));
    (function($base, $super, $parent_nesting) {
      function $Infinity(){};
      var self = $Infinity = $klass($base, $super, 'Infinity', $Infinity);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Infinity_initialize_1, TMP_Infinity_d_2, TMP_Infinity_zero$q_3, TMP_Infinity_finite$q_4, TMP_Infinity_infinite$q_5, TMP_Infinity_nan$q_6, TMP_Infinity_abs_7, TMP_Infinity_$$_8, TMP_Infinity_$$_9, TMP_Infinity_$lt$eq$gt_10, TMP_Infinity_coerce_11, TMP_Infinity_to_f_12;

      def.d = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Comparable'));
      
      Opal.defn(self, '$initialize', TMP_Infinity_initialize_1 = function $$initialize(d) {
        var self = this;

        if (d == null) {
          d = 1;
        }
        return (self.d = d['$<=>'](0))
      }, TMP_Infinity_initialize_1.$$arity = -1);
      
      Opal.defn(self, '$d', TMP_Infinity_d_2 = function $$d() {
        var self = this;

        return self.d
      }, TMP_Infinity_d_2.$$arity = 0);
      
      Opal.defn(self, '$zero?', TMP_Infinity_zero$q_3 = function() {
        var self = this;

        return false
      }, TMP_Infinity_zero$q_3.$$arity = 0);
      
      Opal.defn(self, '$finite?', TMP_Infinity_finite$q_4 = function() {
        var self = this;

        return false
      }, TMP_Infinity_finite$q_4.$$arity = 0);
      
      Opal.defn(self, '$infinite?', TMP_Infinity_infinite$q_5 = function() {
        var self = this;

        return self.$d()['$nonzero?']()
      }, TMP_Infinity_infinite$q_5.$$arity = 0);
      
      Opal.defn(self, '$nan?', TMP_Infinity_nan$q_6 = function() {
        var self = this;

        return self.$d()['$zero?']()
      }, TMP_Infinity_nan$q_6.$$arity = 0);
      
      Opal.defn(self, '$abs', TMP_Infinity_abs_7 = function $$abs() {
        var self = this;

        return self.$class().$new()
      }, TMP_Infinity_abs_7.$$arity = 0);
      
      Opal.defn(self, '$-@', TMP_Infinity_$$_8 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$-@']())
      }, TMP_Infinity_$$_8.$$arity = 0);
      
      Opal.defn(self, '$+@', TMP_Infinity_$$_9 = function() {
        var self = this;

        return self.$class().$new(self.$d()['$+@']())
      }, TMP_Infinity_$$_9.$$arity = 0);
      
      Opal.defn(self, '$<=>', TMP_Infinity_$lt$eq$gt_10 = function(other) {
        var $a, $b, self = this, $case = nil, l = nil, r = nil;

        
        $case = other;
        if (Opal.const_get_relative($nesting, 'Infinity')['$===']($case)) {return self.$d()['$<=>'](other.$d())}
        else if (Opal.const_get_relative($nesting, 'Numeric')['$===']($case)) {return self.$d()}
        else {
        try {
          
          $b = other.$coerce(self), $a = Opal.to_ary($b), (l = ($a[0] == null ? nil : $a[0])), (r = ($a[1] == null ? nil : $a[1])), $b;
          return l['$<=>'](r);
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NoMethodError')])) {
            try {
              nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };};
        return nil;
      }, TMP_Infinity_$lt$eq$gt_10.$$arity = 1);
      
      Opal.defn(self, '$coerce', TMP_Infinity_coerce_11 = function $$coerce(other) {
        var self = this, $iter = TMP_Infinity_coerce_11.$$p, $yield = $iter || nil, $case = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_Infinity_coerce_11.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return (function() {$case = other;
        if (Opal.const_get_relative($nesting, 'Numeric')['$===']($case)) {return [self.$d()['$-@'](), self.$d()]}
        else {return $send(self, Opal.find_super_dispatcher(self, 'coerce', TMP_Infinity_coerce_11, false), $zuper, $iter)}})()
      }, TMP_Infinity_coerce_11.$$arity = 1);
      return (Opal.defn(self, '$to_f', TMP_Infinity_to_f_12 = function $$to_f() {
        var self = this;

        
        if (self.d['$=='](0)) {
          return 0};
        if ($truthy($rb_gt(self.d, 0))) {
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')
          } else {
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY')['$-@']()
        };
      }, TMP_Infinity_to_f_12.$$arity = 0), nil) && 'to_f';
    })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
    Opal.const_set($nesting[0], 'JULIAN', Opal.const_get_relative($nesting, 'Infinity').$new());
    Opal.const_set($nesting[0], 'GREGORIAN', Opal.const_get_relative($nesting, 'Infinity').$new()['$-@']());
    Opal.const_set($nesting[0], 'ITALY', 2299161);
    Opal.const_set($nesting[0], 'ENGLAND', 2361222);
    Opal.const_set($nesting[0], 'MONTHNAMES', $rb_plus([nil], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]));
    Opal.const_set($nesting[0], 'ABBR_MONTHNAMES', ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"]);
    Opal.const_set($nesting[0], 'DAYNAMES', ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
    Opal.const_set($nesting[0], 'ABBR_DAYNAMES', ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_wrap_13, TMP_parse_14, TMP_today_15, TMP_gregorian_leap$q_16;

      
      Opal.alias(self, "civil", "new");
      
      Opal.defn(self, '$wrap', TMP_wrap_13 = function $$wrap(native$) {
        var self = this, instance = nil;

        
        instance = self.$allocate();
        instance.date = native$;
        return instance;
      }, TMP_wrap_13.$$arity = 1);
      
      Opal.defn(self, '$parse', TMP_parse_14 = function $$parse(string, comp) {
        var self = this;

        if (comp == null) {
          comp = true;
        }
        
        
        var current_date = new Date();

        var current_day = current_date.getDate(),
            current_month = current_date.getMonth(),
            current_year = current_date.getFullYear(),
            current_wday = current_date.getDay(),
            full_month_name_regexp = Opal.const_get_relative($nesting, 'MONTHNAMES').$compact().$join("|");

        function match1(match) { return match[1]; }
        function match2(match) { return match[2]; }
        function match3(match) { return match[3]; }
        function match4(match) { return match[4]; }

        // Converts passed short year (0..99)
        // to a 4-digits year in the range (1969..2068)
        function fromShortYear(fn) {
          return function(match) {
            var short_year = fn(match);

            if (short_year >= 69) {
              short_year += 1900;
            } else {
              short_year += 2000;
            }
            return short_year;
          }
        }

        // Converts month abbr (nov) to a month number
        function fromMonthAbbr(fn) {
          return function(match) {
            var abbr = fn(match).toLowerCase();
            return Opal.const_get_relative($nesting, 'ABBR_MONTHNAMES').indexOf(abbr) + 1;
          }
        }

        function toInt(fn) {
          return function(match) {
            var value = fn(match);
            return parseInt(value, 10);
          }
        }

        // Depending on the 'comp' value appends 20xx to a passed year
        function to2000(fn) {
          return function(match) {
            var value = fn(match);
            if (comp) {
              return value + 2000;
            } else {
              return value;
            }
          }
        }

        // Converts passed week day name to a day number
        function fromDayName(fn) {
          return function(match) {
            var dayname = fn(match),
                wday = $send(Opal.const_get_relative($nesting, 'DAYNAMES'), 'map', [], "downcase".$to_proc()).indexOf((dayname).$downcase());

            return current_day - current_wday + wday;
          }
        }

        // Converts passed month name to a month number
        function fromFullMonthName(fn) {
          return function(match) {
            var month_name = fn(match);
            return $send(Opal.const_get_relative($nesting, 'MONTHNAMES').$compact(), 'map', [], "downcase".$to_proc()).indexOf((month_name).$downcase()) + 1;
          }
        }

        var rules = [
          {
            // DD as month day number
            regexp: /^(\d{2})$/,
            year: current_year,
            month: current_month,
            day: toInt(match1)
          },
          {
            // DDD as year day number
            regexp: /^(\d{3})$/,
            year: current_year,
            month: 0,
            day: toInt(match1)
          },
          {
            // MMDD as month and day
            regexp: /^(\d{2})(\d{2})$/,
            year: current_year,
            month: toInt(match1),
            day: toInt(match2)
          },
          {
            // YYDDD as year and day number in 1969--2068
            regexp: /^(\d{2})(\d{3})$/,
            year: fromShortYear(toInt(match1)),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYMMDD as year, month and day in 1969--2068
            regexp: /^(\d{2})(\d{2})(\d{2})$/,
            year: fromShortYear(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YYYYDDD as year and day number
            regexp: /^(\d{4})(\d{3})$/,
            year: toInt(match1),
            month: 0,
            day: toInt(match2)
          },
          {
            // YYYYMMDD as year, month and day number
            regexp: /^(\d{4})(\d{2})(\d{2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // mmm YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{3,4})$/,
            year: toInt(match2),
            month: fromMonthAbbr(match1),
            day: 1
          },
          {
            // DD mmm YYYY
            regexp: /^(\d{1,2})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match2),
            day: toInt(match1)
          },
          {
            // mmm DD YYYY
            regexp: /^([a-z]{3})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{3,4})$/i,
            year: toInt(match3),
            month: fromMonthAbbr(match1),
            day: toInt(match2)
          },
          {
            // YYYY mmm DD
            regexp: /^(\d{3,4})[\s\.\/\-]([a-z]{3})[\s\.\/\-](\d{1,2})$/i,
            year: toInt(match1),
            month: fromMonthAbbr(match2),
            day: toInt(match3)
          },
          {
            // YYYY-MM-DD YYYY/MM/DD YYYY.MM.DD
            regexp: /^(\-?\d{3,4})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: toInt(match1),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // YY-MM-DD
            regexp: /^(\d{2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\d{1,2})$/,
            year: to2000(toInt(match1)),
            month: toInt(match2),
            day: toInt(match3)
          },
          {
            // DD-MM-YYYY
            regexp: /^(\d{1,2})[\s\.\/\-](\d{1,2})[\s\.\/\-](\-?\d{3,4})$/,
            year: toInt(match3),
            month: toInt(match2),
            day: toInt(match1)
          },
          {
            // ddd
            regexp: new RegExp("^(" + Opal.const_get_relative($nesting, 'DAYNAMES').$join("|") + ")$", 'i'),
            year: current_year,
            month: current_month,
            day: fromDayName(match1)
          },
          {
            // monthname daynumber YYYY
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // monthname daynumber
            regexp: new RegExp("^(" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)", "i"),
            year: current_year,
            month: fromFullMonthName(match1),
            day: toInt(match2)
          },
          {
            // daynumber monthname YYYY
            regexp: new RegExp("^(\\d{1,2})(th|nd|rd)[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\-?\\d{3,4})$", "i"),
            year: toInt(match4),
            month: fromFullMonthName(match3),
            day: toInt(match1)
          },
          {
            // YYYY monthname daynumber
            regexp: new RegExp("^(\\-?\\d{3,4})[\\s\\.\\/\\-](" + full_month_name_regexp + ")[\\s\\.\\/\\-](\\d{1,2})(th|nd|rd)$", "i"),
            year: toInt(match1),
            month: fromFullMonthName(match2),
            day: toInt(match3)
          }
        ]

        var rule, i, match;

        for (i = 0; i < rules.length; i++) {
          rule = rules[i];
          match = rule.regexp.exec(string);
          if (match) {
            var year = rule.year;
            if (typeof(year) === 'function') {
              year = year(match);
            }

            var month = rule.month;
            if (typeof(month) === 'function') {
              month = month(match) - 1
            }

            var day = rule.day;
            if (typeof(day) === 'function') {
              day = day(match);
            }

            var result = new Date(year, month, day);

            // an edge case, JS can't handle 'new Date(1)', minimal year is 1970
            if (year >= 0 && year <= 1970) {
              result.setFullYear(year);
            }

            return self.$wrap(result);
          }
        }
      ;
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "invalid date");
      }, TMP_parse_14.$$arity = -2);
      
      Opal.defn(self, '$today', TMP_today_15 = function $$today() {
        var self = this;

        return self.$wrap(new Date())
      }, TMP_today_15.$$arity = 0);
      return (Opal.defn(self, '$gregorian_leap?', TMP_gregorian_leap$q_16 = function(year) {
        var self = this;

        return (new Date(year, 1, 29).getMonth()-1) === 0
      }, TMP_gregorian_leap$q_16.$$arity = 1), nil) && 'gregorian_leap?';
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.defn(self, '$initialize', TMP_Date_initialize_17 = function $$initialize(year, month, day, start) {
      var self = this;

      if (year == null) {
        year = -4712;
      }
      if (month == null) {
        month = 1;
      }
      if (day == null) {
        day = 1;
      }
      if (start == null) {
        start = Opal.const_get_relative($nesting, 'ITALY');
      }
      return (self.date = new Date(year, month - 1, day))
    }, TMP_Date_initialize_17.$$arity = -1);
    
    Opal.defn(self, '$-', TMP_Date_$_18 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() - date);
        return result;
      }
      else if (date.date) {
        return Math.round((self.date - date.date) / (1000 * 60 * 60 * 24));
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
      }
    
    }, TMP_Date_$_18.$$arity = 1);
    
    Opal.defn(self, '$+', TMP_Date_$_19 = function(date) {
      var self = this;

      
      if (date.$$is_number) {
        var result = self.$clone();
        result.date.setDate(self.date.getDate() + date);
        return result;
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
      }
    
    }, TMP_Date_$_19.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_Date_$lt_20 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a < b;
    
    }, TMP_Date_$lt_20.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_Date_$lt$eq_21 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a <= b;
    
    }, TMP_Date_$lt$eq_21.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_Date_$gt_22 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a > b;
    
    }, TMP_Date_$gt_22.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_Date_$gt$eq_23 = function(other) {
      var self = this;

      
      var a = self.date, b = other.date;
      a.setHours(0, 0, 0, 0);
      b.setHours(0, 0, 0, 0);
      return a >= b;
    
    }, TMP_Date_$gt$eq_23.$$arity = 1);
    
    Opal.defn(self, '$<=>', TMP_Date_$lt$eq$gt_24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.$jd()['$<=>'](other)
      }

      if (Opal.const_get_relative($nesting, 'Date')['$==='](other)) {
        var a = self.date, b = other.date;
        a.setHours(0, 0, 0, 0);
        b.setHours(0, 0, 0, 0);

        if (a < b) {
          return -1;
        }
        else if (a > b) {
          return 1;
        }
        else {
          return 0;
        }
      } else {
        return nil;
      }
    
    }, TMP_Date_$lt$eq$gt_24.$$arity = 1);
    
    Opal.defn(self, '$>>', TMP_Date_$gt$gt_25 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
      }

      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + n);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    
    }, TMP_Date_$gt$gt_25.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Date_$lt$lt_26 = function(n) {
      var self = this;

      
      if (!n.$$is_number) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'));
      }

      return self['$>>'](-n);
    
    }, TMP_Date_$lt$lt_26.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.defn(self, '$clone', TMP_Date_clone_27 = function $$clone() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Date').$wrap(new Date(self.date.getTime()))
    }, TMP_Date_clone_27.$$arity = 0);
    
    Opal.defn(self, '$day', TMP_Date_day_28 = function $$day() {
      var self = this;

      return self.date.getDate()
    }, TMP_Date_day_28.$$arity = 0);
    
    Opal.defn(self, '$friday?', TMP_Date_friday$q_29 = function() {
      var self = this;

      return self.$wday()['$=='](5)
    }, TMP_Date_friday$q_29.$$arity = 0);
    
    Opal.defn(self, '$jd', TMP_Date_jd_30 = function $$jd() {
      var self = this;

      
    //Adapted from http://www.physics.sfasu.edu/astro/javascript/julianday.html

    var mm = self.date.getMonth() + 1,
        dd = self.date.getDate(),
        yy = self.date.getFullYear(),
        hr = 12, mn = 0, sc = 0,
        ggg, s, a, j1, jd;

    hr = hr + (mn / 60) + (sc/3600);

    ggg = 1;
    if (yy <= 1585) {
      ggg = 0;
    }

    jd = -1 * Math.floor(7 * (Math.floor((mm + 9) / 12) + yy) / 4);

    s = 1;
    if ((mm - 9) < 0) {
      s =- 1;
    }

    a = Math.abs(mm - 9);
    j1 = Math.floor(yy + s * Math.floor(a / 7));
    j1 = -1 * Math.floor((Math.floor(j1 / 100) + 1) * 3 / 4);

    jd = jd + Math.floor(275 * mm / 9) + dd + (ggg * j1);
    jd = jd + 1721027 + 2 * ggg + 367 * yy - 0.5;
    jd = jd + (hr / 24);

    return jd;
    
    }, TMP_Date_jd_30.$$arity = 0);
    
    Opal.defn(self, '$julian?', TMP_Date_julian$q_31 = function() {
      var self = this;

      return self.date < new Date(1582, 10 - 1, 15, 12)
    }, TMP_Date_julian$q_31.$$arity = 0);
    
    Opal.defn(self, '$monday?', TMP_Date_monday$q_32 = function() {
      var self = this;

      return self.$wday()['$=='](1)
    }, TMP_Date_monday$q_32.$$arity = 0);
    
    Opal.defn(self, '$month', TMP_Date_month_33 = function $$month() {
      var self = this;

      return self.date.getMonth() + 1
    }, TMP_Date_month_33.$$arity = 0);
    
    Opal.defn(self, '$next', TMP_Date_next_34 = function $$next() {
      var self = this;

      return $rb_plus(self, 1)
    }, TMP_Date_next_34.$$arity = 0);
    
    Opal.defn(self, '$next_day', TMP_Date_next_day_35 = function $$next_day(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return $rb_plus(self, n)
    }, TMP_Date_next_day_35.$$arity = -1);
    
    Opal.defn(self, '$next_month', TMP_Date_next_month_36 = function $$next_month() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() + 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    
    }, TMP_Date_next_month_36.$$arity = 0);
    
    Opal.defn(self, '$prev_day', TMP_Date_prev_day_37 = function $$prev_day(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return $rb_minus(self, n)
    }, TMP_Date_prev_day_37.$$arity = -1);
    
    Opal.defn(self, '$prev_month', TMP_Date_prev_month_38 = function $$prev_month() {
      var self = this;

      
      var result = self.$clone(), date = result.date, cur = date.getDate();
      date.setDate(1);
      date.setMonth(date.getMonth() - 1);
      date.setDate(Math.min(cur, days_in_month(date.getFullYear(), date.getMonth())));
      return result;
    
    }, TMP_Date_prev_month_38.$$arity = 0);
    
    Opal.defn(self, '$saturday?', TMP_Date_saturday$q_39 = function() {
      var self = this;

      return self.$wday()['$=='](6)
    }, TMP_Date_saturday$q_39.$$arity = 0);
    
    Opal.defn(self, '$strftime', TMP_Date_strftime_40 = function $$strftime(format) {
      var self = this;

      if (format == null) {
        format = "";
      }
      
      if (format == '') {
        return self.$to_s();
      }

      return self.date.$strftime(format);
    
    }, TMP_Date_strftime_40.$$arity = -1);
    self.$alias_method("succ", "next");
    
    Opal.defn(self, '$sunday?', TMP_Date_sunday$q_41 = function() {
      var self = this;

      return self.$wday()['$=='](0)
    }, TMP_Date_sunday$q_41.$$arity = 0);
    
    Opal.defn(self, '$thursday?', TMP_Date_thursday$q_42 = function() {
      var self = this;

      return self.$wday()['$=='](4)
    }, TMP_Date_thursday$q_42.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Date_to_s_43 = function $$to_s() {
      var self = this;

      
      var d = self.date, year = d.getFullYear(), month = d.getMonth() + 1, day = d.getDate();
      if (month < 10) { month = '0' + month; }
      if (day < 10) { day = '0' + day; }
      return year + '-' + month + '-' + day;
    
    }, TMP_Date_to_s_43.$$arity = 0);
    
    Opal.defn(self, '$tuesday?', TMP_Date_tuesday$q_44 = function() {
      var self = this;

      return self.$wday()['$=='](2)
    }, TMP_Date_tuesday$q_44.$$arity = 0);
    
    Opal.defn(self, '$step', TMP_Date_step_45 = function $$step(limit, step) {
      var TMP_46, TMP_47, TMP_48, self = this, $iter = TMP_Date_step_45.$$p, block = $iter || nil, steps_count = nil, steps = nil, result = nil;

      if (step == null) {
        step = 1;
      }
      if ($iter) TMP_Date_step_45.$$p = null;
      
      steps_count = $rb_minus(limit, self).$to_i();
      if ($truthy($rb_lt($rb_times(steps_count, step), 0))) {
        steps = []
      } else if ($truthy($rb_lt(steps_count, 0))) {
        steps = $send(Opal.Range.$new(0, steps_count['$-@'](), false).$step(step.$abs()), 'map', [], (TMP_46 = function(i){var self = TMP_46.$$s || this;
if (i == null) i = nil;
        return i['$-@']()}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46)).$reverse()
        } else {
        steps = Opal.Range.$new(0, steps_count, false).$step(step.$abs())
      };
      result = $send(steps, 'map', [], (TMP_47 = function(i){var self = TMP_47.$$s || this;
if (i == null) i = nil;
      return $rb_plus(self, i)}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47));
      if ((block !== nil)) {
        
        $send(result, 'each', [], (TMP_48 = function(i){var self = TMP_48.$$s || this;
if (i == null) i = nil;
        return Opal.yield1(block, i);}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48));
        return self;
        } else {
        return result
      };
    }, TMP_Date_step_45.$$arity = -2);
    
    Opal.defn(self, '$upto', TMP_Date_upto_49 = function $$upto(max) {
      var self = this, $iter = TMP_Date_upto_49.$$p, block = $iter || nil;

      if ($iter) TMP_Date_upto_49.$$p = null;
      return $send(self, 'step', [max, 1], block.$to_proc())
    }, TMP_Date_upto_49.$$arity = 1);
    
    Opal.defn(self, '$downto', TMP_Date_downto_50 = function $$downto(min) {
      var self = this, $iter = TMP_Date_downto_50.$$p, block = $iter || nil;

      if ($iter) TMP_Date_downto_50.$$p = null;
      return $send(self, 'step', [min, -1], block.$to_proc())
    }, TMP_Date_downto_50.$$arity = 1);
    
    Opal.defn(self, '$wday', TMP_Date_wday_51 = function $$wday() {
      var self = this;

      return self.date.getDay()
    }, TMP_Date_wday_51.$$arity = 0);
    
    Opal.defn(self, '$wednesday?', TMP_Date_wednesday$q_52 = function() {
      var self = this;

      return self.$wday()['$=='](3)
    }, TMP_Date_wednesday$q_52.$$arity = 0);
    
    Opal.defn(self, '$year', TMP_Date_year_53 = function $$year() {
      var self = this;

      return self.date.getFullYear()
    }, TMP_Date_year_53.$$arity = 0);
    
    Opal.defn(self, '$cwday', TMP_Date_cwday_54 = function $$cwday() {
      var self = this;

      return self.date.getDay() || 7;
    }, TMP_Date_cwday_54.$$arity = 0);
    
    Opal.defn(self, '$cweek', TMP_Date_cweek_55 = function $$cweek() {
      var self = this;

      
      var d = new Date(self.date);
      d.setHours(0,0,0);
      d.setDate(d.getDate()+4-(d.getDay()||7));
      return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
    
    }, TMP_Date_cweek_55.$$arity = 0);
    
    function days_in_month(year, month) {
      var leap = ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
      return [31, (leap ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
    }
  ;
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  
  (function($base, $parent_nesting) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Native_is_a$q_1, TMP_Native_try_convert_2, TMP_Native_convert_3, TMP_Native_call_4, TMP_Native_proc_5, TMP_Native_included_19, TMP_Native_initialize_20, TMP_Native_to_n_21;

    
    Opal.defs(self, '$is_a?', TMP_Native_is_a$q_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, TMP_Native_is_a$q_1.$$arity = 2);
    Opal.defs(self, '$try_convert', TMP_Native_try_convert_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    
    }, TMP_Native_try_convert_2.$$arity = -2);
    Opal.defs(self, '$convert', TMP_Native_convert_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, TMP_Native_convert_3.$$arity = 1);
    Opal.defs(self, '$call', TMP_Native_call_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_Native_call_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      if ($iter) TMP_Native_call_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    
    }, TMP_Native_call_4.$$arity = -3);
    Opal.defs(self, '$proc', TMP_Native_proc_5 = function $$proc() {
      var TMP_6, self = this, $iter = TMP_Native_proc_5.$$p, block = $iter || nil;

      if ($iter) TMP_Native_proc_5.$$p = null;
      
      if ($truthy(block)) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'LocalJumpError'), "no block given")
      };
      return $send(Opal.const_get_qualified('::', 'Kernel'), 'proc', [], (TMP_6 = function($a_rest){var self = TMP_6.$$s || this, args, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        $send(args, 'map!', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6));
    }, TMP_Native_proc_5.$$arity = 0);
    (function($base, $parent_nesting) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_alias_native_11, TMP_Helpers_native_reader_14, TMP_Helpers_native_writer_17, TMP_Helpers_native_accessor_18;

      
      
      Opal.defn(self, '$alias_native', TMP_Helpers_alias_native_11 = function $$alias_native(new$, $old, $kwargs) {
        var TMP_8, TMP_9, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          
            self["native"][old['$[]']($range(0, -2, false))] = Opal.const_get_relative($nesting, 'Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], (TMP_9 = function($a_rest){var self = TMP_9.$$s || this, block, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil;
            if (block) TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ($truthy((value = $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9))
          } else {
          return $send(self, 'define_method', [new$], (TMP_10 = function($a_rest){var self = TMP_10.$$s || this, block, args;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil;
            if (block) TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc())}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10))
        }
      }, TMP_Helpers_alias_native_11.$$arity = -2);
      
      Opal.defn(self, '$native_reader', TMP_Helpers_native_reader_14 = function $$native_reader($a_rest) {
        var TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_12 = function(name){var self = TMP_12.$$s || this, TMP_13;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
      }, TMP_Helpers_native_reader_14.$$arity = -1);
      
      Opal.defn(self, '$native_writer', TMP_Helpers_native_writer_17 = function $$native_writer($a_rest) {
        var TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(names, 'each', [], (TMP_15 = function(name){var self = TMP_15.$$s || this, TMP_16;
if (name == null) name = nil;
        return $send(self, 'define_method', ["" + (name) + "="], (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
      }, TMP_Helpers_native_writer_17.$$arity = -1);
      
      Opal.defn(self, '$native_accessor', TMP_Helpers_native_accessor_18 = function $$native_accessor($a_rest) {
        var self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, TMP_Helpers_native_accessor_18.$$arity = -1);
    })($nesting[0], $nesting);
    Opal.defs(self, '$included', TMP_Native_included_19 = function $$included(klass) {
      var self = this;

      return klass.$extend(Opal.const_get_relative($nesting, 'Helpers'))
    }, TMP_Native_included_19.$$arity = 1);
    
    Opal.defn(self, '$initialize', TMP_Native_initialize_20 = function $$initialize(native$) {
      var self = this;

      
      if ($truthy(Opal.const_get_qualified('::', 'Kernel')['$native?'](native$))) {
        } else {
        Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return (self["native"] = native$);
    }, TMP_Native_initialize_20.$$arity = 1);
    
    Opal.defn(self, '$to_n', TMP_Native_to_n_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"]
    }, TMP_Native_to_n_21.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_native$q_22, TMP_Kernel_Native_25, TMP_Kernel_Array_26;

    
    
    Opal.defn(self, '$native?', TMP_Kernel_native$q_22 = function(value) {
      var self = this;

      return value == null || !value.$$class
    }, TMP_Kernel_native$q_22.$$arity = 1);
    
    Opal.defn(self, '$Native', TMP_Kernel_Native_25 = function $$Native(obj) {
      var TMP_23, TMP_24, self = this;

      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
        return $send(obj, 'map', [], (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
      } else if ($truthy(obj['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
        return $send(self, 'proc', [], (TMP_24 = function($a_rest){var self = TMP_24.$$s || this, block, args;

          block = TMP_24.$$p || nil;
          if (block) TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24))
        } else {
        return obj
      }
    }, TMP_Kernel_Native_25.$$arity = 1);
    self.$alias_method("_Array", "Array");
    
    Opal.defn(self, '$Array', TMP_Kernel_Array_26 = function $$Array(object, $a_rest) {
      var self = this, args, $iter = TMP_Kernel_Array_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_Array_26.$$p = null;
      
      if ($truthy(self['$native?'](object))) {
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, TMP_Kernel_Array_26.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_$eq$eq_27, TMP_Object_has_key$q_28, TMP_Object_each_29, TMP_Object_$$_30, TMP_Object_$$$eq_31, TMP_Object_merge$B_32, TMP_Object_respond_to$q_33, TMP_Object_respond_to_missing$q_34, TMP_Object_method_missing_35, TMP_Object_nil$q_36, TMP_Object_is_a$q_37, TMP_Object_instance_of$q_38, TMP_Object_class_39, TMP_Object_to_a_40, TMP_Object_inspect_41;

    def["native"] = nil;
    
    self.$include(Opal.const_get_qualified('::', 'Native'));
    
    Opal.defn(self, '$==', TMP_Object_$eq$eq_27 = function(other) {
      var self = this;

      return self["native"] === Opal.const_get_qualified('::', 'Native').$try_convert(other)
    }, TMP_Object_$eq$eq_27.$$arity = 1);
    
    Opal.defn(self, '$has_key?', TMP_Object_has_key$q_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_has_key$q_28.$$arity = 1);
    Opal.alias(self, "key?", "has_key?");
    Opal.alias(self, "include?", "has_key?");
    Opal.alias(self, "member?", "has_key?");
    
    Opal.defn(self, '$each', TMP_Object_each_29 = function $$each($a_rest) {
      var self = this, args, $iter = TMP_Object_each_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_each_29.$$p = null;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      }
    }, TMP_Object_each_29.$$arity = -1);
    
    Opal.defn(self, '$[]', TMP_Object_$$_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.const_get_qualified('::', 'Native').$call(self["native"], key)
      }
    
    }, TMP_Object_$$_30.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Object_$$$eq_31 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = Opal.const_get_qualified('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
        } else {
        return self["native"][key] = native$
      };
    }, TMP_Object_$$$eq_31.$$arity = 2);
    
    Opal.defn(self, '$merge!', TMP_Object_merge$B_32 = function(other) {
      var self = this;

      
      
      other = Opal.const_get_qualified('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_Object_merge$B_32.$$arity = 1);
    
    Opal.defn(self, '$respond_to?', TMP_Object_respond_to$q_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.const_get_qualified('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all)
    }, TMP_Object_respond_to$q_33.$$arity = -2);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Object_respond_to_missing$q_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_respond_to_missing$q_34.$$arity = -2);
    
    Opal.defn(self, '$method_missing', TMP_Object_method_missing_35 = function $$method_missing(mid, $a_rest) {
      var self = this, args, $iter = TMP_Object_method_missing_35.$$p, block = $iter || nil, $writer = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_method_missing_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send(Opal.const_get_qualified('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    
    }, TMP_Object_method_missing_35.$$arity = -2);
    
    Opal.defn(self, '$nil?', TMP_Object_nil$q_36 = function() {
      var self = this;

      return false
    }, TMP_Object_nil$q_36.$$arity = 0);
    
    Opal.defn(self, '$is_a?', TMP_Object_is_a$q_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass)
    }, TMP_Object_is_a$q_37.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.defn(self, '$instance_of?', TMP_Object_instance_of$q_38 = function(klass) {
      var self = this;

      return self.$$class === klass
    }, TMP_Object_instance_of$q_38.$$arity = 1);
    
    Opal.defn(self, '$class', TMP_Object_class_39 = function() {
      var self = this;

      return self.$$class
    }, TMP_Object_class_39.$$arity = 0);
    
    Opal.defn(self, '$to_a', TMP_Object_to_a_40 = function $$to_a(options) {
      var self = this, $iter = TMP_Object_to_a_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Object_to_a_40.$$p = null;
      return $send(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a()
    }, TMP_Object_to_a_40.$$arity = -1);
    return (Opal.defn(self, '$inspect', TMP_Object_inspect_41 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, TMP_Object_inspect_41.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_initialize_42, TMP_Array_each_43, TMP_Array_$$_44, TMP_Array_$$$eq_45, TMP_Array_last_46, TMP_Array_length_47, TMP_Array_inspect_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Native'));
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    
    Opal.defn(self, '$initialize', TMP_Array_initialize_42 = function $$initialize(native$, options) {
      var $a, self = this, $iter = TMP_Array_initialize_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($iter) TMP_Array_initialize_42.$$p = null;
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_42, false), [native$], null);
      self.get = ($truthy($a = options['$[]']("get")) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ($truthy($a = options['$[]']("set")) ? $a : options['$[]']("access"));
      self.length = ($truthy($a = options['$[]']("length")) ? $a : "length");
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_Array_initialize_42.$$arity = -2);
    
    Opal.defn(self, '$each', TMP_Array_each_43 = function $$each() {
      var self = this, $iter = TMP_Array_each_43.$$p, block = $iter || nil;

      if ($iter) TMP_Array_each_43.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_Array_each_43.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Array_$$_44 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if (Opal.const_get_relative($nesting, 'String')['$===']($case) || Opal.const_get_relative($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
        } else {
        return self["native"][index]
      }}
      else if (Opal.const_get_relative($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
        } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_Array_$$_44.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Array_$$$eq_45 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, Opal.const_get_relative($nesting, 'Native').$convert(value))
        } else {
        return self["native"][index] = Opal.const_get_relative($nesting, 'Native').$convert(value)
      }
    }, TMP_Array_$$$eq_45.$$arity = 2);
    
    Opal.defn(self, '$last', TMP_Array_last_46 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      }
    }, TMP_Array_last_46.$$arity = -1);
    
    Opal.defn(self, '$length', TMP_Array_length_47 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, TMP_Array_length_47.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    return (Opal.defn(self, '$inspect', TMP_Array_inspect_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, TMP_Array_inspect_48.$$arity = 0), nil) && 'inspect';
  })(Opal.const_get_relative($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_n_49;

    return (Opal.defn(self, '$to_n', TMP_Numeric_to_n_49 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Numeric_to_n_49.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_to_n_50;

    return (Opal.defn(self, '$to_n', TMP_Proc_to_n_50 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Proc_to_n_50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_n_51;

    return (Opal.defn(self, '$to_n', TMP_String_to_n_51 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_String_to_n_51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Regexp_to_n_52;

    return (Opal.defn(self, '$to_n', TMP_Regexp_to_n_52 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Regexp_to_n_52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MatchData_to_n_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_MatchData_to_n_53 = function $$to_n() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_n_53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Struct_to_n_55;

    return (Opal.defn(self, '$to_n', TMP_Struct_to_n_55 = function $$to_n() {
      var TMP_54, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value)}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54));
      return result;
    }, TMP_Struct_to_n_55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_n_56;

    return (Opal.defn(self, '$to_n', TMP_Array_to_n_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push(Opal.const_get_relative($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_Array_to_n_56.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_n_57;

    return (Opal.defn(self, '$to_n', TMP_Boolean_to_n_57 = function $$to_n() {
      var self = this;

      return self.valueOf()
    }, TMP_Boolean_to_n_57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_n_58;

    return (Opal.defn(self, '$to_n', TMP_Time_to_n_58 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Time_to_n_58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_n_59;

    return (Opal.defn(self, '$to_n', TMP_NilClass_to_n_59 = function $$to_n() {
      var self = this;

      return null
    }, TMP_NilClass_to_n_59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_initialize_60, TMP_Hash_to_n_61;

    
    self.$alias_method("_initialize", "initialize");
    
    Opal.defn(self, '$initialize', TMP_Hash_initialize_60 = function $$initialize(defaults) {
      var self = this, $iter = TMP_Hash_initialize_60.$$p, block = $iter || nil;

      if ($iter) TMP_Hash_initialize_60.$$p = null;
      
      if (defaults != null &&
           (defaults.constructor === undefined ||
             defaults.constructor === Object)) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value &&
               (value.constructor === undefined ||
                 value.constructor === Object)) {
            smap[key] = Opal.const_get_relative($nesting, 'Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item &&
                   (item.constructor === undefined ||
                     item.constructor === Object)) {
                return Opal.const_get_relative($nesting, 'Hash').$new(item);
              }

              return self.$Native(item);
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return $send(self, '_initialize', [defaults], block.$to_proc());
    
    }, TMP_Hash_initialize_60.$$arity = -1);
    return (Opal.defn(self, '$to_n', TMP_Hash_to_n_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = Opal.const_get_relative($nesting, 'Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_Hash_to_n_61.$$arity = 0), nil) && 'to_n';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_native_module_62;

    return (Opal.defn(self, '$native_module', TMP_Module_native_module_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, TMP_Module_native_module_62.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Class_native_alias_63, TMP_Class_native_class_64;

    
    
    Opal.defn(self, '$native_alias', TMP_Class_native_alias_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    
    }, TMP_Class_native_alias_63.$$arity = 2);
    return (Opal.defn(self, '$native_class', TMP_Class_native_class_64 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, TMP_Class_native_class_64.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/constants"] = function(Opal) {
  var $a, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$raise']);
  
  self.$require("native");
  if ($truthy((($a = Opal.const_get_relative($nesting, 'JQUERY_CLASS', 'skip_raise')) ? 'constant' : nil))) {
    return nil
    } else {
    return (function() {
    if ($truthy(!!Opal.global.jQuery)) {return Opal.const_set($nesting[0], 'JQUERY_CLASS', Opal.const_set($nesting[0], 'JQUERY_SELECTOR', Opal.global.jQuery))}
    else if ($truthy(!!Opal.global.Zepto)) {
    Opal.const_set($nesting[0], 'JQUERY_SELECTOR', Opal.global.Zepto);
    return Opal.const_set($nesting[0], 'JQUERY_CLASS', Opal.global.Zepto.zepto.Z);}
    else {return self.$raise(Opal.const_get_relative($nesting, 'NameError'), "Can't find jQuery or Zepto. jQuery must be included before opal-jquery")}})()
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/element"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$to_n', '$include', '$each', '$alias_native', '$attr_reader', '$call', '$nil?', '$raise', '$is_a?', '$has_key?', '$delete', '$from_object', '$gsub', '$upcase', '$[]', '$compact', '$map', '$respond_to?', '$<<', '$Native', '$arity', '$new']);
  
  self.$require("native");
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_find_1, TMP_Element_$$_2, TMP_Element_id_3, TMP_Element_new_4, TMP_Element_parse_5, TMP_Element_expose_7, TMP_Element_prop_8, TMP_Element_to_n_9, TMP_Element_$$_10, TMP_Element_$$$eq_11, TMP_Element_attr_12, TMP_Element_has_attribute$q_13, TMP_Element_append_to_body_14, TMP_Element_append_to_head_15, TMP_Element_at_16, TMP_Element_class_name_17, TMP_Element_class_name$eq_18, TMP_Element_css_19, TMP_Element_animate_20, TMP_Element_data_21, TMP_Element_effect_22, TMP_Element_visible$q_25, TMP_Element_offset_26, TMP_Element_each_27, TMP_Element_first_28, TMP_Element_html_29, TMP_Element_id_30, TMP_Element_id$eq_31, TMP_Element_tag_name_32, TMP_Element_inspect_33, TMP_Element_to_s_34, TMP_Element_length_35, TMP_Element_any$q_36, TMP_Element_empty$q_37, TMP_Element_on_38, TMP_Element_one_39, TMP_Element_off_40, TMP_Element_serialize_array_42, TMP_Element_value_43, TMP_Element_height_44, TMP_Element_width_45, TMP_Element_position_46, TMP_Element_$eq$eq_47, TMP_Element_respond_to_missing$q_48, TMP_Element_method_missing_49;

    
    var $ = Opal.const_get_relative($nesting, 'JQUERY_SELECTOR').$to_n();
    self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
    Opal.defs(self, '$find', TMP_Element_find_1 = function $$find(selector) {
      var self = this;

      return $(selector)
    }, TMP_Element_find_1.$$arity = 1);
    Opal.defs(self, '$[]', TMP_Element_$$_2 = function(selector) {
      var self = this;

      return $(selector)
    }, TMP_Element_$$_2.$$arity = 1);
    Opal.defs(self, '$id', TMP_Element_id_3 = function $$id(id) {
      var self = this;

      
      var el = document.getElementById(id);

      if (!el) {
        return nil;
      }

      return $(el);
    
    }, TMP_Element_id_3.$$arity = 1);
    Opal.defs(self, '$new', TMP_Element_new_4 = function(tag) {
      var self = this;

      if (tag == null) {
        tag = "div";
      }
      return $(document.createElement(tag))
    }, TMP_Element_new_4.$$arity = -1);
    Opal.defs(self, '$parse', TMP_Element_parse_5 = function $$parse(str) {
      var self = this;

      return $.parseHTML ? $($.parseHTML(str)) : $(str)
    }, TMP_Element_parse_5.$$arity = 1);
    Opal.defs(self, '$expose', TMP_Element_expose_7 = function $$expose($a_rest) {
      var TMP_6, self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(methods, 'each', [], (TMP_6 = function(method){var self = TMP_6.$$s || this;
if (method == null) method = nil;
      return self.$alias_native(method)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
    }, TMP_Element_expose_7.$$arity = -1);
    self.$attr_reader("selector");
    self.$alias_native("after");
    self.$alias_native("before");
    self.$alias_native("parent");
    self.$alias_native("parents");
    self.$alias_native("prev");
    self.$alias_native("remove");
    self.$alias_native("hide");
    self.$alias_native("show");
    self.$alias_native("toggle");
    self.$alias_native("children");
    self.$alias_native("blur");
    self.$alias_native("closest");
    self.$alias_native("detach");
    self.$alias_native("focus");
    self.$alias_native("find");
    self.$alias_native("next");
    self.$alias_native("siblings");
    self.$alias_native("text");
    self.$alias_native("trigger");
    self.$alias_native("append");
    self.$alias_native("prepend");
    self.$alias_native("serialize");
    self.$alias_native("is");
    self.$alias_native("filter");
    self.$alias_native("not");
    self.$alias_native("last");
    self.$alias_native("wrap");
    self.$alias_native("stop");
    self.$alias_native("clone");
    self.$alias_native("empty");
    self.$alias_native("get");
    
    Opal.defn(self, '$prop', TMP_Element_prop_8 = function $$prop($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return $send(Opal.const_get_relative($nesting, 'Native'), 'call', [self, "prop"].concat(Opal.to_a(args)))
    }, TMP_Element_prop_8.$$arity = -1);
    Opal.alias(self, "succ", "next");
    Opal.alias(self, "<<", "append");
    self.$alias_native("add_class", "addClass");
    self.$alias_native("append_to", "appendTo");
    self.$alias_native("has_class?", "hasClass");
    self.$alias_native("html=", "html");
    self.$alias_native("index");
    self.$alias_native("is?", "is");
    self.$alias_native("remove_attr", "removeAttr");
    self.$alias_native("remove_class", "removeClass");
    self.$alias_native("submit");
    self.$alias_native("click");
    self.$alias_native("text=", "text");
    self.$alias_native("toggle_class", "toggleClass");
    self.$alias_native("value=", "val");
    self.$alias_native("scroll_top=", "scrollTop");
    self.$alias_native("scroll_top", "scrollTop");
    self.$alias_native("scroll_left=", "scrollLeft");
    self.$alias_native("scroll_left", "scrollLeft");
    self.$alias_native("remove_attribute", "removeAttr");
    self.$alias_native("slide_down", "slideDown");
    self.$alias_native("slide_up", "slideUp");
    self.$alias_native("slide_toggle", "slideToggle");
    self.$alias_native("fade_toggle", "fadeToggle");
    self.$alias_native("height=", "height");
    self.$alias_native("width=", "width");
    self.$alias_native("outer_width", "outerWidth");
    self.$alias_native("outer_height", "outerHeight");
    
    Opal.defn(self, '$to_n', TMP_Element_to_n_9 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Element_to_n_9.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Element_$$_10 = function(name) {
      var self = this;

      
      var value = self.attr(name);
      if(value === undefined) return nil;
      return value;
    
    }, TMP_Element_$$_10.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_Element_$$$eq_11 = function(name, value) {
      var self = this;

      
      if ($truthy(value['$nil?']())) {
        return self.removeAttr(name)};
      return self.attr(name, value);
    }, TMP_Element_$$$eq_11.$$arity = 2);
    
    Opal.defn(self, '$attr', TMP_Element_attr_12 = function $$attr($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var size = args.length;
      switch (size) {
      case 1:
        var result = self.attr(args[0]);
        return( (result == null) ? nil : result );
        break;
      case 2:
        return self.attr(args[0], args[1]);
        break;
      default:
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "#attr only accepts 1 or 2 arguments")
      }
    
    }, TMP_Element_attr_12.$$arity = -1);
    
    Opal.defn(self, '$has_attribute?', TMP_Element_has_attribute$q_13 = function(name) {
      var self = this;

      return self.attr(name) !== undefined
    }, TMP_Element_has_attribute$q_13.$$arity = 1);
    
    Opal.defn(self, '$append_to_body', TMP_Element_append_to_body_14 = function $$append_to_body() {
      var self = this;

      return self.appendTo(document.body)
    }, TMP_Element_append_to_body_14.$$arity = 0);
    
    Opal.defn(self, '$append_to_head', TMP_Element_append_to_head_15 = function $$append_to_head() {
      var self = this;

      return self.appendTo(document.head)
    }, TMP_Element_append_to_head_15.$$arity = 0);
    
    Opal.defn(self, '$at', TMP_Element_at_16 = function $$at(index) {
      var self = this;

      
      var length = self.length;

      if (index < 0) {
        index += length;
      }

      if (index < 0 || index >= length) {
        return nil;
      }

      return $(self[index]);
    
    }, TMP_Element_at_16.$$arity = 1);
    
    Opal.defn(self, '$class_name', TMP_Element_class_name_17 = function $$class_name() {
      var self = this;

      
      var first = self[0];
      return (first && first.className) || "";
    
    }, TMP_Element_class_name_17.$$arity = 0);
    
    Opal.defn(self, '$class_name=', TMP_Element_class_name$eq_18 = function(name) {
      var self = this;

      
      
      for (var i = 0, length = self.length; i < length; i++) {
        self[i].className = name;
      }
    ;
      return self;
    }, TMP_Element_class_name$eq_18.$$arity = 1);
    
    Opal.defn(self, '$css', TMP_Element_css_19 = function $$css(name, value) {
      var $a, self = this;

      if (value == null) {
        value = nil;
      }
      
      if ($truthy(($truthy($a = value['$nil?']()) ? name['$is_a?'](Opal.const_get_relative($nesting, 'String')) : $a))) {
        return self.css(name)
      } else if ($truthy(name['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
        self.css(name.$to_n())
        } else {
        self.css(name, value)
      };
      return self;
    }, TMP_Element_css_19.$$arity = -2);
    
    Opal.defn(self, '$animate', TMP_Element_animate_20 = function $$animate(params) {
      var self = this, $iter = TMP_Element_animate_20.$$p, block = $iter || nil, speed = nil;

      if ($iter) TMP_Element_animate_20.$$p = null;
      
      speed = (function() {if ($truthy(params['$has_key?']("speed"))) {
        return params.$delete("speed")
        } else {
        return 400
      }; return nil; })();
      if ((block !== nil)) {
        return self.animate(params.$to_n(), speed, block)
        } else {
        return self.animate(params.$to_n(), speed)
      };
    }, TMP_Element_animate_20.$$arity = 1);
    
    Opal.defn(self, '$data', TMP_Element_data_21 = function $$data($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = self.data.apply(self, args);
      if (
        (typeof(result) === 'object') && !(result instanceof Opal.const_get_relative($nesting, 'JQUERY_CLASS'))
      ) {
        result = Opal.const_get_relative($nesting, 'JSON').$from_object(result);
      }
      return result == null ? nil : result;
    
    }, TMP_Element_data_21.$$arity = -1);
    
    Opal.defn(self, '$effect', TMP_Element_effect_22 = function $$effect(name, $a_rest) {
      var TMP_23, TMP_24, self = this, args, $iter = TMP_Element_effect_22.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Element_effect_22.$$p = null;
      
      name = $send(name, 'gsub', [/_\w/], (TMP_23 = function(match){var self = TMP_23.$$s || this;
if (match == null) match = nil;
      return match['$[]'](1).$upcase()}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));
      args = $send(args, 'map', [], (TMP_24 = function(a){var self = TMP_24.$$s || this;
if (a == null) a = nil;
      if ($truthy(a['$respond_to?']("to_n"))) {
          return a.$to_n()
          } else {
          return nil
        }}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24)).$compact();
      args['$<<'](function() { (function() {if ((block !== nil)) {
        return block.$call()
        } else {
        return nil
      }; return nil; })() });
      return self[name].apply(self, args);
    }, TMP_Element_effect_22.$$arity = -2);
    
    Opal.defn(self, '$visible?', TMP_Element_visible$q_25 = function() {
      var self = this;

      return self.is(':visible')
    }, TMP_Element_visible$q_25.$$arity = 0);
    
    Opal.defn(self, '$offset', TMP_Element_offset_26 = function $$offset() {
      var self = this;

      return self.$Native(self.offset())
    }, TMP_Element_offset_26.$$arity = 0);
    
    Opal.defn(self, '$each', TMP_Element_each_27 = function $$each() {
      var self = this, $iter = TMP_Element_each_27.$$p, $yield = $iter || nil;

      if ($iter) TMP_Element_each_27.$$p = null;
      
      for (var i = 0, length = self.length; i < length; i++) {;
      Opal.yield1($yield, $(self[i]));
      };
      return self;
    }, TMP_Element_each_27.$$arity = 0);
    
    Opal.defn(self, '$first', TMP_Element_first_28 = function $$first() {
      var self = this;

      return self.length ? self.first() : nil
    }, TMP_Element_first_28.$$arity = 0);
    
    Opal.defn(self, '$html', TMP_Element_html_29 = function $$html(content) {
      var self = this;

      
      if (content != null) {
        return self.html(content);
      }

      return self.html() || '';
    
    }, TMP_Element_html_29.$$arity = -1);
    
    Opal.defn(self, '$id', TMP_Element_id_30 = function $$id() {
      var self = this;

      
      var first = self[0];
      return (first && first.id) || "";
    
    }, TMP_Element_id_30.$$arity = 0);
    
    Opal.defn(self, '$id=', TMP_Element_id$eq_31 = function(id) {
      var self = this;

      
      var first = self[0];

      if (first) {
        first.id = id;
      }

      return self;
    
    }, TMP_Element_id$eq_31.$$arity = 1);
    
    Opal.defn(self, '$tag_name', TMP_Element_tag_name_32 = function $$tag_name() {
      var self = this;

      return self.length > 0 ? self[0].tagName.toLowerCase() : nil
    }, TMP_Element_tag_name_32.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Element_inspect_33 = function $$inspect() {
      var self = this;

      
      if      (self[0] === document) return '#<Element [document]>'
      else if (self[0] === window  ) return '#<Element [window]>'

      var val, el, str, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];
        if (!el.tagName) { return '#<Element ['+el.toString()+']'; }

        str = "<" + el.tagName.toLowerCase();

        if (val = el.id) str += (' id="' + val + '"');
        if (val = el.className) str += (' class="' + val + '"');

        result.push(str + '>');
      }

      return '#<Element [' + result.join(', ') + ']>';
    
    }, TMP_Element_inspect_33.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_Element_to_s_34 = function $$to_s() {
      var self = this;

      
      var val, el, result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        el  = self[i];

        result.push(el.outerHTML)
      }

      return result.join(', ');
    
    }, TMP_Element_to_s_34.$$arity = 0);
    
    Opal.defn(self, '$length', TMP_Element_length_35 = function $$length() {
      var self = this;

      return self.length
    }, TMP_Element_length_35.$$arity = 0);
    
    Opal.defn(self, '$any?', TMP_Element_any$q_36 = function() {
      var self = this;

      return self.length > 0
    }, TMP_Element_any$q_36.$$arity = 0);
    
    Opal.defn(self, '$empty?', TMP_Element_empty$q_37 = function() {
      var self = this;

      return self.length === 0
    }, TMP_Element_empty$q_37.$$arity = 0);
    Opal.alias(self, "empty?", "none?");
    
    Opal.defn(self, '$on', TMP_Element_on_38 = function $$on(name, sel) {
      var self = this, $iter = TMP_Element_on_38.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      if ($iter) TMP_Element_on_38.$$p = null;
      
      
      var has_args = block.$arity() !== 0;

      var wrapper = function() {
        for(var args = new Array(arguments.length), i = 0, ii = args.length; i < ii; i++) {
          args[i] = arguments[i];
        }

        // Use preventDefault as a canary for native events
        if (has_args && args[0].preventDefault) {
          args[0] = Opal.const_get_relative($nesting, 'Event').$new(args[0]);
        }

        return block.apply(null, args);
      };

      block.$$jqwrap = wrapper;

      if (sel == nil) {
        self.on(name, wrapper);
      }
      else {
        self.on(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_Element_on_38.$$arity = -2);
    
    Opal.defn(self, '$one', TMP_Element_one_39 = function $$one(name, sel) {
      var self = this, $iter = TMP_Element_one_39.$$p, block = $iter || nil;

      if (sel == null) {
        sel = nil;
      }
      if ($iter) TMP_Element_one_39.$$p = null;
      
      
      var has_args = block.$arity() !== 0;

      var wrapper = function() {
        for(var args = new Array(arguments.length), i = 0, ii = args.length; i < ii; i++) {
          args[i] = arguments[i];
        }

        // Use preventDefault as a canary for native events
        if (has_args && args[0].preventDefault) {
          args[0] = Opal.const_get_relative($nesting, 'Event').$new(args[0]);
        }

        return block.apply(null, args);
      };

      block.$$jqwrap = wrapper;

      if (sel == nil) {
        self.one(name, wrapper);
      }
      else {
        self.one(name, sel, wrapper);
      }
    ;
      return block;
    }, TMP_Element_one_39.$$arity = -2);
    
    Opal.defn(self, '$off', TMP_Element_off_40 = function $$off(name, sel, block) {
      var self = this;

      if (block == null) {
        block = nil;
      }
      
      if (sel == null) {
        return self.off(name);
      }
      else if (block === nil) {
        return self.off(name, sel.$$jqwrap);
      }
      else {
        return self.off(name, sel, block.$$jqwrap);
      }
    
    }, TMP_Element_off_40.$$arity = -3);
    
    Opal.defn(self, '$serialize_array', TMP_Element_serialize_array_42 = function $$serialize_array() {
      var TMP_41, self = this;

      return $send((self.serializeArray()), 'map', [], (TMP_41 = function(e){var self = TMP_41.$$s || this;
if (e == null) e = nil;
      return Opal.const_get_relative($nesting, 'Hash').$new(e)}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41))
    }, TMP_Element_serialize_array_42.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$value', TMP_Element_value_43 = function $$value() {
      var $a, self = this;

      return ($truthy($a = self.val()) ? $a : "")
    }, TMP_Element_value_43.$$arity = 0);
    
    Opal.defn(self, '$height', TMP_Element_height_44 = function $$height() {
      var $a, self = this;

      return ($truthy($a = self.height()) ? $a : nil)
    }, TMP_Element_height_44.$$arity = 0);
    
    Opal.defn(self, '$width', TMP_Element_width_45 = function $$width() {
      var $a, self = this;

      return ($truthy($a = self.width()) ? $a : nil)
    }, TMP_Element_width_45.$$arity = 0);
    
    Opal.defn(self, '$position', TMP_Element_position_46 = function $$position() {
      var self = this;

      return self.$Native(self.position())
    }, TMP_Element_position_46.$$arity = 0);
    
    Opal.defn(self, '$==', TMP_Element_$eq$eq_47 = function(other) {
      var self = this;

      return self.is(other)
    }, TMP_Element_$eq$eq_47.$$arity = 1);
    
    Opal.defn(self, '$respond_to_missing?', TMP_Element_respond_to_missing$q_48 = function(name, _) {
      var self = this, $iter = TMP_Element_respond_to_missing$q_48.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Element_respond_to_missing$q_48.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      var method = self[name];
      if (typeof(method) === 'function') {
        return true;
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'respond_to_missing?', TMP_Element_respond_to_missing$q_48, false), $zuper, $iter);
      }
    
    }, TMP_Element_respond_to_missing$q_48.$$arity = 2);
    return (Opal.defn(self, '$method_missing', TMP_Element_method_missing_49 = function $$method_missing(name, $a_rest) {
      var self = this, args, $iter = TMP_Element_method_missing_49.$$p, block = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Element_method_missing_49.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ((block !== nil)) {
        args['$<<'](block)};
      
      var method = self[name];
      if (typeof(method) === 'function') {
        return method.apply(self, args.$to_n());
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_Element_method_missing_49, false), $zuper, $iter);
      }
    ;
    }, TMP_Element_method_missing_49.$$arity = -2), nil) && 'method_missing';
  })($nesting[0], Opal.const_get_relative($nesting, 'JQUERY_CLASS').$to_n(), $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/window"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$find', '$on', '$element', '$to_proc', '$off', '$trigger', '$new']);
  
  self.$require("opal/jquery/element");
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a, $b, TMP_Window_element_1, TMP_Window_on_2, TMP_Window_off_3, TMP_Window_trigger_4;

      def.element = nil;
      
      self.$include((function() {if ($truthy((($b = Opal.const_get_relative($nesting, 'Native', 'skip_raise')) && ($a = Opal.const_get_qualified($b, 'Wrapper', 'skip_raise')) ? 'constant' : nil))) {
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Wrapper')
        } else {
        return Opal.const_get_relative($nesting, 'Native')
      }; return nil; })());
      
      Opal.defn(self, '$element', TMP_Window_element_1 = function $$element() {
        var $a, self = this;

        return (self.element = ($truthy($a = self.element) ? $a : Opal.const_get_relative($nesting, 'Element').$find(window)))
      }, TMP_Window_element_1.$$arity = 0);
      
      Opal.defn(self, '$on', TMP_Window_on_2 = function $$on($a_rest) {
        var self = this, args, $iter = TMP_Window_on_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_Window_on_2.$$p = null;
        return $send(self.$element(), 'on', Opal.to_a(args), block.$to_proc())
      }, TMP_Window_on_2.$$arity = -1);
      
      Opal.defn(self, '$off', TMP_Window_off_3 = function $$off($a_rest) {
        var self = this, args, $iter = TMP_Window_off_3.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_Window_off_3.$$p = null;
        return $send(self.$element(), 'off', Opal.to_a(args), block.$to_proc())
      }, TMP_Window_off_3.$$arity = -1);
      return (Opal.defn(self, '$trigger', TMP_Window_trigger_4 = function $$trigger($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(self.$element(), 'trigger', Opal.to_a(args))
      }, TMP_Window_trigger_4.$$arity = -1), nil) && 'trigger';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  Opal.const_set($nesting[0], 'Window', Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Window').$new(window));
  return ($gvars.window = Opal.const_get_relative($nesting, 'Window'));
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/document"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$call', '$new', '$ready?', '$resolve', '$module_function', '$find', '$extend']);
  
  self.$require("opal/jquery/constants");
  self.$require("opal/jquery/element");
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DocumentMethods, self = $DocumentMethods = $module($base, 'DocumentMethods');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DocumentMethods_ready$q_1, TMP_DocumentMethods_ready_3, TMP_DocumentMethods_4, TMP_DocumentMethods_title_5, TMP_DocumentMethods_title$eq_6, TMP_DocumentMethods_head_7, TMP_DocumentMethods_body_8;

      
      var $ = Opal.const_get_relative($nesting, 'JQUERY_SELECTOR').$to_n();
      
      Opal.defn(self, '$ready?', TMP_DocumentMethods_ready$q_1 = function() {
        var $a, self = this, $iter = TMP_DocumentMethods_ready$q_1.$$p, block = $iter || nil;

        if ($iter) TMP_DocumentMethods_ready$q_1.$$p = null;
        if ((block !== nil)) {
          if ($truthy((($a = $DocumentMethods.$$cvars['@@__isReady']) == null ? nil : $a))) {
            return block.$call()
            } else {
            return $(block)
          }
          } else {
          return nil
        }
      }, TMP_DocumentMethods_ready$q_1.$$arity = 0);
      
      Opal.defn(self, '$ready', TMP_DocumentMethods_ready_3 = function $$ready() {
        var TMP_2, self = this, promise = nil;

        
        promise = Opal.const_get_relative($nesting, 'Promise').$new();
        $send(Opal.const_get_relative($nesting, 'Document'), 'ready?', [], (TMP_2 = function(){var self = TMP_2.$$s || this;

        return promise.$resolve()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
        return promise;
      }, TMP_DocumentMethods_ready_3.$$arity = 0);
      self.$module_function("ready?");
      $send(self, 'ready?', [], (TMP_DocumentMethods_4 = function(){var self = TMP_DocumentMethods_4.$$s || this;

      return (Opal.class_variable_set($DocumentMethods, '@@__isReady', true))}, TMP_DocumentMethods_4.$$s = self, TMP_DocumentMethods_4.$$arity = 0, TMP_DocumentMethods_4));
      
      Opal.defn(self, '$title', TMP_DocumentMethods_title_5 = function $$title() {
        var self = this;

        return document.title
      }, TMP_DocumentMethods_title_5.$$arity = 0);
      
      Opal.defn(self, '$title=', TMP_DocumentMethods_title$eq_6 = function(title) {
        var self = this;

        return document.title = title
      }, TMP_DocumentMethods_title$eq_6.$$arity = 1);
      
      Opal.defn(self, '$head', TMP_DocumentMethods_head_7 = function $$head() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Element').$find(document.head)
      }, TMP_DocumentMethods_head_7.$$arity = 0);
      
      Opal.defn(self, '$body', TMP_DocumentMethods_body_8 = function $$body() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Element').$find(document.body)
      }, TMP_DocumentMethods_body_8.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  Opal.const_set($nesting[0], 'Document', Opal.const_get_relative($nesting, 'Element').$find(document));
  Opal.const_get_relative($nesting, 'Document').$extend(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DocumentMethods'));
  return ($gvars.document = Opal.const_get_relative($nesting, 'Document'));
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$to_n', '$stop', '$prevent']);
  
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    function $Event(){};
    var self = $Event = $klass($base, $super, 'Event', $Event);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Event_initialize_1, TMP_Event_to_n_2, TMP_Event_$$_3, TMP_Event_type_4, TMP_Event_element_5, TMP_Event_target_6, TMP_Event_prevented$q_7, TMP_Event_prevent_8, TMP_Event_stopped$q_9, TMP_Event_stop_10, TMP_Event_stop_immediate_11, TMP_Event_kill_12, TMP_Event_page_x_13, TMP_Event_page_y_14, TMP_Event_touch_x_15, TMP_Event_touch_y_16, TMP_Event_ctrl_key_17, TMP_Event_meta_key_18, TMP_Event_alt_key_19, TMP_Event_shift_key_20, TMP_Event_key_code_21, TMP_Event_which_22;

    def["native"] = nil;
    
    var $ = Opal.const_get_relative($nesting, 'JQUERY_SELECTOR').$to_n();
    
    Opal.defn(self, '$initialize', TMP_Event_initialize_1 = function $$initialize(native$) {
      var self = this;

      return (self["native"] = native$)
    }, TMP_Event_initialize_1.$$arity = 1);
    
    Opal.defn(self, '$to_n', TMP_Event_to_n_2 = function $$to_n() {
      var self = this;

      return self["native"]
    }, TMP_Event_to_n_2.$$arity = 0);
    
    Opal.defn(self, '$[]', TMP_Event_$$_3 = function(name) {
      var self = this;

      return self["native"][name]
    }, TMP_Event_$$_3.$$arity = 1);
    
    Opal.defn(self, '$type', TMP_Event_type_4 = function $$type() {
      var self = this;

      return self["native"].type
    }, TMP_Event_type_4.$$arity = 0);
    
    Opal.defn(self, '$element', TMP_Event_element_5 = function $$element() {
      var self = this;

      return $(self["native"].currentTarget)
    }, TMP_Event_element_5.$$arity = 0);
    Opal.alias(self, "current_target", "element");
    
    Opal.defn(self, '$target', TMP_Event_target_6 = function $$target() {
      var self = this;

      return $(self["native"].target)
    }, TMP_Event_target_6.$$arity = 0);
    
    Opal.defn(self, '$prevented?', TMP_Event_prevented$q_7 = function() {
      var self = this;

      return self["native"].isDefaultPrevented()
    }, TMP_Event_prevented$q_7.$$arity = 0);
    
    Opal.defn(self, '$prevent', TMP_Event_prevent_8 = function $$prevent() {
      var self = this;

      return self["native"].preventDefault()
    }, TMP_Event_prevent_8.$$arity = 0);
    
    Opal.defn(self, '$stopped?', TMP_Event_stopped$q_9 = function() {
      var self = this;

      return self["native"].isPropagationStopped()
    }, TMP_Event_stopped$q_9.$$arity = 0);
    
    Opal.defn(self, '$stop', TMP_Event_stop_10 = function $$stop() {
      var self = this;

      return self["native"].stopPropagation()
    }, TMP_Event_stop_10.$$arity = 0);
    
    Opal.defn(self, '$stop_immediate', TMP_Event_stop_immediate_11 = function $$stop_immediate() {
      var self = this;

      return self["native"].stopImmediatePropagation()
    }, TMP_Event_stop_immediate_11.$$arity = 0);
    
    Opal.defn(self, '$kill', TMP_Event_kill_12 = function $$kill() {
      var self = this;

      
      self.$stop();
      return self.$prevent();
    }, TMP_Event_kill_12.$$arity = 0);
    
    Opal.defn(self, '$page_x', TMP_Event_page_x_13 = function $$page_x() {
      var self = this;

      return self["native"].pageX
    }, TMP_Event_page_x_13.$$arity = 0);
    
    Opal.defn(self, '$page_y', TMP_Event_page_y_14 = function $$page_y() {
      var self = this;

      return self["native"].pageY
    }, TMP_Event_page_y_14.$$arity = 0);
    
    Opal.defn(self, '$touch_x', TMP_Event_touch_x_15 = function $$touch_x() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageX
    }, TMP_Event_touch_x_15.$$arity = 0);
    
    Opal.defn(self, '$touch_y', TMP_Event_touch_y_16 = function $$touch_y() {
      var self = this;

      return self["native"].originalEvent.touches[0].pageY
    }, TMP_Event_touch_y_16.$$arity = 0);
    
    Opal.defn(self, '$ctrl_key', TMP_Event_ctrl_key_17 = function $$ctrl_key() {
      var self = this;

      return self["native"].ctrlKey
    }, TMP_Event_ctrl_key_17.$$arity = 0);
    
    Opal.defn(self, '$meta_key', TMP_Event_meta_key_18 = function $$meta_key() {
      var self = this;

      return self["native"].metaKey
    }, TMP_Event_meta_key_18.$$arity = 0);
    
    Opal.defn(self, '$alt_key', TMP_Event_alt_key_19 = function $$alt_key() {
      var self = this;

      return self["native"].altKey
    }, TMP_Event_alt_key_19.$$arity = 0);
    
    Opal.defn(self, '$shift_key', TMP_Event_shift_key_20 = function $$shift_key() {
      var self = this;

      return self["native"].shiftKey
    }, TMP_Event_shift_key_20.$$arity = 0);
    
    Opal.defn(self, '$key_code', TMP_Event_key_code_21 = function $$key_code() {
      var self = this;

      return self["native"].keyCode
    }, TMP_Event_key_code_21.$$arity = 0);
    
    Opal.defn(self, '$which', TMP_Event_which_22 = function $$which() {
      var self = this;

      return self["native"].which
    }, TMP_Event_which_22.$$arity = 0);
    Opal.alias(self, "default_prevented?", "prevented?");
    Opal.alias(self, "prevent_default", "prevent");
    Opal.alias(self, "propagation_stopped?", "stopped?");
    Opal.alias(self, "stop_propagation", "stop");
    return Opal.alias(self, "stop_immediate_propagation", "stop_immediate");
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["json"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_JSON_$$_1, TMP_JSON_parse_2, TMP_JSON_parse$B_3, TMP_JSON_load_4, TMP_JSON_from_object_5, TMP_JSON_generate_6, TMP_JSON_dump_7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      function $JSONError(){};
      var self = $JSONError = $klass($base, $super, 'JSONError', $JSONError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ParserError(){};
      var self = $ParserError = $klass($base, $super, 'ParserError', $ParserError);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]'](Opal.const_get_relative($nesting, 'JSON').$create_id())) != nil) {
              return Opal.const_get_qualified('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', TMP_JSON_$$_1 = function(value, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      }
    }, TMP_JSON_$$_1.$$arity = -2);
    Opal.defs(self, '$parse', TMP_JSON_parse_2 = function $$parse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})))
    }, TMP_JSON_parse_2.$$arity = -2);
    Opal.defs(self, '$parse!', TMP_JSON_parse$B_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options)
    }, TMP_JSON_parse$B_3.$$arity = -2);
    Opal.defs(self, '$load', TMP_JSON_load_4 = function $$load(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options)
    }, TMP_JSON_load_4.$$arity = -2);
    Opal.defs(self, '$from_object', TMP_JSON_from_object_5 = function $$from_object(js_object, options) {
      var $a, self = this, $writer = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      
      ($truthy($a = options['$[]']("object_class")) ? $a : (($writer = ["object_class", Opal.const_get_relative($nesting, 'Hash')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      ($truthy($a = options['$[]']("array_class")) ? $a : (($writer = ["array_class", Opal.const_get_relative($nesting, 'Array')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return to_opal(js_object, options.$$smap);
    }, TMP_JSON_from_object_5.$$arity = -2);
    Opal.defs(self, '$generate', TMP_JSON_generate_6 = function $$generate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options)
    }, TMP_JSON_generate_6.$$arity = -2);
    Opal.defs(self, '$dump', TMP_JSON_dump_7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_JSON_dump_7.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_json_8;

    return (Opal.defn(self, '$to_json', TMP_Object_to_json_8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Object_to_json_8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_to_json_9;

    
    Opal.defn(self, '$to_json', TMP_Enumerable_to_json_9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, TMP_Enumerable_to_json_9.$$arity = 0)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_to_json_10;

    return (Opal.defn(self, '$to_json', TMP_Array_to_json_10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_Array_to_json_10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_json_11;

    return (Opal.defn(self, '$to_json', TMP_Boolean_to_json_11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false'
    }, TMP_Boolean_to_json_11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_to_json_12;

    return (Opal.defn(self, '$to_json', TMP_Hash_to_json_12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    
    }, TMP_Hash_to_json_12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_json_13;

    return (Opal.defn(self, '$to_json', TMP_NilClass_to_json_13 = function $$to_json() {
      var self = this;

      return "null"
    }, TMP_NilClass_to_json_13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_json_14;

    return (Opal.defn(self, '$to_json', TMP_Numeric_to_json_14 = function $$to_json() {
      var self = this;

      return self.toString()
    }, TMP_Numeric_to_json_14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return Opal.alias(self, "to_json", "inspect")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Time_to_json_15;

    return (Opal.defn(self, '$to_json', TMP_Time_to_json_15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, TMP_Time_to_json_15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Date_to_json_16, TMP_Date_as_json_17;

    
    
    Opal.defn(self, '$to_json', TMP_Date_to_json_16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, TMP_Date_to_json_16.$$arity = 0);
    return (Opal.defn(self, '$as_json', TMP_Date_as_json_17 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, TMP_Date_as_json_17.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$realized?', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super, $parent_nesting) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Promise_value_1, TMP_Promise_error_2, TMP_Promise_when_3, TMP_Promise_initialize_4, TMP_Promise_value_5, TMP_Promise_act$q_6, TMP_Promise_action_7, TMP_Promise_exception$q_8, TMP_Promise_realized$q_9, TMP_Promise_resolved$q_10, TMP_Promise_rejected$q_11, TMP_Promise_$_12, TMP_Promise_$lt$lt_13, TMP_Promise_$gt$gt_14, TMP_Promise_resolve_15, TMP_Promise_resolve$B_17, TMP_Promise_reject_18, TMP_Promise_reject$B_20, TMP_Promise_exception$B_21, TMP_Promise_then_22, TMP_Promise_then$B_23, TMP_Promise_fail_24, TMP_Promise_fail$B_25, TMP_Promise_always_26, TMP_Promise_always$B_27, TMP_Promise_trace_28, TMP_Promise_trace$B_29, TMP_Promise_there_can_be_only_one$B_30, TMP_Promise_inspect_31;

    def.value = def.action = def.exception = def.realized = def.next = def.delayed = def.error = def.prev = nil;
    
    Opal.defs(self, '$value', TMP_Promise_value_1 = function $$value(value) {
      var self = this;

      return self.$new().$resolve(value)
    }, TMP_Promise_value_1.$$arity = 1);
    Opal.defs(self, '$error', TMP_Promise_error_2 = function $$error(value) {
      var self = this;

      return self.$new().$reject(value)
    }, TMP_Promise_error_2.$$arity = 1);
    Opal.defs(self, '$when', TMP_Promise_when_3 = function $$when($a_rest) {
      var self = this, promises;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      promises = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        promises[$arg_idx - 0] = arguments[$arg_idx];
      }
      return Opal.const_get_relative($nesting, 'When').$new(promises)
    }, TMP_Promise_when_3.$$arity = -1);
    self.$attr_reader("error", "prev", "next");
    
    Opal.defn(self, '$initialize', TMP_Promise_initialize_4 = function $$initialize(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {});
      }
      
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return (self.next = []);
    }, TMP_Promise_initialize_4.$$arity = -1);
    
    Opal.defn(self, '$value', TMP_Promise_value_5 = function $$value() {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](self.value))) {
        return self.value.$value()
        } else {
        return self.value
      }
    }, TMP_Promise_value_5.$$arity = 0);
    
    Opal.defn(self, '$act?', TMP_Promise_act$q_6 = function() {
      var $a, self = this;

      return ($truthy($a = self.action['$has_key?']("success")) ? $a : self.action['$has_key?']("always"))
    }, TMP_Promise_act$q_6.$$arity = 0);
    
    Opal.defn(self, '$action', TMP_Promise_action_7 = function $$action() {
      var self = this;

      return self.action.$keys()
    }, TMP_Promise_action_7.$$arity = 0);
    
    Opal.defn(self, '$exception?', TMP_Promise_exception$q_8 = function() {
      var self = this;

      return self.exception
    }, TMP_Promise_exception$q_8.$$arity = 0);
    
    Opal.defn(self, '$realized?', TMP_Promise_realized$q_9 = function() {
      var self = this;

      return self.realized['$!']()['$!']()
    }, TMP_Promise_realized$q_9.$$arity = 0);
    
    Opal.defn(self, '$resolved?', TMP_Promise_resolved$q_10 = function() {
      var self = this;

      return self.realized['$==']("resolve")
    }, TMP_Promise_resolved$q_10.$$arity = 0);
    
    Opal.defn(self, '$rejected?', TMP_Promise_rejected$q_11 = function() {
      var self = this;

      return self.realized['$==']("reject")
    }, TMP_Promise_rejected$q_11.$$arity = 0);
    
    Opal.defn(self, '$^', TMP_Promise_$_12 = function(promise) {
      var self = this;

      
      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, TMP_Promise_$_12.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Promise_$lt$lt_13 = function(promise) {
      var self = this;

      
      self.prev = promise;
      return self;
    }, TMP_Promise_$lt$lt_13.$$arity = 1);
    
    Opal.defn(self, '$>>', TMP_Promise_$gt$gt_14 = function(promise) {
      var $a, self = this;

      
      self.next['$<<'](promise);
      if ($truthy(self['$exception?']())) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ($truthy(self['$resolved?']())) {
        promise.$resolve((function() {if ($truthy(self.delayed)) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ($truthy(self['$rejected?']())) {
        if ($truthy(($truthy($a = self.action['$has_key?']("failure")['$!']()) ? $a : Opal.const_get_relative($nesting, 'Promise')['$===']((function() {if ($truthy(self.delayed)) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ($truthy(promise.$action()['$include?']("always"))) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, TMP_Promise_$gt$gt_14.$$arity = 1);
    
    Opal.defn(self, '$resolve', TMP_Promise_resolve_15 = function $$resolve(value) {
      var $a, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      
      if ($truthy(self['$realized?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        if ($truthy((block = ($truthy($a = self.action['$[]']("success")) ? $a : self.action['$[]']("always"))))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self;
    }, TMP_Promise_resolve_15.$$arity = -1);
    
    Opal.defn(self, '$resolve!', TMP_Promise_resolve$B_17 = function(value) {
      var TMP_16, self = this;

      
      self.realized = "resolve";
      self.value = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], (TMP_16 = function(p){var self = TMP_16.$$s || this;
if (p == null) p = nil;
        return p.$resolve(value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))
        } else {
        return (self.delayed = [value])
      };
    }, TMP_Promise_resolve$B_17.$$arity = 1);
    
    Opal.defn(self, '$reject', TMP_Promise_reject_18 = function $$reject(value) {
      var $a, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      
      if ($truthy(self['$realized?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        if ($truthy((block = ($truthy($a = self.action['$[]']("failure")) ? $a : self.action['$[]']("always"))))) {
          value = block.$call(value)};
        if ($truthy(self.action['$has_key?']("always"))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self;
    }, TMP_Promise_reject_18.$$arity = -1);
    
    Opal.defn(self, '$reject!', TMP_Promise_reject$B_20 = function(value) {
      var TMP_19, self = this;

      
      self.realized = "reject";
      self.error = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], (TMP_19 = function(p){var self = TMP_19.$$s || this;
if (p == null) p = nil;
        return p.$reject(value)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
        } else {
        return (self.delayed = [value])
      };
    }, TMP_Promise_reject$B_20.$$arity = 1);
    
    Opal.defn(self, '$exception!', TMP_Promise_exception$B_21 = function(error) {
      var self = this;

      
      self.exception = true;
      return self['$reject!'](error);
    }, TMP_Promise_exception$B_21.$$arity = 1);
    
    Opal.defn(self, '$then', TMP_Promise_then_22 = function $$then() {
      var self = this, $iter = TMP_Promise_then_22.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_then_22.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["success"], {"success": block})))
    }, TMP_Promise_then_22.$$arity = 0);
    
    Opal.defn(self, '$then!', TMP_Promise_then$B_23 = function() {
      var self = this, $iter = TMP_Promise_then$B_23.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_then$B_23.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'then', [], block.$to_proc());
    }, TMP_Promise_then$B_23.$$arity = 0);
    Opal.alias(self, "do", "then");
    Opal.alias(self, "do!", "then!");
    
    Opal.defn(self, '$fail', TMP_Promise_fail_24 = function $$fail() {
      var self = this, $iter = TMP_Promise_fail_24.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_fail_24.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["failure"], {"failure": block})))
    }, TMP_Promise_fail_24.$$arity = 0);
    
    Opal.defn(self, '$fail!', TMP_Promise_fail$B_25 = function() {
      var self = this, $iter = TMP_Promise_fail$B_25.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_fail$B_25.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'fail', [], block.$to_proc());
    }, TMP_Promise_fail$B_25.$$arity = 0);
    Opal.alias(self, "rescue", "fail");
    Opal.alias(self, "catch", "fail");
    Opal.alias(self, "rescue!", "fail!");
    Opal.alias(self, "catch!", "fail!");
    
    Opal.defn(self, '$always', TMP_Promise_always_26 = function $$always() {
      var self = this, $iter = TMP_Promise_always_26.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_always_26.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["always"], {"always": block})))
    }, TMP_Promise_always_26.$$arity = 0);
    
    Opal.defn(self, '$always!', TMP_Promise_always$B_27 = function() {
      var self = this, $iter = TMP_Promise_always$B_27.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_always$B_27.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'always', [], block.$to_proc());
    }, TMP_Promise_always$B_27.$$arity = 0);
    Opal.alias(self, "finally", "always");
    Opal.alias(self, "ensure", "always");
    Opal.alias(self, "finally!", "always!");
    Opal.alias(self, "ensure!", "always!");
    
    Opal.defn(self, '$trace', TMP_Promise_trace_28 = function $$trace(depth) {
      var self = this, $iter = TMP_Promise_trace_28.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil;
      }
      if ($iter) TMP_Promise_trace_28.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Trace').$new(depth, block))
    }, TMP_Promise_trace_28.$$arity = -1);
    
    Opal.defn(self, '$trace!', TMP_Promise_trace$B_29 = function($a_rest) {
      var self = this, args, $iter = TMP_Promise_trace$B_29.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Promise_trace$B_29.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'trace', Opal.to_a(args), block.$to_proc());
    }, TMP_Promise_trace$B_29.$$arity = -1);
    
    Opal.defn(self, '$there_can_be_only_one!', TMP_Promise_there_can_be_only_one$B_30 = function() {
      var self = this;

      if ($truthy(self.next['$any?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "a promise has already been chained")
        } else {
        return nil
      }
    }, TMP_Promise_there_can_be_only_one$B_30.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Promise_inspect_31 = function $$inspect() {
      var $a, self = this, result = nil;

      
      result = "" + "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ($truthy(self.next['$any?']())) {
        result = $rb_plus(result, "" + " >> " + (self.next.$inspect()))};
      if ($truthy(self['$realized?']())) {
        result = $rb_plus(result, "" + ": " + (($truthy($a = self.value) ? $a : self.error).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, TMP_Promise_inspect_31.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Trace_it_32, TMP_Trace_initialize_33;

      
      Opal.defs(self, '$it', TMP_Trace_it_32 = function $$it(promise) {
        var $a, self = this, current = nil, prev = nil;

        
        current = [];
        if ($truthy(($truthy($a = promise['$act?']()) ? $a : promise.$prev()['$nil?']()))) {
          current.$push(promise.$value())};
        if ($truthy((prev = promise.$prev()))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      }, TMP_Trace_it_32.$$arity = 1);
      return (Opal.defn(self, '$initialize', TMP_Trace_initialize_33 = function $$initialize(depth, block) {
        var TMP_34, self = this, $iter = TMP_Trace_initialize_33.$$p, $yield = $iter || nil;

        if ($iter) TMP_Trace_initialize_33.$$p = null;
        
        self.depth = depth;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Trace_initialize_33, false), [$hash2(["success"], {"success": $send(self, 'proc', [], (TMP_34 = function(){var self = TMP_34.$$s || this, $a, trace = nil;

        
          trace = Opal.const_get_relative($nesting, 'Trace').$it(self).$reverse();
          trace.$pop();
          if ($truthy(($truthy($a = depth) ? $rb_le(depth, trace.$length()) : $a))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return $send(block, 'call', Opal.to_a(trace));}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))})], null);
      }, TMP_Trace_initialize_33.$$arity = 2), nil) && 'initialize';
    })($nesting[0], self, $nesting);
    return (function($base, $super, $parent_nesting) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_When_initialize_35, TMP_When_each_37, TMP_When_collect_39, TMP_When_inject_41, TMP_When_wait_44, TMP_When_$gt$gt_45, TMP_When_try_47;

      def.wait = nil;
      
      
      Opal.defn(self, '$initialize', TMP_When_initialize_35 = function $$initialize(promises) {
        var TMP_36, self = this, $iter = TMP_When_initialize_35.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = [];
        }
        if ($iter) TMP_When_initialize_35.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_When_initialize_35, false), [], null);
        self.wait = [];
        return $send(promises, 'each', [], (TMP_36 = function(promise){var self = TMP_36.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
      }, TMP_When_initialize_35.$$arity = -1);
      
      Opal.defn(self, '$each', TMP_When_each_37 = function $$each() {
        var TMP_38, self = this, $iter = TMP_When_each_37.$$p, block = $iter || nil;

        if ($iter) TMP_When_each_37.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], (TMP_38 = function(values){var self = TMP_38.$$s || this;
if (values == null) values = nil;
        return $send(values, 'each', [], block.$to_proc())}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
      }, TMP_When_each_37.$$arity = 0);
      
      Opal.defn(self, '$collect', TMP_When_collect_39 = function $$collect() {
        var TMP_40, self = this, $iter = TMP_When_collect_39.$$p, block = $iter || nil;

        if ($iter) TMP_When_collect_39.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], (TMP_40 = function(values){var self = TMP_40.$$s || this;
if (values == null) values = nil;
        return Opal.const_get_relative($nesting, 'When').$new($send(values, 'map', [], block.$to_proc()))}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
      }, TMP_When_collect_39.$$arity = 0);
      
      Opal.defn(self, '$inject', TMP_When_inject_41 = function $$inject($a_rest) {
        var TMP_42, self = this, args, $iter = TMP_When_inject_41.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_When_inject_41.$$p = null;
        return $send(self, 'then', [], (TMP_42 = function(values){var self = TMP_42.$$s || this;
if (values == null) values = nil;
        return $send(values, 'reduce', Opal.to_a(args), block.$to_proc())}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42))
      }, TMP_When_inject_41.$$arity = -1);
      Opal.alias(self, "map", "collect");
      Opal.alias(self, "reduce", "inject");
      
      Opal.defn(self, '$wait', TMP_When_wait_44 = function $$wait(promise) {
        var TMP_43, self = this;

        
        if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](promise))) {
          } else {
          promise = Opal.const_get_relative($nesting, 'Promise').$value(promise)
        };
        if ($truthy(promise['$act?']())) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        $send(promise, 'always', [], (TMP_43 = function(){var self = TMP_43.$$s || this;
          if (self.next == null) self.next = nil;

        if ($truthy(self.next['$any?']())) {
            return self.$try()
            } else {
            return nil
          }}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43));
        return self;
      }, TMP_When_wait_44.$$arity = 1);
      Opal.alias(self, "and", "wait");
      
      Opal.defn(self, '$>>', TMP_When_$gt$gt_45 = function($a_rest) {
        var TMP_46, self = this, $iter = TMP_When_$gt$gt_45.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_When_$gt$gt_45.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return $send($send(self, Opal.find_super_dispatcher(self, '>>', TMP_When_$gt$gt_45, false), $zuper, $iter), 'tap', [], (TMP_46 = function(){var self = TMP_46.$$s || this;

        return self.$try()}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46))
      }, TMP_When_$gt$gt_45.$$arity = -1);
      return (Opal.defn(self, '$try', TMP_When_try_47 = function() {
        var self = this, promise = nil;

        if ($truthy($send(self.wait, 'all?', [], "realized?".$to_proc()))) {
          if ($truthy((promise = $send(self.wait, 'find', [], "rejected?".$to_proc())))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve($send(self.wait, 'map', [], "value".$to_proc()))
          }
          } else {
          return nil
        }
      }, TMP_When_try_47.$$arity = 0), nil) && 'try';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/http"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$to_n', '$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$delete', '$update', '$upcase', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  
  self.$require("json");
  self.$require("native");
  self.$require("promise");
  self.$require("opal/jquery/constants");
  return (function($base, $super, $parent_nesting) {
    function $HTTP(){};
    var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTTP_1, TMP_HTTP_setup_4, TMP_HTTP_setup$eq_5, TMP_HTTP_initialize_6, TMP_HTTP_send_7, TMP_HTTP_json_8, TMP_HTTP_ok$q_9, TMP_HTTP_get_header_10, TMP_HTTP_inspect_11, TMP_HTTP_promise_14, TMP_HTTP_succeed_15, TMP_HTTP_fail_16;

    def.settings = def.payload = def.url = def.method = def.handler = def.json = def.body = def.ok = def.xhr = def.promise = def.status_code = nil;
    
    var $ = Opal.const_get_relative($nesting, 'JQUERY_SELECTOR').$to_n();
    Opal.const_set($nesting[0], 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);
    $send(Opal.const_get_relative($nesting, 'ACTIONS'), 'each', [], (TMP_HTTP_1 = function(action){var self = TMP_HTTP_1.$$s || this, TMP_2, TMP_3;
if (action == null) action = nil;
    
      $send(self, 'define_singleton_method', [action], (TMP_2 = function(url, options){var self = TMP_2.$$s || this, block;

        block = TMP_2.$$p || nil;
        if (block) TMP_2.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$new().$send(action, url, options, block)}, TMP_2.$$s = self, TMP_2.$$arity = -2, TMP_2));
      return $send(self, 'define_method', [action], (TMP_3 = function(url, options){var self = TMP_3.$$s || this, block;

        block = TMP_3.$$p || nil;
        if (block) TMP_3.$$p = null;
        if (options == null) {
          options = $hash2([], {});
        }if (url == null) url = nil;
      return self.$send(action, url, options, block)}, TMP_3.$$s = self, TMP_3.$$arity = -2, TMP_3));}, TMP_HTTP_1.$$s = self, TMP_HTTP_1.$$arity = 1, TMP_HTTP_1));
    Opal.defs(self, '$setup', TMP_HTTP_setup_4 = function $$setup() {
      var self = this;

      return Opal.const_get_relative($nesting, 'Hash').$new($.ajaxSetup())
    }, TMP_HTTP_setup_4.$$arity = 0);
    Opal.defs(self, '$setup=', TMP_HTTP_setup$eq_5 = function(settings) {
      var self = this;

      return $.ajaxSetup(settings.$to_n())
    }, TMP_HTTP_setup$eq_5.$$arity = 1);
    self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");
    
    Opal.defn(self, '$initialize', TMP_HTTP_initialize_6 = function $$initialize() {
      var self = this;

      
      self.settings = $hash2([], {});
      return (self.ok = true);
    }, TMP_HTTP_initialize_6.$$arity = 0);
    
    Opal.defn(self, '$send', TMP_HTTP_send_7 = function $$send(method, url, options, block) {
      var $a, self = this, settings = nil, payload = nil;

      
      self.method = method;
      self.url = url;
      self.payload = options.$delete("payload");
      self.handler = block;
      self.settings.$update(options);
      $a = [self.settings.$to_n(), self.payload], (settings = $a[0]), (payload = $a[1]), $a;
      
      if (typeof(payload) === 'string') {
        settings.data = payload;
      }
      else if (payload != nil) {
        settings.data = payload.$to_json();
        settings.contentType = 'application/json';
      }

      settings.url  = self.url;
      settings.type = self.method.$upcase();

      settings.success = function(data, status, xhr) {
        return self.$succeed(data, status, xhr);
      };

      settings.error = function(xhr, status, error) {
        return self.$fail(xhr, status, error);
      };

      $.ajax(settings);
    ;
      if ($truthy(self.handler)) {
        return self
        } else {
        return self.$promise()
      };
    }, TMP_HTTP_send_7.$$arity = 4);
    
    Opal.defn(self, '$json', TMP_HTTP_json_8 = function $$json() {
      var $a, self = this;

      return (self.json = ($truthy($a = self.json) ? $a : Opal.const_get_relative($nesting, 'JSON').$parse(self.body)))
    }, TMP_HTTP_json_8.$$arity = 0);
    
    Opal.defn(self, '$ok?', TMP_HTTP_ok$q_9 = function() {
      var self = this;

      return self.ok
    }, TMP_HTTP_ok$q_9.$$arity = 0);
    
    Opal.defn(self, '$get_header', TMP_HTTP_get_header_10 = function $$get_header(key) {
      var self = this;

      
      var value = self.xhr.getResponseHeader(key);
      return (value === null) ? nil : value;
    
    }, TMP_HTTP_get_header_10.$$arity = 1);
    
    Opal.defn(self, '$inspect', TMP_HTTP_inspect_11 = function $$inspect() {
      var self = this;

      return "" + "#<HTTP @url=" + (self.url) + " @method=" + (self.method) + ">"
    }, TMP_HTTP_inspect_11.$$arity = 0);
    self.$private();
    
    Opal.defn(self, '$promise', TMP_HTTP_promise_14 = function $$promise() {
      var TMP_12, self = this;

      
      if ($truthy(self.promise)) {
        return self.promise};
      return (self.promise = $send(Opal.const_get_relative($nesting, 'Promise').$new(), 'tap', [], (TMP_12 = function(promise){var self = TMP_12.$$s || this, TMP_13;
if (promise == null) promise = nil;
      return (self.handler = $send(self, 'proc', [], (TMP_13 = function(res){var self = TMP_13.$$s || this;
if (res == null) res = nil;
        if ($truthy(res['$ok?']())) {
            return promise.$resolve(res)
            } else {
            return promise.$reject(res)
          }}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13)))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12)));
    }, TMP_HTTP_promise_14.$$arity = 0);
    
    Opal.defn(self, '$succeed', TMP_HTTP_succeed_15 = function $$succeed(data, status, xhr) {
      var self = this;

      
      
      self.body = data;
      self.xhr  = xhr;
      self.status_code = xhr.status;

      if (typeof(data) === 'object') {
        self.json = Opal.const_get_relative($nesting, 'JSON').$from_object(data);
      }
    ;
      if ($truthy(self.handler)) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_HTTP_succeed_15.$$arity = 3);
    return (Opal.defn(self, '$fail', TMP_HTTP_fail_16 = function $$fail(xhr, status, error) {
      var self = this;

      
      
      self.body = xhr.responseText;
      self.xhr = xhr;
      self.status_code = xhr.status;
    ;
      self.ok = false;
      if ($truthy(self.handler)) {
        return self.handler.$call(self)
        } else {
        return nil
      };
    }, TMP_HTTP_fail_16.$$arity = 3), nil) && 'fail';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery/kernel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_alert_1;

    
    Opal.defn(self, '$alert', TMP_Kernel_alert_1 = function $$alert(msg) {
      var self = this;

      
      alert(msg);
      return nil;
    }, TMP_Kernel_alert_1.$$arity = 1)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal/jquery"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("opal/jquery/window");
    self.$require("opal/jquery/document");
    self.$require("opal/jquery/element");
    self.$require("opal/jquery/event");
    self.$require("opal/jquery/http");
    return self.$require("opal/jquery/kernel");
    } else {
    return nil
  }
};

/* Generated by Opal 0.11.4 */
Opal.modules["opal-jquery"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  return self.$require("opal/jquery")
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/utils"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$size', '$min', '$scan', '$gsub', '$proc', '$===', '$merge', '$to_proc', '$merge!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var $Utils, self = $Utils = $module($base, 'Utils');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Utils_heredoc_1, TMP_Utils_deep_merge_3, TMP_Utils_deep_merge$B_5;

      
      Opal.defs(self, '$heredoc', TMP_Utils_heredoc_1 = function $$heredoc(string) {
        var self = this, indent = nil;

        
        indent = (function() { try {
          return string.$scan(/^[ \t]*(?=\S)/).$min().$size()
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
            try {
              return 0
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }})();
        return string.$gsub(new RegExp("" + "^[ \\t]{" + (indent) + "}"), "");
      }, TMP_Utils_heredoc_1.$$arity = 1);
      Opal.defs(self, '$deep_merge', TMP_Utils_deep_merge_3 = function $$deep_merge(a, b) {
        var TMP_2, self = this, merger = nil;

        
        merger = $send(self, 'proc', [], (TMP_2 = function(key, v1, v2){var self = TMP_2.$$s || this, $a;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Hash')['$==='](v1)) ? Opal.const_get_relative($nesting, 'Hash')['$==='](v2) : $a))) {
            return $send(v1, 'merge', [v2], merger.$to_proc())
            } else {
            return v2
          }}, TMP_2.$$s = self, TMP_2.$$arity = 3, TMP_2));
        return $send(a, 'merge', [b], merger.$to_proc());
      }, TMP_Utils_deep_merge_3.$$arity = 2);
      Opal.defs(self, '$deep_merge!', TMP_Utils_deep_merge$B_5 = function(a, b) {
        var TMP_4, self = this, merger = nil;

        
        merger = $send(self, 'proc', [], (TMP_4 = function(key, v1, v2){var self = TMP_4.$$s || this, $a;
if (key == null) key = nil;if (v1 == null) v1 = nil;if (v2 == null) v2 = nil;
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Hash')['$==='](v1)) ? Opal.const_get_relative($nesting, 'Hash')['$==='](v2) : $a))) {
            
            $send(v1, 'merge!', [v2], merger.$to_proc());
            return v1;
            } else {
            return v2
          }}, TMP_4.$$s = self, TMP_4.$$arity = 3, TMP_4));
        return $send(a, 'merge!', [b], merger.$to_proc());
      }, TMP_Utils_deep_merge$B_5.$$arity = 2);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/helpers"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$define_method', '$instance_exec', '$to_proc', '$do', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_defhelper_1, TMP_Element_defhelper$B_4;

        
        Opal.defs(self, '$defhelper', TMP_Element_defhelper_1 = function $$defhelper(name) {
          var TMP_2, self = this, $iter = TMP_Element_defhelper_1.$$p, block = $iter || nil;

          if ($iter) TMP_Element_defhelper_1.$$p = null;
          return $send(self, 'define_method', [name], (TMP_2 = function($a_rest){var self = TMP_2.$$s || this, body, args;

            body = TMP_2.$$p || nil;
            if (body) TMP_2.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            $send(self, 'instance_exec', Opal.to_a(args), block.$to_proc());
            if ($truthy(body)) {
              $send(self, 'do', [], body.$to_proc())};
            return self;}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2))
        }, TMP_Element_defhelper_1.$$arity = 1);
        return Opal.defs(self, '$defhelper!', TMP_Element_defhelper$B_4 = function(name, attribute) {
          var TMP_3, self = this;

          if (attribute == null) {
            attribute = name;
          }
          return $send(self, 'defhelper', ["" + (name) + "!"], (TMP_3 = function(){var self = TMP_3.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

          
            $writer = [attribute, true];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
        }, TMP_Element_defhelper$B_4.$$arity = -2);
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/a"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-', '$defhelper!', '$<<']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $A(){};
          var self = $A = $klass($base, $super, 'A', $A);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_A_1, TMP_A_3;

          
          $send($hash2(["href", "url", "rel", "relative", "target", "type", "lang", "language", "media"], {"href": "href", "url": "href", "rel": "rel", "relative": "rel", "target": "target", "type": "type", "lang": "hreflang", "language": "hreflang", "media": "media"}), 'each', [], (TMP_A_1 = function(name, attribute){var self = TMP_A_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_A_1.$$s = self, TMP_A_1.$$arity = 2, TMP_A_1));
          self['$defhelper!']("download");
          self['$defhelper!']("ping");
          return $send(self, 'defhelper', ["text"], (TMP_A_3 = function(string){var self = TMP_A_3.$$s || this;
if (string == null) string = nil;
          return self['$<<'](string)}, TMP_A_3.$$s = self, TMP_A_3.$$arity = 1, TMP_A_3));
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Base(){};
          var self = $Base = $klass($base, $super, 'Base', $Base);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Base_1;

          return $send($hash2(["href", "url", "target"], {"href": "href", "url": "href", "target": "target"}), 'each', [], (TMP_Base_1 = function(name, attribute){var self = TMP_Base_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Base_1.$$s = self, TMP_Base_1.$$arity = 2, TMP_Base_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/blockquote"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Blockquote(){};
          var self = $Blockquote = $klass($base, $super, 'Blockquote', $Blockquote);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Blockquote_1;

          return $send(self, 'defhelper', ["cite"], (TMP_Blockquote_1 = function(value){var self = TMP_Blockquote_1.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          
            $writer = ["cite", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Blockquote_1.$$s = self, TMP_Blockquote_1.$$arity = 1, TMP_Blockquote_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/button"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Button(){};
          var self = $Button = $klass($base, $super, 'Button', $Button);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Button_1;

          
          $send($hash2(["form", "name", "type", "value", "action", "encoding", "method", "target"], {"form": "form", "name": "name", "type": "type", "value": "value", "action": "formaction", "encoding": "formenctype", "method": "formmethod", "target": "formtarget"}), 'each', [], (TMP_Button_1 = function(name, attributes){var self = TMP_Button_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attributes == null) attributes = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Button_1.$$s = self, TMP_Button_1.$$arity = 2, TMP_Button_1));
          self['$defhelper!']("autofocus");
          return self['$defhelper!']("disabled");
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/canvas"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Canvas(){};
          var self = $Canvas = $klass($base, $super, 'Canvas', $Canvas);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Canvas_1;

          return $send($hash2(["width", "height"], {"width": "width", "height": "height"}), 'each', [], (TMP_Canvas_1 = function(name, attribute){var self = TMP_Canvas_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Canvas_1.$$s = self, TMP_Canvas_1.$$arity = 2, TMP_Canvas_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/embed"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Embed(){};
          var self = $Embed = $klass($base, $super, 'Embed', $Embed);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Embed_1;

          return $send($hash2(["type", "height", "width"], {"type": "type", "height": "height", "width": "width"}), 'each', [], (TMP_Embed_1 = function(name, attribute){var self = TMP_Embed_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Embed_1.$$s = self, TMP_Embed_1.$$arity = 2, TMP_Embed_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/img"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Img(){};
          var self = $Img = $klass($base, $super, 'Img', $Img);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Img_1, TMP_Img_3;

          
          $send($hash2(["src", "url", "alt", "description", "height", "width", "map"], {"src": "src", "url": "src", "alt": "alt", "description": "alt", "height": "height", "width": "width", "map": "usemap"}), 'each', [], (TMP_Img_1 = function(name, attribute){var self = TMP_Img_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Img_1.$$s = self, TMP_Img_1.$$arity = 2, TMP_Img_1));
          return $send(self, 'defhelper', ["map!"], (TMP_Img_3 = function(){var self = TMP_Img_3.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

          
            $writer = ["ismap", true];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Img_3.$$s = self, TMP_Img_3.$$arity = 0, TMP_Img_3));
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/input"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Input_1;

          return $send($hash2(["type", "name", "value", "size", "place_holder", "read_only", "required", "limit"], {"type": "type", "name": "name", "value": "value", "size": "size", "place_holder": "placeholder", "read_only": "readonly", "required": "required", "limit": "maxlength"}), 'each', [], (TMP_Input_1 = function(name, attribute){var self = TMP_Input_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Input_1.$$s = self, TMP_Input_1.$$arity = 2, TMP_Input_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/link"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$to_s', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Link(){};
          var self = $Link = $klass($base, $super, 'Link', $Link);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Link_1;

          return $send($hash2(["cross_origin", "href", "href_lang", "media", "rel", "sizes", "type"], {"cross_origin": "crossorigin", "href": "href", "href_lang": "hreflang", "media": "media", "rel": "rel", "sizes": "sizes", "type": "type"}), 'each', [], (TMP_Link_1 = function(name, attribute){var self = TMP_Link_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value.$to_s()];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Link_1.$$s = self, TMP_Link_1.$$arity = 2, TMP_Link_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/object"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Object(){};
          var self = $Object = $klass($base, $super, 'Object', $Object);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_1;

          return $send($hash2(["type", "data", "name", "height", "width"], {"type": "type", "data": "data", "name": "name", "height": "height", "width": "width"}), 'each', [], (TMP_Object_1 = function(name, attribute){var self = TMP_Object_1.$$s || this, TMP_2;
if (name == null) name = nil;if (attribute == null) attribute = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Object_1.$$s = self, TMP_Object_1.$$arity = 2, TMP_Object_1))
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/option"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Option(){};
          var self = $Option = $klass($base, $super, 'Option', $Option);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Option_1;

          
          $send(["label", "value"], 'each', [], (TMP_Option_1 = function(name){var self = TMP_Option_1.$$s || this, TMP_2;
if (name == null) name = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Option_1.$$s = self, TMP_Option_1.$$arity = 1, TMP_Option_1));
          self['$defhelper!']("disabled");
          return self['$defhelper!']("selected");
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/optgroup"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Optgroup(){};
          var self = $Optgroup = $klass($base, $super, 'Optgroup', $Optgroup);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Optgroup_1;

          
          $send(["label", "value"], 'each', [], (TMP_Optgroup_1 = function(name){var self = TMP_Optgroup_1.$$s || this, TMP_2;
if (name == null) name = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Optgroup_1.$$s = self, TMP_Optgroup_1.$$arity = 1, TMP_Optgroup_1));
          self['$defhelper!']("disabled");
          return self['$defhelper!']("selected");
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/select"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$defhelper', '$[]=', '$-', '$defhelper!']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Select_1;

          
          $send(["form", "name", "size"], 'each', [], (TMP_Select_1 = function(name){var self = TMP_Select_1.$$s || this, TMP_2;
if (name == null) name = nil;
          return $send(self, 'defhelper', [name], (TMP_2 = function(value){var self = TMP_2.$$s || this, $writer = nil;
              if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self.attributes, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_Select_1.$$s = self, TMP_Select_1.$$arity = 1, TMP_Select_1));
          self['$defhelper!']("auto_focus", "autofocus");
          self['$defhelper!']("disabled");
          return self['$defhelper!']("required");
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element/td"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$defhelper', '$to_s', '$[]=', '$-', '$join']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Td(){};
          var self = $Td = $klass($base, $super, 'Td', $Td);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Td_1, TMP_Td_2, TMP_Td_3;

          
          $send(self, 'defhelper', ["columns"], (TMP_Td_1 = function(value){var self = TMP_Td_1.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          
            $writer = ["colspan", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Td_1.$$s = self, TMP_Td_1.$$arity = 1, TMP_Td_1));
          $send(self, 'defhelper', ["rows"], (TMP_Td_2 = function(value){var self = TMP_Td_2.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (value == null) value = nil;
          
            $writer = ["rowspan", value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Td_2.$$s = self, TMP_Td_2.$$arity = 1, TMP_Td_2));
          return $send(self, 'defhelper', ["headers"], (TMP_Td_3 = function($a_rest){var self = TMP_Td_3.$$s || this, args, $writer = nil;
            if (self.attributes == null) self.attributes = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            $writer = ["headers", args.$join(" ")];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_Td_3.$$s = self, TMP_Td_3.$$arity = -1, TMP_Td_3));
        })($nesting[0], self, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html/element"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$==', '$capitalize', '$const_defined?', '$new', '$const_get', '$each', '$to_proc', '$<<', '$end_with?', '$to_s', '$[]', '$[]=', '$-', '$===', '$has_key?', '$unshift', '$|', '$split', '$delete', '$to_a', '$deep_merge!', '$>>', '$extend!', '$pop', '$join', '$heredoc', '$defhelper', '$map', '$empty?', '$upcase', '$inspect']);
  
  self.$require("paggio/html/element/a");
  self.$require("paggio/html/element/base");
  self.$require("paggio/html/element/blockquote");
  self.$require("paggio/html/element/button");
  self.$require("paggio/html/element/canvas");
  self.$require("paggio/html/element/embed");
  self.$require("paggio/html/element/img");
  self.$require("paggio/html/element/input");
  self.$require("paggio/html/element/link");
  self.$require("paggio/html/element/object");
  self.$require("paggio/html/element/option");
  self.$require("paggio/html/element/optgroup");
  self.$require("paggio/html/element/select");
  self.$require("paggio/html/element/td");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_new_1, TMP_Element_initialize_2, TMP_Element_each_3, TMP_Element_$lt$lt_4, TMP_Element_method_missing_5, TMP_Element_$$_6, TMP_Element_do_7, TMP_Element_$gt$gt_8, TMP_Element_9, TMP_Element_11, TMP_Element_inspect_13;

        def.children = def.attributes = def.class_names = def.owner = def.name = nil;
        
        Opal.defs(self, '$new', TMP_Element_new_1 = function(owner, name, attributes) {
          var self = this, $iter = TMP_Element_new_1.$$p, $yield = $iter || nil, const$ = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if (attributes == null) {
            attributes = $hash2([], {});
          }
          if ($iter) TMP_Element_new_1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if (self['$=='](Opal.const_get_relative($nesting, 'Element'))) {
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Element_new_1, false, $Element), $zuper, $iter)
          };
          const$ = name.$capitalize();
          if ($truthy(self['$const_defined?'](const$))) {
            return self.$const_get(const$).$new(owner, name, attributes)
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Element_new_1, false, $Element), $zuper, $iter)
          };
        }, TMP_Element_new_1.$$arity = -3);
        
        Opal.defn(self, '$initialize', TMP_Element_initialize_2 = function $$initialize(owner, name, attributes) {
          var self = this;

          if (attributes == null) {
            attributes = $hash2([], {});
          }
          
          self.owner = owner;
          self.name = name;
          self.attributes = attributes;
          self.children = [];
          return (self.class_names = []);
        }, TMP_Element_initialize_2.$$arity = -3);
        
        Opal.defn(self, '$each', TMP_Element_each_3 = function $$each() {
          var self = this, $iter = TMP_Element_each_3.$$p, block = $iter || nil;

          if ($iter) TMP_Element_each_3.$$p = null;
          return $send(self.children, 'each', [], block.$to_proc())
        }, TMP_Element_each_3.$$arity = 0);
        
        Opal.defn(self, '$<<', TMP_Element_$lt$lt_4 = function(what) {
          var self = this;

          
          self.children['$<<'](what);
          return self;
        }, TMP_Element_$lt$lt_4.$$arity = 1);
        
        Opal.defn(self, '$method_missing', TMP_Element_method_missing_5 = function $$method_missing(name, content) {
          var $a, self = this, $iter = TMP_Element_method_missing_5.$$p, block = $iter || nil, $writer = nil;

          if (content == null) {
            content = nil;
          }
          if ($iter) TMP_Element_method_missing_5.$$p = null;
          
          if ($truthy(name.$to_s()['$end_with?']("!"))) {
            
            $writer = ["id", name['$[]']($range(0, -2, false))];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            self.class_names['$<<'](name)
          };
          if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](content))) {
            
            if ($truthy(($truthy($a = content['$has_key?']("class")) ? $a : content['$has_key?']("classes")))) {
              $send(self.class_names, 'unshift', Opal.to_a(content.$delete("class").$to_s().$split()['$|'](content.$delete("classes").$to_a())))};
            Opal.const_get_qualified(Opal.const_get_qualified('::', 'Paggio'), 'Utils')['$deep_merge!'](self.attributes, content);
          } else if ($truthy(content)) {
            self['$>>'](content)};
          if ($truthy(block)) {
            $send(self.owner, 'extend!', [self], block.$to_proc())};
          return self;
        }, TMP_Element_method_missing_5.$$arity = -2);
        
        Opal.defn(self, '$[]', TMP_Element_$$_6 = function($a_rest) {
          var self = this, names, last = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          if ($truthy((last = self.class_names.$pop()))) {
            self.class_names['$<<']([last].concat(Opal.to_a(names)).$join("-"))};
          return self;
        }, TMP_Element_$$_6.$$arity = -1);
        
        Opal.defn(self, '$do', TMP_Element_do_7 = function() {
          var self = this, $iter = TMP_Element_do_7.$$p, block = $iter || nil;

          if ($iter) TMP_Element_do_7.$$p = null;
          
          $send(self.owner, 'extend!', [self], block.$to_proc());
          return self;
        }, TMP_Element_do_7.$$arity = 0);
        
        Opal.defn(self, '$>>', TMP_Element_$gt$gt_8 = function(content) {
          var self = this;

          
          self['$<<'](Opal.const_get_qualified(Opal.const_get_qualified('::', 'Paggio'), 'Utils').$heredoc(content.$to_s()));
          return self;
        }, TMP_Element_$gt$gt_8.$$arity = 1);
        $send(self, 'defhelper', ["style"], (TMP_Element_9 = function(hash){var self = TMP_Element_9.$$s || this, TMP_10, $writer = nil;
          if (self.attributes == null) self.attributes = nil;
if (hash == null) hash = nil;
        
          $writer = ["style", $send(hash, 'map', [], (TMP_10 = function(name, value){var self = TMP_10.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return "" + (name) + ": " + (value)}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10)).$join(";")];
          $send(self.attributes, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_Element_9.$$s = self, TMP_Element_9.$$arity = 1, TMP_Element_9));
        $send(self, 'defhelper', ["data"], (TMP_Element_11 = function(hash){var self = TMP_Element_11.$$s || this, TMP_12;
if (hash == null) hash = nil;
        return $send(hash, 'each', [], (TMP_12 = function(name, value){var self = TMP_12.$$s || this, $writer = nil;
            if (self.attributes == null) self.attributes = nil;
if (name == null) name = nil;if (value == null) value = nil;
          
            $writer = ["" + "data-" + (name), value.$to_s()];
            $send(self.attributes, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))}, TMP_Element_11.$$s = self, TMP_Element_11.$$arity = 1, TMP_Element_11));
        return (Opal.defn(self, '$inspect', TMP_Element_inspect_13 = function $$inspect() {
          var self = this;

          if ($truthy(self.children['$empty?']())) {
            return "" + "#<HTML::Element(" + (self.name.$upcase()) + ")>"
            } else {
            return "" + "#<HTML::Element(" + (self.name.$upcase()) + "): " + (self.children.$inspect()['$[]']($range(1, -2, false))) + ">"
          }
        }, TMP_Element_inspect_13.$$arity = 0), nil) && 'inspect';
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/html"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$raise', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$<<', '$first', '$===', '$instance_eval', '$each', '$end_with?', '$to_s', '$empty?', '$heredoc', '$shift', '$new', '$[]', '$inspect']);
  
  self.$require("paggio/html/helpers");
  self.$require("paggio/html/element");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTML_initialize_1, TMP_HTML_$lt$lt_2, TMP_HTML_root$B_3, TMP_HTML_roots$B_4, TMP_HTML_element$B_5, TMP_HTML_extend$B_6, TMP_HTML_each_8, TMP_HTML_method_missing_9, TMP_HTML_inspect_11;

      def.current = def.roots = def.version = nil;
      
      self.$attr_reader("version");
      
      Opal.defn(self, '$initialize', TMP_HTML_initialize_1 = function $$initialize(version) {
        var self = this, $iter = TMP_HTML_initialize_1.$$p, block = $iter || nil;

        if (version == null) {
          version = 5;
        }
        if ($iter) TMP_HTML_initialize_1.$$p = null;
        
        if ($truthy(block)) {
          } else {
          Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "no block given")
        };
        self.version = version;
        self.roots = [];
        self.current = nil;
        if (block.$arity()['$=='](0)) {
          return $send(self, 'instance_exec', [], block.$to_proc())
          } else {
          return block.$call(self)
        };
      }, TMP_HTML_initialize_1.$$arity = -1);
      
      Opal.defn(self, '$<<', TMP_HTML_$lt$lt_2 = function(what) {
        var $a, self = this;

        return ($truthy($a = self.current) ? $a : self.roots)['$<<'](what)
      }, TMP_HTML_$lt$lt_2.$$arity = 1);
      
      Opal.defn(self, '$root!', TMP_HTML_root$B_3 = function() {
        var self = this;

        return self.roots.$first()
      }, TMP_HTML_root$B_3.$$arity = 0);
      
      Opal.defn(self, '$roots!', TMP_HTML_roots$B_4 = function() {
        var self = this;

        return self.roots
      }, TMP_HTML_roots$B_4.$$arity = 0);
      
      Opal.defn(self, '$element!', TMP_HTML_element$B_5 = function() {
        var self = this;

        return self.current
      }, TMP_HTML_element$B_5.$$arity = 0);
      
      Opal.defn(self, '$extend!', TMP_HTML_extend$B_6 = function(element) {
        var $a, TMP_7, self = this, $iter = TMP_HTML_extend$B_6.$$p, block = $iter || nil, old = nil, result = nil;

        if (element == null) {
          element = nil;
        }
        if ($iter) TMP_HTML_extend$B_6.$$p = null;
        
        $a = [self.current, element], (old = $a[0]), (self.current = $a[1]), $a;
        result = block.$call(self);
        if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](result))) {
          $send(self.current, 'instance_eval', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

          return (self.inner_html = result)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))};
        self.current = old;
        return self;
      }, TMP_HTML_extend$B_6.$$arity = -1);
      
      Opal.defn(self, '$each', TMP_HTML_each_8 = function $$each() {
        var self = this, $iter = TMP_HTML_each_8.$$p, block = $iter || nil;

        if ($iter) TMP_HTML_each_8.$$p = null;
        return $send(self.roots, 'each', [], block.$to_proc())
      }, TMP_HTML_each_8.$$arity = 0);
      
      Opal.defn(self, '$method_missing', TMP_HTML_method_missing_9 = function $$method_missing(name, $a_rest) {
        var $b, TMP_10, self = this, args, $iter = TMP_HTML_method_missing_9.$$p, block = $iter || nil, content = nil, element = nil, parent = nil, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_HTML_method_missing_9.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        if ($truthy(name.$to_s()['$end_with?']("!"))) {
          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_HTML_method_missing_9, false), $zuper, $iter)};
        if ($truthy(($truthy($b = args['$empty?']()) ? $b : Opal.const_get_qualified('::', 'Hash')['$==='](args.$first())))) {
          } else {
          content = Opal.const_get_qualified(Opal.const_get_qualified('::', 'Paggio'), 'Utils').$heredoc(args.$shift().$to_s())
        };
        element = $send(Opal.const_get_relative($nesting, 'Element'), 'new', [self, name].concat(Opal.to_a(args)));
        if ($truthy(content)) {
          element['$<<'](content)};
        if ($truthy(block)) {
          
          parent = self.current;
          self.current = element;
          result = block.$call(self);
          self.current = parent;
          if ($truthy(Opal.const_get_qualified('::', 'String')['$==='](result))) {
            $send(element, 'instance_eval', [], (TMP_10 = function(){var self = TMP_10.$$s || this;

            return (self.inner_html = result)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))};};
        self['$<<'](element);
        return element;
      }, TMP_HTML_method_missing_9.$$arity = -2);
      return (Opal.defn(self, '$inspect', TMP_HTML_inspect_11 = function $$inspect() {
        var self = this;

        if ($truthy(self.roots['$empty?']())) {
          return "" + "#<HTML(" + (self.version) + ")>"
          } else {
          return "" + "#<HTML(" + (self.version) + "): " + (self.roots.$inspect()['$[]']($range(1, -2, false))) + ">"
        }
      }, TMP_HTML_inspect_11.$$arity = 0), nil) && 'inspect';
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/css/unit"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var TMP_23, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$map', '$to_proc', '$attr_reader', '$===', '$respond_to?', '$raise', '$class', '$to_u', '$new', '$==', '$convert', '$type', '$number', '$hash', '$each', '$define_method', '$+', '$compatible?', '$-', '$*', '$/', '$to_i', '$to_f', '$private', '$include?', '$class_eval', '$old_percent', '$match', '$[]', '$__send__', '$downcase']);
  
  (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Unit(){};
        var self = $Unit = $klass($base, $super, 'Unit', $Unit);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Unit_initialize_1, TMP_Unit_coerce_2, TMP_Unit_$eq$eq_3, TMP_Unit_$eq$eq$eq_4, TMP_Unit_hash_5, TMP_Unit_6, TMP_Unit_$_8, TMP_Unit_$_9, TMP_Unit_$_10, TMP_Unit_$_11, TMP_Unit_$$_12, TMP_Unit_$$_13, TMP_Unit_to_i_14, TMP_Unit_to_f_15, TMP_Unit_to_u_16, TMP_Unit_to_s_17, TMP_Unit_compatible$q_18, TMP_Unit_convert_19;

        def.type = def.number = nil;
        
        Opal.const_set($nesting[0], 'TYPES', $send(["em", "ex", "ch", "rem", "vh", "vw", "vmin", "vmax", "px", "mm", "cm", "in", "pt", "pc", "s", "deg"], 'map', [], "to_sym".$to_proc()));
        Opal.const_set($nesting[0], 'COMPATIBLE', $send(["in", "pt", "mm", "cm", "px", "pc"], 'map', [], "to_sym".$to_proc()));
        self.$attr_reader("type", "number");
        
        Opal.defn(self, '$initialize', TMP_Unit_initialize_1 = function $$initialize(number, type) {
          var self = this;

          
          self.number = number;
          return (self.type = type);
        }, TMP_Unit_initialize_1.$$arity = 2);
        
        Opal.defn(self, '$coerce', TMP_Unit_coerce_2 = function $$coerce(other) {
          var self = this;

          return [self, other]
        }, TMP_Unit_coerce_2.$$arity = 1);
        
        Opal.defn(self, '$==', TMP_Unit_$eq$eq_3 = function(other) {
          var self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            
            if ($truthy(other['$respond_to?']("to_u"))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "no implicit conversion of " + (other.$class()) + " into Unit")
            };
            other = other.$to_u();
          };
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            other = Opal.const_get_relative($nesting, 'Unit').$new(other, self.type)
          };
          return self.number['$=='](self.$convert(other, self.type));
        }, TMP_Unit_$eq$eq_3.$$arity = 1);
        
        Opal.defn(self, '$===', TMP_Unit_$eq$eq$eq_4 = function(other) {
          var $a, self = this;

          return (($a = self.type['$=='](other.$type())) ? self.number['$=='](other.$number()) : self.type['$=='](other.$type()))
        }, TMP_Unit_$eq$eq$eq_4.$$arity = 1);
        Opal.alias(self, "eql?", "==");
        
        Opal.defn(self, '$hash', TMP_Unit_hash_5 = function $$hash() {
          var self = this;

          return [self.number, self.type].$hash()
        }, TMP_Unit_hash_5.$$arity = 0);
        $send(Opal.const_get_relative($nesting, 'TYPES'), 'each', [], (TMP_Unit_6 = function(name){var self = TMP_Unit_6.$$s || this, TMP_7;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_7 = function(){var self = TMP_7.$$s || this;

          return Opal.const_get_relative($nesting, 'Unit').$new(self.$convert(self, name), name)}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))}, TMP_Unit_6.$$s = self, TMP_Unit_6.$$arity = 1, TMP_Unit_6));
        
        Opal.defn(self, '$+', TMP_Unit_$_8 = function(other) {
          var $a, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_plus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_plus(self.number, other.$number()), self.type)
          } else if ($truthy(($truthy($a = self['$compatible?'](self)) ? self['$compatible?'](other) : $a))) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_plus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_Unit_$_8.$$arity = 1);
        
        Opal.defn(self, '$-', TMP_Unit_$_9 = function(other) {
          var $a, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_minus(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_minus(self.number, other.$number()), self.type)
          } else if ($truthy(($truthy($a = self['$compatible?'](self)) ? self['$compatible?'](other) : $a))) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_minus(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_Unit_$_9.$$arity = 1);
        
        Opal.defn(self, '$*', TMP_Unit_$_10 = function(other) {
          var $a, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_times(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_times(self.number, other.$number()), self.type)
          } else if ($truthy(($truthy($a = self['$compatible?'](self)) ? self['$compatible?'](other) : $a))) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_times(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_Unit_$_10.$$arity = 1);
        
        Opal.defn(self, '$/', TMP_Unit_$_11 = function(other) {
          var $a, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Unit')['$==='](other))) {
            } else {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_divide(self.number, other), self.type)
          };
          if (self.type['$=='](other.$type())) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_divide(self.number, other.$number()), self.type)
          } else if ($truthy(($truthy($a = self['$compatible?'](self)) ? self['$compatible?'](other) : $a))) {
            return Opal.const_get_relative($nesting, 'Unit').$new($rb_divide(self.number, self.$convert(other, self.type)), self.type)
            } else {
            return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + (other.$type()) + " isn't compatible with " + (self.type))
          };
        }, TMP_Unit_$_11.$$arity = 1);
        
        Opal.defn(self, '$-@', TMP_Unit_$$_12 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Unit').$new($rb_times(self.number, -1), self.type)
        }, TMP_Unit_$$_12.$$arity = 0);
        
        Opal.defn(self, '$+@', TMP_Unit_$$_13 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Unit').$new(self.number, self.type)
        }, TMP_Unit_$$_13.$$arity = 0);
        
        Opal.defn(self, '$to_i', TMP_Unit_to_i_14 = function $$to_i() {
          var self = this;

          return self.number.$to_i()
        }, TMP_Unit_to_i_14.$$arity = 0);
        
        Opal.defn(self, '$to_f', TMP_Unit_to_f_15 = function $$to_f() {
          var self = this;

          return self.number.$to_f()
        }, TMP_Unit_to_f_15.$$arity = 0);
        
        Opal.defn(self, '$to_u', TMP_Unit_to_u_16 = function $$to_u() {
          var self = this;

          return self
        }, TMP_Unit_to_u_16.$$arity = 0);
        
        Opal.defn(self, '$to_s', TMP_Unit_to_s_17 = function $$to_s() {
          var self = this;

          return "" + (self.number) + (self.type)
        }, TMP_Unit_to_s_17.$$arity = 0);
        Opal.alias(self, "to_str", "to_s");
        Opal.alias(self, "inspect", "to_s");
        self.$private();
        
        Opal.defn(self, '$compatible?', TMP_Unit_compatible$q_18 = function(unit) {
          var self = this;

          return Opal.const_get_relative($nesting, 'COMPATIBLE')['$include?'](unit.$type())
        }, TMP_Unit_compatible$q_18.$$arity = 1);
        return (Opal.defn(self, '$convert', TMP_Unit_convert_19 = function $$convert(unit, type) {
          var self = this, value = nil, px = nil, $case = nil;

          
          value = unit.$number();
          if (unit.$type()['$=='](type)) {
            return value};
          px = (function() {$case = unit.$type();
          if ("in"['$===']($case)) {return $rb_times(value, 96)}
          else if ("pt"['$===']($case)) {return $rb_divide($rb_times(value, 4.0), 3.0)}
          else if ("pc"['$===']($case)) {return $rb_divide($rb_times($rb_divide(value, 12), 4.0), 3.0)}
          else if ("mm"['$===']($case)) {return $rb_times(value, 3.77953)}
          else if ("cm"['$===']($case)) {return $rb_times($rb_times(value, 10), 3.77953)}
          else if ("px"['$===']($case)) {return value}
          else { return nil }})();
          return (function() {$case = type;
          if ("in"['$===']($case)) {return $rb_divide(px, 96.0)}
          else if ("pt"['$===']($case)) {return $rb_divide($rb_divide(px, 4.0), 3.0)}
          else if ("pc"['$===']($case)) {return $rb_divide($rb_divide($rb_times(px, 12), 4.0), 3.0)}
          else if ("mm"['$===']($case)) {return $rb_divide(px, 3.77953)}
          else if ("cm"['$===']($case)) {return $rb_divide($rb_divide(px, 10), 3.77953)}
          else if ("px"['$===']($case)) {return px}
          else { return nil }})();
        }, TMP_Unit_convert_19.$$arity = 2), nil) && 'convert';
      })($nesting[0], null, $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Numeric_20, TMP_Numeric_to_u_22;

    
    $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Unit'), 'TYPES'), 'each', [], (TMP_Numeric_20 = function(name){var self = TMP_Numeric_20.$$s || this, TMP_21;
if (name == null) name = nil;
    return $send(self, 'define_method', [name], (TMP_21 = function(){var self = TMP_21.$$s || this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Unit').$new(self, name)}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))}, TMP_Numeric_20.$$s = self, TMP_Numeric_20.$$arity = 1, TMP_Numeric_20));
    return (Opal.defn(self, '$to_u', TMP_Numeric_to_u_22 = function $$to_u() {
      var self = this;

      return self
    }, TMP_Numeric_to_u_22.$$arity = 0), nil) && 'to_u';
  })($nesting[0], null, $nesting);
  $send([Opal.const_get_relative($nesting, 'Fixnum'), Opal.const_get_relative($nesting, 'Float')], 'each', [], (TMP_23 = function(klass){var self = TMP_23.$$s || this, TMP_24;
if (klass == null) klass = nil;
  return $send(klass, 'class_eval', [], (TMP_24 = function(){var self = TMP_24.$$s || this, TMP_$_25;

    
      Opal.alias(self, "old_percent", "%");
      return (Opal.def(self, '$%', TMP_$_25 = function(other) {
        var self = this;

        if (other == null) {
          other = nil;
        }
        if ($truthy(other)) {
          return self.$old_percent(other)
          } else {
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Unit').$new(self, "%")
        }
      }, TMP_$_25.$$arity = -1), nil) && '%';}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24))}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_u_26;

    return (Opal.defn(self, '$to_u', TMP_String_to_u_26 = function $$to_u() {
      var self = this, matches = nil, value = nil, unit = nil;

      if ($truthy((matches = self.$match(/^([\d+.]+)(.+)?$/)))) {
        
        value = matches['$[]'](1).$to_f();
        if ($truthy((unit = matches['$[]'](2)))) {
          return value.$__send__(unit.$downcase())
          } else {
          return value
        };
        } else {
        return 0
      }
    }, TMP_String_to_u_26.$$arity = 0), nil) && 'to_u'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_u_27;

    return (Opal.defn(self, '$to_u', TMP_NilClass_to_u_27 = function $$to_u() {
      var self = this;

      return 0
    }, TMP_NilClass_to_u_27.$$arity = 0), nil) && 'to_u'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/css/color"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each', '$map', '$to_proc', '$define_method', '$new']);
  
  (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Color(){};
        var self = $Color = $klass($base, $super, 'Color', $Color);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Color_initialize_1;

        return (Opal.defn(self, '$initialize', TMP_Color_initialize_1 = function $$initialize(value, type) {
          var self = this;

          
          self.internal = value;
          return (self.type = type);
        }, TMP_Color_initialize_1.$$arity = 2), nil) && 'initialize'
      })($nesting[0], null, $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_2;

    return $send($send(["rgb", "rgba", "hsl", "hsla"], 'map', [], "to_sym".$to_proc()), 'each', [], (TMP_String_2 = function(name){var self = TMP_String_2.$$s || this, TMP_3;
if (name == null) name = nil;
    return $send(self, 'define_method', [name], (TMP_3 = function(){var self = TMP_3.$$s || this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Color').$new(self, name)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))}, TMP_String_2.$$s = self, TMP_String_2.$$arity = 1, TMP_String_2))
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_4;

    return $send($send(["rgb", "rgba", "hsl", "hsla"], 'map', [], "to_sym".$to_proc()), 'each', [], (TMP_Array_4 = function(name){var self = TMP_Array_4.$$s || this, TMP_5;
if (name == null) name = nil;
    return $send(self, 'define_method', [name], (TMP_5 = function(){var self = TMP_5.$$s || this;

      return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Color').$new(self, name)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))}, TMP_Array_4.$$s = self, TMP_Array_4.$$arity = 1, TMP_Array_4))
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/css/definition"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$==', '$arity', '$instance_exec', '$to_proc', '$call', '$empty?', '$each', '$inspect', '$to_s', '$define_method', '$a', '$===', '$first', '$>', '$length', '$raise', '$style', '$name', '$value', '$[]', '$join', '$map', '$to_i', '$*', '$end_with?', '$__send__', '$<<', '$last', '$pop', '$!', '$other', '$shift', '$horizontal?', '$private']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_initialize_1, TMP_Definition_empty$q_2, TMP_Definition_each_3, TMP_Definition_gradient_4, TMP_Definition_url_5, TMP_Definition_6, TMP_Definition_rgb_8, TMP_Definition_rgba_9, TMP_Definition_10, TMP_Definition_12, TMP_Definition_background_16, TMP_Definition_border_22, TMP_Definition_box_25, TMP_Definition_opacity_26, TMP_Definition_animation_28, TMP_Definition_transition_29, TMP_Definition_user_select_30, TMP_Definition_transform_31, TMP_Definition_filter_32, TMP_Definition_method_missing_33, TMP_Definition_style_35, TMP_Definition_style$B_36;

        def.style = def.important = nil;
        
        Opal.const_set($nesting[0], 'Style', Opal.const_get_qualified('::', 'Struct').$new("name", "value", "important"));
        
        Opal.defn(self, '$initialize', TMP_Definition_initialize_1 = function $$initialize() {
          var self = this, $iter = TMP_Definition_initialize_1.$$p, block = $iter || nil;

          if ($iter) TMP_Definition_initialize_1.$$p = null;
          
          self.style = [];
          if ($truthy(block)) {
            if (block.$arity()['$=='](0)) {
              return $send(self, 'instance_exec', [], block.$to_proc())
              } else {
              return block.$call(self)
            }
            } else {
            return nil
          };
        }, TMP_Definition_initialize_1.$$arity = 0);
        
        Opal.defn(self, '$empty?', TMP_Definition_empty$q_2 = function() {
          var self = this;

          return self.style['$empty?']()
        }, TMP_Definition_empty$q_2.$$arity = 0);
        
        Opal.defn(self, '$each', TMP_Definition_each_3 = function $$each() {
          var self = this, $iter = TMP_Definition_each_3.$$p, block = $iter || nil;

          if ($iter) TMP_Definition_each_3.$$p = null;
          return $send(self.style, 'each', [], block.$to_proc())
        }, TMP_Definition_each_3.$$arity = 0);
        
        Opal.defn(self, '$gradient', TMP_Definition_gradient_4 = function $$gradient($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(Opal.const_get_relative($nesting, 'Gradient'), 'new', Opal.to_a(args))
        }, TMP_Definition_gradient_4.$$arity = -1);
        
        Opal.defn(self, '$url', TMP_Definition_url_5 = function $$url(value) {
          var self = this;

          return "" + "url(" + (value.$to_s().$inspect()) + ")"
        }, TMP_Definition_url_5.$$arity = 1);
        $send(["url", "blur", "brightness", "rotate", "contrast", "grayscale", "invert", "opacity", "saturate", "sepia"], 'each', [], (TMP_Definition_6 = function(name){var self = TMP_Definition_6.$$s || this, TMP_7;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))}, TMP_Definition_6.$$s = self, TMP_Definition_6.$$arity = 1, TMP_Definition_6));
        
        Opal.defn(self, '$rgb', TMP_Definition_rgb_8 = function $$rgb(r, g, b) {
          var self = this;

          return "" + "rgb(" + (r) + ", " + (g) + ", " + (b) + ", " + (self.$a()) + ")"
        }, TMP_Definition_rgb_8.$$arity = 3);
        
        Opal.defn(self, '$rgba', TMP_Definition_rgba_9 = function $$rgba(r, g, b, a) {
          var self = this;

          return "" + "rgba(" + (r) + ", " + (g) + ", " + (b) + ", " + (a) + ")"
        }, TMP_Definition_rgba_9.$$arity = 4);
        $send(["scale", "skew", "translate"], 'each', [], (TMP_Definition_10 = function(name){var self = TMP_Definition_10.$$s || this, TMP_11;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_11 = function(a, b){var self = TMP_11.$$s || this;

            if (b == null) {
              b = nil;
            }if (a == null) a = nil;
          if ($truthy(b)) {
              return "" + (name) + "(" + (a) + ", " + (b) + ")"
              } else {
              return "" + (name) + "(" + (a) + ")"
            }}, TMP_11.$$s = self, TMP_11.$$arity = -2, TMP_11))}, TMP_Definition_10.$$s = self, TMP_Definition_10.$$arity = 1, TMP_Definition_10));
        $send(["translateX", "translateY", "translateZ", "rotateX", "rotateY", "rotateZ", "skewX", "skewY", "scaleX", "scaleY"], 'each', [], (TMP_Definition_12 = function(name){var self = TMP_Definition_12.$$s || this, TMP_13;
if (name == null) name = nil;
        return $send(self, 'define_method', [name], (TMP_13 = function(value){var self = TMP_13.$$s || this;
if (value == null) value = nil;
          return "" + (name) + "(" + (value) + ")"}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))}, TMP_Definition_12.$$s = self, TMP_Definition_12.$$arity = 1, TMP_Definition_12));
        
        Opal.defn(self, '$background', TMP_Definition_background_16 = function $$background($a_rest) {
          var TMP_14, TMP_15, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(Opal.const_get_relative($nesting, 'Gradient')['$==='](args.$first()))) {
            
            if ($truthy($rb_gt(args.$length(), 1))) {
              self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "multiple gradients not implemented yet")};
            return $send(args.$first(), 'each', [], (TMP_14 = function(s){var self = TMP_14.$$s || this, $a;
if (s == null) s = nil;
            return self.$style(($truthy($a = s.$name()) ? $a : "background-image"), s.$value())}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
          } else if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](args.$first()))) {
            return $send(args.$first(), 'each', [], (TMP_15 = function(sub, value){var self = TMP_15.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
            return self.$style("" + "background-" + (sub), value)}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15))
            } else {
            return self.$style("background", args)
          }
        }, TMP_Definition_background_16.$$arity = -1);
        
        Opal.defn(self, '$border', TMP_Definition_border_22 = function $$border($a_rest) {
          var TMP_17, self = this, args, options = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](args.$first()))) {
            
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return $send(options, 'each', [], (TMP_17 = function(name, value){var self = TMP_17.$$s || this, TMP_18, TMP_19, TMP_21, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;
              if ("top"['$===']($case) || "bottom"['$===']($case) || "left"['$===']($case) || "right"['$===']($case)) {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], (TMP_18 = function(n, v){var self = TMP_18.$$s || this;
if (n == null) n = nil;if (v == null) v = nil;
                return self.$style("" + "border-" + (name) + "-" + (n), v)}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18))
                } else {
                return self.$style("" + "border-" + (name), value)
              }}
              else if ("radius"['$===']($case)) {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], (TMP_19 = function(horizontal, value){var self = TMP_19.$$s || this, TMP_20;
if (horizontal == null) horizontal = nil;if (value == null) value = nil;
                return $send(value, 'each', [], (TMP_20 = function(vertical, value){var self = TMP_20.$$s || this;
if (vertical == null) vertical = nil;if (value == null) value = nil;
                  
                    self.$style("" + "-moz-border-radius-" + (horizontal) + (vertical), value);
                    self.$style("" + "-webkit-border-" + (horizontal) + "-" + (vertical) + "-radius", value);
                    return self.$style("" + "border-" + (horizontal) + "-" + (vertical) + "-radius", value);}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20))}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19))
                } else {
                
                self.$style("-moz-border-radius", value);
                self.$style("-webkit-border-radius", value);
                return self.$style("border-radius", value);
              }}
              else if ("color"['$===']($case)) {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](value))) {
                return $send(value, 'each', [], (TMP_21 = function(name, value){var self = TMP_21.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
                return self.$style("" + "border-" + (name) + "-color", value)}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21))
                } else {
                return self.$style("border-color", value)
              }}
              else {return self.$style("" + "border-" + (name), value)}})()}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17));
            } else {
            return self.$style("border", args)
          }
        }, TMP_Definition_border_22.$$arity = -1);
        
        Opal.defn(self, '$box', TMP_Definition_box_25 = function $$box(options) {
          var TMP_23, self = this;

          if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](options))) {
            return $send(options, 'each', [], (TMP_23 = function(name, value){var self = TMP_23.$$s || this, TMP_24, $case = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return (function() {$case = name;
              if ("shadow"['$===']($case)) {
              if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](value))) {
                if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](value['$[]'](0)))) {
                  value = $send(value, 'map', [], (TMP_24 = function(v){var self = TMP_24.$$s || this;
if (v == null) v = nil;
                  return v.$join(" ")}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24)).$join(", ")
                  } else {
                  value = value.$join(" ")
                }};
              self.$style("-moz-box-shadow", value);
              self.$style("-webkit-box-shadow", value);
              return self.$style("box-shadow", value);}
              else {return self.$style("" + "box-" + (name), value)}})()}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23))
            } else {
            return self.$style("box", options)
          }
        }, TMP_Definition_box_25.$$arity = 1);
        
        Opal.defn(self, '$opacity', TMP_Definition_opacity_26 = function $$opacity(value) {
          var self = this;

          
          self.$style("opacity", value);
          self.$style("-moz-opacity", value);
          self.$style("-ms-filter", "" + "\"progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($rb_times(value, 100).$to_i()) + ")\"");
          return self.$style("filter", "" + "alpha(opacity=" + ($rb_times(value, 100).$to_i()) + ")");
        }, TMP_Definition_opacity_26.$$arity = 1);
        
        Opal.defn(self, '$animation', TMP_Definition_animation_28 = function $$animation($a_rest) {
          var TMP_27, self = this, args, options = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
            
            if (args.$length()['$=='](1)) {
              options = args.$first()};
            return $send(options, 'each', [], (TMP_27 = function(name, value){var self = TMP_27.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            
              self.$style("" + "-webkit-animation-" + (name), value);
              return self.$style("" + "animation-" + (name), value);}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27));
            } else {
            
            self.$style("animation", args);
            return self.$style("-webkit-animation", args);
          }
        }, TMP_Definition_animation_28.$$arity = -1);
        
        Opal.defn(self, '$transition', TMP_Definition_transition_29 = function $$transition($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.$style("transition", args);
          self.$style("-webkit-transition", args);
          return self.$style("-moz-transition", args);
        }, TMP_Definition_transition_29.$$arity = -1);
        
        Opal.defn(self, '$user_select', TMP_Definition_user_select_30 = function $$user_select($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.$style("user-select", args);
          self.$style("-webkit-user-select", args);
          self.$style("-moz-user-select", args);
          return self.$style("-ms-user-select", args);
        }, TMP_Definition_user_select_30.$$arity = -1);
        
        Opal.defn(self, '$transform', TMP_Definition_transform_31 = function $$transform($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.$style("transform", args);
          self.$style("-webkit-transform", args);
          self.$style("-moz-transform", args);
          self.$style("-ms-transform", args);
          return self.$style("-o-transform", args);
        }, TMP_Definition_transform_31.$$arity = -1);
        
        Opal.defn(self, '$filter', TMP_Definition_filter_32 = function $$filter($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          self.$style("filter", args);
          self.$style("-webkit-filter", args);
          self.$style("-moz-filter", args);
          self.$style("-ms-filter", args);
          return self.$style("-o-filter", args);
        }, TMP_Definition_filter_32.$$arity = -1);
        
        Opal.defn(self, '$method_missing', TMP_Definition_method_missing_33 = function $$method_missing(name, $a_rest) {
          var TMP_34, self = this, args, $iter = TMP_Definition_method_missing_33.$$p, block = $iter || nil, argument = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Definition_method_missing_33.$$p = null;
          
          name = name.$to_s();
          if ($truthy(name['$end_with?']("!"))) {
            
            name = name['$[]']($range(0, -2, false));
            self.important = true;
            $send(self, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());
            self.important = false;
            return nil;};
          if (args.$length()['$=='](1)) {
            
            argument = args.$first();
            if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](argument))) {
              $send(argument, 'each', [], (TMP_34 = function(sub, value){var self = TMP_34.$$s || this;
if (sub == null) sub = nil;if (value == null) value = nil;
              return self.$style("" + (name) + "-" + (sub), value)}, TMP_34.$$s = self, TMP_34.$$arity = 2, TMP_34))
              } else {
              self.$style(name, argument)
            };
            } else {
            self.$style(name, args.$join(" "))
          };
          self.important = false;
          return self;
        }, TMP_Definition_method_missing_33.$$arity = -2);
        
        Opal.defn(self, '$style', TMP_Definition_style_35 = function $$style(name, value, important) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          if (important == null) {
            important = self.important;
          }
          
          if ($truthy(Opal.const_get_qualified('::', 'Array')['$==='](value))) {
            value = value.$join(" ")};
          if ($truthy(Opal.const_get_relative($nesting, 'Style')['$==='](name))) {
            return self.style['$<<'](name)
            } else {
            return self.style['$<<'](Opal.const_get_relative($nesting, 'Style').$new(name, value, important))
          };
        }, TMP_Definition_style_35.$$arity = -2);
        
        Opal.defn(self, '$style!', TMP_Definition_style$B_36 = function(name, value) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          return self.$style(name, value, true)
        }, TMP_Definition_style$B_36.$$arity = -2);
        return (function($base, $super, $parent_nesting) {
          function $Gradient(){};
          var self = $Gradient = $klass($base, $super, 'Gradient', $Gradient);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Gradient_initialize_37, TMP_Gradient_each_38, TMP_Gradient_horizontal$q_39, TMP_Gradient_vertical$q_40, TMP_Gradient_other_41, TMP_Gradient_style_42;

          def.to = def.from = def.start = def.end = nil;
          
          
          Opal.defn(self, '$initialize', TMP_Gradient_initialize_37 = function $$initialize($a_rest) {
            var $b, self = this, args, options = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            options = (function() {if ($truthy(Opal.const_get_qualified('::', 'Hash')['$==='](args.$last()))) {
              return args.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            self.to = options['$[]']("to");
            self.from = options['$[]']("from");
            if ($truthy(($truthy($b = self.to) ? self.from['$!']() : $b))) {
              self.from = self.$other(self.to)
            } else if ($truthy(($truthy($b = self.from) ? self.to['$!']() : $b))) {
              self.to = self.$other(self.from)};
            self.start = args.$shift();
            return (self.end = args.$shift());
          }, TMP_Gradient_initialize_37.$$arity = -1);
          
          Opal.defn(self, '$each', TMP_Gradient_each_38 = function $$each() {
            var self = this, $iter = TMP_Gradient_each_38.$$p, block = $iter || nil;

            if ($iter) TMP_Gradient_each_38.$$p = null;
            
            block.$call(self.$style("" + "-moz-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            if ($truthy(self['$horizontal?']())) {
              block.$call(self.$style("" + "-webkit-gradient(linear, " + (self.from) + " top, " + (self.to) + " top, color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
              } else {
              block.$call(self.$style("" + "-webkit-gradient(linear, left " + (self.from) + ", left " + (self.to) + ", color-stop(0%, " + (self.start) + "), color-stop(100%, " + (self.end) + "))"))
            };
            block.$call(self.$style("" + "-webkit-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("" + "-o-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            block.$call(self.$style("" + "-ms-linear-gradient(" + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
            return block.$call(self.$style("" + "linear-gradient(to " + (self.to) + ", " + (self.start) + " 0%, " + (self.end) + " 100%)"));
          }, TMP_Gradient_each_38.$$arity = 0);
          
          Opal.defn(self, '$horizontal?', TMP_Gradient_horizontal$q_39 = function() {
            var $a, self = this;

            return ($truthy($a = self.to['$==']("left")) ? $a : self.to['$==']("right"))
          }, TMP_Gradient_horizontal$q_39.$$arity = 0);
          
          Opal.defn(self, '$vertical?', TMP_Gradient_vertical$q_40 = function() {
            var $a, self = this;

            return ($truthy($a = self.to['$==']("top")) ? $a : self.to['$==']("bottom"))
          }, TMP_Gradient_vertical$q_40.$$arity = 0);
          self.$private();
          
          Opal.defn(self, '$other', TMP_Gradient_other_41 = function $$other(side) {
            var self = this, $case = nil;

            return (function() {$case = side;
            if ("left"['$===']($case)) {return "right"}
            else if ("right"['$===']($case)) {return "left"}
            else if ("top"['$===']($case)) {return "bottom"}
            else if ("bottom"['$===']($case)) {return "top"}
            else { return nil }})()
          }, TMP_Gradient_other_41.$$arity = 1);
          return (Opal.defn(self, '$style', TMP_Gradient_style_42 = function $$style($a_rest) {
            var self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if (args.$length()['$=='](1)) {
              return Opal.const_get_relative($nesting, 'Style').$new(nil, args.$first())
              } else {
              return $send(Opal.const_get_relative($nesting, 'Style'), 'new', Opal.to_a(args))
            }
          }, TMP_Gradient_style_42.$$arity = -1), nil) && 'style';
        })($nesting[0], null, $nesting);
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/css/rule"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Rule_initialize_1, TMP_Rule_method_missing_2;

        def.definition = nil;
        
        self.$attr_reader("selector", "media");
        
        Opal.defn(self, '$initialize', TMP_Rule_initialize_1 = function $$initialize(selector, media) {
          var self = this;

          
          self.selector = selector;
          self.media = media;
          return (self.definition = Opal.const_get_relative($nesting, 'Definition').$new());
        }, TMP_Rule_initialize_1.$$arity = 2);
        return (Opal.defn(self, '$method_missing', TMP_Rule_method_missing_2 = function $$method_missing($a_rest) {
          var self = this, args, $iter = TMP_Rule_method_missing_2.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Rule_method_missing_2.$$p = null;
          return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc())
        }, TMP_Rule_method_missing_2.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/css/font"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$font', '$__send__', '$to_proc']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Font(){};
        var self = $Font = $klass($base, $super, 'Font', $Font);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Font_initialize_1, TMP_Font_method_missing_2;

        def.definition = nil;
        
        self.$attr_reader("name");
        
        Opal.defn(self, '$initialize', TMP_Font_initialize_1 = function $$initialize(name) {
          var self = this;

          
          self.name = name;
          self.definition = Opal.const_get_relative($nesting, 'Definition').$new();
          return self.$font($hash2(["family"], {"family": name}));
        }, TMP_Font_initialize_1.$$arity = 1);
        return (Opal.defn(self, '$method_missing', TMP_Font_method_missing_2 = function $$method_missing($a_rest) {
          var self = this, args, $iter = TMP_Font_method_missing_2.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Font_method_missing_2.$$p = null;
          return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc())
        }, TMP_Font_method_missing_2.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/css/animation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new', '$__send__', '$to_proc', '$<<', '$call', '$%', '$last']);
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Animation_initialize_3, TMP_Animation_step_4, TMP_Animation_from_5, TMP_Animation_to_6, TMP_Animation_method_missing_7;

        def.steps = nil;
        
        (function($base, $super, $parent_nesting) {
          function $Step(){};
          var self = $Step = $klass($base, $super, 'Step', $Step);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Step_initialize_1, TMP_Step_method_missing_2;

          def.definition = nil;
          
          self.$attr_reader("value");
          
          Opal.defn(self, '$initialize', TMP_Step_initialize_1 = function $$initialize(value) {
            var self = this;

            
            self.value = value;
            return (self.definition = Opal.const_get_relative($nesting, 'Definition').$new());
          }, TMP_Step_initialize_1.$$arity = 1);
          return (Opal.defn(self, '$method_missing', TMP_Step_method_missing_2 = function $$method_missing($a_rest) {
            var self = this, args, $iter = TMP_Step_method_missing_2.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_Step_method_missing_2.$$p = null;
            return $send(self.definition, '__send__', Opal.to_a(args), block.$to_proc())
          }, TMP_Step_method_missing_2.$$arity = -1), nil) && 'method_missing';
        })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
        self.$attr_reader("name", "steps");
        
        Opal.defn(self, '$initialize', TMP_Animation_initialize_3 = function $$initialize(name) {
          var self = this;

          
          self.name = name;
          return (self.steps = []);
        }, TMP_Animation_initialize_3.$$arity = 1);
        
        Opal.defn(self, '$step', TMP_Animation_step_4 = function $$step(value) {
          var self = this, $iter = TMP_Animation_step_4.$$p, block = $iter || nil;

          if ($iter) TMP_Animation_step_4.$$p = null;
          
          self.steps['$<<'](Opal.const_get_relative($nesting, 'Step').$new(value));
          return block.$call();
        }, TMP_Animation_step_4.$$arity = 1);
        
        Opal.defn(self, '$from', TMP_Animation_from_5 = function $$from(value) {
          var self = this, $iter = TMP_Animation_from_5.$$p, block = $iter || nil;

          if ($iter) TMP_Animation_from_5.$$p = null;
          
          self.steps['$<<'](Opal.const_get_relative($nesting, 'Step').$new((0)['$%']()));
          return block.$call();
        }, TMP_Animation_from_5.$$arity = 1);
        
        Opal.defn(self, '$to', TMP_Animation_to_6 = function $$to(value) {
          var self = this, $iter = TMP_Animation_to_6.$$p, block = $iter || nil;

          if ($iter) TMP_Animation_to_6.$$p = null;
          
          self.steps['$<<'](Opal.const_get_relative($nesting, 'Step').$new((100)['$%']()));
          return block.$call();
        }, TMP_Animation_to_6.$$arity = 1);
        return (Opal.defn(self, '$method_missing', TMP_Animation_method_missing_7 = function $$method_missing($a_rest) {
          var self = this, args, $iter = TMP_Animation_method_missing_7.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Animation_method_missing_7.$$p = null;
          return $send(self.steps.$last(), '__send__', Opal.to_a(args), block.$to_proc())
        }, TMP_Animation_method_missing_7.$$arity = -1), nil) && 'method_missing';
      })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/css"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$each', '$start_with?', '$+', '$[]', '$==', '$attr_reader', '$raise', '$arity', '$instance_exec', '$to_proc', '$call', '$any?', '$include?', '$<<', '$new', '$selector', '$pop', '$method_missing', '$__send__', '$last']);
  
  self.$require("paggio/css/unit");
  self.$require("paggio/css/color");
  self.$require("paggio/css/definition");
  self.$require("paggio/css/rule");
  self.$require("paggio/css/font");
  self.$require("paggio/css/animation");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $CSS(){};
      var self = $CSS = $klass($base, $super, 'CSS', $CSS);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CSS_selector_2, TMP_CSS_initialize_3, TMP_CSS_rule_4, TMP_CSS_media_7, TMP_CSS_font_8, TMP_CSS_animation_9, TMP_CSS_method_missing_10;

      def.media = def.current = def.fonts = def.animations = nil;
      
      Opal.defs(self, '$selector', TMP_CSS_selector_2 = function $$selector(list) {
        var TMP_1, self = this, result = nil;

        
        result = "";
        $send(list, 'each', [], (TMP_1 = function(part){var self = TMP_1.$$s || this;
if (part == null) part = nil;
        if ($truthy(part['$start_with?']("&"))) {
            return (result = $rb_plus(result, part['$[]']($range(1, -1, false))))
            } else {
            return (result = $rb_plus(result, $rb_plus(" ", part)))
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        if (result['$[]'](0)['$=='](" ")) {
          return result['$[]']($range(1, -1, false))
          } else {
          return result
        };
      }, TMP_CSS_selector_2.$$arity = 1);
      self.$attr_reader("rules", "media", "fonts", "animations");
      
      Opal.defn(self, '$initialize', TMP_CSS_initialize_3 = function $$initialize() {
        var self = this, $iter = TMP_CSS_initialize_3.$$p, block = $iter || nil;

        if ($iter) TMP_CSS_initialize_3.$$p = null;
        
        if ($truthy(block)) {
          } else {
          Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "no block given")
        };
        self.selector = [];
        self.current = [];
        self.rules = [];
        self.fonts = [];
        self.animations = [];
        if (block.$arity()['$=='](0)) {
          return $send(self, 'instance_exec', [], block.$to_proc())
          } else {
          return block.$call(self)
        };
      }, TMP_CSS_initialize_3.$$arity = 0);
      
      Opal.defn(self, '$rule', TMP_CSS_rule_4 = function $$rule($a_rest) {
        var TMP_5, TMP_6, self = this, names, $iter = TMP_CSS_rule_4.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_rule_4.$$p = null;
        
        if ($truthy(block)) {
          } else {
          return nil
        };
        if ($truthy($send(names, 'any?', [], (TMP_5 = function(n){var self = TMP_5.$$s || this;
if (n == null) n = nil;
        return n['$include?'](",")}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5)))) {
          Opal.const_get_qualified('::', 'Kernel').$raise(Opal.const_get_qualified('::', 'ArgumentError'), "selectors cannot contain commas")};
        return $send(names, 'each', [], (TMP_6 = function(name){var self = TMP_6.$$s || this;
          if (self.selector == null) self.selector = nil;
          if (self.current == null) self.current = nil;
          if (self.media == null) self.media = nil;
          if (self.rules == null) self.rules = nil;
if (name == null) name = nil;
        
          self.selector['$<<'](name);
          self.current['$<<'](Opal.const_get_relative($nesting, 'Rule').$new(Opal.const_get_relative($nesting, 'CSS').$selector(self.selector), self.media));
          block.$call();
          self.selector.$pop();
          return self.rules['$<<'](self.current.$pop());}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
      }, TMP_CSS_rule_4.$$arity = -1);
      
      Opal.defn(self, '$media', TMP_CSS_media_7 = function $$media(query, $a_rest) {
        var $b, self = this, args, $iter = TMP_CSS_media_7.$$p, block = $iter || nil, old = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_media_7.$$p = null;
        if ($truthy(block)) {
          
          $b = [self.media, query], (old = $b[0]), (self.media = $b[1]), $b;
          block.$call();
          return (self.media = old);
          } else {
          return $send(self, 'method_missing', ["media", query].concat(Opal.to_a(args)))
        }
      }, TMP_CSS_media_7.$$arity = -2);
      
      Opal.defn(self, '$font', TMP_CSS_font_8 = function $$font(name, $a_rest) {
        var self = this, args, $iter = TMP_CSS_font_8.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_font_8.$$p = null;
        if ($truthy(block)) {
          
          self.current['$<<'](Opal.const_get_relative($nesting, 'Font').$new(name));
          block.$call();
          return self.fonts['$<<'](self.current.$pop());
          } else {
          return $send(self, 'method_missing', ["font", name].concat(Opal.to_a(args)))
        }
      }, TMP_CSS_font_8.$$arity = -2);
      
      Opal.defn(self, '$animation', TMP_CSS_animation_9 = function $$animation(name, $a_rest) {
        var self = this, args, $iter = TMP_CSS_animation_9.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_animation_9.$$p = null;
        if ($truthy(block)) {
          
          self.current['$<<'](Opal.const_get_relative($nesting, 'Animation').$new(name));
          block.$call();
          return self.animations['$<<'](self.current.$pop());
          } else {
          return $send(self, 'method_missing', ["animation", name].concat(Opal.to_a(args)))
        }
      }, TMP_CSS_animation_9.$$arity = -2);
      return (Opal.defn(self, '$method_missing', TMP_CSS_method_missing_10 = function $$method_missing($a_rest) {
        var self = this, args, $iter = TMP_CSS_method_missing_10.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_CSS_method_missing_10.$$p = null;
        return $send(self.current.$last(), '__send__', Opal.to_a(args), block.$to_proc())
      }, TMP_CSS_method_missing_10.$$arity = -1), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
    return (function($base, $super, $parent_nesting) {
      function $HTML(){};
      var self = $HTML = $klass($base, $super, 'HTML', $HTML);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTML_style_11;

      def.current = def.roots = nil;
      return (Opal.defn(self, '$style', TMP_HTML_style_11 = function $$style() {
        var $a, self = this, $iter = TMP_HTML_style_11.$$p, block = $iter || nil;

        if ($iter) TMP_HTML_style_11.$$p = null;
        return ($truthy($a = self.current) ? $a : self.roots)['$<<']($send(Opal.const_get_relative($nesting, 'CSS'), 'new', [], block.$to_proc()))
      }, TMP_HTML_style_11.$$arity = 0), nil) && 'style'
    })($nesting[0], Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["stringio"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$new', '$call', '$close', '$attr_accessor', '$length', '$include?', '$!', '$check_readable', '$==', '$===', '$>=', '$raise', '$>', '$+', '$-', '$seek', '$enum_for', '$eof?', '$ord', '$[]', '$check_writable', '$String', '$write', '$closed_write?', '$closed_read?']);
  return (function($base, $super, $parent_nesting) {
    function $StringIO(){};
    var self = $StringIO = $klass($base, $super, 'StringIO', $StringIO);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StringIO_open_1, TMP_StringIO_initialize_2, TMP_StringIO_eof$q_3, TMP_StringIO_seek_4, TMP_StringIO_tell_5, TMP_StringIO_rewind_6, TMP_StringIO_each_byte_7, TMP_StringIO_each_char_8, TMP_StringIO_write_9, TMP_StringIO_read_10, TMP_StringIO_close_11, TMP_StringIO_close_read_12, TMP_StringIO_close_write_13, TMP_StringIO_closed$q_14, TMP_StringIO_closed_read$q_15, TMP_StringIO_closed_write$q_16, TMP_StringIO_check_writable_17, TMP_StringIO_check_readable_18;

    def.position = def.string = def.closed = nil;
    
    self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'Readable'));
    self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'Writable'));
    Opal.defs(self, '$open', TMP_StringIO_open_1 = function $$open(string, mode) {
      var self = this, $iter = TMP_StringIO_open_1.$$p, block = $iter || nil, io = nil, res = nil;

      if (string == null) {
        string = "";
      }
      if (mode == null) {
        mode = nil;
      }
      if ($iter) TMP_StringIO_open_1.$$p = null;
      
      io = self.$new(string, mode);
      res = block.$call(io);
      io.$close();
      return res;
    }, TMP_StringIO_open_1.$$arity = -1);
    self.$attr_accessor("string");
    
    Opal.defn(self, '$initialize', TMP_StringIO_initialize_2 = function $$initialize(string, mode) {
      var $a, self = this;

      if (string == null) {
        string = "";
      }
      if (mode == null) {
        mode = "rw";
      }
      
      self.string = string;
      self.position = string.$length();
      if ($truthy(($truthy($a = mode['$include?']("r")) ? mode['$include?']("w")['$!']() : $a))) {
        return (self.closed = "write")
      } else if ($truthy(($truthy($a = mode['$include?']("w")) ? mode['$include?']("r")['$!']() : $a))) {
        return (self.closed = "read")
        } else {
        return nil
      };
    }, TMP_StringIO_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$eof?', TMP_StringIO_eof$q_3 = function() {
      var self = this;

      
      self.$check_readable();
      return self.position['$=='](self.string.$length());
    }, TMP_StringIO_eof$q_3.$$arity = 0);
    Opal.alias(self, "eof", "eof?");
    
    Opal.defn(self, '$seek', TMP_StringIO_seek_4 = function $$seek(pos, whence) {
      var self = this, $case = nil;

      if (whence == null) {
        whence = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'SEEK_SET');
      }
      
      $case = whence;
      if (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'SEEK_SET')['$===']($case)) {
      if ($truthy($rb_ge(pos, 0))) {
        } else {
        self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Errno'), 'EINVAL'))
      };
      self.position = pos;}
      else if (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'SEEK_CUR')['$===']($case)) {if ($truthy($rb_gt($rb_plus(self.position, pos), self.string.$length()))) {
        self.position = self.string.$length()
        } else {
        self.position = $rb_plus(self.position, pos)
      }}
      else if (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IO'), 'SEEK_END')['$===']($case)) {if ($truthy($rb_gt(pos, self.string.$length()))) {
        self.position = 0
        } else {
        self.position = $rb_minus(self.position, pos)
      }};
      return 0;
    }, TMP_StringIO_seek_4.$$arity = -2);
    
    Opal.defn(self, '$tell', TMP_StringIO_tell_5 = function $$tell() {
      var self = this;

      return self.position
    }, TMP_StringIO_tell_5.$$arity = 0);
    Opal.alias(self, "pos", "tell");
    Opal.alias(self, "pos=", "seek");
    
    Opal.defn(self, '$rewind', TMP_StringIO_rewind_6 = function $$rewind() {
      var self = this;

      return self.$seek(0)
    }, TMP_StringIO_rewind_6.$$arity = 0);
    
    Opal.defn(self, '$each_byte', TMP_StringIO_each_byte_7 = function $$each_byte() {
      var $a, self = this, $iter = TMP_StringIO_each_byte_7.$$p, block = $iter || nil, i = nil;

      if ($iter) TMP_StringIO_each_byte_7.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each_byte")
      };
      self.$check_readable();
      i = self.position;
      while (!($truthy(self['$eof?']()))) {
        
        block.$call(self.string['$[]'](i).$ord());
        i = $rb_plus(i, 1);
      };
      return self;
    }, TMP_StringIO_each_byte_7.$$arity = 0);
    
    Opal.defn(self, '$each_char', TMP_StringIO_each_char_8 = function $$each_char() {
      var $a, self = this, $iter = TMP_StringIO_each_char_8.$$p, block = $iter || nil, i = nil;

      if ($iter) TMP_StringIO_each_char_8.$$p = null;
      
      if ($truthy(block)) {
        } else {
        return self.$enum_for("each_char")
      };
      self.$check_readable();
      i = self.position;
      while (!($truthy(self['$eof?']()))) {
        
        block.$call(self.string['$[]'](i));
        i = $rb_plus(i, 1);
      };
      return self;
    }, TMP_StringIO_each_char_8.$$arity = 0);
    
    Opal.defn(self, '$write', TMP_StringIO_write_9 = function $$write(string) {
      var self = this, before = nil, after = nil;

      
      self.$check_writable();
      string = self.$String(string);
      if (self.string.$length()['$=='](self.position)) {
        
        self.string = $rb_plus(self.string, string);
        return (self.position = $rb_plus(self.position, string.$length()));
        } else {
        
        before = self.string['$[]'](Opal.Range.$new(0, $rb_minus(self.position, 1), false));
        after = self.string['$[]'](Opal.Range.$new($rb_plus(self.position, string.$length()), -1, false));
        self.string = $rb_plus($rb_plus(before, string), after);
        return (self.position = $rb_plus(self.position, string.$length()));
      };
    }, TMP_StringIO_write_9.$$arity = 1);
    
    Opal.defn(self, '$read', TMP_StringIO_read_10 = function $$read(length, outbuf) {
      var self = this, string = nil, str = nil;

      if (length == null) {
        length = nil;
      }
      if (outbuf == null) {
        outbuf = nil;
      }
      
      self.$check_readable();
      if ($truthy(self['$eof?']())) {
        return nil};
      string = (function() {if ($truthy(length)) {
        
        str = self.string['$[]'](self.position, length);
        self.position = $rb_plus(self.position, length);
        return str;
        } else {
        
        str = self.string['$[]'](Opal.Range.$new(self.position, -1, false));
        self.position = self.string.$length();
        return str;
      }; return nil; })();
      if ($truthy(outbuf)) {
        return outbuf.$write(string)
        } else {
        return string
      };
    }, TMP_StringIO_read_10.$$arity = -1);
    
    Opal.defn(self, '$close', TMP_StringIO_close_11 = function $$close() {
      var self = this;

      return (self.closed = "both")
    }, TMP_StringIO_close_11.$$arity = 0);
    
    Opal.defn(self, '$close_read', TMP_StringIO_close_read_12 = function $$close_read() {
      var self = this;

      if (self.closed['$==']("write")) {
        return (self.closed = "both")
        } else {
        return (self.closed = "read")
      }
    }, TMP_StringIO_close_read_12.$$arity = 0);
    
    Opal.defn(self, '$close_write', TMP_StringIO_close_write_13 = function $$close_write() {
      var self = this;

      if (self.closed['$==']("read")) {
        return (self.closed = "both")
        } else {
        return (self.closed = "write")
      }
    }, TMP_StringIO_close_write_13.$$arity = 0);
    
    Opal.defn(self, '$closed?', TMP_StringIO_closed$q_14 = function() {
      var self = this;

      return self.closed['$==']("both")
    }, TMP_StringIO_closed$q_14.$$arity = 0);
    
    Opal.defn(self, '$closed_read?', TMP_StringIO_closed_read$q_15 = function() {
      var $a, self = this;

      return ($truthy($a = self.closed['$==']("read")) ? $a : self.closed['$==']("both"))
    }, TMP_StringIO_closed_read$q_15.$$arity = 0);
    
    Opal.defn(self, '$closed_write?', TMP_StringIO_closed_write$q_16 = function() {
      var $a, self = this;

      return ($truthy($a = self.closed['$==']("write")) ? $a : self.closed['$==']("both"))
    }, TMP_StringIO_closed_write$q_16.$$arity = 0);
    
    Opal.defn(self, '$check_writable', TMP_StringIO_check_writable_17 = function $$check_writable() {
      var self = this;

      if ($truthy(self['$closed_write?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'IOError'), "not opened for writing")
        } else {
        return nil
      }
    }, TMP_StringIO_check_writable_17.$$arity = 0);
    return (Opal.defn(self, '$check_readable', TMP_StringIO_check_readable_18 = function $$check_readable() {
      var self = this;

      if ($truthy(self['$closed_read?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'IOError'), "not opened for reading")
        } else {
        return nil
      }
    }, TMP_StringIO_check_readable_18.$$arity = 0), nil) && 'check_readable';
  })($nesting[0], Opal.const_get_relative($nesting, 'IO'), $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio/formatter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$[]=', '$to_h', '$-', '$[]', '$dup', '$deep_merge!', '$call', '$replace', '$===', '$new', '$merge', '$each', '$string', '$indent?', '$+', '$lines', '$puts', '$*', '$chomp', '$print', '$gsub', '$to_s', '$for', '$version', '$indent', '$format', '$instance_eval', '$empty?', '$map', '$escape', '$<<', '$join', '$include?', '$downcase', '$name', '$value', '$important', '$fonts', '$animations', '$steps', '$reverse', '$rules', '$media', '$selector', '$deindent']);
  
  self.$require("stringio");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Paggio_14, TMP_Paggio_17, TMP_Paggio_24, TMP_Paggio_25;

    
    (function($base, $super, $parent_nesting) {
      function $Formatter(){};
      var self = $Formatter = $klass($base, $super, 'Formatter', $Formatter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Formatter_to_h_1, TMP_Formatter_for_2, TMP_Formatter_options_3, TMP_Formatter_initialize_4, TMP_Formatter_format_6, TMP_Formatter_to_s_7, TMP_Formatter_indent$q_8, TMP_Formatter_indent_9, TMP_Formatter_deindent_10, TMP_Formatter_print_12, TMP_Formatter_escape_13;

      def.options = def.io = nil;
      
      Opal.defs(self, '$to_h', TMP_Formatter_to_h_1 = function $$to_h() {
        var $a, self = this;
        if (self.formatters == null) self.formatters = nil;

        return (self.formatters = ($truthy($a = self.formatters) ? $a : $hash2([], {})))
      }, TMP_Formatter_to_h_1.$$arity = 0);
      Opal.defs(self, '$for', TMP_Formatter_for_2 = function(klass) {
        var self = this, $iter = TMP_Formatter_for_2.$$p, block = $iter || nil, $writer = nil;

        if ($iter) TMP_Formatter_for_2.$$p = null;
        if ($truthy(block)) {
          
          $writer = [klass, block];
          $send(self.$to_h(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          return self.$to_h()['$[]'](klass)
        }
      }, TMP_Formatter_for_2.$$arity = 1);
      Opal.defs(self, '$options', TMP_Formatter_options_3 = function $$options(options) {
        var self = this, $iter = TMP_Formatter_options_3.$$p, block = $iter || nil, old = nil, result = nil;

        if ($iter) TMP_Formatter_options_3.$$p = null;
        
        old = Opal.const_get_relative($nesting, 'OPTIONS').$dup();
        Opal.const_get_relative($nesting, 'Utils')['$deep_merge!'](Opal.const_get_relative($nesting, 'OPTIONS'), options);
        result = block.$call();
        Opal.const_get_relative($nesting, 'OPTIONS').$replace(old);
        return result;
      }, TMP_Formatter_options_3.$$arity = 1);
      Opal.const_set($nesting[0], 'OPTIONS', $hash2(["indent"], {"indent": $hash2(["level", "with"], {"level": 0, "with": "\t"})}));
      
      Opal.defn(self, '$initialize', TMP_Formatter_initialize_4 = function $$initialize(io, options) {
        var $a, self = this;

        if (io == null) {
          io = nil;
        }
        if (options == null) {
          options = $hash2([], {});
        }
        
        if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](io))) {
          
          self.io = Opal.const_get_relative($nesting, 'StringIO').$new();
          self.options = io;
          } else {
          
          self.io = ($truthy($a = io) ? $a : Opal.const_get_relative($nesting, 'StringIO').$new());
          self.options = options;
        };
        return (self.options = Opal.const_get_relative($nesting, 'OPTIONS').$merge(self.options));
      }, TMP_Formatter_initialize_4.$$arity = -1);
      
      Opal.defn(self, '$format', TMP_Formatter_format_6 = function $$format(item) {
        var TMP_5, self = this;

        
        (function(){var $brk = Opal.new_brk(); try {return $send(Opal.const_get_relative($nesting, 'Formatter').$to_h(), 'each', [], (TMP_5 = function(klass, block){var self = TMP_5.$$s || this;
if (klass == null) klass = nil;if (block == null) block = nil;
        if ($truthy(klass['$==='](item))) {
            
            block.$call(self, item);
            
            Opal.brk(nil, $brk);
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$brk = $brk, TMP_5.$$arity = 2, TMP_5))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return self;
      }, TMP_Formatter_format_6.$$arity = 1);
      
      Opal.defn(self, '$to_s', TMP_Formatter_to_s_7 = function $$to_s() {
        var self = this;

        return self.io.$string()
      }, TMP_Formatter_to_s_7.$$arity = 0);
      
      Opal.defn(self, '$indent?', TMP_Formatter_indent$q_8 = function() {
        var self = this, $iter = TMP_Formatter_indent$q_8.$$p, block = $iter || nil;

        if ($iter) TMP_Formatter_indent$q_8.$$p = null;
        try {
          return self.options['$[]']("indent")['$[]']("level")
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
            try {
              return false
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_Formatter_indent$q_8.$$arity = 0);
      
      Opal.defn(self, '$indent', TMP_Formatter_indent_9 = function $$indent() {
        var self = this, $iter = TMP_Formatter_indent_9.$$p, block = $iter || nil, $binary_op_recvr_tmp_1 = nil, $writer = nil, $binary_op_recvr_tmp_2 = nil, $binary_op_recvr_tmp_3 = nil;

        if ($iter) TMP_Formatter_indent_9.$$p = null;
        if ($truthy(self['$indent?']())) {
          if ($truthy(block)) {
            
            
            $binary_op_recvr_tmp_1 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_plus($binary_op_recvr_tmp_1['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;;
            block.$call();
            
            $binary_op_recvr_tmp_2 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_minus($binary_op_recvr_tmp_2['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_2, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;;
            } else {
            
            $binary_op_recvr_tmp_3 = self.options['$[]']("indent");
            
            $writer = ["level", $rb_plus($binary_op_recvr_tmp_3['$[]']("level"), 1)];
            $send($binary_op_recvr_tmp_3, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }
        } else if ($truthy(block)) {
          return block.$call()
          } else {
          return nil
        }
      }, TMP_Formatter_indent_9.$$arity = 0);
      
      Opal.defn(self, '$deindent', TMP_Formatter_deindent_10 = function $$deindent() {
        var self = this, $binary_op_recvr_tmp_4 = nil, $writer = nil;

        if ($truthy(self['$indent?']())) {
          
          $binary_op_recvr_tmp_4 = self.options['$[]']("indent");
          
          $writer = ["level", $rb_minus($binary_op_recvr_tmp_4['$[]']("level"), 1)];
          $send($binary_op_recvr_tmp_4, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
          } else {
          return nil
        }
      }, TMP_Formatter_deindent_10.$$arity = 0);
      
      Opal.defn(self, '$print', TMP_Formatter_print_12 = function $$print(text) {
        var TMP_11, self = this, level = nil;

        if ($truthy((level = self['$indent?']()))) {
          return $send(text.$lines(), 'each', [], (TMP_11 = function(line){var self = TMP_11.$$s || this;
            if (self.io == null) self.io = nil;
            if (self.options == null) self.options = nil;
if (line == null) line = nil;
          return self.io.$puts("" + ($rb_times(self.options['$[]']("indent")['$[]']("with"), level)) + (line.$chomp()))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))
          } else {
          return self.io.$print(text)
        }
      }, TMP_Formatter_print_12.$$arity = 1);
      return (Opal.defn(self, '$escape', TMP_Formatter_escape_13 = function $$escape(string) {
        var self = this;

        return string.$to_s().$gsub(/["><']|&(?!([a-zA-Z]+|(#\d+));)/, $hash2(["&", ">", "<", "\"", "'"], {"&": "&amp;", ">": "&gt;", "<": "&lt;", "\"": "&quot;", "'": "&#39;"}))
      }, TMP_Formatter_escape_13.$$arity = 1), nil) && 'escape';
    })($nesting[0], null, $nesting);
    $send(Opal.const_get_relative($nesting, 'Formatter'), 'for', [Opal.const_get_relative($nesting, 'HTML')], (TMP_Paggio_14 = function(f, item){var self = TMP_Paggio_14.$$s || this, TMP_15, $case = nil;
if (f == null) f = nil;if (item == null) item = nil;
    
      $case = item.$version();
      if ((5)['$===']($case)) {f.$print("<!DOCTYPE html>")};
      f.$print("<html>");
      $send(f, 'indent', [], (TMP_15 = function(){var self = TMP_15.$$s || this, TMP_16;

      return $send(item, 'each', [], (TMP_16 = function(root){var self = TMP_16.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
      return f.$print("</html>");}, TMP_Paggio_14.$$s = self, TMP_Paggio_14.$$arity = 2, TMP_Paggio_14));
    $send(Opal.const_get_relative($nesting, 'Formatter'), 'for', [Opal.const_get_qualified(Opal.const_get_relative($nesting, 'HTML'), 'Element')], (TMP_Paggio_17 = function(f, item){var self = TMP_Paggio_17.$$s || this, $a, $b, TMP_18, TMP_19, TMP_20, name = nil, attributes = nil, class_names = nil, attrs = nil;
if (f == null) f = nil;if (item == null) item = nil;
    
      $b = $send(item, 'instance_eval', [], (TMP_18 = function(){var self = TMP_18.$$s || this;
        if (self.name == null) self.name = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.class_names == null) self.class_names = nil;

      return [self.name, self.attributes, self.class_names]}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18)), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (attributes = ($a[1] == null ? nil : $a[1])), (class_names = ($a[2] == null ? nil : $a[2])), $b;
      if ($truthy(($truthy($a = attributes['$empty?']()) ? class_names['$empty?']() : $a))) {
        f.$print("" + "<" + (name) + ">")
        } else {
        
        attrs = $send(attributes, 'map', [], (TMP_19 = function(key, value){var self = TMP_19.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return "" + (f.$escape(key)) + "=\"" + (f.$escape(value)) + "\""}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19));
        if ($truthy(class_names['$empty?']())) {
          } else {
          attrs['$<<']("" + "class=\"" + (f.$escape(class_names.$join(" "))) + "\"")
        };
        f.$print("" + "<" + (name) + " " + (attrs.$join(" ")) + ">");
      };
      if ($truthy(["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"]['$include?'](name.$to_s().$downcase()))) {
        return nil;};
      $send(f, 'indent', [], (TMP_20 = function(){var self = TMP_20.$$s || this, TMP_21, TMP_22, inner = nil;

      if ($truthy((inner = $send(item, 'instance_eval', [], (TMP_21 = function(){var self = TMP_21.$$s || this;
          if (self.inner_html == null) self.inner_html = nil;

        return self.inner_html}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))))) {
          return f.$print(inner)
          } else {
          return $send(item, 'each', [], (TMP_22 = function(child){var self = TMP_22.$$s || this, TMP_23, $case = nil;
if (child == null) child = nil;
          return (function() {$case = child;
            if (Opal.const_get_relative($nesting, 'String')['$===']($case)) {return f.$print(f.$escape(child))}
            else if (Opal.const_get_relative($nesting, 'CSS')['$===']($case)) {
            f.$print("<style>");
            $send(f, 'indent', [], (TMP_23 = function(){var self = TMP_23.$$s || this;

            return f.$format(child)}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23));
            return f.$print("</style>");}
            else {return f.$format(child)}})()}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22))
        }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20));
      return f.$print("" + "</" + (name) + ">");}, TMP_Paggio_17.$$s = self, TMP_Paggio_17.$$arity = 2, TMP_Paggio_17));
    $send(Opal.const_get_relative($nesting, 'Formatter'), 'for', [Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'Definition'), 'Style')], (TMP_Paggio_24 = function(f, style){var self = TMP_Paggio_24.$$s || this;
if (f == null) f = nil;if (style == null) style = nil;
    return f.$print("" + (style.$name()) + ": " + (style.$value()) + ((function() {if ($truthy(style.$important())) {
        return " !important"
        } else {
        return nil
      }; return nil; })()) + ";")}, TMP_Paggio_24.$$s = self, TMP_Paggio_24.$$arity = 2, TMP_Paggio_24));
    return $send(Opal.const_get_relative($nesting, 'Formatter'), 'for', [Opal.const_get_relative($nesting, 'CSS')], (TMP_Paggio_25 = function(f, item){var self = TMP_Paggio_25.$$s || this, TMP_26, TMP_29, TMP_33;
if (f == null) f = nil;if (item == null) item = nil;
    
      $send(item.$fonts(), 'each', [], (TMP_26 = function(font){var self = TMP_26.$$s || this, TMP_27;
if (font == null) font = nil;
      
        f.$print("@font-face {");
        $send(f, 'indent', [], (TMP_27 = function(){var self = TMP_27.$$s || this, TMP_28;

        return $send(font, 'each', [], (TMP_28 = function(style){var self = TMP_28.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28))}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27));
        return f.$print("}");}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
      $send(item.$animations(), 'each', [], (TMP_29 = function(animation){var self = TMP_29.$$s || this, TMP_30;
if (animation == null) animation = nil;
      return $send(["", "-webkit-", "-moz-", "-o-"], 'each', [], (TMP_30 = function(platform){var self = TMP_30.$$s || this, TMP_31;
if (platform == null) platform = nil;
        
          f.$print("" + "@" + (platform) + "keyframes " + (animation.$name()) + " {");
          $send(animation.$steps(), 'each', [], (TMP_31 = function(step){var self = TMP_31.$$s || this, TMP_32;
if (step == null) step = nil;
          
            f.$print("" + (step.$value()) + " {");
            $send(step, 'each', [], (TMP_32 = function(style){var self = TMP_32.$$s || this;
if (style == null) style = nil;
            return f.$format(style)}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32));
            return f.$print("}");}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
          return f.$print("}");}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30))}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
      return $send(item.$rules().$reverse(), 'each', [], (TMP_33 = function(rule){var self = TMP_33.$$s || this, TMP_34, m = nil;
if (rule == null) rule = nil;
      
        if ($truthy(rule['$empty?']())) {
          return nil;};
        if ($truthy((m = rule.$media()))) {
          
          f.$print("" + "@media " + (m) + " {");
          f.$indent();};
        f.$print("" + (rule.$selector()) + " {");
        $send(f, 'indent', [], (TMP_34 = function(){var self = TMP_34.$$s || this, TMP_35;

        return $send(rule, 'each', [], (TMP_35 = function(style){var self = TMP_35.$$s || this;
if (style == null) style = nil;
          return f.$format(style)}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35))}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34));
        f.$print("}");
        if ($truthy(rule.$media())) {
          
          f.$print("}");
          return f.$deindent();
          } else {
          return nil
        };}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33));}, TMP_Paggio_25.$$s = self, TMP_Paggio_25.$$arity = 2, TMP_Paggio_25));
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["paggio"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$options', '$to_proc', '$to_s', '$format', '$new', '$tap', '$each']);
  
  self.$require("paggio/utils");
  self.$require("paggio/html");
  self.$require("paggio/css");
  self.$require("paggio/formatter");
  return (function($base, $super, $parent_nesting) {
    function $Paggio(){};
    var self = $Paggio = $klass($base, $super, 'Paggio', $Paggio);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Paggio_options_1, TMP_Paggio_indent_2, TMP_Paggio_css_3, TMP_Paggio_html_4, TMP_Paggio_html$B_5;

    
    Opal.defs(self, '$options', TMP_Paggio_options_1 = function $$options(options) {
      var self = this, $iter = TMP_Paggio_options_1.$$p, block = $iter || nil;

      if ($iter) TMP_Paggio_options_1.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'Formatter'), 'options', [options], block.$to_proc())
    }, TMP_Paggio_options_1.$$arity = 1);
    Opal.defs(self, '$indent', TMP_Paggio_indent_2 = function $$indent(options) {
      var self = this, $iter = TMP_Paggio_indent_2.$$p, block = $iter || nil;

      if ($iter) TMP_Paggio_indent_2.$$p = null;
      return $send(self, 'options', [$hash2(["indent"], {"indent": options})], block.$to_proc())
    }, TMP_Paggio_indent_2.$$arity = 1);
    Opal.defs(self, '$css', TMP_Paggio_css_3 = function $$css($a_rest) {
      var self = this, args, $iter = TMP_Paggio_css_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Paggio_css_3.$$p = null;
      return Opal.const_get_relative($nesting, 'Formatter').$new().$format($send(Opal.const_get_relative($nesting, 'CSS'), 'new', Opal.to_a(args), block.$to_proc())).$to_s()
    }, TMP_Paggio_css_3.$$arity = -1);
    Opal.defs(self, '$html', TMP_Paggio_html_4 = function $$html($a_rest) {
      var self = this, args, $iter = TMP_Paggio_html_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Paggio_html_4.$$p = null;
      return Opal.const_get_relative($nesting, 'Formatter').$new().$format($send(Opal.const_get_relative($nesting, 'HTML'), 'new', Opal.to_a(args), block.$to_proc())).$to_s()
    }, TMP_Paggio_html_4.$$arity = -1);
    return Opal.defs(self, '$html!', TMP_Paggio_html$B_5 = function() {
      var TMP_6, self = this, $iter = TMP_Paggio_html$B_5.$$p, block = $iter || nil;

      if ($iter) TMP_Paggio_html$B_5.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'Formatter').$new(), 'tap', [], (TMP_6 = function(f){var self = TMP_6.$$s || this, TMP_7;
if (f == null) f = nil;
      return $send($send(Opal.const_get_relative($nesting, 'HTML'), 'new', [], block.$to_proc()), 'each', [], (TMP_7 = function(root){var self = TMP_7.$$s || this;
if (root == null) root = nil;
        return f.$format(root)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6)).$to_s()
    }, TMP_Paggio_html$B_5.$$arity = 0);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "0.2.0")
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/utils"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$new', '$encode_uri', '$to_s', '$encode_uri_component', '$[]', '$map', '$split', '$decode_uri_component', '$join']);
  
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'Size', Opal.const_get_relative($nesting, 'Struct').$new("width", "height"));
    Opal.const_set($nesting[0], 'Position', Opal.const_get_relative($nesting, 'Struct').$new("x", "y"));
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_encode_uri_1, TMP_Object_encode_uri_component_2;

    
    
    Opal.defn(self, '$encode_uri', TMP_Object_encode_uri_1 = function $$encode_uri() {
      var self = this;

      return self.$to_s().$encode_uri()
    }, TMP_Object_encode_uri_1.$$arity = 0);
    return (Opal.defn(self, '$encode_uri_component', TMP_Object_encode_uri_component_2 = function $$encode_uri_component() {
      var self = this;

      return self.$to_s().$encode_uri_component()
    }, TMP_Object_encode_uri_component_2.$$arity = 0), nil) && 'encode_uri_component';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_encode_uri_component_3, TMP_String_encode_uri_4, TMP_String_decode_uri_component_5, TMP_String_decode_uri_6;

    
    
    Opal.defn(self, '$encode_uri_component', TMP_String_encode_uri_component_3 = function $$encode_uri_component() {
      var self = this;

      return encodeURIComponent(self)
    }, TMP_String_encode_uri_component_3.$$arity = 0);
    
    Opal.defn(self, '$encode_uri', TMP_String_encode_uri_4 = function $$encode_uri() {
      var self = this;

      return encodeURI(self)
    }, TMP_String_encode_uri_4.$$arity = 0);
    
    Opal.defn(self, '$decode_uri_component', TMP_String_decode_uri_component_5 = function $$decode_uri_component() {
      var self = this;

      return decodeURIComponent(self)
    }, TMP_String_decode_uri_component_5.$$arity = 0);
    return (Opal.defn(self, '$decode_uri', TMP_String_decode_uri_6 = function $$decode_uri() {
      var self = this;

      return decodeURI(self)
    }, TMP_String_decode_uri_6.$$arity = 0), nil) && 'decode_uri';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_decode_uri_8, TMP_Hash_encode_uri_10;

    
    Opal.defs(self, '$decode_uri', TMP_Hash_decode_uri_8 = function $$decode_uri(string) {
      var TMP_7, self = this;

      return self['$[]']($send(string.$split("&"), 'map', [], (TMP_7 = function(part){var self = TMP_7.$$s || this, $a, $b, name = nil, value = nil;
if (part == null) part = nil;
      
        $b = part.$split("="), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
        return [name.$decode_uri_component(), value.$decode_uri_component()];}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7)))
    }, TMP_Hash_decode_uri_8.$$arity = 1);
    return (Opal.defn(self, '$encode_uri', TMP_Hash_encode_uri_10 = function $$encode_uri() {
      var TMP_9, self = this;

      return $send(self, 'map', [], (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name.$to_s().$encode_uri_component()) + "=" + (value.$to_s().$encode_uri_component())}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9)).$join("&")
    }, TMP_Hash_encode_uri_10.$$arity = 0), nil) && 'encode_uri';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/support"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$downcase', '$===', '$!', '$supports?']);
  
  Opal.const_set($nesting[0], 'BROWSER_ENGINE', (function() { try {
    return (/MSIE|WebKit|Presto|Gecko/.exec(navigator.userAgent)[0]).$downcase()
  } catch ($err) {
    if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
      try {
        return "unknown"
      } finally { Opal.pop_exception() }
    } else { throw $err; }
  }})());
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Browser_supports$q_1, TMP_Browser_loaded$q_2;

    
    self.support = {};
    Opal.defs(self, '$supports?', TMP_Browser_supports$q_1 = function(feature) {
      var $a, self = this, support = nil, $case = nil;
      if (self.support == null) self.support = nil;

      
      if ($truthy((typeof(self.support[feature]) !== "undefined"))) {
        return self.support[feature]};
      support = (function() {$case = feature;
      if ("MutationObserver"['$===']($case)) {return (typeof(window.MutationObserver) !== "undefined")}
      else if ("WebSocket"['$===']($case)) {return (typeof(window.WebSocket) !== "undefined")}
      else if ("EventSource"['$===']($case)) {return (typeof(window.EventSource) !== "undefined")}
      else if ("XHR"['$===']($case)) {return (typeof(window.XMLHttpRequest) !== "undefined")}
      else if ("ActiveX"['$===']($case)) {return (typeof(window.ActiveXObject) !== "undefined")}
      else if ("WebSQL"['$===']($case)) {return (typeof(window.openDatabase) !== "undefined")}
      else if ("Query.css"['$===']($case)) {return (typeof(document.querySelectorAll) !== "undefined")}
      else if ("Query.xpath"['$===']($case)) {return (typeof(document.evaluate) !== "undefined")}
      else if ("Storage.local"['$===']($case)) {return (typeof(window.localStorage) !== "undefined")}
      else if ("Storage.global"['$===']($case)) {return (typeof(window.globalStorage) !== "undefined")}
      else if ("Storage.session"['$===']($case)) {return (typeof(window.sessionStorage) !== "undefined")}
      else if ("Immediate"['$===']($case)) {return (typeof(window.setImmediate) !== "undefined")}
      else if ("Immediate (Internet Explorer)"['$===']($case)) {return (typeof(window.msSetImmediate) !== "undefined")}
      else if ("Immediate (Firefox)"['$===']($case)) {return (typeof(window.mozSetImmediate) !== "undefined")}
      else if ("Immediate (Opera)"['$===']($case)) {return (typeof(window.oSetImmediate) !== "undefined")}
      else if ("Immediate (Chrome)"['$===']($case) || "setImmediate (Safari)"['$===']($case)) {return (typeof(window.webkitSetImmediate) !== "undefined")}
      else if ("CSS.computed"['$===']($case)) {return (typeof(window.getComputedStyle) !== "undefined")}
      else if ("CSS.current"['$===']($case)) {return (typeof(document.documentElement.currentStyle) !== "undefined")}
      else if ("Window.send"['$===']($case)) {return (typeof(window.postMessage) !== "undefined")}
      else if ("Window.send (Asynchronous)"['$===']($case)) {if ($truthy(($truthy($a = (typeof(window.postMessage) !== "undefined")) ? (typeof(window.importScripts) !== "undefined")['$!']() : $a))) {
        
            var ok  = true,
                old = window.onmessage;

            window.onmessage = function() { ok = false; };
            window.postMessage("", "*")
            window.onmessage = old;

            return ok;
          
        } else {
        return nil
      }}
      else if ("Window.send (Synchronous)"['$===']($case)) {return self['$supports?']("Window.send (Asynchronous)")['$!']()}
      else if ("Window.innerSize"['$===']($case)) {return (typeof(window.innerHeight) !== "undefined")}
      else if ("Window.outerSize"['$===']($case)) {return (typeof(window.outerHeight) !== "undefined")}
      else if ("Window.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}
      else if ("Window.pageOffset"['$===']($case)) {return (typeof(window.pageXOffset) !== "undefined")}
      else if ("Attr.isId"['$===']($case)) {
          var div = document.createElement('div');
              div.setAttribute('id', 'xxxxxxxxxxxxx');

          return typeof(div.attributes['id'].isId) !== "undefined";
        }
      else if ("Element.addBehavior"['$===']($case)) {return (typeof(document.documentElement.addBehavior) !== "undefined")}
      else if ("Element.className"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('className', 'x');

          return div.className === 'x';
        }
      else if ("Element.class"['$===']($case)) {
          var div = document.createElement("div");
              div.setAttribute('class', 'x');

          return div.className === 'x';
        }
      else if ("Element.for"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('for', 'x');

          return label.htmlFor === 'x';
        }
      else if ("Element.htmlFor"['$===']($case)) {
          var label = document.createElement("label");
              label.setAttribute('htmlFor', 'x');

          return label.htmlFor === 'x';
        }
      else if ("Element.clientSize"['$===']($case)) {return (typeof(document.documentElement.clientHeight) !== "undefined")}
      else if ("Element.scroll"['$===']($case)) {return (typeof(document.documentElement.scrollLeft) !== "undefined")}
      else if ("Element.textContent"['$===']($case)) {return (typeof(document.documentElement.textContent) !== "undefined")}
      else if ("Element.innerText"['$===']($case)) {return (typeof(document.documentElement.innerText) !== "undefined")}
      else if ("Element.matches"['$===']($case)) {return (typeof(document.documentElement.matches) !== "undefined")}
      else if ("Element.matches (Internet Explorer)"['$===']($case)) {return (typeof(document.documentElement.msMatchesSelector) !== "undefined")}
      else if ("Element.matches (Firefox)"['$===']($case)) {return (typeof(document.documentElement.mozMatchesSelector) !== "undefined")}
      else if ("Element.matches (Opera)"['$===']($case)) {return (typeof(document.documentElement.oMatchesSelector) !== "undefined")}
      else if ("Element.matches (Chrome)"['$===']($case) || "Element.matches (Safari)"['$===']($case)) {return (typeof(document.documentElement.webkitMatchesSelector) !== "undefined")}
      else if ("Element.getBoundingClientRect"['$===']($case)) {return (typeof(document.documentElement.getBoundingClientRect) !== "undefined")}
      else if ("Event.readystatechange"['$===']($case)) {return "onreadystatechange" in window.document.createElement("script")}
      else if ("Event.constructor"['$===']($case)) {
      try {
        
        new MouseEvent("click");
        return true;
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };}
      else if ("Event.create"['$===']($case)) {return (typeof(document.createEvent) !== "undefined")}
      else if ("Event.createObject"['$===']($case)) {return (typeof(document.createEventObject) !== "undefined")}
      else if ("Event.addListener"['$===']($case)) {return (typeof(document.addEventListener) !== "undefined")}
      else if ("Event.attach"['$===']($case)) {return (typeof(document.attachEvent) !== "undefined")}
      else if ("Event.removeListener"['$===']($case)) {return (typeof(document.removeEventListener) !== "undefined")}
      else if ("Event.detach"['$===']($case)) {return (typeof(document.detachEvent) !== "undefined")}
      else if ("Event.dispatch"['$===']($case)) {return (typeof(document.dispatchEvent) !== "undefined")}
      else if ("Event.fire"['$===']($case)) {return (typeof(document.fireEvent) !== "undefined")}
      else if (/^Event\.([A-Z].*?)$/['$===']($case)) {return ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)) + "Event") in window}
      else if ("Document.view"['$===']($case)) {return (typeof(document.defaultView) !== "undefined")}
      else if ("Document.window"['$===']($case)) {return (typeof(document.parentWindow) !== "undefined")}
      else if ("History"['$===']($case)) {return (typeof(window.history.pushState) !== "undefined")}
      else if ("History.state"['$===']($case)) {return (typeof(window.history.state) !== "undefined")}
      else if ("Animation.request"['$===']($case)) {return (typeof(window.requestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Internet Explorer)"['$===']($case)) {return (typeof(window.msRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Firefox)"['$===']($case)) {return (typeof(window.mozRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Opera)"['$===']($case)) {return (typeof(window.oRequestAnimationFrame) !== "undefined")}
      else if ("Animation.request (Chrome)"['$===']($case) || "Animation.request (Safari)"['$===']($case)) {return (typeof(window.webkitRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancel"['$===']($case)) {return (typeof(window.cancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Firefox)"['$===']($case)) {return (typeof(window.mozCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Opera)"['$===']($case)) {return (typeof(window.oCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancel (Chrome)"['$===']($case) || "Animation.cancel (Safari)"['$===']($case)) {return (typeof(window.webkitCancelAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest"['$===']($case)) {return (typeof(window.cancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Internet Explorer)"['$===']($case)) {return (typeof(window.msCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Firefox)"['$===']($case)) {return (typeof(window.mozCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Opera)"['$===']($case)) {return (typeof(window.oCancelRequestAnimationFrame) !== "undefined")}
      else if ("Animation.cancelRequest (Chrome)"['$===']($case) || "Animation.cancelRequest (Safari)"['$===']($case)) {return (typeof(window.webkitCancelRequestAnimationFrame) !== "undefined")}
      else { return nil }})();
      return self.support[feature] = support;
    }, TMP_Browser_supports$q_1.$$arity = 1);
    Opal.defs(self, '$loaded?', TMP_Browser_loaded$q_2 = function(name) {
      var self = this, $case = nil;

      return (function() {$case = name;
      if ("Sizzle"['$===']($case)) {return (typeof(window.Sizzle) !== "undefined")}
      else if ("wicked-good-xpath"['$===']($case)) {return (typeof(window.wgxpath) !== "undefined")}
      else { return nil }})()
    }, TMP_Browser_loaded$q_2.$$arity = 1);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/base"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$call', '$to_n', '$<<', '$converters', '$native?', '$each', '$instance_eval', '$register', '$to_proc', '$attr_reader', '$lambda', '$new', '$stopped?', '$arguments', '$!', '$prevented?', '$class_for', '$off', '$target', '$[]', '$delegated', '$delete', '$last', '$empty?', '$first', '$raise', '$name_for', '$handlers', '$[]=', '$-', '$include?', '$on!', '$delegate', '$callback=', '$on', '$handlers=', '$push', '$callbacks', '$attach', '$attach!', '$supports?', '$name', '$==', '$event', '$===', '$warn', '$detach', '$gsub', '$delete_if', '$=~', '$clear', '$none?', '$is_a?', '$create', '$dispatch', '$trigger', '$bubbles=', '$private', '$nil?', '$dup', '$on=', '$parent']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      (function($base, $super, $parent_nesting) {
        function $Definition(){};
        var self = $Definition = $klass($base, $super, 'Definition', $Definition);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_new_1, TMP_Definition_bubbles$eq_2, TMP_Definition_cancelable$eq_3;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        Opal.defs(self, '$new', TMP_Definition_new_1 = function() {
          var self = this, $iter = TMP_Definition_new_1.$$p, block = $iter || nil, data = nil;

          if ($iter) TMP_Definition_new_1.$$p = null;
          
          data = $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Definition_new_1, false, $Definition), [{ bubbles: true, cancelable: true }], null);
          if ($truthy(block)) {
            block.$call(data)};
          return data.$to_n();
        }, TMP_Definition_new_1.$$arity = 0);
        
        Opal.defn(self, '$bubbles=', TMP_Definition_bubbles$eq_2 = function(value) {
          var self = this;

          return self["native"].bubbles = value
        }, TMP_Definition_bubbles$eq_2.$$arity = 1);
        return (Opal.defn(self, '$cancelable=', TMP_Definition_cancelable$eq_3 = function(value) {
          var self = this;

          return self["native"].cancelable = value
        }, TMP_Definition_cancelable$eq_3.$$arity = 1), nil) && 'cancelable=';
      })($nesting[0], null, $nesting);
      return (function($base, $parent_nesting) {
        var $Target, self = $Target = $module($base, 'Target');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Target_converters_4, TMP_Target_register_5, TMP_Target_convert_7, TMP_Target_included_10, TMP_Target_on_19, TMP_Target_on$B_22, TMP_Target_attach_23, TMP_Target_attach$B_24, TMP_Target_attach_25, TMP_Target_attach$B_26, TMP_Target_attach_27, TMP_Target_attach$B_28, TMP_Target_off_32, TMP_Target_detach_33, TMP_Target_detach_35, TMP_Target_detach_36, TMP_Target_trigger_37, TMP_Target_trigger$B_38, TMP_Target_dispatch_40, TMP_Target_dispatch_41, TMP_Target_dispatch_42, TMP_Target_callbacks_43, TMP_Target_delegated_44, TMP_Target_delegate_46;

        
        Opal.defs(self, '$converters', TMP_Target_converters_4 = function $$converters() {
          var $a, self = this;
          if (self.converters == null) self.converters = nil;

          return (self.converters = ($truthy($a = self.converters) ? $a : []))
        }, TMP_Target_converters_4.$$arity = 0);
        Opal.defs(self, '$register', TMP_Target_register_5 = function $$register() {
          var self = this, $iter = TMP_Target_register_5.$$p, block = $iter || nil;

          if ($iter) TMP_Target_register_5.$$p = null;
          return self.$converters()['$<<'](block)
        }, TMP_Target_register_5.$$arity = 0);
        Opal.defs(self, '$convert', TMP_Target_convert_7 = function $$convert(value) {try {

          var TMP_6, self = this;

          
          if ($truthy(self['$native?'](value))) {
            } else {
            return value
          };
          $send(self.$converters(), 'each', [], (TMP_6 = function(block){var self = TMP_6.$$s || this, result = nil;
if (block == null) block = nil;
          if ($truthy((result = block.$call(value)))) {
              Opal.ret(result)
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_Target_convert_7.$$arity = 1);
        Opal.defs(self, '$included', TMP_Target_included_10 = function $$included(klass) {
          var TMP_8, self = this;

          return $send(klass, 'instance_eval', [], (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_target_9;

          return Opal.defs(self, '$target', TMP_target_9 = function $$target() {
              var self = this, $iter = TMP_target_9.$$p, block = $iter || nil;

              if ($iter) TMP_target_9.$$p = null;
              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'Target'), 'register', [], block.$to_proc())
            }, TMP_target_9.$$arity = 0)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8))
        }, TMP_Target_included_10.$$arity = 1);
        (function($base, $super, $parent_nesting) {
          function $Callback(){};
          var self = $Callback = $klass($base, $super, 'Callback', $Callback);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Callback_initialize_11, TMP_Callback_call_12, TMP_Callback_to_proc_14, TMP_Callback_event_15, TMP_Callback_off_16;

          def.proc = def.name = nil;
          
          self.$attr_reader("target", "name", "selector");
          
          Opal.defn(self, '$initialize', TMP_Callback_initialize_11 = function $$initialize(target, name, selector) {
            var self = this, $iter = TMP_Callback_initialize_11.$$p, block = $iter || nil;

            if (selector == null) {
              selector = nil;
            }
            if ($iter) TMP_Callback_initialize_11.$$p = null;
            
            self.target = target;
            self.name = name;
            self.selector = selector;
            return (self.block = block);
          }, TMP_Callback_initialize_11.$$arity = -3);
          
          Opal.defn(self, '$call', TMP_Callback_call_12 = function $$call(event) {
            var self = this;

            return self.$to_proc().$call(event)
          }, TMP_Callback_call_12.$$arity = 1);
          
          Opal.defn(self, '$to_proc', TMP_Callback_to_proc_14 = function $$to_proc() {
            var $a, TMP_13, self = this;

            return (self.proc = ($truthy($a = self.proc) ? $a : $send(self, 'lambda', [], (TMP_13 = function(event){var self = TMP_13.$$s || this;
              if (self.block == null) self.block = nil;
if (event == null) event = nil;
            
              
            if (!event.currentTarget) {
              event.currentTarget = self.target.native;
            }
          ;
              event = Opal.const_get_relative($nesting, 'Event').$new(event, self);
              if ($truthy(event['$stopped?']())) {
                } else {
                $send(self.block, 'call', [event].concat(Opal.to_a(event.$arguments())))
              };
              return event['$prevented?']()['$!']();}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))))
          }, TMP_Callback_to_proc_14.$$arity = 0);
          
          Opal.defn(self, '$event', TMP_Callback_event_15 = function $$event() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Event').$class_for(self.name)
          }, TMP_Callback_event_15.$$arity = 0);
          return (Opal.defn(self, '$off', TMP_Callback_off_16 = function $$off() {
            var self = this;

            return self.$target().$off(self)
          }, TMP_Callback_off_16.$$arity = 0), nil) && 'off';
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          function $Delegate(){};
          var self = $Delegate = $klass($base, $super, 'Delegate', $Delegate);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Delegate_initialize_17, TMP_Delegate_off_18;

          def.target = def.name = def.pair = nil;
          
          
          Opal.defn(self, '$initialize', TMP_Delegate_initialize_17 = function $$initialize(target, name, pair) {
            var self = this;

            
            self.target = target;
            self.name = name;
            return (self.pair = pair);
          }, TMP_Delegate_initialize_17.$$arity = 3);
          return (Opal.defn(self, '$off', TMP_Delegate_off_18 = function $$off() {
            var self = this, delegate = nil;

            
            delegate = self.target.$delegated()['$[]'](self.name);
            delegate.$last().$delete(self.pair);
            if ($truthy(delegate.$last()['$empty?']())) {
              
              delegate.$first().$off();
              return delegate.$delete(self.name);
              } else {
              return nil
            };
          }, TMP_Delegate_off_18.$$arity = 0), nil) && 'off';
        })($nesting[0], null, $nesting);
        Opal.const_set($nesting[0], 'Delegates', Opal.const_get_relative($nesting, 'Struct').$new("callback", "handlers"));
        
        Opal.defn(self, '$on', TMP_Target_on_19 = function $$on(name, selector) {
          var TMP_20, TMP_21, self = this, $iter = TMP_Target_on_19.$$p, block = $iter || nil, delegate = nil, pair = nil, $writer = nil, callback = nil;

          if (selector == null) {
            selector = nil;
          }
          if ($iter) TMP_Target_on_19.$$p = null;
          
          if ($truthy(block)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block has been given")
          };
          name = Opal.const_get_relative($nesting, 'Event').$name_for(name);
          if ($truthy(selector)) {
            if ($truthy((delegate = self.$delegated()['$[]'](name)))) {
              
              pair = [selector, block];
              delegate.$handlers()['$<<'](pair);
              return Opal.const_get_relative($nesting, 'Delegate').$new(self, name, pair);
              } else {
              
              delegate = (($writer = [name, Opal.const_get_relative($nesting, 'Delegates').$new()]), $send(self.$delegated(), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              if ($truthy(["blur", "focus"]['$include?'](name))) {
                
                $writer = [$send(self, 'on!', [name], (TMP_20 = function(e){var self = TMP_20.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20))];
                $send(delegate, 'callback=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
                } else {
                
                $writer = [$send(self, 'on', [name], (TMP_21 = function(e){var self = TMP_21.$$s || this;
if (e == null) e = nil;
                return self.$delegate(delegate, e)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21))];
                $send(delegate, 'callback=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };
              pair = [selector, block];
              
              $writer = [[pair]];
              $send(delegate, 'handlers=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return Opal.const_get_relative($nesting, 'Delegate').$new(self, name, pair);
            }
            } else {
            
            callback = $send(Opal.const_get_relative($nesting, 'Callback'), 'new', [self, name, selector], block.$to_proc());
            self.$callbacks().$push(callback);
            return self.$attach(callback);
          };
        }, TMP_Target_on_19.$$arity = -2);
        
        Opal.defn(self, '$on!', TMP_Target_on$B_22 = function(name) {
          var self = this, $iter = TMP_Target_on$B_22.$$p, block = $iter || nil, callback = nil;

          if ($iter) TMP_Target_on$B_22.$$p = null;
          
          if ($truthy(block)) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block has been given")
          };
          name = Opal.const_get_relative($nesting, 'Event').$name_for(name);
          callback = $send(Opal.const_get_relative($nesting, 'Callback'), 'new', [self, name], block.$to_proc());
          self.$callbacks().$push(callback);
          return self['$attach!'](callback);
        }, TMP_Target_on$B_22.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.addListener"))) {
          
          
          Opal.defn(self, '$attach', TMP_Target_attach_23 = function $$attach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            self["native"].addEventListener(callback.$name(), callback.$to_proc());
            return callback;
          }, TMP_Target_attach_23.$$arity = 1);
          
          Opal.defn(self, '$attach!', TMP_Target_attach$B_24 = function(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            self["native"].addEventListener(callback.$name(), callback.$to_proc(), true);
            return callback;
          }, TMP_Target_attach$B_24.$$arity = 1);
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.attach"))) {
          
          
          Opal.defn(self, '$attach', TMP_Target_attach_25 = function $$attach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            
            if (callback.$event()['$=='](Opal.const_get_relative($nesting, 'Custom'))) {
              
            if (!self["native"].$custom) {
              self["native"].$custom = function(event) {
                for (var i = 0, length = self["native"].$callbacks.length; i < length; i++) {
                  var callback = self["native"].$callbacks[i];

                  if ((callback).$event()['$=='](Opal.const_get_relative($nesting, 'Custom'))) {
                    event.type = callback.name;

                    (callback).$call(event);
                  }
                }
              };

              self["native"].attachEvent("ondataavailable", self["native"].$custom);
            }
          
              } else {
              self["native"].attachEvent("on" + callback.$name(), callback.$to_proc())
            };
            return callback;
          }, TMP_Target_attach_25.$$arity = 1);
          
          Opal.defn(self, '$attach!', TMP_Target_attach$B_26 = function(callback) {
            var self = this, $case = nil;
            if (self["native"] == null) self["native"] = nil;

            
            $case = callback.$name();
            if ("blur"['$===']($case)) {self["native"].attachEvent("onfocusout", callback.$to_proc())}
            else if ("focus"['$===']($case)) {self["native"].attachEvent("onfocusin", callback.$to_proc())}
            else {
            self.$warn("attach: capture doesn't work on this browser");
            self.$attach(callback);};
            return callback;
          }, TMP_Target_attach$B_26.$$arity = 1);
          } else {
          
          
          Opal.defn(self, '$attach', TMP_Target_attach_27 = function $$attach($a_rest) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
          }, TMP_Target_attach_27.$$arity = -1);
          
          Opal.defn(self, '$attach!', TMP_Target_attach$B_28 = function($a_rest) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
          }, TMP_Target_attach$B_28.$$arity = -1);
        };
        
        Opal.defn(self, '$off', TMP_Target_off_32 = function $$off(what) {
          var $a, TMP_29, TMP_30, TMP_31, self = this, $case = nil;

          if (what == null) {
            what = nil;
          }
          return (function() {$case = what;
          if (Opal.const_get_relative($nesting, 'Callback')['$===']($case)) {
          self.$callbacks().$delete(what);
          return self.$detach(what);}
          else if (Opal.const_get_relative($nesting, 'String')['$===']($case)) {if ($truthy(($truthy($a = what['$include?']("*")) ? $a : what['$include?']("?")))) {
            return self.$off(Opal.const_get_relative($nesting, 'Regexp').$new(what.$gsub(/\*/, ".*?").$gsub(/\?/, ".")))
            } else {
            
            what = Opal.const_get_relative($nesting, 'Event').$name_for(what);
            return $send(self.$callbacks(), 'delete_if', [], (TMP_29 = function(callback){var self = TMP_29.$$s || this;
if (callback == null) callback = nil;
            if (callback.$name()['$=='](what)) {
                
                self.$detach(callback);
                return true;
                } else {
                return nil
              }}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
          }}
          else if (Opal.const_get_relative($nesting, 'Regexp')['$===']($case)) {return $send(self.$callbacks(), 'delete_if', [], (TMP_30 = function(callback){var self = TMP_30.$$s || this;
if (callback == null) callback = nil;
          if ($truthy(callback.$name()['$=~'](what))) {
              
              self.$detach(callback);
              return true;
              } else {
              return nil
            }}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30))}
          else {
          $send(self.$callbacks(), 'each', [], (TMP_31 = function(callback){var self = TMP_31.$$s || this;
if (callback == null) callback = nil;
          return self.$detach(callback)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
          return self.$callbacks().$clear();}})()
        }, TMP_Target_off_32.$$arity = -1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.removeListener"))) {
          
          Opal.defn(self, '$detach', TMP_Target_detach_33 = function $$detach(callback) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].removeEventListener(callback.$name(), callback.$to_proc(), false)
          }, TMP_Target_detach_33.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.detach"))) {
          
          Opal.defn(self, '$detach', TMP_Target_detach_35 = function $$detach(callback) {
            var TMP_34, self = this;
            if (self["native"] == null) self["native"] = nil;

            if (callback.$event()['$=='](Opal.const_get_relative($nesting, 'Custom'))) {
              if ($truthy($send(self.$callbacks(), 'none?', [], (TMP_34 = function(c){var self = TMP_34.$$s || this;
if (c == null) c = nil;
              return c.$event()['$=='](Opal.const_get_relative($nesting, 'Custom'))}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34)))) {
                
              self["native"].detachEvent("ondataavailable", self["native"].$custom);

              delete self["native"].$custom;
            
                } else {
                return nil
              }
              } else {
              return self["native"].detachEvent("on" + callback.$name(), callback.$to_proc())
            }
          }, TMP_Target_detach_35.$$arity = 1)
          } else {
          
          Opal.defn(self, '$detach', TMP_Target_detach_36 = function $$detach(callback) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
          }, TMP_Target_detach_36.$$arity = 1)
        };
        
        Opal.defn(self, '$trigger', TMP_Target_trigger_37 = function $$trigger(event, $a_rest) {
          var self = this, args, $iter = TMP_Target_trigger_37.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Target_trigger_37.$$p = null;
          
          if ($truthy(event['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            event = $send(Opal.const_get_relative($nesting, 'Event'), 'create', [event].concat(Opal.to_a(args)), block.$to_proc())};
          return self.$dispatch(event);
        }, TMP_Target_trigger_37.$$arity = -2);
        
        Opal.defn(self, '$trigger!', TMP_Target_trigger$B_38 = function(event, $a_rest) {
          var TMP_39, self = this, args, $iter = TMP_Target_trigger$B_38.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Target_trigger$B_38.$$p = null;
          return $send(self, 'trigger', [event].concat(Opal.to_a(args)), (TMP_39 = function(e){var self = TMP_39.$$s || this, $writer = nil;
if (e == null) e = nil;
          
            if ($truthy(block)) {
              block.$call(e)};
            
            $writer = [false];
            $send(e, 'bubbles=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39))
        }, TMP_Target_trigger$B_38.$$arity = -2);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.dispatch"))) {
          
          Opal.defn(self, '$dispatch', TMP_Target_dispatch_40 = function $$dispatch(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            return self["native"].dispatchEvent(event.$to_n())
          }, TMP_Target_dispatch_40.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.fire"))) {
          
          Opal.defn(self, '$dispatch', TMP_Target_dispatch_41 = function $$dispatch(event) {
            var self = this;
            if (self["native"] == null) self["native"] = nil;

            if ($truthy(Opal.const_get_relative($nesting, 'Custom')['$==='](event))) {
              return self["native"].fireEvent("ondataavailable", event.$to_n())
              } else {
              return self["native"].fireEvent("on" + event.$name(), event.$to_n())
            }
          }, TMP_Target_dispatch_41.$$arity = 1)
          } else {
          
          Opal.defn(self, '$dispatch', TMP_Target_dispatch_42 = function $$dispatch($a_rest) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
          }, TMP_Target_dispatch_42.$$arity = -1)
        };
        self.$private();
        
        Opal.defn(self, '$callbacks', TMP_Target_callbacks_43 = function $$callbacks() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$callbacks) {
          self["native"].$callbacks = [];
        }

        return self["native"].$callbacks;
      
        }, TMP_Target_callbacks_43.$$arity = 0);
        
        Opal.defn(self, '$delegated', TMP_Target_delegated_44 = function $$delegated() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
        if (!self["native"].$delegated) {
          self["native"].$delegated = $hash2([], {});
        }

        return self["native"].$delegated;
      
        }, TMP_Target_delegated_44.$$arity = 0);
        
        Opal.defn(self, '$delegate', TMP_Target_delegate_46 = function $$delegate(delegates, event, element) {
          var $a, TMP_45, self = this;

          if (element == null) {
            element = event.$target();
          }
          
          if ($truthy(($truthy($a = element['$nil?']()) ? $a : element['$=='](event.$on())))) {
            return nil};
          $send(delegates.$handlers(), 'each', [], (TMP_45 = function(selector, block){var self = TMP_45.$$s || this, new$ = nil, $writer = nil;
if (selector == null) selector = nil;if (block == null) block = nil;
          if ($truthy(element['$=~'](selector))) {
              
              new$ = event.$dup();
              
              $writer = [element];
              $send(new$, 'on=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return $send(block, 'call', [new$].concat(Opal.to_a(new$.$arguments())));
              } else {
              return nil
            }}, TMP_45.$$s = self, TMP_45.$$arity = 2, TMP_45));
          return self.$delegate(delegates, event, element.$parent());
        }, TMP_Target_delegate_46.$$arity = -3);
      })($nesting[0], $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/ui"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $UI(){};
        var self = $UI = $klass($base, $super, 'UI', $UI);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_UI_supported$q_1, TMP_UI_construct_4, TMP_UI_construct_5;

        
        Opal.defs(self, '$supported?', TMP_UI_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.UI")
        }, TMP_UI_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_detail$eq_2, TMP_Definition_view$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$detail=', TMP_Definition_detail$eq_2 = function(value) {
            var self = this;

            return self["native"].detail = value
          }, TMP_Definition_detail$eq_2.$$arity = 1);
          return (Opal.defn(self, '$view=', TMP_Definition_view$eq_3 = function(value) {
            var self = this;

            return self["native"].view = value
          }, TMP_Definition_view$eq_3.$$arity = 1), nil) && 'view=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_UI_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new UIEvent(name, desc)
            }, TMP_UI_construct_4.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_UI_construct_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("UIEvent");
            event.initUIEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0);

        return event;
      
            }, TMP_UI_construct_5.$$arity = 2)}};
        self.$alias_native("detail");
        return self.$alias_native("view");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/mouse"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$include', '$new', '$try_convert', '$supported?', '$supports?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Mouse(){};
        var self = $Mouse = $klass($base, $super, 'Mouse', $Mouse);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Mouse_supported$q_1, TMP_Mouse_construct_29, TMP_Mouse_construct_30, TMP_Mouse_client_31, TMP_Mouse_layer_32, TMP_Mouse_offset_33, TMP_Mouse_page_34, TMP_Mouse_screen_35, TMP_Mouse_ancestor_36, TMP_Mouse_x_37, TMP_Mouse_y_38, TMP_Mouse_related_39, TMP_Mouse_from_40, TMP_Mouse_to_41, TMP_Mouse_click$q_42, TMP_Mouse_double_click$q_43, TMP_Mouse_down$q_44, TMP_Mouse_enter$q_45, TMP_Mouse_leave$q_46, TMP_Mouse_move$q_47, TMP_Mouse_out$q_48, TMP_Mouse_over$q_49, TMP_Mouse_up$q_50, TMP_Mouse_show$q_51;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Mouse_supported$q_1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("MouseEvent")['$nil?']()['$!']()
        }, TMP_Mouse_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_x$eq_14, TMP_Definition_y$eq_15, TMP_Definition_alt$B_16, TMP_Definition_ctrl$B_17, TMP_Definition_meta$B_18, TMP_Definition_button$eq_19, TMP_Definition_client_20, TMP_Definition_layer_21, TMP_Definition_offset_22, TMP_Definition_page_23, TMP_Definition_screen_24, TMP_Definition_ancestor_25, TMP_Definition_related$eq_26, TMP_Definition_from$eq_27, TMP_Definition_to$eq_28;

          def["native"] = nil;
          
          (function($base, $super, $parent_nesting) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Client_x$eq_2, TMP_Client_y$eq_3;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Client_x$eq_2 = function(value) {
              var self = this;

              return self["native"].clientX = value
            }, TMP_Client_x$eq_2.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Client_y$eq_3 = function(value) {
              var self = this;

              return self["native"].clientY = value
            }, TMP_Client_y$eq_3.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Layer(){};
            var self = $Layer = $klass($base, $super, 'Layer', $Layer);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Layer_x$eq_4, TMP_Layer_y$eq_5;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Layer_x$eq_4 = function(value) {
              var self = this;

              return self["native"].layerX = value
            }, TMP_Layer_x$eq_4.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Layer_y$eq_5 = function(value) {
              var self = this;

              return self["native"].layerY = value
            }, TMP_Layer_y$eq_5.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Offset(){};
            var self = $Offset = $klass($base, $super, 'Offset', $Offset);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Offset_x$eq_6, TMP_Offset_y$eq_7;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Offset_x$eq_6 = function(value) {
              var self = this;

              return self["native"].offsetX = value
            }, TMP_Offset_x$eq_6.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Offset_y$eq_7 = function(value) {
              var self = this;

              return self["native"].offsetY= value
            }, TMP_Offset_y$eq_7.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Page(){};
            var self = $Page = $klass($base, $super, 'Page', $Page);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Page_x$eq_8, TMP_Page_y$eq_9;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Page_x$eq_8 = function(value) {
              var self = this;

              return self["native"].pageX = value
            }, TMP_Page_x$eq_8.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Page_y$eq_9 = function(value) {
              var self = this;

              return self["native"].pageY = value
            }, TMP_Page_y$eq_9.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Screen_x$eq_10, TMP_Screen_y$eq_11;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Screen_x$eq_10 = function(value) {
              var self = this;

              return self["native"].screenX = value
            }, TMP_Screen_x$eq_10.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Screen_y$eq_11 = function(value) {
              var self = this;

              return self["native"].screenY = value
            }, TMP_Screen_y$eq_11.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Ancestor(){};
            var self = $Ancestor = $klass($base, $super, 'Ancestor', $Ancestor);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Ancestor_x$eq_12, TMP_Ancestor_y$eq_13;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Ancestor_x$eq_12 = function(value) {
              var self = this;

              return self["native"].x = value
            }, TMP_Ancestor_x$eq_12.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Ancestor_y$eq_13 = function(value) {
              var self = this;

              return self["native"].y = value
            }, TMP_Ancestor_y$eq_13.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          
          Opal.defn(self, '$x=', TMP_Definition_x$eq_14 = function(value) {
            var self = this;

            return self["native"].screenX = value
          }, TMP_Definition_x$eq_14.$$arity = 1);
          
          Opal.defn(self, '$y=', TMP_Definition_y$eq_15 = function(value) {
            var self = this;

            return self["native"].screenY = value
          }, TMP_Definition_y$eq_15.$$arity = 1);
          
          Opal.defn(self, '$alt!', TMP_Definition_alt$B_16 = function() {
            var self = this;

            return self["native"].altKey = true
          }, TMP_Definition_alt$B_16.$$arity = 0);
          
          Opal.defn(self, '$ctrl!', TMP_Definition_ctrl$B_17 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, TMP_Definition_ctrl$B_17.$$arity = 0);
          
          Opal.defn(self, '$meta!', TMP_Definition_meta$B_18 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, TMP_Definition_meta$B_18.$$arity = 0);
          
          Opal.defn(self, '$button=', TMP_Definition_button$eq_19 = function(value) {
            var self = this;

            return self["native"].button = value
          }, TMP_Definition_button$eq_19.$$arity = 1);
          
          Opal.defn(self, '$client', TMP_Definition_client_20 = function $$client() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Client').$new(self["native"])
          }, TMP_Definition_client_20.$$arity = 0);
          
          Opal.defn(self, '$layer', TMP_Definition_layer_21 = function $$layer() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Layer').$new(self["native"])
          }, TMP_Definition_layer_21.$$arity = 0);
          
          Opal.defn(self, '$offset', TMP_Definition_offset_22 = function $$offset() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Offset').$new(self["native"])
          }, TMP_Definition_offset_22.$$arity = 0);
          
          Opal.defn(self, '$page', TMP_Definition_page_23 = function $$page() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Page').$new(self["native"])
          }, TMP_Definition_page_23.$$arity = 0);
          
          Opal.defn(self, '$screen', TMP_Definition_screen_24 = function $$screen() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Screen').$new(self["native"])
          }, TMP_Definition_screen_24.$$arity = 0);
          
          Opal.defn(self, '$ancestor', TMP_Definition_ancestor_25 = function $$ancestor() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Ancestor').$new(self["native"])
          }, TMP_Definition_ancestor_25.$$arity = 0);
          
          Opal.defn(self, '$related=', TMP_Definition_related$eq_26 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = Opal.const_get_relative($nesting, 'Native').$try_convert(elem)
          }, TMP_Definition_related$eq_26.$$arity = 1);
          
          Opal.defn(self, '$from=', TMP_Definition_from$eq_27 = function(elem) {
            var self = this;

            return self["native"].fromElement = Opal.const_get_relative($nesting, 'Native').$try_convert(elem)
          }, TMP_Definition_from$eq_27.$$arity = 1);
          return (Opal.defn(self, '$to=', TMP_Definition_to$eq_28 = function(elem) {
            var self = this;

            return self["native"].toElement = Opal.const_get_relative($nesting, 'Native').$try_convert(elem)
          }, TMP_Definition_to$eq_28.$$arity = 1), nil) && 'to=';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Mouse_construct_29 = function $$construct(name, desc) {
              var self = this;

              return new MouseEvent(name, desc)
            }, TMP_Mouse_construct_29.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Mouse_construct_30 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MouseEvent");
            event.initMouseEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.detail || 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey || false, desc.altKey || false,
              desc.shiftKey || false, desc.metaKey || false,
              desc.button || 0, desc.relatedTarget || null);

        return event;
      
            }, TMP_Mouse_construct_30.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("button");
        
        Opal.defn(self, '$client', TMP_Mouse_client_31 = function $$client() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Position').$new(self["native"].clientX, self["native"].clientY)
        }, TMP_Mouse_client_31.$$arity = 0);
        
        Opal.defn(self, '$layer', TMP_Mouse_layer_32 = function $$layer() {
          var self = this;

          if ($truthy(self["native"].layerX == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].layerX, self["native"].layerY)
          }
        }, TMP_Mouse_layer_32.$$arity = 0);
        
        Opal.defn(self, '$offset', TMP_Mouse_offset_33 = function $$offset() {
          var self = this;

          if ($truthy(self["native"].offsetX == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].offsetX, self["native"].offsetY)
          }
        }, TMP_Mouse_offset_33.$$arity = 0);
        
        Opal.defn(self, '$page', TMP_Mouse_page_34 = function $$page() {
          var self = this;

          if ($truthy(self["native"].pageX == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].pageX, self["native"].pageY)
          }
        }, TMP_Mouse_page_34.$$arity = 0);
        
        Opal.defn(self, '$screen', TMP_Mouse_screen_35 = function $$screen() {
          var self = this;

          if ($truthy(self["native"].screenX == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].screenX, self["native"].screenY)
          }
        }, TMP_Mouse_screen_35.$$arity = 0);
        
        Opal.defn(self, '$ancestor', TMP_Mouse_ancestor_36 = function $$ancestor() {
          var self = this;

          if ($truthy(self["native"].x == null)) {
            return nil
            } else {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].x, self["native"].y)
          }
        }, TMP_Mouse_ancestor_36.$$arity = 0);
        
        Opal.defn(self, '$x', TMP_Mouse_x_37 = function $$x() {
          var self = this;

          return self.$screen().$x()
        }, TMP_Mouse_x_37.$$arity = 0);
        
        Opal.defn(self, '$y', TMP_Mouse_y_38 = function $$y() {
          var self = this;

          return self.$screen().$y()
        }, TMP_Mouse_y_38.$$arity = 0);
        
        Opal.defn(self, '$related', TMP_Mouse_related_39 = function $$related() {
          var self = this;

          if ($truthy(self["native"].relatedTarget == null)) {
            return nil
            } else {
            return self.$DOM(self["native"].relatedTarget)
          }
        }, TMP_Mouse_related_39.$$arity = 0);
        
        Opal.defn(self, '$from', TMP_Mouse_from_40 = function $$from() {
          var self = this;

          if ($truthy(self["native"].fromElement == null)) {
            return nil
            } else {
            return self.$DOM(self["native"].fromElement)
          }
        }, TMP_Mouse_from_40.$$arity = 0);
        
        Opal.defn(self, '$to', TMP_Mouse_to_41 = function $$to() {
          var self = this;

          if ($truthy(self["native"].toElement == null)) {
            return nil
            } else {
            return self.$DOM(self["native"].toElement)
          }
        }, TMP_Mouse_to_41.$$arity = 0);
        
        Opal.defn(self, '$click?', TMP_Mouse_click$q_42 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("click")
        }, TMP_Mouse_click$q_42.$$arity = 0);
        
        Opal.defn(self, '$double_click?', TMP_Mouse_double_click$q_43 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("dblclick")
        }, TMP_Mouse_double_click$q_43.$$arity = 0);
        
        Opal.defn(self, '$down?', TMP_Mouse_down$q_44 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousedown")
        }, TMP_Mouse_down$q_44.$$arity = 0);
        
        Opal.defn(self, '$enter?', TMP_Mouse_enter$q_45 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseenter")
        }, TMP_Mouse_enter$q_45.$$arity = 0);
        
        Opal.defn(self, '$leave?', TMP_Mouse_leave$q_46 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseleave")
        }, TMP_Mouse_leave$q_46.$$arity = 0);
        
        Opal.defn(self, '$move?', TMP_Mouse_move$q_47 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mousemove")
        }, TMP_Mouse_move$q_47.$$arity = 0);
        
        Opal.defn(self, '$out?', TMP_Mouse_out$q_48 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseout")
        }, TMP_Mouse_out$q_48.$$arity = 0);
        
        Opal.defn(self, '$over?', TMP_Mouse_over$q_49 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseover")
        }, TMP_Mouse_over$q_49.$$arity = 0);
        
        Opal.defn(self, '$up?', TMP_Mouse_up$q_50 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("mouseup")
        }, TMP_Mouse_up$q_50.$$arity = 0);
        return (Opal.defn(self, '$show?', TMP_Mouse_show$q_51 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("show")
        }, TMP_Mouse_show$q_51.$$arity = 0), nil) && 'show?';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/keyboard"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$code', '$chr', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Keyboard(){};
        var self = $Keyboard = $klass($base, $super, 'Keyboard', $Keyboard);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Keyboard_supported$q_1, TMP_Keyboard_construct_11, TMP_Keyboard_construct_12, TMP_Keyboard_key_13, TMP_Keyboard_code_14, TMP_Keyboard_char_15, TMP_Keyboard_down$q_16, TMP_Keyboard_press$q_17, TMP_Keyboard_up$q_18;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Keyboard_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Keyboard")
        }, TMP_Keyboard_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_alt$B_2, TMP_Definition_ctrl$B_3, TMP_Definition_meta$B_4, TMP_Definition_shift$B_5, TMP_Definition_code$eq_6, TMP_Definition_key$eq_7, TMP_Definition_char$eq_8, TMP_Definition_repeat$B_9, TMP_Definition_locale$eq_10;

          def["native"] = nil;
          
          
          Opal.defn(self, '$alt!', TMP_Definition_alt$B_2 = function() {
            var self = this;

            return self["native"].altKey = true
          }, TMP_Definition_alt$B_2.$$arity = 0);
          
          Opal.defn(self, '$ctrl!', TMP_Definition_ctrl$B_3 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, TMP_Definition_ctrl$B_3.$$arity = 0);
          
          Opal.defn(self, '$meta!', TMP_Definition_meta$B_4 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, TMP_Definition_meta$B_4.$$arity = 0);
          
          Opal.defn(self, '$shift!', TMP_Definition_shift$B_5 = function() {
            var self = this;

            return self["native"].shiftKey = true
          }, TMP_Definition_shift$B_5.$$arity = 0);
          
          Opal.defn(self, '$code=', TMP_Definition_code$eq_6 = function(code) {
            var self = this;

            return self["native"].keyCode = self["native"].which = code
          }, TMP_Definition_code$eq_6.$$arity = 1);
          
          Opal.defn(self, '$key=', TMP_Definition_key$eq_7 = function(key) {
            var self = this;

            return self["native"].key = key
          }, TMP_Definition_key$eq_7.$$arity = 1);
          
          Opal.defn(self, '$char=', TMP_Definition_char$eq_8 = function(char$) {
            var self = this;

            return self["native"].char = self["native"].charCode = char$
          }, TMP_Definition_char$eq_8.$$arity = 1);
          
          Opal.defn(self, '$repeat!', TMP_Definition_repeat$B_9 = function() {
            var self = this;

            return self["native"].repeat = true
          }, TMP_Definition_repeat$B_9.$$arity = 0);
          return (Opal.defn(self, '$locale=', TMP_Definition_locale$eq_10 = function(value) {
            var self = this;

            return self["native"].locale = value
          }, TMP_Definition_locale$eq_10.$$arity = 1), nil) && 'locale=';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Keyboard_construct_11 = function $$construct(name, desc) {
              var self = this;

              return new KeyboardEvent(name, desc)
            }, TMP_Keyboard_construct_11.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Keyboard_construct_12 = function $$construct(name, desc) {
              var self = this;

              
        var modifiers = "";

        if (desc.altKey) {
          modifiers += "Alt ";
        }

        if (desc.ctrlKey) {
          modifiers += "Ctrl ";
        }

        if (desc.shiftKey) {
          modifiers += "Shift" ;
        }

        if (desc.metaKey) {
          modifiers += "Meta ";
        }

        var event = document.createEvent("KeyboardEvent");
            event.initKeyboardEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.which, 0,
              modifiers, desc.repeat, desc.locale);

        return event;
      
            }, TMP_Keyboard_construct_12.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("locale");
        self.$alias_native("repeat?", "repeat");
        
        Opal.defn(self, '$key', TMP_Keyboard_key_13 = function $$key() {
          var self = this;

          return self["native"].key || self["native"].keyIdentifier || nil
        }, TMP_Keyboard_key_13.$$arity = 0);
        
        Opal.defn(self, '$code', TMP_Keyboard_code_14 = function $$code() {
          var self = this;

          return self["native"].keyCode || self["native"].which || nil
        }, TMP_Keyboard_code_14.$$arity = 0);
        
        Opal.defn(self, '$char', TMP_Keyboard_char_15 = function() {
          var self = this;

          return self["native"].char || self["native"].charCode || (function() {if ($truthy(self.$code())) {
            return self.$code().$chr()
            } else {
            return nil
          }; return nil; })()
        }, TMP_Keyboard_char_15.$$arity = 0);
        Opal.alias(self, "to_i", "key");
        
        Opal.defn(self, '$down?', TMP_Keyboard_down$q_16 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keydown")
        }, TMP_Keyboard_down$q_16.$$arity = 0);
        
        Opal.defn(self, '$press?', TMP_Keyboard_press$q_17 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keypress")
        }, TMP_Keyboard_press$q_17.$$arity = 0);
        return (Opal.defn(self, '$up?', TMP_Keyboard_up$q_18 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("keyup")
        }, TMP_Keyboard_up$q_18.$$arity = 0), nil) && 'up?';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/focus"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$convert', '$supported?', '$DOM']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Focus(){};
        var self = $Focus = $klass($base, $super, 'Focus', $Focus);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Focus_supported$q_1, TMP_Focus_construct_4, TMP_Focus_construct_5, TMP_Focus_related_6;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Focus_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Focus")
        }, TMP_Focus_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_view$eq_2, TMP_Definition_related$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$view=', TMP_Definition_view$eq_2 = function(value) {
            var self = this;

            return self["native"].view = Opal.const_get_relative($nesting, 'Native').$convert(value)
          }, TMP_Definition_view$eq_2.$$arity = 1);
          return (Opal.defn(self, '$related=', TMP_Definition_related$eq_3 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = Opal.const_get_relative($nesting, 'Native').$convert(elem)
          }, TMP_Definition_related$eq_3.$$arity = 1), nil) && 'related=';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Focus_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new FocusEvent(name, desc)
            }, TMP_Focus_construct_4.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Focus_construct_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("FocusEvent");
            event.initFocusEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0, desc.relatedTarget);

        return event;
      
            }, TMP_Focus_construct_5.$$arity = 2)}};
        return (Opal.defn(self, '$related', TMP_Focus_related_6 = function $$related() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget)
        }, TMP_Focus_related_6.$$arity = 0), nil) && 'related';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/wheel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$!', '$nil?', '$[]', '$===', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Wheel(){};
        var self = $Wheel = $klass($base, $super, 'Wheel', $Wheel);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Wheel_supported$q_1, TMP_Wheel_construct_6, TMP_Wheel_mode_7;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Wheel_supported$q_1 = function() {
          var self = this;
          if ($gvars.$ == null) $gvars.$ = nil;

          return $gvars.$['$[]']("WheelEvent")['$nil?']()['$!']()
        }, TMP_Wheel_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_x$eq_2, TMP_Definition_y$eq_3, TMP_Definition_z$eq_4, TMP_Definition_mode$eq_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$x=', TMP_Definition_x$eq_2 = function(value) {
            var self = this;

            return self["native"].deltaX = value
          }, TMP_Definition_x$eq_2.$$arity = 1);
          
          Opal.defn(self, '$y=', TMP_Definition_y$eq_3 = function(value) {
            var self = this;

            return self["native"].deltaY = value
          }, TMP_Definition_y$eq_3.$$arity = 1);
          
          Opal.defn(self, '$z=', TMP_Definition_z$eq_4 = function(value) {
            var self = this;

            return self["native"].deltaZ = value
          }, TMP_Definition_z$eq_4.$$arity = 1);
          return (Opal.defn(self, '$mode=', TMP_Definition_mode$eq_5 = function(value) {
            var self = this, $case = nil;

            
            value = (function() {$case = value;
            if ("pixel"['$===']($case)) {return WheelEvent.DOM_DELTA_PIXEL}
            else if ("line"['$===']($case)) {return WheelEvent.DOM_DELTA_LINE}
            else if ("page"['$===']($case)) {return WheelEvent.DOM_DELTA_PAGE}
            else { return nil }})();
            return self["native"].deltaMode = value;
          }, TMP_Definition_mode$eq_5.$$arity = 1), nil) && 'mode=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        Opal.defs(self, '$construct', TMP_Wheel_construct_6 = function $$construct(name, desc) {
          var self = this;

          return new WheelEvent(name, desc)
        }, TMP_Wheel_construct_6.$$arity = 2);
        self.$alias_native("x", "deltaX");
        self.$alias_native("y", "deltaY");
        self.$alias_native("z", "deltaZ");
        return (Opal.defn(self, '$mode', TMP_Wheel_mode_7 = function $$mode() {
          var self = this, $case = nil;

          return (function() {$case = self["native"].deltaMode;
          if ((WheelEvent.DOM_DELTA_PIXEL)['$===']($case)) {return "pixel"}
          else if ((WheelEvent.DOM_DELTA_LINE)['$===']($case)) {return "line"}
          else if ((WheelEvent.DOM_DELTA_PAGE)['$===']($case)) {return "page"}
          else { return nil }})()
        }, TMP_Wheel_mode_7.$$arity = 0), nil) && 'mode';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/composition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Composition(){};
        var self = $Composition = $klass($base, $super, 'Composition', $Composition);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Composition_supported$q_1, TMP_Composition_construct_4, TMP_Composition_construct_5, TMP_Composition_start$q_6, TMP_Composition_update$q_7, TMP_Composition_end$q_8;

        
        Opal.defs(self, '$supported?', TMP_Composition_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Composition")
        }, TMP_Composition_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_data$eq_2, TMP_Definition_locale$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$data=', TMP_Definition_data$eq_2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, TMP_Definition_data$eq_2.$$arity = 1);
          return (Opal.defn(self, '$locale=', TMP_Definition_locale$eq_3 = function(value) {
            var self = this;

            return self["native"].locale = value
          }, TMP_Definition_locale$eq_3.$$arity = 1), nil) && 'locale=';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'UI'), 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Composition_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new CompositionEvent(name, desc)
            }, TMP_Composition_construct_4.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Composition_construct_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CompositionEvent");
            event.initCompositionEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, desc.data, desc.locale);

        return event;
      
            }, TMP_Composition_construct_5.$$arity = 2)}};
        self.$alias_native("data");
        self.$alias_native("locale");
        
        Opal.defn(self, '$start?', TMP_Composition_start$q_6 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionstart")
        }, TMP_Composition_start$q_6.$$arity = 0);
        
        Opal.defn(self, '$update?', TMP_Composition_update$q_7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionupdate")
        }, TMP_Composition_update$q_7.$$arity = 0);
        return (Opal.defn(self, '$end?', TMP_Composition_end$q_8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("compositionend")
        }, TMP_Composition_end$q_8.$$arity = 0), nil) && 'end?';
      })($nesting[0], Opal.const_get_relative($nesting, 'UI'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/animation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Animation(){};
        var self = $Animation = $klass($base, $super, 'Animation', $Animation);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Animation_supported$q_1, TMP_Animation_construct_4, TMP_Animation_construct_5;

        
        Opal.defs(self, '$supported?', TMP_Animation_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Animation")
        }, TMP_Animation_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_animation$eq_2, TMP_Definition_elapsed$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$animation=', TMP_Definition_animation$eq_2 = function(value) {
            var self = this;

            return self["native"].animationName = value
          }, TMP_Definition_animation$eq_2.$$arity = 1);
          return (Opal.defn(self, '$elapsed=', TMP_Definition_elapsed$eq_3 = function(value) {
            var self = this;

            return self["native"].elapsedTime = value
          }, TMP_Definition_elapsed$eq_3.$$arity = 1), nil) && 'elapsed=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Animation_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new AnimationEvent(name, desc)
            }, TMP_Animation_construct_4.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Animation_construct_5 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("AnimationEvent");
            event.initAnimationEvent(name, desc.bubbles, desc.cancelable,
              desc.animationName, desc.elapsedTime);

        return event;
      
            }, TMP_Animation_construct_5.$$arity = 2)}};
        self.$alias_native("name", "animationName");
        return self.$alias_native("elapsed", "elapsedTime");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/audio_processing"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $AudioProcessing(){};
        var self = $AudioProcessing = $klass($base, $super, 'AudioProcessing', $AudioProcessing);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AudioProcessing_supported$q_1, TMP_AudioProcessing_construct_5;

        
        Opal.defs(self, '$supported?', TMP_AudioProcessing_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.AudioProcessing")
        }, TMP_AudioProcessing_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_time$eq_2, TMP_Definition_input$eq_3, TMP_Definition_output$eq_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$time=', TMP_Definition_time$eq_2 = function(value) {
            var self = this;

            return self["native"].playbackTime = value
          }, TMP_Definition_time$eq_2.$$arity = 1);
          
          Opal.defn(self, '$input=', TMP_Definition_input$eq_3 = function(value) {
            var self = this;

            return self["native"].inputBuffer = value
          }, TMP_Definition_input$eq_3.$$arity = 1);
          return (Opal.defn(self, '$output=', TMP_Definition_output$eq_4 = function(value) {
            var self = this;

            return self["native"].outputBuffer = value
          }, TMP_Definition_output$eq_4.$$arity = 1), nil) && 'output=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_AudioProcessing_construct_5 = function $$construct(name, desc) {
              var self = this;

              return new AudioProcessingEvent(name, desc)
            }, TMP_AudioProcessing_construct_5.$$arity = 2)}};
        self.$alias_native("time", "playbackTime");
        self.$alias_native("input", "inputBuffer");
        return self.$alias_native("output", "outputBuffer");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/before_unload"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $BeforeUnload(){};
        var self = $BeforeUnload = $klass($base, $super, 'BeforeUnload', $BeforeUnload);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BeforeUnload_supported$q_1, TMP_BeforeUnload_construct_2;

        
        Opal.defs(self, '$supported?', TMP_BeforeUnload_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.BeforeUnload")
        }, TMP_BeforeUnload_supported$q_1.$$arity = 0);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            return Opal.defs(self, '$construct', TMP_BeforeUnload_construct_2 = function $$construct(name, desc) {
              var self = this;

              return new BeforeUnloadEvent(name, desc)
            }, TMP_BeforeUnload_construct_2.$$arity = 2)
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/clipboard"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Clipboard(){};
        var self = $Clipboard = $klass($base, $super, 'Clipboard', $Clipboard);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Clipboard_supported$q_1, TMP_Clipboard_construct_4;

        
        Opal.defs(self, '$supported?', TMP_Clipboard_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Clipboard")
        }, TMP_Clipboard_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_data$eq_2, TMP_Definition_type$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$data=', TMP_Definition_data$eq_2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, TMP_Definition_data$eq_2.$$arity = 1);
          return (Opal.defn(self, '$type=', TMP_Definition_type$eq_3 = function(value) {
            var self = this;

            return self["native"].dataType = value
          }, TMP_Definition_type$eq_3.$$arity = 1), nil) && 'type=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Clipboard_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new ClipboardEvent(name, desc)
            }, TMP_Clipboard_construct_4.$$arity = 2)}};
        self.$alias_native("data");
        return self.$alias_native("type", "dataType");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/device_light"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DeviceLight(){};
        var self = $DeviceLight = $klass($base, $super, 'DeviceLight', $DeviceLight);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DeviceLight_supported$q_1, TMP_DeviceLight_construct_3;

        
        Opal.defs(self, '$supported?', TMP_DeviceLight_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.DeviceLight")
        }, TMP_DeviceLight_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_value$eq_2;

          def["native"] = nil;
          return (Opal.defn(self, '$value=', TMP_Definition_value$eq_2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, TMP_Definition_value$eq_2.$$arity = 1), nil) && 'value='
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_DeviceLight_construct_3 = function $$construct(name, desc) {
              var self = this;

              return new DeviceLightEvent(name, desc)
            }, TMP_DeviceLight_construct_3.$$arity = 2)}};
        return self.$alias_native("value");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/device_motion"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$new', '$to_n', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DeviceMotion(){};
        var self = $DeviceMotion = $klass($base, $super, 'DeviceMotion', $DeviceMotion);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DeviceMotion_supported$q_1, TMP_DeviceMotion_construct_6, TMP_DeviceMotion_construct_7;

        
        Opal.defs(self, '$supported?', TMP_DeviceMotion_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.DeviceMotion")
        }, TMP_DeviceMotion_supported$q_1.$$arity = 0);
        Opal.const_set($nesting[0], 'Acceleration', Opal.const_get_relative($nesting, 'Struct').$new("x", "y", "z"));
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_acceleration$eq_2, TMP_Definition_acceleration_with_gravity$eq_3, TMP_Definition_rotation$eq_4, TMP_Definition_interval$eq_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$acceleration=', TMP_Definition_acceleration$eq_2 = function(value) {
            var self = this;

            return self["native"].acceleration = value.$to_n()
          }, TMP_Definition_acceleration$eq_2.$$arity = 1);
          
          Opal.defn(self, '$acceleration_with_gravity=', TMP_Definition_acceleration_with_gravity$eq_3 = function(value) {
            var self = this;

            return self["native"].accelerationIncludingGravity = value.$to_n()
          }, TMP_Definition_acceleration_with_gravity$eq_3.$$arity = 1);
          
          Opal.defn(self, '$rotation=', TMP_Definition_rotation$eq_4 = function(value) {
            var self = this;

            return self["native"].rotationRate = value
          }, TMP_Definition_rotation$eq_4.$$arity = 1);
          return (Opal.defn(self, '$interval=', TMP_Definition_interval$eq_5 = function(value) {
            var self = this;

            return self["native"].interval = value
          }, TMP_Definition_interval$eq_5.$$arity = 1), nil) && 'interval=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_DeviceMotion_construct_6 = function $$construct(name, desc) {
              var self = this;

              return new DeviceMotionEvent(name, desc)
            }, TMP_DeviceMotion_construct_6.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_DeviceMotion_construct_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceMotionEvent");
            event.initDeviceMotionEvent(name, desc.bubbles, desc.cancelable,
              desc.acceleration, desc.accelerationIncludingGravity,
              desc.rotationRate, desc.interval);

        return event;
      
            }, TMP_DeviceMotion_construct_7.$$arity = 2)}};
        self.$alias_native("acceleration");
        self.$alias_native("acceleration_with_gravity", "accelerationIncludingGravity");
        self.$alias_native("rotation", "rotationRate");
        return self.$alias_native("interval");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/device_orientation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DeviceOrientation(){};
        var self = $DeviceOrientation = $klass($base, $super, 'DeviceOrientation', $DeviceOrientation);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DeviceOrientation_supported$q_1, TMP_DeviceOrientation_construct_6, TMP_DeviceOrientation_construct_7;

        
        Opal.defs(self, '$supported?', TMP_DeviceOrientation_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.DeviceOrientation")
        }, TMP_DeviceOrientation_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_absolute$eq_2, TMP_Definition_alpha$eq_3, TMP_Definition_beta$eq_4, TMP_Definition_gamma$eq_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$absolute=', TMP_Definition_absolute$eq_2 = function(value) {
            var self = this;

            return self["native"].absolute = value
          }, TMP_Definition_absolute$eq_2.$$arity = 1);
          
          Opal.defn(self, '$alpha=', TMP_Definition_alpha$eq_3 = function(value) {
            var self = this;

            return self["native"].alpha = value
          }, TMP_Definition_alpha$eq_3.$$arity = 1);
          
          Opal.defn(self, '$beta=', TMP_Definition_beta$eq_4 = function(value) {
            var self = this;

            return self["native"].beta = value
          }, TMP_Definition_beta$eq_4.$$arity = 1);
          return (Opal.defn(self, '$gamma=', TMP_Definition_gamma$eq_5 = function(value) {
            var self = this;

            return self["native"].gamma = value
          }, TMP_Definition_gamma$eq_5.$$arity = 1), nil) && 'gamma=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_DeviceOrientation_construct_6 = function $$construct(name, desc) {
              var self = this;

              return new DeviceOrientationEvent(name, desc)
            }, TMP_DeviceOrientation_construct_6.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_DeviceOrientation_construct_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DeviceOrientationEvent");
            event.initDeviceOrientationEvent(name, desc.bubbles, desc.cancelable,
              desc.alpha, desc.beta, desc.gamma, desc.absolute);

        return event;
      
            }, TMP_DeviceOrientation_construct_7.$$arity = 2)}};
        self.$alias_native("absolute");
        self.$alias_native("alpha");
        self.$alias_native("beta");
        return self.$alias_native("gamma");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/device_proximity"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $DeviceProximity(){};
        var self = $DeviceProximity = $klass($base, $super, 'DeviceProximity', $DeviceProximity);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DeviceProximity_supported$q_1, TMP_DeviceProximity_construct_5;

        
        Opal.defs(self, '$supported?', TMP_DeviceProximity_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.DeviceProximity")
        }, TMP_DeviceProximity_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_value$eq_2, TMP_Definition_min$eq_3, TMP_Definition_max$eq_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$value=', TMP_Definition_value$eq_2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, TMP_Definition_value$eq_2.$$arity = 1);
          
          Opal.defn(self, '$min=', TMP_Definition_min$eq_3 = function(value) {
            var self = this;

            return self["native"].min = value
          }, TMP_Definition_min$eq_3.$$arity = 1);
          return (Opal.defn(self, '$max=', TMP_Definition_max$eq_4 = function(value) {
            var self = this;

            return self["native"].max = value
          }, TMP_Definition_max$eq_4.$$arity = 1), nil) && 'max=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_DeviceProximity_construct_5 = function $$construct(name, desc) {
              var self = this;

              return new DeviceProximityEvent(name, desc)
            }, TMP_DeviceProximity_construct_5.$$arity = 2)}};
        self.$alias_native("value");
        self.$alias_native("min");
        return self.$alias_native("max");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/drag"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$include', '$new', '$convert', '$elem', '$supported?', '$alias_native', '$x', '$screen', '$y', '$DOM', '$raise']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Drag(){};
        var self = $Drag = $klass($base, $super, 'Drag', $Drag);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Drag_supported$q_1, TMP_Drag_construct_14, TMP_Drag_construct_15, TMP_Drag_client_16, TMP_Drag_screen_17, TMP_Drag_x_18, TMP_Drag_y_19, TMP_Drag_related_20, TMP_Drag_transfer_21;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Drag_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Drag")
        }, TMP_Drag_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_alt$B_6, TMP_Definition_ctrl$B_7, TMP_Definition_meta$B_8, TMP_Definition_button$eq_9, TMP_Definition_client_10, TMP_Definition_screen_11, TMP_Definition_related$eq_12, TMP_Definition_transfer$eq_13;

          def["native"] = nil;
          
          (function($base, $super, $parent_nesting) {
            function $Client(){};
            var self = $Client = $klass($base, $super, 'Client', $Client);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Client_x$eq_2, TMP_Client_y$eq_3;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Client_x$eq_2 = function(value) {
              var self = this;

              return self["native"].clientX = value
            }, TMP_Client_x$eq_2.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Client_y$eq_3 = function(value) {
              var self = this;

              return self["native"].clientY = value
            }, TMP_Client_y$eq_3.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          (function($base, $super, $parent_nesting) {
            function $Screen(){};
            var self = $Screen = $klass($base, $super, 'Screen', $Screen);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Screen_x$eq_4, TMP_Screen_y$eq_5;

            def["native"] = nil;
            
            self.$include(Opal.const_get_relative($nesting, 'Native'));
            
            Opal.defn(self, '$x=', TMP_Screen_x$eq_4 = function(value) {
              var self = this;

              return self["native"].screenX = value
            }, TMP_Screen_x$eq_4.$$arity = 1);
            return (Opal.defn(self, '$y=', TMP_Screen_y$eq_5 = function(value) {
              var self = this;

              return self["native"].screenY = value
            }, TMP_Screen_y$eq_5.$$arity = 1), nil) && 'y=';
          })($nesting[0], null, $nesting);
          
          Opal.defn(self, '$alt!', TMP_Definition_alt$B_6 = function() {
            var self = this;

            return self["native"].altKey = true
          }, TMP_Definition_alt$B_6.$$arity = 0);
          
          Opal.defn(self, '$ctrl!', TMP_Definition_ctrl$B_7 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, TMP_Definition_ctrl$B_7.$$arity = 0);
          
          Opal.defn(self, '$meta!', TMP_Definition_meta$B_8 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, TMP_Definition_meta$B_8.$$arity = 0);
          
          Opal.defn(self, '$button=', TMP_Definition_button$eq_9 = function(value) {
            var self = this;

            return self["native"].button = value
          }, TMP_Definition_button$eq_9.$$arity = 1);
          
          Opal.defn(self, '$client', TMP_Definition_client_10 = function $$client() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Client').$new(self["native"])
          }, TMP_Definition_client_10.$$arity = 0);
          
          Opal.defn(self, '$screen', TMP_Definition_screen_11 = function $$screen() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Screen').$new(self["native"])
          }, TMP_Definition_screen_11.$$arity = 0);
          
          Opal.defn(self, '$related=', TMP_Definition_related$eq_12 = function(elem) {
            var self = this;

            return self["native"].relatedTarget = Opal.const_get_relative($nesting, 'Native').$convert(elem)
          }, TMP_Definition_related$eq_12.$$arity = 1);
          return (Opal.defn(self, '$transfer=', TMP_Definition_transfer$eq_13 = function(value) {
            var self = this;

            return self["native"].dataTransfer = Opal.const_get_relative($nesting, 'Native').$convert(self.$elem())
          }, TMP_Definition_transfer$eq_13.$$arity = 1), nil) && 'transfer=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Drag_construct_14 = function $$construct(name, desc) {
              var self = this;

              return new DragEvent(name, desc)
            }, TMP_Drag_construct_14.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Drag_construct_15 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("DragEvent");
            event.initDragEvent(name, desc.bubbles, desc.cancelable,
              desc.view || window, 0,
              desc.screenX || 0, desc.screenY || 0,
              desc.clientX || 0, desc.clientY || 0,
              desc.ctrlKey, desc.altKey, desc.shiftKey, desc.metaKey,
              desc.button || 0, desc.relatedTarget, desc.dataTransfer);

        return event;
      
            }, TMP_Drag_construct_15.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        self.$alias_native("button");
        
        Opal.defn(self, '$client', TMP_Drag_client_16 = function $$client() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Position').$new(self["native"].clientX, self["native"].clientY)
        }, TMP_Drag_client_16.$$arity = 0);
        
        Opal.defn(self, '$screen', TMP_Drag_screen_17 = function $$screen() {
          var self = this;

          if ($truthy((typeof(self["native"].screenX) !== "undefined"))) {
            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].screenX, self["native"].screenY)
            } else {
            return nil
          }
        }, TMP_Drag_screen_17.$$arity = 0);
        
        Opal.defn(self, '$x', TMP_Drag_x_18 = function $$x() {
          var self = this;

          return self.$screen().$x()
        }, TMP_Drag_x_18.$$arity = 0);
        
        Opal.defn(self, '$y', TMP_Drag_y_19 = function $$y() {
          var self = this;

          return self.$screen().$y()
        }, TMP_Drag_y_19.$$arity = 0);
        
        Opal.defn(self, '$related', TMP_Drag_related_20 = function $$related() {
          var self = this;

          return self.$DOM(self["native"].relatedTarget)
        }, TMP_Drag_related_20.$$arity = 0);
        return (Opal.defn(self, '$transfer', TMP_Drag_transfer_21 = function $$transfer() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Drag_transfer_21.$$arity = 0), nil) && 'transfer';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/gamepad"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Gamepad(){};
        var self = $Gamepad = $klass($base, $super, 'Gamepad', $Gamepad);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Gamepad_supported$q_1, TMP_Gamepad_construct_7, TMP_Gamepad_id_8, TMP_Gamepad_index_9, TMP_Gamepad_at_10, TMP_Gamepad_axes_11, TMP_Gamepad_buttons_12;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Gamepad_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Gamepad")
        }, TMP_Gamepad_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_id$eq_2, TMP_Definition_index$eq_3, TMP_Definition_at$eq_4, TMP_Definition_axes$eq_5, TMP_Definition_buttons$eq_6;

          def["native"] = nil;
          
          
          Opal.defn(self, '$id=', TMP_Definition_id$eq_2 = function(value) {
            var self = this;

            return self["native"].id = value
          }, TMP_Definition_id$eq_2.$$arity = 1);
          
          Opal.defn(self, '$index=', TMP_Definition_index$eq_3 = function(value) {
            var self = this;

            return self["native"].index = value
          }, TMP_Definition_index$eq_3.$$arity = 1);
          
          Opal.defn(self, '$at=', TMP_Definition_at$eq_4 = function(value) {
            var self = this;

            return self["native"].timestamp = value
          }, TMP_Definition_at$eq_4.$$arity = 1);
          
          Opal.defn(self, '$axes=', TMP_Definition_axes$eq_5 = function(value) {
            var self = this;

            return self["native"].axes = value
          }, TMP_Definition_axes$eq_5.$$arity = 1);
          return (Opal.defn(self, '$buttons=', TMP_Definition_buttons$eq_6 = function(value) {
            var self = this;

            return self["native"].buttons = value
          }, TMP_Definition_buttons$eq_6.$$arity = 1), nil) && 'buttons=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Gamepad_construct_7 = function $$construct(name, desc) {
              var self = this;

              return new GamepadEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        gamepad:    desc })
            }, TMP_Gamepad_construct_7.$$arity = 2)}};
        
        Opal.defn(self, '$id', TMP_Gamepad_id_8 = function $$id() {
          var self = this;

          return self["native"].gamepad.id
        }, TMP_Gamepad_id_8.$$arity = 0);
        
        Opal.defn(self, '$index', TMP_Gamepad_index_9 = function $$index() {
          var self = this;

          return self["native"].gamepad.index
        }, TMP_Gamepad_index_9.$$arity = 0);
        
        Opal.defn(self, '$at', TMP_Gamepad_at_10 = function $$at() {
          var self = this;

          return self["native"].gamepad.timestamp
        }, TMP_Gamepad_at_10.$$arity = 0);
        
        Opal.defn(self, '$axes', TMP_Gamepad_axes_11 = function $$axes() {
          var self = this;

          return self["native"].gamepad.axes
        }, TMP_Gamepad_axes_11.$$arity = 0);
        return (Opal.defn(self, '$buttons', TMP_Gamepad_buttons_12 = function $$buttons() {
          var self = this;

          return self["native"].gamepad.buttons
        }, TMP_Gamepad_buttons_12.$$arity = 0), nil) && 'buttons';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/hash_change"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $HashChange(){};
        var self = $HashChange = $klass($base, $super, 'HashChange', $HashChange);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HashChange_supported$q_1, TMP_HashChange_construct_4;

        
        Opal.defs(self, '$supported?', TMP_HashChange_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.HashChange")
        }, TMP_HashChange_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_old$eq_2, TMP_Definition_new$eq_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$old=', TMP_Definition_old$eq_2 = function(value) {
            var self = this;

            return self["native"].oldURL = value
          }, TMP_Definition_old$eq_2.$$arity = 1);
          return (Opal.defn(self, '$new=', TMP_Definition_new$eq_3 = function(value) {
            var self = this;

            return self["native"].newURL = value
          }, TMP_Definition_new$eq_3.$$arity = 1), nil) && 'new=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_HashChange_construct_4 = function $$construct(name, desc) {
              var self = this;

              return new HashChangeEvent(name, desc)
            }, TMP_HashChange_construct_4.$$arity = 2)}};
        self.$alias_native("old", "oldURL");
        return self.$alias_native("new", "newURL");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/progress"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Progress(){};
        var self = $Progress = $klass($base, $super, 'Progress', $Progress);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Progress_supported$q_1, TMP_Progress_construct_5, TMP_Progress_construct_6;

        
        Opal.defs(self, '$supported?', TMP_Progress_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Progress")
        }, TMP_Progress_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_computable$eq_2, TMP_Definition_loaded$eq_3, TMP_Definition_total$eq_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$computable=', TMP_Definition_computable$eq_2 = function(value) {
            var self = this;

            return self["native"].computableLength = value
          }, TMP_Definition_computable$eq_2.$$arity = 1);
          
          Opal.defn(self, '$loaded=', TMP_Definition_loaded$eq_3 = function(value) {
            var self = this;

            return self["native"].loaded = value
          }, TMP_Definition_loaded$eq_3.$$arity = 1);
          return (Opal.defn(self, '$total=', TMP_Definition_total$eq_4 = function(value) {
            var self = this;

            return self["native"].total = value
          }, TMP_Definition_total$eq_4.$$arity = 1), nil) && 'total=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Progress_construct_5 = function $$construct(name, desc) {
              var self = this;

              return new ProgressEvent(name, desc)
            }, TMP_Progress_construct_5.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Progress_construct_6 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("ProgressEvent");
            event.initProgressEvent(name, desc.bubbles, desc.cancelable,
              desc.computable, desc.loaded, desc.total);

        return event;
      
            }, TMP_Progress_construct_6.$$arity = 2)}};
        self.$alias_native("computable?", "computableLength");
        self.$alias_native("loaded");
        return self.$alias_native("total");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/page_transition"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $PageTransition(){};
        var self = $PageTransition = $klass($base, $super, 'PageTransition', $PageTransition);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PageTransition_supported$q_1, TMP_PageTransition_construct_3;

        
        Opal.defs(self, '$supported?', TMP_PageTransition_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.PageTransition")
        }, TMP_PageTransition_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_persisted$eq_2;

          def["native"] = nil;
          return (Opal.defn(self, '$persisted=', TMP_Definition_persisted$eq_2 = function(value) {
            var self = this;

            return self["native"].persisted = value
          }, TMP_Definition_persisted$eq_2.$$arity = 1), nil) && 'persisted='
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.PageTransition"))) {
            Opal.defs(self, '$construct', TMP_PageTransition_construct_3 = function $$construct(name, desc) {
              var self = this;

              return new PageTransitionEvent(name, desc)
            }, TMP_PageTransition_construct_3.$$arity = 2)}};
        return self.$alias_native("persisted?", "persisted");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/pop_state"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $PopState(){};
        var self = $PopState = $klass($base, $super, 'PopState', $PopState);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PopState_supported$q_1, TMP_PopState_construct_3, TMP_PopState_construct_4;

        
        Opal.defs(self, '$supported?', TMP_PopState_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.PopState")
        }, TMP_PopState_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_state$eq_2;

          def["native"] = nil;
          return (Opal.defn(self, '$state=', TMP_Definition_state$eq_2 = function(value) {
            var self = this;

            return self["native"].state = value
          }, TMP_Definition_state$eq_2.$$arity = 1), nil) && 'state='
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_PopState_construct_3 = function $$construct(name, desc) {
              var self = this;

              return new PopStateEvent(name, desc)
            }, TMP_PopState_construct_3.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_PopState_construct_4 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent('PopStateEvent');
            event.initPopStateEvent(name, desc.bubbles, desc.cancelable,
              desc.state);

        return event;
      
            }, TMP_PopState_construct_4.$$arity = 2)}};
        return self.$alias_native("state");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/storage"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Storage(){};
        var self = $Storage = $klass($base, $super, 'Storage', $Storage);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Storage_supported$q_1, TMP_Storage_construct_7;

        
        Opal.defs(self, '$supported?', TMP_Storage_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Storage")
        }, TMP_Storage_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_key$eq_2, TMP_Definition_new$eq_3, TMP_Definition_old$eq_4, TMP_Definition_area$eq_5, TMP_Definition_url$eq_6;

          def["native"] = nil;
          
          
          Opal.defn(self, '$key=', TMP_Definition_key$eq_2 = function(value) {
            var self = this;

            return self["native"].key = value
          }, TMP_Definition_key$eq_2.$$arity = 1);
          
          Opal.defn(self, '$new=', TMP_Definition_new$eq_3 = function(value) {
            var self = this;

            return self["native"].newValue = value
          }, TMP_Definition_new$eq_3.$$arity = 1);
          
          Opal.defn(self, '$old=', TMP_Definition_old$eq_4 = function(value) {
            var self = this;

            return self["native"].oldValue = value
          }, TMP_Definition_old$eq_4.$$arity = 1);
          
          Opal.defn(self, '$area=', TMP_Definition_area$eq_5 = function(value) {
            var self = this;

            return self["native"].storageArea = value
          }, TMP_Definition_area$eq_5.$$arity = 1);
          return (Opal.defn(self, '$url=', TMP_Definition_url$eq_6 = function(value) {
            var self = this;

            return self["native"].url = value
          }, TMP_Definition_url$eq_6.$$arity = 1), nil) && 'url=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Storage_construct_7 = function $$construct(name, desc) {
              var self = this;

              return new StorageEvent(name, desc)
            }, TMP_Storage_construct_7.$$arity = 2)}};
        self.$alias_native("key");
        self.$alias_native("new", "newValue");
        self.$alias_native("old", "oldValue");
        self.$alias_native("area", "storageArea");
        return self.$alias_native("url");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/touch"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native', '$==', '$downcase', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Touch(){};
        var self = $Touch = $klass($base, $super, 'Touch', $Touch);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Touch_supported$q_1, TMP_Touch_construct_6, TMP_Touch_cancel$q_7, TMP_Touch_end$q_8, TMP_Touch_leave$q_9, TMP_Touch_move$q_10, TMP_Touch_start$q_11;

        
        Opal.defs(self, '$supported?', TMP_Touch_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Touch")
        }, TMP_Touch_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_alt$B_2, TMP_Definition_ctrl$B_3, TMP_Definition_meta$B_4, TMP_Definition_shift$B_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$alt!', TMP_Definition_alt$B_2 = function() {
            var self = this;

            return self["native"].altKey = true
          }, TMP_Definition_alt$B_2.$$arity = 0);
          
          Opal.defn(self, '$ctrl!', TMP_Definition_ctrl$B_3 = function() {
            var self = this;

            return self["native"].ctrlKey = true
          }, TMP_Definition_ctrl$B_3.$$arity = 0);
          
          Opal.defn(self, '$meta!', TMP_Definition_meta$B_4 = function() {
            var self = this;

            return self["native"].metaKey = true
          }, TMP_Definition_meta$B_4.$$arity = 0);
          return (Opal.defn(self, '$shift!', TMP_Definition_shift$B_5 = function() {
            var self = this;

            return self["native"].shiftKey = true
          }, TMP_Definition_shift$B_5.$$arity = 0), nil) && 'shift!';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Touch_construct_6 = function $$construct(name, desc) {
              var self = this;

              return new TouchEvent(name, desc)
            }, TMP_Touch_construct_6.$$arity = 2)}};
        self.$alias_native("alt?", "altKey");
        self.$alias_native("ctrl?", "ctrlKey");
        self.$alias_native("meta?", "metaKey");
        self.$alias_native("shift?", "shiftKey");
        
        Opal.defn(self, '$cancel?', TMP_Touch_cancel$q_7 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchcancel")
        }, TMP_Touch_cancel$q_7.$$arity = 0);
        
        Opal.defn(self, '$end?', TMP_Touch_end$q_8 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchend")
        }, TMP_Touch_end$q_8.$$arity = 0);
        
        Opal.defn(self, '$leave?', TMP_Touch_leave$q_9 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchleave")
        }, TMP_Touch_leave$q_9.$$arity = 0);
        
        Opal.defn(self, '$move?', TMP_Touch_move$q_10 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchmove")
        }, TMP_Touch_move$q_10.$$arity = 0);
        return (Opal.defn(self, '$start?', TMP_Touch_start$q_11 = function() {
          var self = this;

          return self.$name().$downcase()['$==']("touchstart")
        }, TMP_Touch_start$q_11.$$arity = 0), nil) && 'start?';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/sensor"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Sensor(){};
        var self = $Sensor = $klass($base, $super, 'Sensor', $Sensor);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Sensor_supported$q_1, TMP_Sensor_construct_2;

        
        Opal.defs(self, '$supported?', TMP_Sensor_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Sensor")
        }, TMP_Sensor_supported$q_1.$$arity = 0);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            return Opal.defs(self, '$construct', TMP_Sensor_construct_2 = function $$construct(name, desc) {
              var self = this;

              return new SensorEvent(name, desc)
            }, TMP_Sensor_construct_2.$$arity = 2)
            } else {
            return nil
          }
          } else {
          return nil
        };
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["ostruct"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$each_pair', '$new_ostruct_member', '$[]=', '$-', '$[]', '$to_sym', '$>', '$length', '$raise', '$new', '$end_with?', '$!=', '$enum_for', '$is_a?', '$==', '$instance_variable_get', '$===', '$eql?', '$dup', '$to_n', '$hash', '$attr_reader', '$__send__', '$singleton_class', '$delete', '$respond_to?', '$define_singleton_method', '$__id__', '$class', '$any?', '$+', '$join', '$map', '$inspect']);
  return (function($base, $super, $parent_nesting) {
    function $OpenStruct(){};
    var self = $OpenStruct = $klass($base, $super, 'OpenStruct', $OpenStruct);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_OpenStruct_initialize_2, TMP_OpenStruct_$$_3, TMP_OpenStruct_$$$eq_4, TMP_OpenStruct_method_missing_5, TMP_OpenStruct_each_pair_6, TMP_OpenStruct_$eq$eq_8, TMP_OpenStruct_$eq$eq$eq_9, TMP_OpenStruct_eql$q_10, TMP_OpenStruct_to_h_11, TMP_OpenStruct_to_n_12, TMP_OpenStruct_hash_13, TMP_OpenStruct_delete_field_14, TMP_OpenStruct_new_ostruct_member_17, TMP_OpenStruct_inspect_19;

    def.table = nil;
    
    
    Opal.defn(self, '$initialize', TMP_OpenStruct_initialize_2 = function $$initialize(hash) {
      var TMP_1, self = this;

      if (hash == null) {
        hash = nil;
      }
      
      self.table = $hash2([], {});
      if ($truthy(hash)) {
        return $send(hash, 'each_pair', [], (TMP_1 = function(key, value){var self = TMP_1.$$s || this, $writer = nil;
          if (self.table == null) self.table = nil;
if (key == null) key = nil;if (value == null) value = nil;
        
          $writer = [self.$new_ostruct_member(key), value];
          $send(self.table, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1))
        } else {
        return nil
      };
    }, TMP_OpenStruct_initialize_2.$$arity = -1);
    
    Opal.defn(self, '$[]', TMP_OpenStruct_$$_3 = function(name) {
      var self = this;

      return self.table['$[]'](name.$to_sym())
    }, TMP_OpenStruct_$$_3.$$arity = 1);
    
    Opal.defn(self, '$[]=', TMP_OpenStruct_$$$eq_4 = function(name, value) {
      var self = this, $writer = nil;

      
      $writer = [self.$new_ostruct_member(name), value];
      $send(self.table, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, TMP_OpenStruct_$$$eq_4.$$arity = 2);
    
    Opal.defn(self, '$method_missing', TMP_OpenStruct_method_missing_5 = function $$method_missing(name, $a_rest) {
      var self = this, args, $writer = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if ($truthy($rb_gt(args.$length(), 2))) {
        self.$raise(Opal.const_get_relative($nesting, 'NoMethodError').$new("" + "undefined method `" + (name) + "' for #<OpenStruct>", name))};
      if ($truthy(name['$end_with?']("="))) {
        
        if ($truthy(args.$length()['$!='](1))) {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError').$new("wrong number of arguments (0 for 1)"))};
        
        $writer = [self.$new_ostruct_member(name['$[]']($range(0, -2, false))), args['$[]'](0)];
        $send(self.table, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
        } else {
        return self.table['$[]'](name.$to_sym())
      };
    }, TMP_OpenStruct_method_missing_5.$$arity = -2);
    
    Opal.defn(self, '$each_pair', TMP_OpenStruct_each_pair_6 = function $$each_pair() {
      var TMP_7, self = this, $iter = TMP_OpenStruct_each_pair_6.$$p, $yield = $iter || nil;

      if ($iter) TMP_OpenStruct_each_pair_6.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      return $send(self.table, 'each_pair', [], (TMP_7 = function(pair){var self = TMP_7.$$s || this;
if (pair == null) pair = nil;
      return Opal.yield1($yield, pair);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
    }, TMP_OpenStruct_each_pair_6.$$arity = 0);
    
    Opal.defn(self, '$==', TMP_OpenStruct_$eq$eq_8 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?'](Opal.const_get_relative($nesting, 'OpenStruct')))) {
        } else {
        return false
      };
      return self.table['$=='](other.$instance_variable_get("@table"));
    }, TMP_OpenStruct_$eq$eq_8.$$arity = 1);
    
    Opal.defn(self, '$===', TMP_OpenStruct_$eq$eq$eq_9 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?'](Opal.const_get_relative($nesting, 'OpenStruct')))) {
        } else {
        return false
      };
      return self.table['$==='](other.$instance_variable_get("@table"));
    }, TMP_OpenStruct_$eq$eq$eq_9.$$arity = 1);
    
    Opal.defn(self, '$eql?', TMP_OpenStruct_eql$q_10 = function(other) {
      var self = this;

      
      if ($truthy(other['$is_a?'](Opal.const_get_relative($nesting, 'OpenStruct')))) {
        } else {
        return false
      };
      return self.table['$eql?'](other.$instance_variable_get("@table"));
    }, TMP_OpenStruct_eql$q_10.$$arity = 1);
    
    Opal.defn(self, '$to_h', TMP_OpenStruct_to_h_11 = function $$to_h() {
      var self = this;

      return self.table.$dup()
    }, TMP_OpenStruct_to_h_11.$$arity = 0);
    
    Opal.defn(self, '$to_n', TMP_OpenStruct_to_n_12 = function $$to_n() {
      var self = this;

      return self.table.$to_n()
    }, TMP_OpenStruct_to_n_12.$$arity = 0);
    
    Opal.defn(self, '$hash', TMP_OpenStruct_hash_13 = function $$hash() {
      var self = this;

      return self.table.$hash()
    }, TMP_OpenStruct_hash_13.$$arity = 0);
    self.$attr_reader("table");
    
    Opal.defn(self, '$delete_field', TMP_OpenStruct_delete_field_14 = function $$delete_field(name) {
      var self = this, sym = nil;

      
      sym = name.$to_sym();
      
      try {
        self.$singleton_class().$__send__("remove_method", sym, "" + (sym) + "=")
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
          try {
            nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self.table.$delete(sym);
    }, TMP_OpenStruct_delete_field_14.$$arity = 1);
    
    Opal.defn(self, '$new_ostruct_member', TMP_OpenStruct_new_ostruct_member_17 = function $$new_ostruct_member(name) {
      var TMP_15, TMP_16, self = this;

      
      name = name.$to_sym();
      if ($truthy(self['$respond_to?'](name))) {
        } else {
        
        $send(self, 'define_singleton_method', [name], (TMP_15 = function(){var self = TMP_15.$$s || this;
          if (self.table == null) self.table = nil;

        return self.table['$[]'](name)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
        $send(self, 'define_singleton_method', ["" + (name) + "="], (TMP_16 = function(x){var self = TMP_16.$$s || this, $writer = nil;
          if (self.table == null) self.table = nil;
if (x == null) x = nil;
        
          $writer = [name, x];
          $send(self.table, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
      };
      return name;
    }, TMP_OpenStruct_new_ostruct_member_17.$$arity = 1);
    var ostruct_ids;;
    
    Opal.defn(self, '$inspect', TMP_OpenStruct_inspect_19 = function $$inspect() {
      var TMP_18, self = this, result = nil;

      
      
      var top = (ostruct_ids === undefined),
          ostruct_id = self.$__id__();
    ;
      
      return (function() { try {
      
      result = "" + "#<" + (self.$class());
      
        if (top) {
          ostruct_ids = {};
        }
        if (ostruct_ids.hasOwnProperty(ostruct_id)) {
          return result + ' ...>';
        }
        ostruct_ids[ostruct_id] = true;
      ;
      if ($truthy(self.table['$any?']())) {
        result = $rb_plus(result, " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], (TMP_18 = function(name, value){var self = TMP_18.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
      } finally {
        
        if (top) {
          ostruct_ids = undefined;
        }
      
      }; })();;
    }, TMP_OpenStruct_inspect_19.$$arity = 0);
    return Opal.alias(self, "to_s", "inspect");
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/custom"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$require', '$supports?', '$end_with?', '$[]', '$to_n', '$merge!', '$Native', '$new', '$has_key?']);
  
  self.$require("ostruct");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Custom(){};
        var self = $Custom = $klass($base, $super, 'Custom', $Custom);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Custom_supported$q_1, TMP_Custom_construct_3, TMP_Custom_construct_4, TMP_Custom_construct_5, TMP_Custom_construct_6, TMP_Custom_initialize_7, TMP_Custom_method_missing_8;

        def.detail = nil;
        
        Opal.defs(self, '$supported?', TMP_Custom_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Custom")
        }, TMP_Custom_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_method_missing_2;

          def["native"] = nil;
          return (Opal.defn(self, '$method_missing', TMP_Definition_method_missing_2 = function $$method_missing(name, value) {
            var self = this;

            if ($truthy(name['$end_with?']("="))) {
              return self["native"][name['$[]']($range(0, -2, false))] = value
              } else {
              return nil
            }
          }, TMP_Definition_method_missing_2.$$arity = 2), nil) && 'method_missing'
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
          Opal.defs(self, '$construct', TMP_Custom_construct_3 = function $$construct(name, desc) {
            var self = this;

            return new CustomEvent(name, {
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc })
          }, TMP_Custom_construct_3.$$arity = 2)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
          Opal.defs(self, '$construct', TMP_Custom_construct_4 = function $$construct(name, desc) {
            var self = this;

            
        var event = document.createEvent("CustomEvent");
            event.initCustomEvent(name, desc.bubbles, desc.cancelable, desc);

        return event;
      
          }, TMP_Custom_construct_4.$$arity = 2)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.createObject"))) {
          Opal.defs(self, '$construct', TMP_Custom_construct_5 = function $$construct(name, desc) {
            var self = this;

            return self.$Native(document.createEventObject())['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n()
          }, TMP_Custom_construct_5.$$arity = 2)
          } else {
          Opal.defs(self, '$construct', TMP_Custom_construct_6 = function $$construct(name, desc) {
            var self = this;

            return self.$Native(desc)['$merge!']({
        type:       name,
        bubbles:    desc.bubbles,
        cancelable: desc.cancelable,
        detail:     desc }).$to_n()
          }, TMP_Custom_construct_6.$$arity = 2)
        };
        
        Opal.defn(self, '$initialize', TMP_Custom_initialize_7 = function $$initialize(event, callback) {
          var self = this, $iter = TMP_Custom_initialize_7.$$p, $yield = $iter || nil;

          if (callback == null) {
            callback = nil;
          }
          if ($iter) TMP_Custom_initialize_7.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Custom_initialize_7, false), [event, callback], null);
          return (self.detail = Opal.const_get_relative($nesting, 'Hash').$new(event.detail));
        }, TMP_Custom_initialize_7.$$arity = -2);
        return (Opal.defn(self, '$method_missing', TMP_Custom_method_missing_8 = function $$method_missing(id, $a_rest) {
          var self = this, $iter = TMP_Custom_method_missing_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_Custom_method_missing_8.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self.detail['$has_key?'](id))) {
            return self.detail['$[]'](id)};
          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_Custom_method_missing_8, false), $zuper, $iter);
        }, TMP_Custom_method_missing_8.$$arity = -2), nil) && 'method_missing';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["buffer/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$[]', '$name_for', '$attr_reader', '$==', '$for', '$to_n', '$enum_for']);
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Array(){};
      var self = $Array = $klass($base, $super, 'Array', $Array);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_for_1, TMP_Array_initialize_2, TMP_Array_bits_3, TMP_Array_$$_4, TMP_Array_$$$eq_5, TMP_Array_bytesize_6, TMP_Array_each_7, TMP_Array_length_8, TMP_Array_merge$B_9;

      def["native"] = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      Opal.defs(self, '$for', TMP_Array_for_1 = function(bits, type) {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("" + (Opal.const_get_relative($nesting, 'Buffer').$name_for(bits, type)) + "Array")
      }, TMP_Array_for_1.$$arity = 2);
      self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
      self.$attr_reader("buffer", "type");
      
      Opal.defn(self, '$initialize', TMP_Array_initialize_2 = function $$initialize(buffer, bits, type) {
        var self = this, $iter = TMP_Array_initialize_2.$$p, $yield = $iter || nil;

        if (bits == null) {
          bits = nil;
        }
        if (type == null) {
          type = nil;
        }
        if ($iter) TMP_Array_initialize_2.$$p = null;
        
        if (Opal.const_get_relative($nesting, 'Native')['$=='](buffer)) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_2, false), [buffer], null)
          } else {
          
        var klass = Opal.const_get_relative($nesting, 'Array').$for(bits, type);

        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_2, false), [new klass(buffer.$to_n())], null)
      
        };
        self.buffer = buffer;
        return (self.type = type);
      }, TMP_Array_initialize_2.$$arity = -2);
      
      Opal.defn(self, '$bits', TMP_Array_bits_3 = function $$bits() {
        var self = this;

        return self["native"].BYTES_PER_ELEMENT * 8
      }, TMP_Array_bits_3.$$arity = 0);
      
      Opal.defn(self, '$[]', TMP_Array_$$_4 = function(index, offset) {
        var self = this;

        if (offset == null) {
          offset = nil;
        }
        if ($truthy(offset)) {
          return self["native"].subarray(index, offset)
          } else {
          return self["native"][index]
        }
      }, TMP_Array_$$_4.$$arity = -2);
      
      Opal.defn(self, '$[]=', TMP_Array_$$$eq_5 = function(index, value) {
        var self = this;

        return self["native"][index] = value
      }, TMP_Array_$$$eq_5.$$arity = 2);
      
      Opal.defn(self, '$bytesize', TMP_Array_bytesize_6 = function $$bytesize() {
        var self = this;

        return self["native"].byteLength
      }, TMP_Array_bytesize_6.$$arity = 0);
      
      Opal.defn(self, '$each', TMP_Array_each_7 = function $$each() {
        var self = this, $iter = TMP_Array_each_7.$$p, $yield = $iter || nil;

        if ($iter) TMP_Array_each_7.$$p = null;
        
        if (($yield !== nil)) {
          } else {
          return self.$enum_for("each")
        };
        
      for (var i = 0, length = self["native"].length; i < length; i++) {
        Opal.yield1($yield, self["native"][i])
      }
    ;
        return self;
      }, TMP_Array_each_7.$$arity = 0);
      
      Opal.defn(self, '$length', TMP_Array_length_8 = function $$length() {
        var self = this;

        return self["native"].length
      }, TMP_Array_length_8.$$arity = 0);
      
      Opal.defn(self, '$merge!', TMP_Array_merge$B_9 = function(other, offset) {
        var self = this;

        return self["native"].set(other.$to_n(), offset)
      }, TMP_Array_merge$B_9.$$arity = -2);
      return Opal.alias(self, "size", "length");
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["buffer/view"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$!', '$nil?', '$[]', '$attr_reader', '$native?', '$to_n', '$name_for']);
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $View(){};
      var self = $View = $klass($base, $super, 'View', $View);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_View_supported$q_1, TMP_View_initialize_2, TMP_View_length_3, TMP_View_get_4, TMP_View_set_5, TMP_View_get_int8_6, TMP_View_set_int8_7, TMP_View_get_uint8_8, TMP_View_set_uint8_9, TMP_View_get_int16_10, TMP_View_set_int16_11, TMP_View_get_uint16_12, TMP_View_set_uint16_13, TMP_View_get_int32_14, TMP_View_set_int32_15, TMP_View_get_uint32_16, TMP_View_set_uint32_17, TMP_View_get_float32_18, TMP_View_set_float32_19, TMP_View_get_float64_20, TMP_View_set_float64_21;

      def["native"] = nil;
      
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      Opal.defs(self, '$supported?', TMP_View_supported$q_1 = function() {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("DataView")['$nil?']()['$!']()
      }, TMP_View_supported$q_1.$$arity = 0);
      self.$attr_reader("buffer", "offset");
      
      Opal.defn(self, '$initialize', TMP_View_initialize_2 = function $$initialize(buffer, offset, length) {
        var $a, self = this, $iter = TMP_View_initialize_2.$$p, $yield = $iter || nil;

        if (offset == null) {
          offset = nil;
        }
        if (length == null) {
          length = nil;
        }
        if ($iter) TMP_View_initialize_2.$$p = null;
        
        if ($truthy(self['$native?'](buffer))) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [buffer], null)
        } else if ($truthy(($truthy($a = offset) ? length : $a))) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n(), offset.$to_n(), length.$to_n())], null)
        } else if ($truthy(offset)) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n(), offset.$to_n())], null)
          } else {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n())], null)
        };
        self.buffer = buffer;
        return (self.offset = offset);
      }, TMP_View_initialize_2.$$arity = -2);
      
      Opal.defn(self, '$length', TMP_View_length_3 = function $$length() {
        var self = this;

        return self["native"].byteLength
      }, TMP_View_length_3.$$arity = 0);
      Opal.alias(self, "size", "length");
      
      Opal.defn(self, '$get', TMP_View_get_4 = function $$get(offset, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8;
        }
        if (type == null) {
          type = "unsigned";
        }
        if (little == null) {
          little = false;
        }
        return self["native"]["get" + Opal.const_get_relative($nesting, 'Buffer').$name_for(bits, type)](offset, little)
      }, TMP_View_get_4.$$arity = -2);
      Opal.alias(self, "[]", "get");
      
      Opal.defn(self, '$set', TMP_View_set_5 = function $$set(offset, value, bits, type, little) {
        var self = this;

        if (bits == null) {
          bits = 8;
        }
        if (type == null) {
          type = "unsigned";
        }
        if (little == null) {
          little = false;
        }
        return self["native"]["set" + Opal.const_get_relative($nesting, 'Buffer').$name_for(bits, type)](offset, value, little)
      }, TMP_View_set_5.$$arity = -3);
      Opal.alias(self, "[]=", "set");
      
      Opal.defn(self, '$get_int8', TMP_View_get_int8_6 = function $$get_int8(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt8(offset, little)
      }, TMP_View_get_int8_6.$$arity = -2);
      
      Opal.defn(self, '$set_int8', TMP_View_set_int8_7 = function $$set_int8(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt8(offset, value, little)
      }, TMP_View_set_int8_7.$$arity = -3);
      
      Opal.defn(self, '$get_uint8', TMP_View_get_uint8_8 = function $$get_uint8(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint8(offset, little)
      }, TMP_View_get_uint8_8.$$arity = -2);
      
      Opal.defn(self, '$set_uint8', TMP_View_set_uint8_9 = function $$set_uint8(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint8(offset, value, little)
      }, TMP_View_set_uint8_9.$$arity = -3);
      
      Opal.defn(self, '$get_int16', TMP_View_get_int16_10 = function $$get_int16(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt16(offset, little)
      }, TMP_View_get_int16_10.$$arity = -2);
      
      Opal.defn(self, '$set_int16', TMP_View_set_int16_11 = function $$set_int16(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt16(offset, value, little)
      }, TMP_View_set_int16_11.$$arity = -3);
      
      Opal.defn(self, '$get_uint16', TMP_View_get_uint16_12 = function $$get_uint16(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint16(offset, little)
      }, TMP_View_get_uint16_12.$$arity = -2);
      
      Opal.defn(self, '$set_uint16', TMP_View_set_uint16_13 = function $$set_uint16(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint16(offset, value, little)
      }, TMP_View_set_uint16_13.$$arity = -3);
      
      Opal.defn(self, '$get_int32', TMP_View_get_int32_14 = function $$get_int32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getInt32(offset, little)
      }, TMP_View_get_int32_14.$$arity = -2);
      
      Opal.defn(self, '$set_int32', TMP_View_set_int32_15 = function $$set_int32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setInt32(offset, value, little)
      }, TMP_View_set_int32_15.$$arity = -3);
      
      Opal.defn(self, '$get_uint32', TMP_View_get_uint32_16 = function $$get_uint32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getUint32(offset, little)
      }, TMP_View_get_uint32_16.$$arity = -2);
      
      Opal.defn(self, '$set_uint32', TMP_View_set_uint32_17 = function $$set_uint32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setUint32(offset, value, little)
      }, TMP_View_set_uint32_17.$$arity = -3);
      
      Opal.defn(self, '$get_float32', TMP_View_get_float32_18 = function $$get_float32(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getFloat32(offset, little)
      }, TMP_View_get_float32_18.$$arity = -2);
      
      Opal.defn(self, '$set_float32', TMP_View_set_float32_19 = function $$set_float32(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setFloat32(offset, value, little)
      }, TMP_View_set_float32_19.$$arity = -3);
      
      Opal.defn(self, '$get_float64', TMP_View_get_float64_20 = function $$get_float64(offset, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].getFloat64(offset, little)
      }, TMP_View_get_float64_20.$$arity = -2);
      return (Opal.defn(self, '$set_float64', TMP_View_set_float64_21 = function $$set_float64(offset, value, little) {
        var self = this;

        if (little == null) {
          little = false;
        }
        return self["native"].setFloat64(offset, value, little)
      }, TMP_View_set_float64_21.$$arity = -3), nil) && 'set_float64';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["buffer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$!', '$nil?', '$[]', '$===', '$native?', '$new']);
  
  self.$require("native");
  self.$require("buffer/array");
  self.$require("buffer/view");
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Buffer_supported$q_1, TMP_Buffer_name_for_2, TMP_Buffer_initialize_3, TMP_Buffer_length_4, TMP_Buffer_to_a_5, TMP_Buffer_view_6;

    def["native"] = nil;
    
    self.$include(Opal.const_get_relative($nesting, 'Native'));
    Opal.defs(self, '$supported?', TMP_Buffer_supported$q_1 = function() {
      var self = this;
      if ($gvars.$ == null) $gvars.$ = nil;

      return $gvars.$['$[]']("ArrayBuffer")['$nil?']()['$!']()
    }, TMP_Buffer_supported$q_1.$$arity = 0);
    Opal.defs(self, '$name_for', TMP_Buffer_name_for_2 = function $$name_for(bits, type) {
      var self = this, $case = nil;

      return "" + ((function() {$case = type;
      if ("unsigned"['$===']($case)) {return "Uint"}
      else if ("signed"['$===']($case)) {return "Int"}
      else if ("float"['$===']($case)) {return "Float"}
      else { return nil }})()) + (bits)
    }, TMP_Buffer_name_for_2.$$arity = 2);
    
    Opal.defn(self, '$initialize', TMP_Buffer_initialize_3 = function $$initialize(size, bits) {
      var self = this, $iter = TMP_Buffer_initialize_3.$$p, $yield = $iter || nil;

      if (bits == null) {
        bits = 8;
      }
      if ($iter) TMP_Buffer_initialize_3.$$p = null;
      if ($truthy(self['$native?'](size))) {
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Buffer_initialize_3, false), [size], null)
        } else {
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Buffer_initialize_3, false), [new ArrayBuffer(size * (bits / 8))], null)
      }
    }, TMP_Buffer_initialize_3.$$arity = -2);
    
    Opal.defn(self, '$length', TMP_Buffer_length_4 = function $$length() {
      var self = this;

      return self["native"].byteLength
    }, TMP_Buffer_length_4.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.defn(self, '$to_a', TMP_Buffer_to_a_5 = function $$to_a(bits, type) {
      var self = this;

      if (bits == null) {
        bits = 8;
      }
      if (type == null) {
        type = "unsigned";
      }
      return Opal.const_get_relative($nesting, 'Array').$new(self, bits, type)
    }, TMP_Buffer_to_a_5.$$arity = -1);
    return (Opal.defn(self, '$view', TMP_Buffer_view_6 = function $$view(offset, length) {
      var self = this;

      if (offset == null) {
        offset = nil;
      }
      if (length == null) {
        length = nil;
      }
      return Opal.const_get_relative($nesting, 'View').$new(self, offset, length)
    }, TMP_Buffer_view_6.$$arity = -1), nil) && 'view';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/message"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$supports?', '$convert', '$supported?', '$new', '$alias_native']);
  
  self.$require("buffer");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Message(){};
        var self = $Message = $klass($base, $super, 'Message', $Message);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Message_supported$q_1, TMP_Message_construct_5, TMP_Message_construct_6, TMP_Message_data_7, TMP_Message_source_8;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_Message_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Message")
        }, TMP_Message_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_data$eq_2, TMP_Definition_origin$eq_3, TMP_Definition_source$eq_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$data=', TMP_Definition_data$eq_2 = function(value) {
            var self = this;

            return self["native"].data = value
          }, TMP_Definition_data$eq_2.$$arity = 1);
          
          Opal.defn(self, '$origin=', TMP_Definition_origin$eq_3 = function(value) {
            var self = this;

            return self["native"].origin = value
          }, TMP_Definition_origin$eq_3.$$arity = 1);
          return (Opal.defn(self, '$source=', TMP_Definition_source$eq_4 = function(value) {
            var self = this;

            return self["native"].source = Opal.const_get_relative($nesting, 'Native').$convert(value)
          }, TMP_Definition_source$eq_4.$$arity = 1), nil) && 'source=';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Message_construct_5 = function $$construct(name, desc) {
              var self = this;

              return new MessageEvent(name, desc)
            }, TMP_Message_construct_5.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Message_construct_6 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("MessageEvent");
            event.initMessageEvent(name, desc.bubbles, desc.cancelable,
              desc.data, desc.origin, "", desc.source || window);

        return event;
      
            }, TMP_Message_construct_6.$$arity = 2)}};
        
        Opal.defn(self, '$data', TMP_Message_data_7 = function $$data() {
          var self = this;

          
      if (window.ArrayBuffer && self["native"].data instanceof ArrayBuffer) {
        return Opal.const_get_relative($nesting, 'Buffer').$new(self["native"].data);
      }
      else if (window.Blob && self["native"].data instanceof Blob) {
        return Opal.const_get_relative($nesting, 'Blob').$new(self["native"].data);
      }
      else {
        return self["native"].data;
      }
    
        }, TMP_Message_data_7.$$arity = 0);
        self.$alias_native("origin");
        return (Opal.defn(self, '$source', TMP_Message_source_8 = function $$source() {
          var self = this;

          
      var source = self["native"].source;

      if (window.Window && source instanceof window.Window) {
        return Opal.const_get_relative($nesting, 'Window').$new(source);
      }
      else {
        return nil;
      }
    
        }, TMP_Message_source_8.$$arity = 0), nil) && 'source';
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event/close"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$supports?', '$supported?', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Close(){};
        var self = $Close = $klass($base, $super, 'Close', $Close);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Close_supported$q_1, TMP_Close_construct_6, TMP_Close_construct_7;

        
        Opal.defs(self, '$supported?', TMP_Close_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.Close")
        }, TMP_Close_supported$q_1.$$arity = 0);
        (function($base, $super, $parent_nesting) {
          function $Definition(){};
          var self = $Definition = $klass($base, $super, 'Definition', $Definition);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Definition_code$eq_2, TMP_Definition_reason$eq_3, TMP_Definition_clean$B_4, TMP_Definition_not_clean$B_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$code=', TMP_Definition_code$eq_2 = function(value) {
            var self = this;

            return self["native"].code = value
          }, TMP_Definition_code$eq_2.$$arity = 1);
          
          Opal.defn(self, '$reason=', TMP_Definition_reason$eq_3 = function(value) {
            var self = this;

            return self["native"].reason = value
          }, TMP_Definition_reason$eq_3.$$arity = 1);
          
          Opal.defn(self, '$clean!', TMP_Definition_clean$B_4 = function(value) {
            var self = this;

            return self["native"].wasClean = true
          }, TMP_Definition_clean$B_4.$$arity = 1);
          return (Opal.defn(self, '$not_clean!', TMP_Definition_not_clean$B_5 = function(value) {
            var self = this;

            return self["native"].wasClean = false
          }, TMP_Definition_not_clean$B_5.$$arity = 1), nil) && 'not_clean!';
        })($nesting[0], Opal.const_get_relative($nesting, 'Definition'), $nesting);
        if ($truthy(self['$supported?']())) {
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
            Opal.defs(self, '$construct', TMP_Close_construct_6 = function $$construct(name, desc) {
              var self = this;

              return new CloseEvent(name, desc)
            }, TMP_Close_construct_6.$$arity = 2)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
            Opal.defs(self, '$construct', TMP_Close_construct_7 = function $$construct(name, desc) {
              var self = this;

              
        var event = document.createEvent("CloseEvent");
            event.initCloseEvent(name, desc.bubbles, desc.cancelable,
              desc.wasClean, desc.code, desc.reason);

        return event;
      
            }, TMP_Close_construct_7.$$arity = 2)}};
        self.$alias_native("code");
        self.$alias_native("reason");
        return self.$alias_native("clean?", "wasClean");
      })($nesting[0], Opal.const_get_relative($nesting, 'Event'), $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/event"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$require', '$gsub', '$[]', '$aliases', '$name_for', '$===', '$class_for', '$new', '$construct', '$const_get', '$to_proc', '$arguments=', '$-', '$supports?', '$merge!', '$Native', '$to_n', '$==', '$name', '$attr_reader', '$attr_writer', '$convert', '$alias_native', '$off', '$prevent', '$stop']);
  
  self.$require("browser/event/base");
  self.$require("browser/event/ui");
  self.$require("browser/event/mouse");
  self.$require("browser/event/keyboard");
  self.$require("browser/event/focus");
  self.$require("browser/event/wheel");
  self.$require("browser/event/composition");
  self.$require("browser/event/animation");
  self.$require("browser/event/audio_processing");
  self.$require("browser/event/before_unload");
  self.$require("browser/event/composition");
  self.$require("browser/event/clipboard");
  self.$require("browser/event/device_light");
  self.$require("browser/event/device_motion");
  self.$require("browser/event/device_orientation");
  self.$require("browser/event/device_proximity");
  self.$require("browser/event/drag");
  self.$require("browser/event/gamepad");
  self.$require("browser/event/hash_change");
  self.$require("browser/event/progress");
  self.$require("browser/event/page_transition");
  self.$require("browser/event/pop_state");
  self.$require("browser/event/storage");
  self.$require("browser/event/touch");
  self.$require("browser/event/sensor");
  self.$require("browser/event/custom");
  self.$require("browser/event/message");
  self.$require("browser/event/close");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Event_aliases_1, TMP_Event_name_for_2, TMP_Event_class_for_3, TMP_Event_supported$q_4, TMP_Event_create_5, TMP_Event_construct_6, TMP_Event_construct_7, TMP_Event_construct_8, TMP_Event_construct_9, TMP_Event_new_10, TMP_Event_initialize_11, TMP_Event_name_12, TMP_Event_on_13, TMP_Event_target_14, TMP_Event_arguments_15, TMP_Event_arguments$eq_16, TMP_Event_off_17, TMP_Event_stopped$q_18, TMP_Event_stop_19, TMP_Event_prevent_20, TMP_Event_prevented$q_21, TMP_Event_stop$B_22;

      def["native"] = def.on = def.callback = nil;
      
      Opal.defs(self, '$aliases', TMP_Event_aliases_1 = function $$aliases() {
        var $a, self = this;
        if (self.aliases == null) self.aliases = nil;

        return (self.aliases = ($truthy($a = self.aliases) ? $a : $hash2(["dom:load", "hover"], {"dom:load": "DOMContentLoaded", "hover": "mouse:over"})))
      }, TMP_Event_aliases_1.$$arity = 0);
      Opal.defs(self, '$name_for', TMP_Event_name_for_2 = function $$name_for(name) {
        var $a, self = this;

        return ($truthy($a = self.$aliases()['$[]'](name)) ? $a : name).$gsub(":", "")
      }, TMP_Event_name_for_2.$$arity = 1);
      Opal.defs(self, '$class_for', TMP_Event_class_for_3 = function $$class_for(name) {
        var self = this, $case = nil;

        return (function() {$case = self.$name_for(name);
        if ("animationend"['$===']($case) || "animationiteration"['$===']($case) || "animationstart"['$===']($case)) {return Opal.const_get_relative($nesting, 'Animation')}
        else if ("audioprocess"['$===']($case)) {return Opal.const_get_relative($nesting, 'AudioProcessing')}
        else if ("beforeunload"['$===']($case)) {return Opal.const_get_relative($nesting, 'BeforeUnload')}
        else if ("compositionend"['$===']($case) || "compositionstart"['$===']($case) || "compositionupdate"['$===']($case)) {return Opal.const_get_relative($nesting, 'Composition')}
        else if ("copy"['$===']($case) || "cut"['$===']($case)) {return Opal.const_get_relative($nesting, 'Clipboard')}
        else if ("devicelight"['$===']($case)) {return Opal.const_get_relative($nesting, 'DeviceLight')}
        else if ("devicemotion"['$===']($case)) {return Opal.const_get_relative($nesting, 'DeviceMotion')}
        else if ("deviceorientation"['$===']($case)) {return Opal.const_get_relative($nesting, 'DeviceOrientation')}
        else if ("deviceproximity"['$===']($case)) {return Opal.const_get_relative($nesting, 'DeviceProximity')}
        else if ("drag"['$===']($case) || "dragend"['$===']($case) || "dragleave"['$===']($case) || "dragover"['$===']($case) || "dragstart"['$===']($case) || "drop"['$===']($case)) {return Opal.const_get_relative($nesting, 'Drag')}
        else if ("gamepadconnected"['$===']($case) || "gamepaddisconnected"['$===']($case)) {return Opal.const_get_relative($nesting, 'Gamepad')}
        else if ("hashchange"['$===']($case)) {return Opal.const_get_relative($nesting, 'HashChange')}
        else if ("load"['$===']($case) || "loadend"['$===']($case) || "loadstart"['$===']($case)) {return Opal.const_get_relative($nesting, 'Progress')}
        else if ("pagehide"['$===']($case) || "pageshow"['$===']($case)) {return Opal.const_get_relative($nesting, 'PageTransition')}
        else if ("popstate"['$===']($case)) {return Opal.const_get_relative($nesting, 'PopState')}
        else if ("storage"['$===']($case)) {return Opal.const_get_relative($nesting, 'Storage')}
        else if ("touchcancel"['$===']($case) || "touchend"['$===']($case) || "touchleave"['$===']($case) || "touchmove"['$===']($case) || "touchstart"['$===']($case)) {return Opal.const_get_relative($nesting, 'Touch')}
        else if ("compassneedscalibration"['$===']($case) || "userproximity"['$===']($case)) {return Opal.const_get_relative($nesting, 'Sensor')}
        else if ("message"['$===']($case)) {return Opal.const_get_relative($nesting, 'Message')}
        else if ("close"['$===']($case)) {return Opal.const_get_relative($nesting, 'Close')}
        else if ("click"['$===']($case) || "contextmenu"['$===']($case) || "dblclick"['$===']($case) || "mousedown"['$===']($case) || "mouseenter"['$===']($case) || "mouseleave"['$===']($case) || "mousemove"['$===']($case) || "mouseout"['$===']($case) || "mouseover"['$===']($case) || "mouseup"['$===']($case) || "show"['$===']($case)) {return Opal.const_get_relative($nesting, 'Mouse')}
        else if ("keydown"['$===']($case) || "keypress"['$===']($case) || "keyup"['$===']($case)) {return Opal.const_get_relative($nesting, 'Keyboard')}
        else if ("blur"['$===']($case) || "focus"['$===']($case) || "focusin"['$===']($case) || "focusout"['$===']($case)) {return Opal.const_get_relative($nesting, 'Focus')}
        else if ("wheel"['$===']($case)) {return Opal.const_get_relative($nesting, 'Wheel')}
        else if ("abort"['$===']($case) || "afterprint"['$===']($case) || "beforeprint"['$===']($case) || "cached"['$===']($case) || "canplay"['$===']($case) || "canplaythrough"['$===']($case) || "change"['$===']($case) || "chargingchange"['$===']($case) || "chargingtimechange"['$===']($case) || "checking"['$===']($case) || "close"['$===']($case) || "dischargingtimechange"['$===']($case) || "DOMContentLoaded"['$===']($case) || "downloading"['$===']($case) || "durationchange"['$===']($case) || "emptied"['$===']($case) || "ended"['$===']($case) || "error"['$===']($case) || "fullscreenchange"['$===']($case) || "fullscreenerror"['$===']($case) || "input"['$===']($case) || "invalid"['$===']($case) || "levelchange"['$===']($case) || "loadeddata"['$===']($case) || "loadedmetadata"['$===']($case) || "noupdate"['$===']($case) || "obsolete"['$===']($case) || "offline"['$===']($case) || "online"['$===']($case) || "open"['$===']($case) || "orientationchange"['$===']($case) || "pause"['$===']($case) || "pointerlockchange"['$===']($case) || "pointerlockerror"['$===']($case) || "play"['$===']($case) || "playing"['$===']($case) || "ratechange"['$===']($case) || "readystatechange"['$===']($case) || "reset"['$===']($case) || "seeked"['$===']($case) || "seeking"['$===']($case) || "stalled"['$===']($case) || "submit"['$===']($case) || "success"['$===']($case) || "suspend"['$===']($case) || "timeupdate"['$===']($case) || "updateready"['$===']($case) || "visibilitychange"['$===']($case) || "volumechange"['$===']($case) || "waiting"['$===']($case)) {return Opal.const_get_relative($nesting, 'Event')}
        else {return Opal.const_get_relative($nesting, 'Custom')}})()
      }, TMP_Event_class_for_3.$$arity = 1);
      Opal.defs(self, '$supported?', TMP_Event_supported$q_4 = function() {
        var self = this;

        return true
      }, TMP_Event_supported$q_4.$$arity = 0);
      Opal.defs(self, '$create', TMP_Event_create_5 = function $$create(name, $a_rest) {
        var self = this, args, $iter = TMP_Event_create_5.$$p, block = $iter || nil, klass = nil, event = nil, $writer = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_Event_create_5.$$p = null;
        
        name = self.$name_for(name);
        klass = self.$class_for(name);
        event = klass.$new(klass.$construct(name, $send(klass.$const_get("Definition"), 'new', [], block.$to_proc())));
        
        $writer = [args];
        $send(event, 'arguments=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return event;
      }, TMP_Event_create_5.$$arity = -2);
      if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.constructor"))) {
        Opal.defs(self, '$construct', TMP_Event_construct_6 = function $$construct(name, desc) {
          var self = this;

          return new Event(name, desc)
        }, TMP_Event_construct_6.$$arity = 2)
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.create"))) {
        Opal.defs(self, '$construct', TMP_Event_construct_7 = function $$construct(name, desc) {try {

          var self = this;

          
        var event = document.createEvent("HTMLEvents");
            event.initEvent(name, desc.bubbles, desc.cancelable);

        Opal.ret(self.$Native(event)['$merge!'](desc));
      
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_Event_construct_7.$$arity = 2)
      } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.createObject"))) {
        Opal.defs(self, '$construct', TMP_Event_construct_8 = function $$construct(name, desc) {
          var self = this;

          return self.$Native(document.createEventObject())['$merge!'](desc)['$merge!']({ type: name }).$to_n()
        }, TMP_Event_construct_8.$$arity = 2)
        } else {
        Opal.defs(self, '$construct', TMP_Event_construct_9 = function $$construct(name, desc) {
          var self = this;

          return self.$Native(desc)['$merge!']({ type: name }).$to_n()
        }, TMP_Event_construct_9.$$arity = 2)
      };
      Opal.defs(self, '$new', TMP_Event_new_10 = function(value, callback) {
        var self = this, $iter = TMP_Event_new_10.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (callback == null) {
          callback = nil;
        }
        if ($iter) TMP_Event_new_10.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        if (self['$=='](Opal.const_get_relative($nesting, 'Event'))) {
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Event_new_10, false, $Event), $zuper, $iter)
        };
        klass = self.$class_for((function() {if ($truthy(callback)) {
          return callback.$name()
          } else {
          return value.type
        }; return nil; })());
        if (klass['$=='](Opal.const_get_relative($nesting, 'Event'))) {
          return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Event_new_10, false, $Event), $zuper, $iter)
          } else {
          return klass.$new(value, callback)
        };
      }, TMP_Event_new_10.$$arity = -2);
      self.$attr_reader("callback");
      self.$attr_writer("on");
      
      Opal.defn(self, '$initialize', TMP_Event_initialize_11 = function $$initialize(event, callback) {
        var self = this, $iter = TMP_Event_initialize_11.$$p, $yield = $iter || nil;

        if (callback == null) {
          callback = nil;
        }
        if ($iter) TMP_Event_initialize_11.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Event_initialize_11, false), [event], null);
        return (self.callback = callback);
      }, TMP_Event_initialize_11.$$arity = -2);
      
      Opal.defn(self, '$name', TMP_Event_name_12 = function $$name() {
        var self = this;

        return self["native"].type
      }, TMP_Event_name_12.$$arity = 0);
      
      Opal.defn(self, '$on', TMP_Event_on_13 = function $$on() {
        var $a, self = this;

        return ($truthy($a = self.on) ? $a : Opal.const_get_relative($nesting, 'Target').$convert(self["native"].currentTarget))
      }, TMP_Event_on_13.$$arity = 0);
      
      Opal.defn(self, '$target', TMP_Event_target_14 = function $$target() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Target').$convert(self["native"].srcElement || self["native"].target)
      }, TMP_Event_target_14.$$arity = 0);
      
      Opal.defn(self, '$arguments', TMP_Event_arguments_15 = function() {
        var self = this;

        return self["native"].arguments || []
      }, TMP_Event_arguments_15.$$arity = 0);
      
      Opal.defn(self, '$arguments=', TMP_Event_arguments$eq_16 = function(args) {
        var self = this;

        return self["native"].arguments = args
      }, TMP_Event_arguments$eq_16.$$arity = 1);
      self.$alias_native("bubbles?", "bubbles");
      self.$alias_native("cancelable?", "cancelable");
      self.$alias_native("data");
      self.$alias_native("phase", "eventPhase");
      self.$alias_native("at", "timeStamp");
      
      Opal.defn(self, '$off', TMP_Event_off_17 = function $$off() {
        var self = this;

        if ($truthy(self.callback)) {
          return self.callback.$off()
          } else {
          return nil
        }
      }, TMP_Event_off_17.$$arity = 0);
      
      Opal.defn(self, '$stopped?', TMP_Event_stopped$q_18 = function() {
        var self = this;

        return !!self["native"].stopped
      }, TMP_Event_stopped$q_18.$$arity = 0);
      
      Opal.defn(self, '$stop', TMP_Event_stop_19 = function $$stop() {
        var self = this;

        
        if ($truthy((typeof(self["native"].stopPropagation) !== "undefined"))) {
          self["native"].stopPropagation()};
        return self["native"].stopped = true;
      }, TMP_Event_stop_19.$$arity = 0);
      
      Opal.defn(self, '$prevent', TMP_Event_prevent_20 = function $$prevent() {
        var self = this;

        
        if ($truthy((typeof(self["native"].preventDefault) !== "undefined"))) {
          self["native"].preventDefault()};
        return self["native"].prevented = true;
      }, TMP_Event_prevent_20.$$arity = 0);
      
      Opal.defn(self, '$prevented?', TMP_Event_prevented$q_21 = function() {
        var self = this;

        return !!self["native"].prevented
      }, TMP_Event_prevented$q_21.$$arity = 0);
      return (Opal.defn(self, '$stop!', TMP_Event_stop$B_22 = function() {
        var self = this;

        
        self.$prevent();
        return self.$stop();
      }, TMP_Event_stop$B_22.$$arity = 0), nil) && 'stop!';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/window/view"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$supports?', '$raise']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $View(){};
        var self = $View = $klass($base, $super, 'View', $View);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_View_initialize_1, TMP_View_width_2, TMP_View_height_3, TMP_View_height_4, TMP_View_width_5, TMP_View_width_6, TMP_View_height_7;

        def["native"] = nil;
        
        
        Opal.defn(self, '$initialize', TMP_View_initialize_1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, TMP_View_initialize_1.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.innerSize"))) {
          
          
          Opal.defn(self, '$width', TMP_View_width_2 = function $$width() {
            var self = this;

            return self["native"].innerWidth
          }, TMP_View_width_2.$$arity = 0);
          return (Opal.defn(self, '$height', TMP_View_height_3 = function $$height() {
            var self = this;

            return self["native"].innerHeight
          }, TMP_View_height_3.$$arity = 0), nil) && 'height';
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.clientSize"))) {
          
          
          Opal.defn(self, '$height', TMP_View_height_4 = function $$height() {
            var self = this;

            return self["native"].document.documentElement.clientHeight
          }, TMP_View_height_4.$$arity = 0);
          return (Opal.defn(self, '$width', TMP_View_width_5 = function $$width() {
            var self = this;

            return self["native"].document.documentElement.clientWidth
          }, TMP_View_width_5.$$arity = 0), nil) && 'width';
          } else {
          
          
          Opal.defn(self, '$width', TMP_View_width_6 = function $$width() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window size unsupported")
          }, TMP_View_width_6.$$arity = 0);
          return (Opal.defn(self, '$height', TMP_View_height_7 = function $$height() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window size unsupported")
          }, TMP_View_height_7.$$arity = 0), nil) && 'height';
        };
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/window/size"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$to_n', '$===', '$first', '$values_at', '$width', '$height', '$supports?', '$raise', '$set']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Size(){};
        var self = $Size = $klass($base, $super, 'Size', $Size);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Size_initialize_1, TMP_Size_set_2, TMP_Size_width_3, TMP_Size_height_4, TMP_Size_width_5, TMP_Size_height_6, TMP_Size_width$eq_7, TMP_Size_height$eq_8;

        def["native"] = nil;
        
        
        Opal.defn(self, '$initialize', TMP_Size_initialize_1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, TMP_Size_initialize_1.$$arity = 1);
        
        Opal.defn(self, '$set', TMP_Size_set_2 = function $$set($a_rest) {
          var $b, $c, self = this, args, width = nil, height = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
            $c = args.$first().$values_at("width", "height"), $b = Opal.to_ary($c), (width = ($b[0] == null ? nil : $b[0])), (height = ($b[1] == null ? nil : $b[1])), $c
            } else {
            $c = args, $b = Opal.to_ary($c), (width = ($b[0] == null ? nil : $b[0])), (height = ($b[1] == null ? nil : $b[1])), $c
          };
          width = ($truthy($b = width) ? $b : self.$width());
          height = ($truthy($b = height) ? $b : self.$height());
          self["native"].resizeTo(width, height);
          return self;
        }, TMP_Size_set_2.$$arity = -1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.outerSize"))) {
          
          
          Opal.defn(self, '$width', TMP_Size_width_3 = function $$width() {
            var self = this;

            return self["native"].outerWidth
          }, TMP_Size_width_3.$$arity = 0);
          
          Opal.defn(self, '$height', TMP_Size_height_4 = function $$height() {
            var self = this;

            return self["native"].outerHeight
          }, TMP_Size_height_4.$$arity = 0);
          } else {
          
          
          Opal.defn(self, '$width', TMP_Size_width_5 = function $$width() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window outer size not supported")
          }, TMP_Size_width_5.$$arity = 0);
          
          Opal.defn(self, '$height', TMP_Size_height_6 = function $$height() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window outer size not supported")
          }, TMP_Size_height_6.$$arity = 0);
        };
        
        Opal.defn(self, '$width=', TMP_Size_width$eq_7 = function(value) {
          var self = this;

          return self.$set($hash2(["width"], {"width": value}))
        }, TMP_Size_width$eq_7.$$arity = 1);
        return (Opal.defn(self, '$height=', TMP_Size_height$eq_8 = function(value) {
          var self = this;

          return self.$set($hash2(["height"], {"height": value}))
        }, TMP_Size_height$eq_8.$$arity = 1), nil) && 'height=';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/window/scroll"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_n', '$supports?', '$new', '$raise', '$x', '$position', '$y', '$[]']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Scroll(){};
        var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Scroll_initialize_1, TMP_Scroll_position_2, TMP_Scroll_position_3, TMP_Scroll_position_4, TMP_Scroll_x_5, TMP_Scroll_y_6, TMP_Scroll_to_7, TMP_Scroll_by_8;

        def["native"] = nil;
        
        
        Opal.defn(self, '$initialize', TMP_Scroll_initialize_1 = function $$initialize(window) {
          var self = this;

          
          self.window = window;
          return (self["native"] = window.$to_n());
        }, TMP_Scroll_initialize_1.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.scroll"))) {
          
          Opal.defn(self, '$position', TMP_Scroll_position_2 = function $$position() {
            var self = this;

            
            
        var doc  = self["native"].document,
            root = doc.documentElement,
            body = doc.body;

        var x = root.scrollLeft || body.scrollLeft,
            y = root.scrollTop  || body.scrollTop;
      ;
            return Opal.const_get_relative($nesting, 'Position').$new(x, y);
          }, TMP_Scroll_position_2.$$arity = 0)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.pageOffset"))) {
          
          Opal.defn(self, '$position', TMP_Scroll_position_3 = function $$position() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Position').$new(self["native"].pageXOffset, self["native"].pageYOffset)
          }, TMP_Scroll_position_3.$$arity = 0)
          } else {
          
          Opal.defn(self, '$position', TMP_Scroll_position_4 = function $$position() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window scroll unsupported")
          }, TMP_Scroll_position_4.$$arity = 0)
        };
        
        Opal.defn(self, '$x', TMP_Scroll_x_5 = function $$x() {
          var self = this;

          return self.$position().$x()
        }, TMP_Scroll_x_5.$$arity = 0);
        
        Opal.defn(self, '$y', TMP_Scroll_y_6 = function $$y() {
          var self = this;

          return self.$position().$y()
        }, TMP_Scroll_y_6.$$arity = 0);
        
        Opal.defn(self, '$to', TMP_Scroll_to_7 = function $$to(what) {
          var $a, self = this, x = nil, y = nil;

          
          x = ($truthy($a = what['$[]']("x")) ? $a : self.$x());
          y = ($truthy($a = what['$[]']("y")) ? $a : self.$y());
          self["native"].scrollTo(x, y);
          return self;
        }, TMP_Scroll_to_7.$$arity = 1);
        return (Opal.defn(self, '$by', TMP_Scroll_by_8 = function $$by(what) {
          var $a, self = this, x = nil, y = nil;

          
          x = ($truthy($a = what['$[]']("x")) ? $a : 0);
          y = ($truthy($a = what['$[]']("y")) ? $a : 0);
          self["native"].scrollBy(x, y);
          return self;
        }, TMP_Scroll_by_8.$$arity = 1), nil) && 'by';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/window"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$delete', '$join', '$map', '$===', '$new', '$include', '$target', '$supports?', '$[]', '$raise', '$alert', '$prompt', '$confirm']);
  
  self.$require("browser/window/view");
  self.$require("browser/window/size");
  self.$require("browser/window/scroll");
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_open_2, TMP_Window_3, TMP_Window_alert_4, TMP_Window_prompt_5, TMP_Window_confirm_6, TMP_Window_view_7, TMP_Window_size_8, TMP_Window_scroll_9, TMP_Window_send_10, TMP_Window_send_11, TMP_Window_close_12;

      def["native"] = nil;
      
      Opal.defs(self, '$open', TMP_Window_open_2 = function $$open(url, options) {
        var TMP_1, self = this, name = nil, features = nil;

        
        name = options.$delete("name");
        features = $send(options, 'map', [], (TMP_1 = function(key, value){var self = TMP_1.$$s || this, $case = nil;
if (key == null) key = nil;if (value == null) value = nil;
        
          value = (function() {$case = value;
          if (true['$===']($case)) {return "yes"}
          else if (false['$===']($case)) {return "no"}
          else {return value}})();
          return "" + (key) + "=" + (value);}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1)).$join(",");
        
      var win = window.open(url, name, features);

      if (win == null) {
        return nil;
      }

      return self.$new(win);
    ;
      }, TMP_Window_open_2.$$arity = 2);
      self.$include(Opal.const_get_relative($nesting, 'Native'));
      self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'Target'));
      $send(self, 'target', [], (TMP_Window_3 = function(value){var self = TMP_Window_3.$$s || this;
        if ($gvars.window == null) $gvars.window = nil;
if (value == null) value = nil;
      if ($truthy(value == window)) {
          return $gvars.window
          } else {
          return nil
        }}, TMP_Window_3.$$s = self, TMP_Window_3.$$arity = 1, TMP_Window_3));
      
      Opal.defn(self, '$alert', TMP_Window_alert_4 = function $$alert(value) {
        var self = this;

        
        self["native"].alert(value);
        return value;
      }, TMP_Window_alert_4.$$arity = 1);
      
      Opal.defn(self, '$prompt', TMP_Window_prompt_5 = function $$prompt(value) {
        var self = this;

        return self["native"].prompt(value) || nil
      }, TMP_Window_prompt_5.$$arity = 1);
      
      Opal.defn(self, '$confirm', TMP_Window_confirm_6 = function $$confirm(value) {
        var self = this;

        return self["native"].confirm(value) || false
      }, TMP_Window_confirm_6.$$arity = 1);
      
      Opal.defn(self, '$view', TMP_Window_view_7 = function $$view() {
        var self = this;

        return Opal.const_get_relative($nesting, 'View').$new(self)
      }, TMP_Window_view_7.$$arity = 0);
      
      Opal.defn(self, '$size', TMP_Window_size_8 = function $$size() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Size').$new(self)
      }, TMP_Window_size_8.$$arity = 0);
      
      Opal.defn(self, '$scroll', TMP_Window_scroll_9 = function $$scroll() {
        var self = this;

        return Opal.const_get_relative($nesting, 'Scroll').$new(self)
      }, TMP_Window_scroll_9.$$arity = 0);
      if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Window.send"))) {
        
        Opal.defn(self, '$send', TMP_Window_send_10 = function $$send(message, options) {
          var $a, self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self["native"].postMessage(message, ($truthy($a = options['$[]']("to")) ? $a : "*"))
        }, TMP_Window_send_10.$$arity = -2)
        } else {
        
        Opal.defn(self, '$send', TMP_Window_send_11 = function $$send(message, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "message sending unsupported")
        }, TMP_Window_send_11.$$arity = -2)
      };
      return (Opal.defn(self, '$close', TMP_Window_close_12 = function $$close() {
        var self = this;

        
      return (window.open('', '_self', '') && window.close()) ||
             (window.opener = null && window.close()) ||
             (window.opener = '' && window.close());
    
      }, TMP_Window_close_12.$$arity = 0), nil) && 'close';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  $gvars.window = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Window').$new(window);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_alert_13, TMP_Kernel_prompt_14, TMP_Kernel_confirm_15;

    
    
    Opal.defn(self, '$alert', TMP_Kernel_alert_13 = function $$alert(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$alert(value)
    }, TMP_Kernel_alert_13.$$arity = 1);
    
    Opal.defn(self, '$prompt', TMP_Kernel_prompt_14 = function $$prompt(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$prompt(value)
    }, TMP_Kernel_prompt_14.$$arity = 1);
    
    Opal.defn(self, '$confirm', TMP_Kernel_confirm_15 = function $$confirm(value) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $gvars.window.$confirm(value)
    }, TMP_Kernel_confirm_15.$$arity = 1);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/node_set"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$uniq', '$map', '$flatten', '$DOM', '$convert', '$respond_to?', '$each', '$__send__', '$to_proc', '$===', '$at_css', '$at_xpath', '$[]', '$css', '$select', '$=~', '$search', '$xpath']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $NodeSet(){};
        var self = $NodeSet = $klass($base, $super, 'NodeSet', $NodeSet);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_NodeSet_$$_2, TMP_NodeSet_initialize_3, TMP_NodeSet_method_missing_4, TMP_NodeSet_at_css_7, TMP_NodeSet_at_xpath_9, TMP_NodeSet_css_11, TMP_NodeSet_filter_13, TMP_NodeSet_search_15, TMP_NodeSet_xpath_17, TMP_NodeSet_to_ary_18;

        def.literal = nil;
        
        Opal.defs(self, '$[]', TMP_NodeSet_$$_2 = function($a_rest) {
          var TMP_1, self = this, nodes;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          nodes = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            nodes[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$new($send(nodes.$flatten(), 'map', [], (TMP_1 = function(x){var self = TMP_1.$$s || this;
if (x == null) x = nil;
          return self.$DOM(Opal.const_get_relative($nesting, 'Native').$convert(x))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1)).$uniq())
        }, TMP_NodeSet_$$_2.$$arity = -1);
        
        Opal.defn(self, '$initialize', TMP_NodeSet_initialize_3 = function $$initialize(literal) {
          var self = this;

          return (self.literal = literal)
        }, TMP_NodeSet_initialize_3.$$arity = 1);
        
        Opal.defn(self, '$method_missing', TMP_NodeSet_method_missing_4 = function $$method_missing(name, $a_rest) {
          var TMP_5, self = this, args, $iter = TMP_NodeSet_method_missing_4.$$p, block = $iter || nil, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_NodeSet_method_missing_4.$$p = null;
          
          if ($truthy(self.literal['$respond_to?'](name))) {
            } else {
            
            $send(self, 'each', [], (TMP_5 = function(el){var self = TMP_5.$$s || this;
if (el == null) el = nil;
            return $send(el, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc())}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
            return self;
          };
          result = $send(self.literal, '__send__', [name].concat(Opal.to_a(args)), block.$to_proc());
          if ($truthy(result === self.literal)) {
            return self
          } else if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](result))) {
            return Opal.const_get_relative($nesting, 'NodeSet').$new(result)
            } else {
            return result
          };
        }, TMP_NodeSet_method_missing_4.$$arity = -2);
        
        Opal.defn(self, '$at_css', TMP_NodeSet_at_css_7 = function $$at_css($a_rest) {try {

          var TMP_6, self = this, rules;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          rules = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            rules[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          $send(self, 'each', [], (TMP_6 = function(node){var self = TMP_6.$$s || this;
if (node == null) node = nil;
          if ($truthy((node = $send(node, 'at_css', Opal.to_a(rules))))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_NodeSet_at_css_7.$$arity = -1);
        
        Opal.defn(self, '$at_xpath', TMP_NodeSet_at_xpath_9 = function $$at_xpath($a_rest) {try {

          var TMP_8, self = this, paths;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          $send(self, 'each', [], (TMP_8 = function(node){var self = TMP_8.$$s || this;
if (node == null) node = nil;
          if ($truthy((node = $send(node, 'at_xpath', Opal.to_a(paths))))) {
              Opal.ret(node)
              } else {
              return nil
            }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));
          return nil;
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_NodeSet_at_xpath_9.$$arity = -1);
        
        Opal.defn(self, '$css', TMP_NodeSet_css_11 = function $$css(path) {
          var TMP_10, self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], (TMP_10 = function(node){var self = TMP_10.$$s || this;
if (node == null) node = nil;
          return node.$css(path)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10)))
        }, TMP_NodeSet_css_11.$$arity = 1);
        
        Opal.defn(self, '$filter', TMP_NodeSet_filter_13 = function $$filter(expression) {
          var TMP_12, self = this;

          return $send(self.literal, 'select', [], (TMP_12 = function(node){var self = TMP_12.$$s || this;
if (node == null) node = nil;
          return node['$=~'](expression)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
        }, TMP_NodeSet_filter_13.$$arity = 1);
        
        Opal.defn(self, '$search', TMP_NodeSet_search_15 = function $$search($a_rest) {
          var TMP_14, self = this, what;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          what = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            what[$arg_idx - 0] = arguments[$arg_idx];
          }
          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], (TMP_14 = function(node){var self = TMP_14.$$s || this;
if (node == null) node = nil;
          return $send(node, 'search', Opal.to_a(what))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14)))
        }, TMP_NodeSet_search_15.$$arity = -1);
        
        Opal.defn(self, '$xpath', TMP_NodeSet_xpath_17 = function $$xpath(path) {
          var TMP_16, self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(self.literal, 'map', [], (TMP_16 = function(node){var self = TMP_16.$$s || this;
if (node == null) node = nil;
          return node.$xpath(path)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16)))
        }, TMP_NodeSet_xpath_17.$$arity = 1);
        return (Opal.defn(self, '$to_ary', TMP_NodeSet_to_ary_18 = function $$to_ary() {
          var self = this;

          return self.literal
        }, TMP_NodeSet_to_ary_18.$$arity = 0), nil) && 'to_ary';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/node"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$convert', '$respond_to?', '$each', '$<<', '$native?', '$===', '$>>', '$DOM', '$to_proc', '$parent', '$last', '$pop', '$select!', '$=~', '$remove_child', '$remove', '$children', '$supports?', '$node_type', '$first', '$select', '$element_children', '$to_s', '$next', '$!', '$element?', '$previous', '$try_convert', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Node(){};
        var self = $Node = $klass($base, $super, 'Node', $Node);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Node_new_1, TMP_Node_$eq$eq_2, TMP_Node_$lt$lt_4, TMP_Node_$gt$gt_6, TMP_Node_add_child_7, TMP_Node_add_next_sibling_8, TMP_Node_add_previous_sibling_9, TMP_Node_append_to_10, TMP_Node_ancestors_12, TMP_Node_remove_13, TMP_Node_clear_14, TMP_Node_content_15, TMP_Node_content$eq_16, TMP_Node_content_17, TMP_Node_content$eq_18, TMP_Node_content_19, TMP_Node_content$eq_20, TMP_Node_blank$q_21, TMP_Node_cdata$q_22, TMP_Node_child_23, TMP_Node_children_24, TMP_Node_children$eq_25, TMP_Node_comment$q_26, TMP_Node_document_27, TMP_Node_document$q_28, TMP_Node_elem$q_29, TMP_Node_element_children_30, TMP_Node_first_element_child_31, TMP_Node_fragment$q_32, TMP_Node_inner_html_33, TMP_Node_inner_html$eq_34, TMP_Node_last_element_child_35, TMP_Node_name_36, TMP_Node_name$eq_37, TMP_Node_namespace_38, TMP_Node_next_39, TMP_Node_next_element_40, TMP_Node_node_type_41, TMP_Node_parent_42, TMP_Node_parent$eq_43, TMP_Node_parse_44, TMP_Node_path_45, TMP_Node_prepend_to_46, TMP_Node_previous_47, TMP_Node_previous_element_48, TMP_Node_remove_child_49, TMP_Node_replace_50, TMP_Node_text$q_51, TMP_Node_traverse_52, TMP_Node_value_53, TMP_Node_value$eq_54, TMP_Node_inspect_55;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        Opal.const_set($nesting[0], 'ELEMENT_NODE', 1);
        Opal.const_set($nesting[0], 'ATTRIBUTE_NODE', 2);
        Opal.const_set($nesting[0], 'TEXT_NODE', 3);
        Opal.const_set($nesting[0], 'CDATA_SECTION_NODE', 4);
        Opal.const_set($nesting[0], 'ENTITY_REFERENCE_NOCE', 5);
        Opal.const_set($nesting[0], 'ENTITY_NODE', 6);
        Opal.const_set($nesting[0], 'PROCESSING_INSTRUCTION_NODE', 7);
        Opal.const_set($nesting[0], 'COMMENT_NODE', 8);
        Opal.const_set($nesting[0], 'DOCUMENT_NODE', 9);
        Opal.const_set($nesting[0], 'DOCUMENT_TYPE_NODE', 10);
        Opal.const_set($nesting[0], 'DOCUMENT_FRAGMENT_NODE', 11);
        Opal.const_set($nesting[0], 'NOTATION_NODE', 12);
        Opal.defs(self, '$new', TMP_Node_new_1 = function(value) {
          var $a, self = this, $iter = TMP_Node_new_1.$$p, $yield = $iter || nil, klass = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;
          if (self.classes == null) self.classes = nil;

          if ($iter) TMP_Node_new_1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if (self['$=='](Opal.const_get_relative($nesting, 'Node'))) {
            
            self.classes = ($truthy($a = self.classes) ? $a : [nil, Opal.const_get_relative($nesting, 'Element'), Opal.const_get_relative($nesting, 'Attribute'), Opal.const_get_relative($nesting, 'Text'), Opal.const_get_relative($nesting, 'CDATA'), nil, nil, nil, Opal.const_get_relative($nesting, 'Comment'), Opal.const_get_relative($nesting, 'Document'), nil, Opal.const_get_relative($nesting, 'DocumentFragment')]);
            if ($truthy((klass = self.classes['$[]'](value.nodeType)))) {
              return klass.$new(value)
              } else {
              return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "cannot instantiate a non derived Node object")
            };
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Node_new_1, false, $Node), $zuper, $iter)
          }
        }, TMP_Node_new_1.$$arity = 1);
        
        Opal.defn(self, '$==', TMP_Node_$eq$eq_2 = function(other) {
          var self = this;

          return self["native"] === Opal.const_get_relative($nesting, 'Native').$convert(other)
        }, TMP_Node_$eq$eq_2.$$arity = 1);
        
        Opal.defn(self, '$<<', TMP_Node_$lt$lt_4 = function(node) {
          var TMP_3, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](node, "each"))) {
            
            $send(node, 'each', [], (TMP_3 = function(n){var self = TMP_3.$$s || this;
if (n == null) n = nil;
            return self['$<<'](n)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
            return self;};
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          self["native"].appendChild(node);
          return self;
        }, TMP_Node_$lt$lt_4.$$arity = 1);
        
        Opal.defn(self, '$>>', TMP_Node_$gt$gt_6 = function(node) {
          var TMP_5, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'Opal')['$respond_to?'](node, "each"))) {
            
            $send(node, 'each', [], (TMP_5 = function(n){var self = TMP_5.$$s || this;
if (n == null) n = nil;
            return self['$>>'](n)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
            return self;};
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          if ($truthy(self["native"].firstChild == null)) {
            self["native"].appendChild(node)
            } else {
            self["native"].insertBefore(node, self["native"].firstChild)
          };
          return self;
        }, TMP_Node_$gt$gt_6.$$arity = 1);
        
        Opal.defn(self, '$add_child', TMP_Node_add_child_7 = function $$add_child(node) {
          var self = this, $iter = TMP_Node_add_child_7.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          if ($iter) TMP_Node_add_child_7.$$p = null;
          
          if ($truthy(node)) {
            } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          return self['$<<'](node);
        }, TMP_Node_add_child_7.$$arity = -1);
        
        Opal.defn(self, '$add_next_sibling', TMP_Node_add_next_sibling_8 = function $$add_next_sibling(node) {
          var self = this, $iter = TMP_Node_add_next_sibling_8.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          if ($iter) TMP_Node_add_next_sibling_8.$$p = null;
          
          if ($truthy(node)) {
            } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"].nextSibling);
        }, TMP_Node_add_next_sibling_8.$$arity = -1);
        
        Opal.defn(self, '$add_previous_sibling', TMP_Node_add_previous_sibling_9 = function $$add_previous_sibling(node) {
          var self = this, $iter = TMP_Node_add_previous_sibling_9.$$p, block = $iter || nil;

          if (node == null) {
            node = nil;
          }
          if ($iter) TMP_Node_add_previous_sibling_9.$$p = null;
          
          if ($truthy(node)) {
            } else {
            node = $send(self, 'DOM', [], block.$to_proc())
          };
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          return self["native"].parentNode.insertBefore(node, self["native"]);
        }, TMP_Node_add_previous_sibling_9.$$arity = -1);
        Opal.alias(self, "after", "add_next_sibling");
        
        Opal.defn(self, '$append_to', TMP_Node_append_to_10 = function $$append_to(node) {
          var self = this;

          return node['$<<'](self)
        }, TMP_Node_append_to_10.$$arity = 1);
        
        Opal.defn(self, '$ancestors', TMP_Node_ancestors_12 = function $$ancestors(expression) {
          var $a, TMP_11, self = this, parents = nil, parent = nil;

          if (expression == null) {
            expression = nil;
          }
          
          if ($truthy(self.$parent())) {
            } else {
            return Opal.const_get_relative($nesting, 'NodeSet')['$[]']()
          };
          parents = [self.$parent()];
          while ($truthy((parent = parents.$last().$parent()))) {
            parents['$<<'](parent)
          };
          if ($truthy(Opal.const_get_relative($nesting, 'Document')['$==='](parents.$last()))) {
            parents.$pop()};
          if ($truthy(expression)) {
            $send(parents, 'select!', [], (TMP_11 = function(p){var self = TMP_11.$$s || this;
if (p == null) p = nil;
            return p['$=~'](expression)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))};
          return Opal.const_get_relative($nesting, 'NodeSet').$new(parents);
        }, TMP_Node_ancestors_12.$$arity = -1);
        Opal.alias(self, "before", "add_previous_sibling");
        
        Opal.defn(self, '$remove', TMP_Node_remove_13 = function $$remove() {
          var self = this;

          if ($truthy(self.$parent())) {
            return self.$parent().$remove_child(self)
            } else {
            return nil
          }
        }, TMP_Node_remove_13.$$arity = 0);
        
        Opal.defn(self, '$clear', TMP_Node_clear_14 = function $$clear() {
          var self = this;

          return self.$children().$remove()
        }, TMP_Node_clear_14.$$arity = 0);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.textContent"))) {
          
          
          Opal.defn(self, '$content', TMP_Node_content_15 = function $$content() {
            var self = this;

            return self["native"].textContent
          }, TMP_Node_content_15.$$arity = 0);
          
          Opal.defn(self, '$content=', TMP_Node_content$eq_16 = function(value) {
            var self = this;

            return self["native"].textContent = value
          }, TMP_Node_content$eq_16.$$arity = 1);
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.innerText"))) {
          
          
          Opal.defn(self, '$content', TMP_Node_content_17 = function $$content() {
            var self = this;

            return self["native"].innerText
          }, TMP_Node_content_17.$$arity = 0);
          
          Opal.defn(self, '$content=', TMP_Node_content$eq_18 = function(value) {
            var self = this;

            return self["native"].innerText = value
          }, TMP_Node_content$eq_18.$$arity = 1);
          } else {
          
          
          Opal.defn(self, '$content', TMP_Node_content_19 = function $$content() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "node text content unsupported")
          }, TMP_Node_content_19.$$arity = 0);
          
          Opal.defn(self, '$content=', TMP_Node_content$eq_20 = function(value) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "node text content unsupported")
          }, TMP_Node_content$eq_20.$$arity = 1);
        };
        
        Opal.defn(self, '$blank?', TMP_Node_blank$q_21 = function() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_blank$q_21.$$arity = 0);
        
        Opal.defn(self, '$cdata?', TMP_Node_cdata$q_22 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'CDATA_SECTION_NODE'))
        }, TMP_Node_cdata$q_22.$$arity = 0);
        
        Opal.defn(self, '$child', TMP_Node_child_23 = function $$child() {
          var self = this;

          return self.$children().$first()
        }, TMP_Node_child_23.$$arity = 0);
        
        Opal.defn(self, '$children', TMP_Node_children_24 = function $$children() {
          var self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].childNodes))
        }, TMP_Node_children_24.$$arity = 0);
        
        Opal.defn(self, '$children=', TMP_Node_children$eq_25 = function(node) {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_children$eq_25.$$arity = 1);
        
        Opal.defn(self, '$comment?', TMP_Node_comment$q_26 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'COMMENT_NODE'))
        }, TMP_Node_comment$q_26.$$arity = 0);
        
        Opal.defn(self, '$document', TMP_Node_document_27 = function $$document() {
          var self = this;

          if ($truthy((typeof(self["native"].ownerDocument) !== "undefined"))) {
            return self.$DOM(self["native"].ownerDocument)
            } else {
            return nil
          }
        }, TMP_Node_document_27.$$arity = 0);
        
        Opal.defn(self, '$document?', TMP_Node_document$q_28 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'DOCUMENT_NODE'))
        }, TMP_Node_document$q_28.$$arity = 0);
        
        Opal.defn(self, '$elem?', TMP_Node_elem$q_29 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'ELEMENT_NODE'))
        }, TMP_Node_elem$q_29.$$arity = 0);
        Opal.alias(self, "element?", "elem?");
        
        Opal.defn(self, '$element_children', TMP_Node_element_children_30 = function $$element_children() {
          var self = this;

          return $send(self.$children(), 'select', [], "element?".$to_proc())
        }, TMP_Node_element_children_30.$$arity = 0);
        Opal.alias(self, "elements", "element_children");
        
        Opal.defn(self, '$first_element_child', TMP_Node_first_element_child_31 = function $$first_element_child() {
          var self = this;

          return self.$element_children().$first()
        }, TMP_Node_first_element_child_31.$$arity = 0);
        
        Opal.defn(self, '$fragment?', TMP_Node_fragment$q_32 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'DOCUMENT_FRAGMENT_NODE'))
        }, TMP_Node_fragment$q_32.$$arity = 0);
        
        Opal.defn(self, '$inner_html', TMP_Node_inner_html_33 = function $$inner_html() {
          var self = this;

          return self["native"].innerHTML
        }, TMP_Node_inner_html_33.$$arity = 0);
        
        Opal.defn(self, '$inner_html=', TMP_Node_inner_html$eq_34 = function(value) {
          var self = this;

          return self["native"].innerHTML = value
        }, TMP_Node_inner_html$eq_34.$$arity = 1);
        Opal.alias(self, "inner_text", "content");
        Opal.alias(self, "inner_text=", "content=");
        
        Opal.defn(self, '$last_element_child', TMP_Node_last_element_child_35 = function $$last_element_child() {
          var self = this;

          return self.$element_children().$last()
        }, TMP_Node_last_element_child_35.$$arity = 0);
        
        Opal.defn(self, '$name', TMP_Node_name_36 = function $$name() {
          var self = this;

          return self["native"].nodeName || nil
        }, TMP_Node_name_36.$$arity = 0);
        
        Opal.defn(self, '$name=', TMP_Node_name$eq_37 = function(value) {
          var self = this;

          return self["native"].nodeName = value.$to_s()
        }, TMP_Node_name$eq_37.$$arity = 1);
        
        Opal.defn(self, '$namespace', TMP_Node_namespace_38 = function $$namespace() {
          var self = this;

          return self["native"].namespaceURI || nil
        }, TMP_Node_namespace_38.$$arity = 0);
        
        Opal.defn(self, '$next', TMP_Node_next_39 = function $$next() {
          var self = this;

          if ($truthy(self["native"].nextSibling != null)) {
            return self.$DOM(self["native"].nextSibling)
            } else {
            return nil
          }
        }, TMP_Node_next_39.$$arity = 0);
        Opal.alias(self, "next=", "add_next_sibling");
        
        Opal.defn(self, '$next_element', TMP_Node_next_element_40 = function $$next_element() {
          var $a, $b, self = this, current = nil;

          
          current = self.$next();
          while ($truthy(($truthy($b = current) ? current['$element?']()['$!']() : $b))) {
            current = current.$next()
          };
          return current;
        }, TMP_Node_next_element_40.$$arity = 0);
        Opal.alias(self, "next_sibling", "next");
        Opal.alias(self, "node_name", "name");
        Opal.alias(self, "node_name=", "name=");
        
        Opal.defn(self, '$node_type', TMP_Node_node_type_41 = function $$node_type() {
          var self = this;

          return self["native"].nodeType
        }, TMP_Node_node_type_41.$$arity = 0);
        
        Opal.defn(self, '$parent', TMP_Node_parent_42 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentNode != null)) {
            return self.$DOM(self["native"].parentNode)
            } else {
            return nil
          }
        }, TMP_Node_parent_42.$$arity = 0);
        
        Opal.defn(self, '$parent=', TMP_Node_parent$eq_43 = function(node) {
          var self = this;

          return self["native"].parentNode = Opal.const_get_relative($nesting, 'Native').$convert(node)
        }, TMP_Node_parent$eq_43.$$arity = 1);
        
        Opal.defn(self, '$parse', TMP_Node_parse_44 = function $$parse(text, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_parse_44.$$arity = -2);
        
        Opal.defn(self, '$path', TMP_Node_path_45 = function $$path() {
          var self = this;

          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_path_45.$$arity = 0);
        
        Opal.defn(self, '$prepend_to', TMP_Node_prepend_to_46 = function $$prepend_to(node) {
          var self = this;

          return node['$>>'](self)
        }, TMP_Node_prepend_to_46.$$arity = 1);
        
        Opal.defn(self, '$previous', TMP_Node_previous_47 = function $$previous() {
          var self = this;

          if ($truthy(self["native"].previousSibling != null)) {
            return self.$DOM(self["native"].previousSibling)
            } else {
            return nil
          }
        }, TMP_Node_previous_47.$$arity = 0);
        Opal.alias(self, "previous=", "add_previous_sibling");
        
        Opal.defn(self, '$previous_element', TMP_Node_previous_element_48 = function $$previous_element() {
          var $a, $b, self = this, current = nil;

          
          current = self.$previous();
          while ($truthy(($truthy($b = current) ? current['$element?']()['$!']() : $b))) {
            current = current.$previous()
          };
          return current;
        }, TMP_Node_previous_element_48.$$arity = 0);
        Opal.alias(self, "previous_sibling", "previous");
        
        Opal.defn(self, '$remove_child', TMP_Node_remove_child_49 = function $$remove_child(node) {
          var self = this;

          return self["native"].removeChild(Opal.const_get_relative($nesting, 'Native').$try_convert(node))
        }, TMP_Node_remove_child_49.$$arity = 1);
        
        Opal.defn(self, '$replace', TMP_Node_replace_50 = function $$replace(node) {
          var self = this;

          
          if ($truthy(self['$native?'](node))) {
          } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](node))) {
            node = self["native"].ownerDocument.createTextNode(node)
            } else {
            node = Opal.const_get_relative($nesting, 'Native').$convert(node)
          };
          self["native"].parentNode.replaceChild(node, self["native"]);
          return node;
        }, TMP_Node_replace_50.$$arity = 1);
        Opal.alias(self, "replace_with", "replace");
        Opal.alias(self, "text", "content");
        Opal.alias(self, "text=", "content=");
        
        Opal.defn(self, '$text?', TMP_Node_text$q_51 = function() {
          var self = this;

          return self.$node_type()['$=='](Opal.const_get_relative($nesting, 'TEXT_NODE'))
        }, TMP_Node_text$q_51.$$arity = 0);
        
        Opal.defn(self, '$traverse', TMP_Node_traverse_52 = function $$traverse() {
          var self = this, $iter = TMP_Node_traverse_52.$$p, block = $iter || nil;

          if ($iter) TMP_Node_traverse_52.$$p = null;
          return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
        }, TMP_Node_traverse_52.$$arity = 0);
        Opal.alias(self, "type", "node_type");
        
        Opal.defn(self, '$value', TMP_Node_value_53 = function $$value() {
          var self = this;

          return self["native"].nodeValue || nil
        }, TMP_Node_value_53.$$arity = 0);
        
        Opal.defn(self, '$value=', TMP_Node_value$eq_54 = function(value) {
          var self = this;

          return self["native"].nodeValue = value
        }, TMP_Node_value$eq_54.$$arity = 1);
        return (Opal.defn(self, '$inspect', TMP_Node_inspect_55 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Node: " + (self.$name()) + ">"
        }, TMP_Node_inspect_55.$$arity = 0), nil) && 'inspect';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/attribute"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$alias_native', '$supports?', '$==', '$name']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Attribute(){};
        var self = $Attribute = $klass($base, $super, 'Attribute', $Attribute);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Attribute_id$q_1;

        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        self.$alias_native("name");
        self.$alias_native("value");
        self.$alias_native("value=");
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Attr.isId"))) {
          return self.$alias_native("id?", "isId")
          } else {
          return (Opal.defn(self, '$id?', TMP_Attribute_id$q_1 = function() {
            var self = this;

            return self.$name()['$==']("id")
          }, TMP_Attribute_id$q_1.$$arity = 0), nil) && 'id?'
        };
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/character_data"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $CharacterData(){};
        var self = $CharacterData = $klass($base, $super, 'CharacterData', $CharacterData);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CharacterData_append_1, TMP_CharacterData_data_2, TMP_CharacterData_delete_3, TMP_CharacterData_insert_4, TMP_CharacterData_replace_5, TMP_CharacterData_substring_6;

        def["native"] = nil;
        
        
        Opal.defn(self, '$append', TMP_CharacterData_append_1 = function $$append(string) {
          var self = this;

          
          self["native"].appendData(string);
          return self;
        }, TMP_CharacterData_append_1.$$arity = 1);
        
        Opal.defn(self, '$data', TMP_CharacterData_data_2 = function $$data() {
          var self = this;

          return self["native"].data
        }, TMP_CharacterData_data_2.$$arity = 0);
        
        Opal.defn(self, '$delete', TMP_CharacterData_delete_3 = function(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          
          self["native"].deleteData(offset, count);
          return self;
        }, TMP_CharacterData_delete_3.$$arity = -2);
        
        Opal.defn(self, '$insert', TMP_CharacterData_insert_4 = function $$insert(string, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          
          self["native"].insertData(offset, string);
          return self;
        }, TMP_CharacterData_insert_4.$$arity = -2);
        self.$alias_native("length");
        
        Opal.defn(self, '$replace', TMP_CharacterData_replace_5 = function $$replace(string, offset, count) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          if (count == null) {
            count = self["native"].length;
          }
          
          self["native"].replaceData(offset, count, string);
          return self;
        }, TMP_CharacterData_replace_5.$$arity = -2);
        return (Opal.defn(self, '$substring', TMP_CharacterData_substring_6 = function $$substring(count, offset) {
          var self = this;

          if (offset == null) {
            offset = 0;
          }
          return self["native"].substringData(offset, count)
        }, TMP_CharacterData_substring_6.$$arity = -2), nil) && 'substring';
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/text"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$create_text', '$DOM', '$data']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Text(){};
        var self = $Text = $klass($base, $super, 'Text', $Text);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Text_create_1, TMP_Text_whole_2, TMP_Text_split_3, TMP_Text_inspect_4;

        def["native"] = nil;
        
        Opal.defs(self, '$create', TMP_Text_create_1 = function $$create($a_rest) {
          var self = this, args;
          if ($gvars.document == null) $gvars.document = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send($gvars.document, 'create_text', Opal.to_a(args))
        }, TMP_Text_create_1.$$arity = -1);
        
        Opal.defn(self, '$whole', TMP_Text_whole_2 = function $$whole() {
          var self = this;

          return self["native"].wholeText
        }, TMP_Text_whole_2.$$arity = 0);
        
        Opal.defn(self, '$split', TMP_Text_split_3 = function $$split(offset) {
          var self = this;

          return self.$DOM(self["native"].splitText(offset))
        }, TMP_Text_split_3.$$arity = 1);
        return (Opal.defn(self, '$inspect', TMP_Text_inspect_4 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Text: " + (self.$data()) + ">"
        }, TMP_Text_inspect_4.$$arity = 0), nil) && 'inspect';
      })($nesting[0], Opal.const_get_relative($nesting, 'CharacterData'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/cdata"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $CDATA(){};
        var self = $CDATA = $klass($base, $super, 'CDATA', $CDATA);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CDATA_inspect_1;

        return (Opal.defn(self, '$inspect', TMP_CDATA_inspect_1 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::CDATA: " + (self.$value()) + ">"
        }, TMP_CDATA_inspect_1.$$arity = 0), nil) && 'inspect'
      })($nesting[0], Opal.const_get_relative($nesting, 'Text'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/comment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$value']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Comment(){};
        var self = $Comment = $klass($base, $super, 'Comment', $Comment);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Comment_inspect_1;

        return (Opal.defn(self, '$inspect', TMP_Comment_inspect_1 = function $$inspect() {
          var self = this;

          return "" + "#<DOM::Comment: " + (self.$value()) + ">"
        }, TMP_Comment_inspect_1.$$arity = 0), nil) && 'inspect'
      })($nesting[0], Opal.const_get_relative($nesting, 'CharacterData'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/attributes"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]', '$supports?', '$==', '$to_s', '$include', '$enum_for', '$each', '$attribute_nodes', '$name', '$value', '$!', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Attributes(){};
          var self = $Attributes = $klass($base, $super, 'Attributes', $Attributes);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Attributes_initialize_1, $a, TMP_Attributes_$$_2, TMP_Attributes_$$$eq_3, TMP_Attributes_$$_4, TMP_Attributes_$$$eq_5, TMP_Attributes_each_6, TMP_Attributes_has_key$q_8, TMP_Attributes_merge$B_10;

          def.namespace = def["native"] = def.element = nil;
          
          self.$attr_reader("namespace");
          
          Opal.defn(self, '$initialize', TMP_Attributes_initialize_1 = function $$initialize(element, options) {
            var self = this;

            
            self.element = element;
            self["native"] = element.$to_n();
            return (self.namespace = options['$[]']("namespace"));
          }, TMP_Attributes_initialize_1.$$arity = 2);
          if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className")) ? $a : Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor")))) {
            
            
            Opal.defn(self, '$[]', TMP_Attributes_$$_2 = function(name, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              
              if ($truthy((($a = name['$==']("class")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className") : name['$==']("class")))) {
                name = "className"
              } else if ($truthy((($a = name['$==']("for")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor") : name['$==']("for")))) {
                name = "htmlFor"};
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil
              };
            }, TMP_Attributes_$$_2.$$arity = -2);
            
            Opal.defn(self, '$[]=', TMP_Attributes_$$$eq_3 = function(name, value, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              
              if ($truthy((($a = name['$==']("class")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.className") : name['$==']("class")))) {
                name = "className"
              } else if ($truthy((($a = name['$==']("for")) ? Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.htmlFor") : name['$==']("for")))) {
                name = "htmlFor"};
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value)
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s())
              };
            }, TMP_Attributes_$$$eq_3.$$arity = -3);
            } else {
            
            
            Opal.defn(self, '$[]', TMP_Attributes_$$_4 = function(name, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].getAttributeNS(namespace.$to_s(), name.$to_s()) || nil
                } else {
                return self["native"].getAttribute(name.$to_s()) || nil
              }
            }, TMP_Attributes_$$_4.$$arity = -2);
            
            Opal.defn(self, '$[]=', TMP_Attributes_$$$eq_5 = function(name, value, options) {
              var $a, self = this, namespace = nil;

              if (options == null) {
                options = $hash2([], {});
              }
              if ($truthy((namespace = ($truthy($a = options['$[]']("namespace")) ? $a : self.namespace)))) {
                return self["native"].setAttributeNS(namespace.$to_s(), name.$to_s(), value)
                } else {
                return self["native"].setAttribute(name.$to_s(), value.$to_s())
              }
            }, TMP_Attributes_$$$eq_5.$$arity = -3);
          };
          self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
          
          Opal.defn(self, '$each', TMP_Attributes_each_6 = function $$each() {
            var TMP_7, self = this, $iter = TMP_Attributes_each_6.$$p, block = $iter || nil;

            if ($iter) TMP_Attributes_each_6.$$p = null;
            
            if ((block !== nil)) {
              } else {
              return self.$enum_for("each")
            };
            $send(self.element.$attribute_nodes(), 'each', [], (TMP_7 = function(attr){var self = TMP_7.$$s || this;
if (attr == null) attr = nil;
            return Opal.yieldX(block, [attr.$name(), attr.$value()]);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
            return self;
          }, TMP_Attributes_each_6.$$arity = 0);
          Opal.alias(self, "get", "[]");
          
          Opal.defn(self, '$has_key?', TMP_Attributes_has_key$q_8 = function(name) {
            var self = this;

            return self['$[]'](name)['$!']()['$!']()
          }, TMP_Attributes_has_key$q_8.$$arity = 1);
          
          Opal.defn(self, '$merge!', TMP_Attributes_merge$B_10 = function(hash) {
            var TMP_9, self = this;

            
            $send(hash, 'each', [], (TMP_9 = function(name, value){var self = TMP_9.$$s || this, $writer = nil;
if (name == null) name = nil;if (value == null) value = nil;
            
              $writer = [name, value];
              $send(self, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9));
            return self;
          }, TMP_Attributes_merge$B_10.$$arity = 1);
          return Opal.alias(self, "set", "[]=");
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/data"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$to_n', '$include', '$enum_for', '$call', '$each', '$attributes', '$=~', '$[]']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Data(){};
          var self = $Data = $klass($base, $super, 'Data', $Data);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Data_initialize_1, TMP_Data_each_2, TMP_Data_assign_5, TMP_Data_$$_6, TMP_Data_$$$eq_7;

          def["native"] = def.element = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Data_initialize_1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            self["native"] = element.$to_n();
            if ($truthy((typeof(self["native"].$data) !== "undefined"))) {
              return nil
              } else {
              return self["native"].$data = {}
            };
          }, TMP_Data_initialize_1.$$arity = 1);
          self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
          
          Opal.defn(self, '$each', TMP_Data_each_2 = function $$each() {
            var TMP_3, self = this, $iter = TMP_Data_each_2.$$p, block = $iter || nil;

            if ($iter) TMP_Data_each_2.$$p = null;
            
            if ($truthy(block)) {
              } else {
              return self.$enum_for("each")
            };
            
      var data = self["native"].$data;

      for (var key in data) {
        block.$call(key, data[key]);
      }
    ;
            $send(self.element.$attributes(), 'each', [], (TMP_3 = function(name, value){var self = TMP_3.$$s || this, $a;
if (name == null) name = nil;if (value == null) value = nil;
            if ($truthy(name['$=~'](/^data-(.*)$/))) {
                return block.$call((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), value)
                } else {
                return nil
              }}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3));
            return self;
          }, TMP_Data_each_2.$$arity = 0);
          
          Opal.defn(self, '$assign', TMP_Data_assign_5 = function $$assign(data) {
            var TMP_4, self = this;

            
            $send(data, 'each', [], (TMP_4 = function(name, value){var self = TMP_4.$$s || this;
              if (self["native"] == null) self["native"] = nil;
if (name == null) name = nil;if (value == null) value = nil;
            return self["native"].$data[name] = value}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4));
            return self;
          }, TMP_Data_assign_5.$$arity = 1);
          
          Opal.defn(self, '$[]', TMP_Data_$$_6 = function(name) {
            var self = this, data = nil;

            
            if ($truthy((data = self.element['$[]']("" + "data-" + (name))))) {
              return data};
            
      var value = self["native"].$data[name];

      if (value === undefined) {
        return nil;
      }
      else {
        return value;
      }
    ;
          }, TMP_Data_$$_6.$$arity = 1);
          return (Opal.defn(self, '$[]=', TMP_Data_$$$eq_7 = function(name, value) {
            var self = this;

            return self["native"].$data[name] = value
          }, TMP_Data_$$$eq_7.$$arity = 2), nil) && '[]=';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/position"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$offset', '$get', '$parent', '$new', '$==', '$[]', '$style', '$=~', '$+', '$x', '$to_i', '$x=', '$-', '$y', '$y=']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Position(){};
          var self = $Position = $klass($base, $super, 'Position', $Position);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Position_initialize_1, TMP_Position_get_2, TMP_Position_x_3, TMP_Position_y_4;

          def.element = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Position_initialize_1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, TMP_Position_initialize_1.$$arity = 1);
          
          Opal.defn(self, '$get', TMP_Position_get_2 = function $$get() {
            var self = this, offset = nil, position = nil, parent = nil, parent_offset = nil, $writer = nil;

            
            offset = self.element.$offset();
            position = offset.$get();
            parent = offset.$parent();
            parent_offset = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new(0, 0);
            if (self.element.$style()['$[]']("position")['$==']("fixed")) {
              
              if ($truthy(parent['$=~']("html"))) {
                } else {
                parent_offset = parent.$offset()
              };
              
              $writer = [$rb_plus(parent_offset.$x(), parent.$style()['$[]']("border-top-width").$to_i())];
              $send(parent_offset, 'x=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_plus(parent_offset.$y(), parent.$style()['$[]']("border-left-width").$to_i())];
              $send(parent_offset, 'y=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;};
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new($rb_minus($rb_minus(position.$x(), parent_offset.$x()), self.element.$style()['$[]']("margin-left").$to_i()), $rb_minus($rb_minus(position.$y(), parent_offset.$y()), self.element.$style()['$[]']("margin-top").$to_i()));
          }, TMP_Position_get_2.$$arity = 0);
          
          Opal.defn(self, '$x', TMP_Position_x_3 = function $$x() {
            var self = this;

            return self.$get().$x()
          }, TMP_Position_x_3.$$arity = 0);
          return (Opal.defn(self, '$y', TMP_Position_y_4 = function $$y() {
            var self = this;

            return self.$get().$y()
          }, TMP_Position_y_4.$$arity = 0), nil) && 'y';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/offset"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$DOM', '$root', '$document', '$x', '$get', '$set', '$y', '$supports?', '$window', '$new', '$[]', '$style!', '$==', '$[]=', '$style', '$-', '$to_u', '$===', '$first', '$+', '$px']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Offset(){};
          var self = $Offset = $klass($base, $super, 'Offset', $Offset);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Offset_initialize_1, TMP_Offset_parent_2, TMP_Offset_x_3, TMP_Offset_x$eq_4, TMP_Offset_y_5, TMP_Offset_y$eq_6, TMP_Offset_get_7, TMP_Offset_get_8, TMP_Offset_set_9;

          def["native"] = def.element = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Offset_initialize_1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, TMP_Offset_initialize_1.$$arity = 1);
          
          Opal.defn(self, '$parent', TMP_Offset_parent_2 = function $$parent() {
            var self = this;

            return self.$DOM(self["native"].offsetParent || self.element.$document().$root().$to_n())
          }, TMP_Offset_parent_2.$$arity = 0);
          
          Opal.defn(self, '$x', TMP_Offset_x_3 = function $$x() {
            var self = this;

            return self.$get().$x()
          }, TMP_Offset_x_3.$$arity = 0);
          
          Opal.defn(self, '$x=', TMP_Offset_x$eq_4 = function(value) {
            var self = this;

            return self.$set(value, nil)
          }, TMP_Offset_x$eq_4.$$arity = 1);
          
          Opal.defn(self, '$y', TMP_Offset_y_5 = function $$y() {
            var self = this;

            return self.$get().$y()
          }, TMP_Offset_y_5.$$arity = 0);
          
          Opal.defn(self, '$y=', TMP_Offset_y$eq_6 = function(value) {
            var self = this;

            return self.$set(nil, value)
          }, TMP_Offset_y$eq_6.$$arity = 1);
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.getBoundingClientRect"))) {
            
            Opal.defn(self, '$get', TMP_Offset_get_7 = function $$get() {
              var self = this, doc = nil, root = nil, win = nil;

              
              doc = self.element.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var box = self["native"].getBoundingClientRect(),
            y   = box.top + (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x   = box.left + (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new(x, y);
            }, TMP_Offset_get_7.$$arity = 0)
            } else {
            
            Opal.defn(self, '$get', TMP_Offset_get_8 = function $$get() {
              var self = this, doc = nil, root = nil, win = nil;

              
              doc = self.$document();
              root = doc.$root().$to_n();
              win = doc.$window().$to_n();
              
        var y = (win.pageYOffset || root.scrollTop) - (root.clientTop || 0),
            x = (win.pageXOffset || root.scrollLeft) - (root.clientLeft || 0);
      ;
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new(x, y);
            }, TMP_Offset_get_8.$$arity = 0)
          };
          return (Opal.defn(self, '$set', TMP_Offset_set_9 = function $$set($a_rest) {
            var $b, $c, self = this, value, position = nil, $writer = nil, offset = nil, top = nil, left = nil, x = nil, y = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            value = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              value[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            position = self.element['$style!']()['$[]']("position");
            if (position['$==']("static")) {
              
              $writer = ["position", "relative"];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            offset = self.$get();
            top = self.element['$style!']()['$[]']("top").$to_u();
            left = self.element['$style!']()['$[]']("left").$to_u();
            if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position')['$==='](value.$first()))) {
              $b = [value.$first().$x(), value.$first().$y()], (x = $b[0]), (y = $b[1]), $b
            } else if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](value.$first()))) {
              $b = [value.$first()['$[]']("x"), value.$first()['$[]']("y")], (x = $b[0]), (y = $b[1]), $b
              } else {
              $c = value, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
            };
            if ($truthy(x)) {
              
              $writer = ["left", $rb_plus($rb_minus(x.$px(), offset.$x()), left)];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(y)) {
              
              $writer = ["top", $rb_plus($rb_minus(y.$px(), offset.$y()), top)];
              $send(self.element.$style(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              } else {
              return nil
            };
          }, TMP_Offset_set_9.$$arity = -1), nil) && 'set';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/scroll"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$to_n', '$supports?', '$===', '$first', '$[]', '$x', '$y', '$new', '$raise', '$position']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Scroll(){};
          var self = $Scroll = $klass($base, $super, 'Scroll', $Scroll);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Scroll_initialize_1, TMP_Scroll_to_2, TMP_Scroll_position_3, TMP_Scroll_to_4, TMP_Scroll_position_5, TMP_Scroll_to_6, TMP_Scroll_position_7, TMP_Scroll_x_8, TMP_Scroll_y_9, TMP_Scroll_height_10, TMP_Scroll_width_11, TMP_Scroll_by_12, TMP_Scroll_to_13, TMP_Scroll_to_14, TMP_Scroll_to$B_15;

          def["native"] = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Scroll_initialize_1 = function $$initialize(element) {
            var self = this;

            
            self.element = element;
            return (self["native"] = element.$to_n());
          }, TMP_Scroll_initialize_1.$$arity = 1);
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.scroll"))) {
            
            
            Opal.defn(self, '$to', TMP_Scroll_to_2 = function $$to($a_rest) {
              var $b, $c, self = this, args, x = nil, y = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              
              if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
                
                x = ($truthy($b = args.$first()['$[]']("x")) ? $b : self.$x());
                y = ($truthy($b = args.$first()['$[]']("y")) ? $b : self.$y());
                } else {
                $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
              };
              self["native"].scrollTop  = y;
              return self["native"].scrollLeft = x;
            }, TMP_Scroll_to_2.$$arity = -1);
            
            Opal.defn(self, '$position', TMP_Scroll_position_3 = function $$position() {
              var self = this;

              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'Position').$new(self["native"].scrollLeft, self["native"].scrollTop)
            }, TMP_Scroll_position_3.$$arity = 0);
          } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.pageOffset"))) {
            
            
            Opal.defn(self, '$to', TMP_Scroll_to_4 = function $$to($a_rest) {
              var $b, $c, self = this, args, x = nil, y = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              
              if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
                
                x = ($truthy($b = args.$first()['$[]']("x")) ? $b : self.$x());
                y = ($truthy($b = args.$first()['$[]']("y")) ? $b : self.$y());
                } else {
                $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
              };
              self["native"].pageYOffset = y;
              return self["native"].pageXOffset = x;
            }, TMP_Scroll_to_4.$$arity = -1);
            
            Opal.defn(self, '$position', TMP_Scroll_position_5 = function $$position() {
              var self = this;

              return Opal.const_get_relative($nesting, 'Position').$new(self["native"].pageXOffset, self["native"].pageYOffset)
            }, TMP_Scroll_position_5.$$arity = 0);
            } else {
            
            
            Opal.defn(self, '$to', TMP_Scroll_to_6 = function $$to($a_rest) {
              var self = this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "scroll on element unsupported")
            }, TMP_Scroll_to_6.$$arity = -1);
            
            Opal.defn(self, '$position', TMP_Scroll_position_7 = function $$position() {
              var self = this;

              return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "scroll on element unsupported")
            }, TMP_Scroll_position_7.$$arity = 0);
          };
          
          Opal.defn(self, '$x', TMP_Scroll_x_8 = function $$x() {
            var self = this;

            return self.$position().$x()
          }, TMP_Scroll_x_8.$$arity = 0);
          
          Opal.defn(self, '$y', TMP_Scroll_y_9 = function $$y() {
            var self = this;

            return self.$position().$y()
          }, TMP_Scroll_y_9.$$arity = 0);
          
          Opal.defn(self, '$height', TMP_Scroll_height_10 = function $$height() {
            var self = this;

            return self["native"].scrollHeight
          }, TMP_Scroll_height_10.$$arity = 0);
          
          Opal.defn(self, '$width', TMP_Scroll_width_11 = function $$width() {
            var self = this;

            return self["native"].scrollWidth
          }, TMP_Scroll_width_11.$$arity = 0);
          
          Opal.defn(self, '$by', TMP_Scroll_by_12 = function $$by($a_rest) {
            var $b, $c, self = this, args, x = nil, y = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](args.$first()))) {
              
              x = ($truthy($b = args.$first()['$[]']("x")) ? $b : 0);
              y = ($truthy($b = args.$first()['$[]']("y")) ? $b : 0);
              } else {
              $c = args, $b = Opal.to_ary($c), (x = ($b[0] == null ? nil : $b[0])), (y = ($b[1] == null ? nil : $b[1])), $c
            };
            self["native"].scrollBy(x, y);
            return self;
          }, TMP_Scroll_by_12.$$arity = -1);
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.scrollIntoViewIfNeeded"))) {
            
            Opal.defn(self, '$to', TMP_Scroll_to_13 = function $$to(align) {
              var self = this;

              if (align == null) {
                align = true;
              }
              return self["native"].scrollIntoViewIfNeeded(align)
            }, TMP_Scroll_to_13.$$arity = -1)
            } else {
            
            Opal.defn(self, '$to', TMP_Scroll_to_14 = function $$to(align) {
              var self = this;

              if (align == null) {
                align = true;
              }
              return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'))
            }, TMP_Scroll_to_14.$$arity = -1)
          };
          return (Opal.defn(self, '$to!', TMP_Scroll_to$B_15 = function(align) {
            var self = this;

            if (align == null) {
              align = true;
            }
            return self["native"].scrollIntoView(align)
          }, TMP_Scroll_to$B_15.$$arity = -1), nil) && 'to!';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/size"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$to_n', '$[]=', '$style', '$-']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Size(){};
          var self = $Size = $klass($base, $super, 'Size', $Size);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Size_initialize_1, TMP_Size_width_2, TMP_Size_width$eq_3, TMP_Size_height_4, TMP_Size_height$eq_5;

          def["native"] = def.element = nil;
          
          self.$attr_reader("element");
          
          Opal.defn(self, '$initialize', TMP_Size_initialize_1 = function $$initialize(element, $a_rest) {
            var self = this, inc;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            inc = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              inc[$arg_idx - 1] = arguments[$arg_idx];
            }
            
            self.element = element;
            self["native"] = element.$to_n();
            return (self.include = inc);
          }, TMP_Size_initialize_1.$$arity = -2);
          
          Opal.defn(self, '$width', TMP_Size_width_2 = function $$width() {
            var self = this;

            return self["native"].offsetWidth
          }, TMP_Size_width_2.$$arity = 0);
          
          Opal.defn(self, '$width=', TMP_Size_width$eq_3 = function(value) {
            var self = this, $writer = nil;

            
            $writer = ["width", value];
            $send(self.element.$style(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_Size_width$eq_3.$$arity = 1);
          
          Opal.defn(self, '$height', TMP_Size_height_4 = function $$height() {
            var self = this;

            return self["native"].offsetHeight
          }, TMP_Size_height_4.$$arity = 0);
          return (Opal.defn(self, '$height=', TMP_Size_height$eq_5 = function(value) {
            var self = this, $writer = nil;

            
            $writer = ["height", value];
            $send(self.element.$style(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_Size_height$eq_5.$$arity = 1), nil) && 'height=';
        })($nesting[0], null, $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/input"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Input(){};
          var self = $Input = $klass($base, $super, 'Input', $Input);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Input_value_1, TMP_Input_value$eq_2, TMP_Input_checked$q_3, TMP_Input_clear_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$value', TMP_Input_value_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, TMP_Input_value_1.$$arity = 0);
          
          Opal.defn(self, '$value=', TMP_Input_value$eq_2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, TMP_Input_value$eq_2.$$arity = 1);
          
          Opal.defn(self, '$checked?', TMP_Input_checked$q_3 = function() {
            var self = this;

            return self["native"].checked
          }, TMP_Input_checked$q_3.$$arity = 0);
          return (Opal.defn(self, '$clear', TMP_Input_clear_4 = function $$clear() {
            var self = this;

            return self["native"].value = ''
          }, TMP_Input_clear_4.$$arity = 0), nil) && 'clear';
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/select"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$[]', '$new', '$DOM', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Select(){};
          var self = $Select = $klass($base, $super, 'Select', $Select);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Select_value_1, TMP_Select_labels_2, TMP_Select_options_3, TMP_Select_option_4, TMP_Select_index_5;

          def["native"] = nil;
          
          
          Opal.defn(self, '$value', TMP_Select_value_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, TMP_Select_value_1.$$arity = 0);
          
          Opal.defn(self, '$labels', TMP_Select_labels_2 = function $$labels() {
            var self = this;

            return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].labels))
          }, TMP_Select_labels_2.$$arity = 0);
          
          Opal.defn(self, '$options', TMP_Select_options_3 = function $$options() {
            var self = this;

            return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].options))
          }, TMP_Select_options_3.$$arity = 0);
          
          Opal.defn(self, '$option', TMP_Select_option_4 = function $$option() {
            var self = this;

            return self.$DOM(self["native"].options[self["native"].selectedIndex])
          }, TMP_Select_option_4.$$arity = 0);
          
          Opal.defn(self, '$index', TMP_Select_index_5 = function $$index() {
            var self = this;

            return self["native"].selectedIndex
          }, TMP_Select_index_5.$$arity = 0);
          self.$alias_native("multiple?", "multiple");
          self.$alias_native("required?", "required");
          return self.$alias_native("length");
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/image"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        
        (function($base, $super, $parent_nesting) {
          function $Image(){};
          var self = $Image = $klass($base, $super, 'Image', $Image);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Image_complete$q_1, TMP_Image_cross$q_2, TMP_Image_height_3, TMP_Image_width_4;

          def["native"] = nil;
          
          
          Opal.defn(self, '$complete?', TMP_Image_complete$q_1 = function() {
            var self = this;

            return self["native"].complete
          }, TMP_Image_complete$q_1.$$arity = 0);
          
          Opal.defn(self, '$cross?', TMP_Image_cross$q_2 = function() {
            var self = this;

            return self["native"].crossOrigin
          }, TMP_Image_cross$q_2.$$arity = 0);
          
          Opal.defn(self, '$height', TMP_Image_height_3 = function $$height() {
            var self = this;

            return self["native"].naturalHeight
          }, TMP_Image_height_3.$$arity = 0);
          return (Opal.defn(self, '$width', TMP_Image_width_4 = function $$width() {
            var self = this;

            return self["native"].naturalWidth
          }, TMP_Image_width_4.$$arity = 0), nil) && 'width';
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting);
        return Opal.const_set($nesting[0], 'Img', Opal.const_get_relative($nesting, 'Image'));
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/template"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$DOM']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Template(){};
          var self = $Template = $klass($base, $super, 'Template', $Template);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Template_content_1;

          def["native"] = nil;
          return (Opal.defn(self, '$content', TMP_Template_content_1 = function $$content() {
            var self = this;

            return self.$DOM(self["native"].content)
          }, TMP_Template_content_1.$$arity = 0), nil) && 'content'
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element/textarea"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Textarea(){};
          var self = $Textarea = $klass($base, $super, 'Textarea', $Textarea);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Textarea_value_1, TMP_Textarea_value$eq_2, TMP_Textarea_clear_3;

          def["native"] = nil;
          
          
          Opal.defn(self, '$value', TMP_Textarea_value_1 = function $$value() {
            var self = this;

            
      if (self["native"].value == "") {
        return nil;
      }
      else {
        return self["native"].value;
      }
    
          }, TMP_Textarea_value_1.$$arity = 0);
          
          Opal.defn(self, '$value=', TMP_Textarea_value$eq_2 = function(value) {
            var self = this;

            return self["native"].value = value
          }, TMP_Textarea_value$eq_2.$$arity = 1);
          return (Opal.defn(self, '$clear', TMP_Textarea_clear_3 = function $$clear() {
            var self = this;

            return self["native"].value = ''
          }, TMP_Textarea_clear_3.$$arity = 0), nil) && 'clear';
        })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/element"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$create_element', '$==', '$capitalize', '$include?', '$constants', '$new', '$const_get', '$include', '$target', '$DOM', '$supports?', '$loaded?', '$raise', '$[]', '$map', '$xpath', '$get', '$attributes', '$set', '$+', '$class_names', '$empty?', '$join', '$uniq', '$first', '$css', '$each', '$alias_native', '$reject', '$split', '$to_proc', '$===', '$assign', '$height', '$size', '$height=', '$-', '$to_s', '$clear', '$document', '$<<', '$to_a', '$downcase', '$name', '$id', '$offset', '$flatten', '$concat', '$replace', '$apply', '$to_n', '$window', '$width', '$width=']);
  
  self.$require("browser/dom/element/attributes");
  self.$require("browser/dom/element/data");
  self.$require("browser/dom/element/position");
  self.$require("browser/dom/element/offset");
  self.$require("browser/dom/element/scroll");
  self.$require("browser/dom/element/size");
  self.$require("browser/dom/element/input");
  self.$require("browser/dom/element/select");
  self.$require("browser/dom/element/image");
  self.$require("browser/dom/element/template");
  self.$require("browser/dom/element/textarea");
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_create_1, TMP_Element_new_2, TMP_Element_3, TMP_Element_$eq$_4, TMP_Element_$eq$_5, TMP_Element_$eq$_6, TMP_Element_$eq$_7, TMP_Element_$eq$_8, TMP_Element_$eq$_9, TMP_Element_$eq$_10, TMP_Element_$_12, TMP_Element_$$_13, TMP_Element_$$$eq_14, TMP_Element_add_class_15, TMP_Element_at_16, TMP_Element_at_css_18, TMP_Element_at_xpath_20, TMP_Element_attributes_21, TMP_Element_attribute_nodes_22, TMP_Element_class_names_23, TMP_Element_css_24, TMP_Element_css_25, TMP_Element_css_26, TMP_Element_data_27, TMP_Element_height_28, TMP_Element_height$eq_29, TMP_Element_id_30, TMP_Element_id$eq_31, TMP_Element_inner_dom_32, TMP_Element_inner_dom$eq_33, TMP_Element_inspect_34, TMP_Element_offset_35, TMP_Element_offset$eq_36, TMP_Element_position_37, TMP_Element_scroll_38, TMP_Element_search_40, TMP_Element_style_41, TMP_Element_style$B_42, TMP_Element_style$B_43, TMP_Element_style$B_44, TMP_Element_remove_attribute_45, TMP_Element_remove_class_46, TMP_Element_size_47, TMP_Element_width_48, TMP_Element_width$eq_49, TMP_Element_window_50, $a, TMP_Element_xpath_51, TMP_Element_xpath_52;

        def["native"] = nil;
        
        Opal.defs(self, '$create', TMP_Element_create_1 = function $$create($a_rest) {
          var self = this, args;
          if ($gvars.document == null) $gvars.document = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send($gvars.document, 'create_element', Opal.to_a(args))
        }, TMP_Element_create_1.$$arity = -1);
        Opal.defs(self, '$new', TMP_Element_new_2 = function(node) {
          var self = this, $iter = TMP_Element_new_2.$$p, $yield = $iter || nil, name = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) TMP_Element_new_2.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          if (self['$=='](Opal.const_get_relative($nesting, 'Element'))) {
            
            name = (node.nodeName).$capitalize();
            if ($truthy(Opal.const_get_relative($nesting, 'Element').$constants()['$include?'](name))) {
              return Opal.const_get_relative($nesting, 'Element').$const_get(name).$new(node)
              } else {
              return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Element_new_2, false, $Element), $zuper, $iter)
            };
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Element_new_2, false, $Element), $zuper, $iter)
          }
        }, TMP_Element_new_2.$$arity = 1);
        self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'Target'));
        $send(self, 'target', [], (TMP_Element_3 = function(value){var self = TMP_Element_3.$$s || this;
if (value == null) value = nil;
        try {
            return self.$DOM(value)
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }}, TMP_Element_3.$$s = self, TMP_Element_3.$$arity = 1, TMP_Element_3));
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_4 = function(selector) {
            var self = this;

            return self["native"].matches(selector)
          }, TMP_Element_$eq$_4.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches (Opera)"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_5 = function(selector) {
            var self = this;

            return self["native"].oMatchesSelector(selector)
          }, TMP_Element_$eq$_5.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches (Internet Explorer)"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_6 = function(selector) {
            var self = this;

            return self["native"].msMatchesSelector(selector)
          }, TMP_Element_$eq$_6.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches (Firefox)"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_7 = function(selector) {
            var self = this;

            return self["native"].mozMatchesSelector(selector)
          }, TMP_Element_$eq$_7.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Element.matches (Chrome)"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_8 = function(selector) {
            var self = this;

            return self["native"].webkitMatchesSelector(selector)
          }, TMP_Element_$eq$_8.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$loaded?']("Sizzle"))) {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_9 = function(selector) {
            var self = this;

            return Sizzle.matchesSelector(self["native"], selector)
          }, TMP_Element_$eq$_9.$$arity = 1)
          } else {
          
          Opal.defn(self, '$=~', TMP_Element_$eq$_10 = function(selector) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "selector matching unsupported")
          }, TMP_Element_$eq$_10.$$arity = 1)
        };
        
        Opal.defn(self, '$/', TMP_Element_$_12 = function($a_rest) {
          var TMP_11, self = this, paths;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          return Opal.const_get_relative($nesting, 'NodeSet')['$[]']($send(paths, 'map', [], (TMP_11 = function(path){var self = TMP_11.$$s || this;
if (path == null) path = nil;
          return self.$xpath(path)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11)))
        }, TMP_Element_$_12.$$arity = -1);
        
        Opal.defn(self, '$[]', TMP_Element_$$_13 = function(name, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$attributes().$get(name, options)
        }, TMP_Element_$$_13.$$arity = -2);
        
        Opal.defn(self, '$[]=', TMP_Element_$$$eq_14 = function(name, value, options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return self.$attributes().$set(name, value, options)
        }, TMP_Element_$$$eq_14.$$arity = -3);
        
        Opal.defn(self, '$add_class', TMP_Element_add_class_15 = function $$add_class($a_rest) {
          var self = this, names, classes = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          classes = $rb_plus(self.$class_names(), names);
          if ($truthy(classes['$empty?']())) {
            } else {
            self["native"].className = classes.$uniq().$join(" ")
          };
          return self;
        }, TMP_Element_add_class_15.$$arity = -1);
        
        Opal.defn(self, '$at', TMP_Element_at_16 = function $$at(path_or_selector) {
          var $a, self = this;

          return ($truthy($a = self.$xpath(path_or_selector).$first()) ? $a : self.$css(path_or_selector).$first())
        }, TMP_Element_at_16.$$arity = 1);
        
        Opal.defn(self, '$at_css', TMP_Element_at_css_18 = function $$at_css($a_rest) {
          var TMP_17, self = this, rules, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          rules = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            rules[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(rules, 'each', [], (TMP_17 = function(rule){var self = TMP_17.$$s || this;
if (rule == null) rule = nil;
          if ($truthy((result = self.$css(rule).$first()))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            }}, TMP_17.$$s = self, TMP_17.$$brk = $brk, TMP_17.$$arity = 1, TMP_17))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, TMP_Element_at_css_18.$$arity = -1);
        
        Opal.defn(self, '$at_xpath', TMP_Element_at_xpath_20 = function $$at_xpath($a_rest) {
          var TMP_19, self = this, paths, result = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          paths = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            paths[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          result = nil;
          (function(){var $brk = Opal.new_brk(); try {return $send(paths, 'each', [], (TMP_19 = function(path){var self = TMP_19.$$s || this;
if (path == null) path = nil;
          if ($truthy((result = self.$xpath(path).$first()))) {
              
              Opal.brk(nil, $brk)
              } else {
              return nil
            }}, TMP_19.$$s = self, TMP_19.$$brk = $brk, TMP_19.$$arity = 1, TMP_19))
          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
          return result;
        }, TMP_Element_at_xpath_20.$$arity = -1);
        Opal.alias(self, "attr", "[]");
        Opal.alias(self, "attribute", "[]");
        
        Opal.defn(self, '$attributes', TMP_Element_attributes_21 = function $$attributes(options) {
          var self = this;

          if (options == null) {
            options = $hash2([], {});
          }
          return Opal.const_get_relative($nesting, 'Attributes').$new(self, options)
        }, TMP_Element_attributes_21.$$arity = -1);
        
        Opal.defn(self, '$attribute_nodes', TMP_Element_attribute_nodes_22 = function $$attribute_nodes() {
          var self = this;

          return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].attributes, $hash2(["get"], {"get": "item"})))
        }, TMP_Element_attribute_nodes_22.$$arity = 0);
        self.$alias_native("class_name", "className");
        
        Opal.defn(self, '$class_names', TMP_Element_class_names_23 = function $$class_names() {
          var self = this;

          return $send((self["native"].className).$split(/\s+/), 'reject', [], "empty?".$to_proc())
        }, TMP_Element_class_names_23.$$arity = 0);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Query.css"))) {
          
          Opal.defn(self, '$css', TMP_Element_css_24 = function $$css(path) {
            var self = this;

            try {
              return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].querySelectorAll(path)))
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  return Opal.const_get_relative($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_Element_css_24.$$arity = 1)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$loaded?']("Sizzle"))) {
          
          Opal.defn(self, '$css', TMP_Element_css_25 = function $$css(path) {
            var self = this;

            try {
              return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Sizzle(path, self["native"]))
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  return Opal.const_get_relative($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_Element_css_25.$$arity = 1)
          } else {
          
          Opal.defn(self, '$css', TMP_Element_css_26 = function $$css(selector) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "query by CSS selector unsupported")
          }, TMP_Element_css_26.$$arity = 1)
        };
        
        Opal.defn(self, '$data', TMP_Element_data_27 = function $$data(value) {
          var self = this, data = nil;

          if (value == null) {
            value = nil;
          }
          
          data = Opal.const_get_relative($nesting, 'Data').$new(self);
          if ($truthy(value)) {
            } else {
            return data
          };
          if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](value))) {
            data.$assign(value)
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "unknown data type")
          };
          return self;
        }, TMP_Element_data_27.$$arity = -1);
        Opal.alias(self, "get_attribute", "[]");
        Opal.alias(self, "get", "[]");
        
        Opal.defn(self, '$height', TMP_Element_height_28 = function $$height() {
          var self = this;

          return self.$size().$height()
        }, TMP_Element_height_28.$$arity = 0);
        
        Opal.defn(self, '$height=', TMP_Element_height$eq_29 = function(value) {
          var self = this, $writer = nil;

          
          $writer = [value];
          $send(self.$size(), 'height=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_Element_height$eq_29.$$arity = 1);
        
        Opal.defn(self, '$id', TMP_Element_id_30 = function $$id() {
          var self = this;

          
      var id = self["native"].id;

      if (id === "") {
        return nil;
      }
      else {
        return id;
      }
    
        }, TMP_Element_id_30.$$arity = 0);
        
        Opal.defn(self, '$id=', TMP_Element_id$eq_31 = function(value) {
          var self = this;

          return self["native"].id = value.$to_s()
        }, TMP_Element_id$eq_31.$$arity = 1);
        
        Opal.defn(self, '$inner_dom', TMP_Element_inner_dom_32 = function $$inner_dom() {
          var self = this, $iter = TMP_Element_inner_dom_32.$$p, block = $iter || nil, doc = nil;

          if ($iter) TMP_Element_inner_dom_32.$$p = null;
          
          self.$clear();
          doc = self.$document();
          return self['$<<']($send(Opal.const_get_relative($nesting, 'Builder'), 'new', [doc, self], block.$to_proc()).$to_a());
        }, TMP_Element_inner_dom_32.$$arity = 0);
        
        Opal.defn(self, '$inner_dom=', TMP_Element_inner_dom$eq_33 = function(node) {
          var self = this;

          
          self.$clear();
          return self['$<<'](node);
        }, TMP_Element_inner_dom$eq_33.$$arity = 1);
        
        Opal.defn(self, '$inspect', TMP_Element_inspect_34 = function $$inspect() {
          var self = this, inspect = nil;

          
          inspect = self.$name().$downcase();
          if ($truthy(self.$id())) {
            inspect = $rb_plus(inspect, $rb_plus($rb_plus(".", self.$id()), "!"))};
          if ($truthy(self.$class_names()['$empty?']())) {
            } else {
            inspect = $rb_plus(inspect, $rb_plus(".", self.$class_names().$join(".")))
          };
          return "" + "#<DOM::Element: " + (inspect) + ">";
        }, TMP_Element_inspect_34.$$arity = 0);
        
        Opal.defn(self, '$offset', TMP_Element_offset_35 = function $$offset($a_rest) {
          var self = this, values, off = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          values = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            values[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          off = Opal.const_get_relative($nesting, 'Offset').$new(self);
          if ($truthy(values['$empty?']())) {
            } else {
            $send(off, 'set', Opal.to_a(values))
          };
          return off;
        }, TMP_Element_offset_35.$$arity = -1);
        
        Opal.defn(self, '$offset=', TMP_Element_offset$eq_36 = function(value) {
          var self = this;

          return $send(self.$offset(), 'set', Opal.to_a(value))
        }, TMP_Element_offset$eq_36.$$arity = 1);
        
        Opal.defn(self, '$position', TMP_Element_position_37 = function $$position() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Position').$new(self)
        }, TMP_Element_position_37.$$arity = 0);
        
        Opal.defn(self, '$scroll', TMP_Element_scroll_38 = function $$scroll() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Scroll').$new(self)
        }, TMP_Element_scroll_38.$$arity = 0);
        
        Opal.defn(self, '$search', TMP_Element_search_40 = function $$search($a_rest) {
          var TMP_39, self = this, selectors;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          selectors = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            selectors[$arg_idx - 0] = arguments[$arg_idx];
          }
          return Opal.const_get_relative($nesting, 'NodeSet').$new($send(selectors, 'map', [], (TMP_39 = function(selector){var self = TMP_39.$$s || this;
if (selector == null) selector = nil;
          return self.$xpath(selector).$to_a().$concat(self.$css(selector).$to_a())}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39)).$flatten().$uniq())
        }, TMP_Element_search_40.$$arity = -1);
        Opal.alias(self, "set", "[]=");
        Opal.alias(self, "set_attribute", "[]=");
        
        Opal.defn(self, '$style', TMP_Element_style_41 = function $$style(data) {
          var $a, self = this, $iter = TMP_Element_style_41.$$p, block = $iter || nil, style = nil;

          if (data == null) {
            data = nil;
          }
          if ($iter) TMP_Element_style_41.$$p = null;
          
          style = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'Declaration').$new(self["native"].style);
          if ($truthy(($truthy($a = data) ? $a : block))) {
            } else {
            return style
          };
          if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](data))) {
            style.$replace(data)
          } else if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](data))) {
            style.$assign(data)
          } else if ($truthy(block)) {
            $send(style, 'apply', [], block.$to_proc())
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "unknown data type")
          };
          return self;
        }, TMP_Element_style_41.$$arity = -1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("CSS.computed"))) {
          
          Opal.defn(self, '$style!', TMP_Element_style$B_42 = function() {
            var self = this;

            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'Declaration').$new(self.$window().$to_n().getComputedStyle(self["native"], null))
          }, TMP_Element_style$B_42.$$arity = 0)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("CSS.current"))) {
          
          Opal.defn(self, '$style!', TMP_Element_style$B_43 = function() {
            var self = this;

            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'Declaration').$new(self["native"].currentStyle)
          }, TMP_Element_style$B_43.$$arity = 0)
          } else {
          
          Opal.defn(self, '$style!', TMP_Element_style$B_44 = function() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "computed style unsupported")
          }, TMP_Element_style$B_44.$$arity = 0)
        };
        
        Opal.defn(self, '$remove_attribute', TMP_Element_remove_attribute_45 = function $$remove_attribute(name) {
          var self = this;

          return self["native"].removeAttribute(name)
        }, TMP_Element_remove_attribute_45.$$arity = 1);
        
        Opal.defn(self, '$remove_class', TMP_Element_remove_class_46 = function $$remove_class($a_rest) {
          var self = this, names, classes = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            names[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          classes = $rb_minus(self.$class_names(), names);
          if ($truthy(classes['$empty?']())) {
            self["native"].removeAttribute('class')
            } else {
            self["native"].className = classes.$join(" ")
          };
          return self;
        }, TMP_Element_remove_class_46.$$arity = -1);
        
        Opal.defn(self, '$size', TMP_Element_size_47 = function $$size($a_rest) {
          var self = this, inc;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          inc = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            inc[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(Opal.const_get_relative($nesting, 'Size'), 'new', [self].concat(Opal.to_a(inc)))
        }, TMP_Element_size_47.$$arity = -1);
        
        Opal.defn(self, '$width', TMP_Element_width_48 = function $$width() {
          var self = this;

          return self.$size().$width()
        }, TMP_Element_width_48.$$arity = 0);
        
        Opal.defn(self, '$width=', TMP_Element_width$eq_49 = function(value) {
          var self = this, $writer = nil;

          
          $writer = [value];
          $send(self.$size(), 'width=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, TMP_Element_width$eq_49.$$arity = 1);
        
        Opal.defn(self, '$window', TMP_Element_window_50 = function $$window() {
          var self = this;

          return self.$document().$window()
        }, TMP_Element_window_50.$$arity = 0);
        if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Browser')['$supports?']("Query.xpath")) ? $a : Opal.const_get_relative($nesting, 'Browser')['$loaded?']("wicked-good-xpath")))) {
          
          if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$loaded?']("wicked-good-xpath"))) {
            wgxpath.install()};
          return (Opal.defn(self, '$xpath', TMP_Element_xpath_51 = function $$xpath(path) {
            var self = this;

            try {
              return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new((self["native"].ownerDocument || self["native"]).evaluate(path,
           self["native"], null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null), $hash2(["get", "length"], {"get": "snapshotItem", "length": "snapshotLength"})))
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  return Opal.const_get_relative($nesting, 'NodeSet')['$[]']()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_Element_xpath_51.$$arity = 1), nil) && 'xpath';
          } else {
          return (Opal.defn(self, '$xpath', TMP_Element_xpath_52 = function $$xpath(path) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "query by XPath unsupported")
          }, TMP_Element_xpath_52.$$arity = 1), nil) && 'xpath'
        };
      })($nesting[0], Opal.const_get_relative($nesting, 'Node'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/document"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$DOM', '$first', '$css', '$xpath', '$[]', '$supports?', '$raise', '$ready?', '$call', '$on', '$off', '$convert', '$new']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Document(){};
        var self = $Document = $klass($base, $super, 'Document', $Document);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Document_$$_1, TMP_Document_body_2, TMP_Document_create_element_3, TMP_Document_create_text_4, TMP_Document_document_5, TMP_Document_head_6, TMP_Document_inspect_7, TMP_Document_ready_8, TMP_Document_ready_10, TMP_Document_ready_12, TMP_Document_ready$q_13, TMP_Document_root_14, TMP_Document_root$eq_15, TMP_Document_style_sheets_17, TMP_Document_title_18, TMP_Document_title$eq_19, TMP_Document_window_20, TMP_Document_window_21, TMP_Document_window_22;

        def["native"] = nil;
        
        
        Opal.defn(self, '$[]', TMP_Document_$$_1 = function(what) {
          var $a, self = this;

          
          
      var result = self["native"].getElementById(what);

      if (result) {
        return self.$DOM(result);
      }
    ;
          return ($truthy($a = self.$css(what).$first()) ? $a : self.$xpath(what).$first());
        }, TMP_Document_$$_1.$$arity = 1);
        Opal.alias(self, "at", "[]");
        
        Opal.defn(self, '$body', TMP_Document_body_2 = function $$body() {
          var self = this;

          return self.$DOM(self["native"].body)
        }, TMP_Document_body_2.$$arity = 0);
        
        Opal.defn(self, '$create_element', TMP_Document_create_element_3 = function $$create_element(name, options) {
          var self = this, ns = nil;

          if (options == null) {
            options = $hash2([], {});
          }
          if ($truthy((ns = options['$[]']("namespace")))) {
            return self.$DOM(self["native"].createElementNS(ns, name))
            } else {
            return self.$DOM(self["native"].createElement(name))
          }
        }, TMP_Document_create_element_3.$$arity = -2);
        
        Opal.defn(self, '$create_text', TMP_Document_create_text_4 = function $$create_text(content) {
          var self = this;

          return self.$DOM(self["native"].createTextNode(content))
        }, TMP_Document_create_text_4.$$arity = 1);
        
        Opal.defn(self, '$document', TMP_Document_document_5 = function $$document() {
          var self = this;

          return self
        }, TMP_Document_document_5.$$arity = 0);
        
        Opal.defn(self, '$head', TMP_Document_head_6 = function $$head() {
          var self = this;

          return self.$DOM(self["native"].getElementsByTagName("head")[0])
        }, TMP_Document_head_6.$$arity = 0);
        
        Opal.defn(self, '$inspect', TMP_Document_inspect_7 = function $$inspect() {
          var self = this;

          return "#<DOM::Document>"
        }, TMP_Document_inspect_7.$$arity = 0);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.addListener"))) {
          
          Opal.defn(self, '$ready', TMP_Document_ready_8 = function $$ready() {
            var TMP_9, self = this, $iter = TMP_Document_ready_8.$$p, block = $iter || nil;

            if ($iter) TMP_Document_ready_8.$$p = null;
            
            if ($truthy(block)) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
            };
            if ($truthy(self['$ready?']())) {
              return block.$call()};
            return $send(self, 'on', ["dom:load"], (TMP_9 = function(e){var self = TMP_9.$$s || this;
if (e == null) e = nil;
            
              e.$off();
              return block.$call();}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
          }, TMP_Document_ready_8.$$arity = 0)
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Event.attach"))) {
          
          Opal.defn(self, '$ready', TMP_Document_ready_10 = function $$ready() {
            var TMP_11, self = this, $iter = TMP_Document_ready_10.$$p, block = $iter || nil;

            if ($iter) TMP_Document_ready_10.$$p = null;
            
            if ($truthy(block)) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
            };
            if ($truthy(self['$ready?']())) {
              return block.$call()};
            return $send(self, 'on', ["ready:state:change"], (TMP_11 = function(e){var self = TMP_11.$$s || this;
if (e == null) e = nil;
            if ($truthy(self['$ready?']())) {
                
                e.$off();
                return block.$call();
                } else {
                return nil
              }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
          }, TMP_Document_ready_10.$$arity = 0)
          } else {
          
          Opal.defn(self, '$ready', TMP_Document_ready_12 = function $$ready() {
            var self = this, $iter = TMP_Document_ready_12.$$p, block = $iter || nil;

            if ($iter) TMP_Document_ready_12.$$p = null;
            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "document ready unsupported")
          }, TMP_Document_ready_12.$$arity = 0)
        };
        
        Opal.defn(self, '$ready?', TMP_Document_ready$q_13 = function() {
          var self = this;

          return self["native"].readyState === "complete"
        }, TMP_Document_ready$q_13.$$arity = 0);
        
        Opal.defn(self, '$root', TMP_Document_root_14 = function $$root() {
          var self = this;

          return self.$DOM(self["native"].documentElement)
        }, TMP_Document_root_14.$$arity = 0);
        
        Opal.defn(self, '$root=', TMP_Document_root$eq_15 = function(element) {
          var self = this;

          return self["native"].documentElement = Opal.const_get_relative($nesting, 'Native').$convert(element)
        }, TMP_Document_root$eq_15.$$arity = 1);
        
        Opal.defn(self, '$style_sheets', TMP_Document_style_sheets_17 = function $$style_sheets() {
          var TMP_16, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [self["native"].styleSheets], (TMP_16 = function(e){var self = TMP_16.$$s || this;
if (e == null) e = nil;
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'CSS'), 'StyleSheet').$new(e)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))
        }, TMP_Document_style_sheets_17.$$arity = 0);
        
        Opal.defn(self, '$title', TMP_Document_title_18 = function $$title() {
          var self = this;

          return self["native"].title
        }, TMP_Document_title_18.$$arity = 0);
        
        Opal.defn(self, '$title=', TMP_Document_title$eq_19 = function(value) {
          var self = this;

          return self["native"].title = value
        }, TMP_Document_title$eq_19.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Document.view"))) {
          return (Opal.defn(self, '$window', TMP_Document_window_20 = function $$window() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Window').$new(self["native"].defaultView)
          }, TMP_Document_window_20.$$arity = 0), nil) && 'window'
        } else if ($truthy(Opal.const_get_relative($nesting, 'Browser')['$supports?']("Document.window"))) {
          return (Opal.defn(self, '$window', TMP_Document_window_21 = function $$window() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Window').$new(self["native"].parentWindow)
          }, TMP_Document_window_21.$$arity = 0), nil) && 'window'
          } else {
          return (Opal.defn(self, '$window', TMP_Document_window_22 = function $$window() {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'NotImplementedError'), "window from document unsupported")
          }, TMP_Document_window_22.$$arity = 0), nil) && 'window'
        };
      })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/document_fragment"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $DocumentFragment(){};
        var self = $DocumentFragment = $klass($base, $super, 'DocumentFragment', $DocumentFragment);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], Opal.const_get_relative($nesting, 'Element'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/builder"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$<<', '$[]=', '$to_h', '$-', '$[]', '$each', '$===', '$call', '$raise', '$attr_reader', '$new', '$to_proc', '$map', '$build', '$for', '$create_text', '$document', '$create_element', '$merge!', '$attributes', '$add_class', '$on', '$inner_html=']);
  
  (function($base, $parent_nesting) {
    var $Utils, self = $Utils = $module($base, 'Utils');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Utils_heredoc_1;

    Opal.defs(self, '$heredoc', TMP_Utils_heredoc_1 = function $$heredoc(string) {
      var self = this;

      return string
    }, TMP_Utils_heredoc_1.$$arity = 1)
  })(Opal.const_get_relative($nesting, 'Paggio'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Element(){};
    var self = $Element = $klass($base, $super, 'Element', $Element);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_on_2;

    def.on = nil;
    return (Opal.defn(self, '$on', TMP_Element_on_2 = function $$on($a_rest) {
      var $b, self = this, args, $iter = TMP_Element_on_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Element_on_2.$$p = null;
      return (self.on = ($truthy($b = self.on) ? $b : []))['$<<']([args, block])
    }, TMP_Element_on_2.$$arity = -1), nil) && 'on'
  })(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'HTML'), Opal.const_get_relative($nesting, 'BasicObject'), $nesting);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DOM_10, TMP_DOM_11, TMP_DOM_15;

      
      (function($base, $super, $parent_nesting) {
        function $Builder(){};
        var self = $Builder = $klass($base, $super, 'Builder', $Builder);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Builder_to_h_3, TMP_Builder_for_4, TMP_Builder_build_6, TMP_Builder_initialize_7, TMP_Builder_to_a_9;

        def.builder = def.roots = nil;
        
        Opal.defs(self, '$to_h', TMP_Builder_to_h_3 = function $$to_h() {
          var $a, self = this;
          if (self.builders == null) self.builders = nil;

          return (self.builders = ($truthy($a = self.builders) ? $a : $hash2([], {})))
        }, TMP_Builder_to_h_3.$$arity = 0);
        Opal.defs(self, '$for', TMP_Builder_for_4 = function(klass) {
          var self = this, $iter = TMP_Builder_for_4.$$p, block = $iter || nil, $writer = nil;

          if ($iter) TMP_Builder_for_4.$$p = null;
          if ($truthy(block)) {
            
            $writer = [klass, block];
            $send(self.$to_h(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return self.$to_h()['$[]'](klass)
          }
        }, TMP_Builder_for_4.$$arity = 1);
        Opal.defs(self, '$build', TMP_Builder_build_6 = function $$build(builder, item) {try {

          var TMP_5, self = this;

          
          $send(self.$to_h(), 'each', [], (TMP_5 = function(klass, block){var self = TMP_5.$$s || this;
if (klass == null) klass = nil;if (block == null) block = nil;
          if ($truthy(klass['$==='](item))) {
              Opal.ret(block.$call(builder, item))
              } else {
              return nil
            }}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5));
          return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "" + "cannot build unknown item " + (item));
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_Builder_build_6.$$arity = 2);
        self.$attr_reader("document", "element");
        
        Opal.defn(self, '$initialize', TMP_Builder_initialize_7 = function $$initialize(document) {
          var TMP_8, self = this, $iter = TMP_Builder_initialize_7.$$p, block = $iter || nil;

          if ($iter) TMP_Builder_initialize_7.$$p = null;
          
          self.document = document;
          self.builder = $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'HTML'), 'new', [], block.$to_proc());
          return (self.roots = $send(self.builder.$each(), 'map', [], (TMP_8 = function(e){var self = TMP_8.$$s || this;
if (e == null) e = nil;
          return Opal.const_get_relative($nesting, 'Builder').$build(self, e)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8)));
        }, TMP_Builder_initialize_7.$$arity = 1);
        return (Opal.defn(self, '$to_a', TMP_Builder_to_a_9 = function $$to_a() {
          var self = this;

          return self.roots
        }, TMP_Builder_to_a_9.$$arity = 0), nil) && 'to_a';
      })($nesting[0], null, $nesting);
      $send(Opal.const_get_relative($nesting, 'Builder'), 'for', [Opal.const_get_relative($nesting, 'String')], (TMP_DOM_10 = function(b, item){var self = TMP_DOM_10.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return b.$document().$create_text(item)}, TMP_DOM_10.$$s = self, TMP_DOM_10.$$arity = 2, TMP_DOM_10));
      $send(Opal.const_get_relative($nesting, 'Builder'), 'for', [Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'HTML'), 'Element')], (TMP_DOM_11 = function(b, item){var self = TMP_DOM_11.$$s || this, TMP_12, TMP_13, TMP_14, dom = nil, on = nil, inner = nil, $writer = nil;
if (b == null) b = nil;if (item == null) item = nil;
      
        dom = b.$document().$create_element(item.name);
        if ($truthy(Opal.const_get_relative($nesting, 'Hash')['$==='](item.attributes))) {
          dom.$attributes()['$merge!'](item.attributes)};
        $send((item.class_names), 'each', [], (TMP_12 = function(value){var self = TMP_12.$$s || this;
if (value == null) value = nil;
        return dom.$add_class(value)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
        if ($truthy((on = item.on || nil))) {
          $send(on, 'each', [], (TMP_13 = function(args, block){var self = TMP_13.$$s || this;
if (args == null) args = nil;if (block == null) block = nil;
          return $send(dom, 'on', Opal.to_a(args), block.$to_proc())}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13))};
        if ($truthy((inner = item.inner_html || nil))) {
          
          $writer = [inner];
          $send(dom, 'inner_html=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          $send(item, 'each', [], (TMP_14 = function(child){var self = TMP_14.$$s || this;
if (child == null) child = nil;
          return dom['$<<'](Opal.const_get_relative($nesting, 'Builder').$build(b, child))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))
        };
        return dom;}, TMP_DOM_11.$$s = self, TMP_DOM_11.$$arity = 2, TMP_DOM_11));
      $send(Opal.const_get_relative($nesting, 'Builder'), 'for', [Opal.const_get_qualified(Opal.const_get_relative($nesting, 'DOM'), 'Node')], (TMP_DOM_15 = function(b, item){var self = TMP_DOM_15.$$s || this;
if (b == null) b = nil;if (item == null) item = nil;
      return item}, TMP_DOM_15.$$s = self, TMP_DOM_15.$$arity = 2, TMP_DOM_15));
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom/mutation_observer"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$supports?', '$include', '$===', '$==', '$type', '$new', '$[]', '$DOM', '$alias_native', '$call', '$map', '$convert', '$private', '$Native', '$[]=', '$-', '$to_n']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $DOM, self = $DOM = $module($base, 'DOM');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $MutationObserver(){};
        var self = $MutationObserver = $klass($base, $super, 'MutationObserver', $MutationObserver);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_MutationObserver_supported$q_1, TMP_MutationObserver_initialize_9, TMP_MutationObserver_observe_11, TMP_MutationObserver_take_13, TMP_MutationObserver_disconnect_14, TMP_MutationObserver_convert_15;

        def["native"] = nil;
        
        Opal.defs(self, '$supported?', TMP_MutationObserver_supported$q_1 = function() {
          var self = this;

          return Opal.const_get_relative($nesting, 'Browser')['$supports?']("MutationObserver")
        }, TMP_MutationObserver_supported$q_1.$$arity = 0);
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        (function($base, $super, $parent_nesting) {
          function $Record(){};
          var self = $Record = $klass($base, $super, 'Record', $Record);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Record_type_2, TMP_Record_attribute$q_3, TMP_Record_tree$q_4, TMP_Record_cdata$q_5, TMP_Record_added_6, TMP_Record_removed_7, TMP_Record_target_8;

          def["native"] = nil;
          
          self.$include(Opal.const_get_relative($nesting, 'Native'));
          
          Opal.defn(self, '$type', TMP_Record_type_2 = function $$type() {
            var self = this, $case = nil;

            return (function() {$case = self["native"].type;
            if ("attributes"['$===']($case)) {return "attribute"}
            else if ("childList"['$===']($case)) {return "tree"}
            else if ("characterData"['$===']($case)) {return "cdata"}
            else { return nil }})()
          }, TMP_Record_type_2.$$arity = 0);
          
          Opal.defn(self, '$attribute?', TMP_Record_attribute$q_3 = function() {
            var self = this;

            return self.$type()['$==']("attribute")
          }, TMP_Record_attribute$q_3.$$arity = 0);
          
          Opal.defn(self, '$tree?', TMP_Record_tree$q_4 = function() {
            var self = this;

            return self.$type()['$==']("tree")
          }, TMP_Record_tree$q_4.$$arity = 0);
          
          Opal.defn(self, '$cdata?', TMP_Record_cdata$q_5 = function() {
            var self = this;

            return self.$type()['$==']("cdata")
          }, TMP_Record_cdata$q_5.$$arity = 0);
          
          Opal.defn(self, '$added', TMP_Record_added_6 = function $$added() {
            var self = this, array = nil;

            
            array = (function() {if ($truthy(self["native"].addedNodes != null)) {
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].addedNodes)
              } else {
              return []
            }; return nil; })();
            return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](array);
          }, TMP_Record_added_6.$$arity = 0);
          
          Opal.defn(self, '$removed', TMP_Record_removed_7 = function $$removed() {
            var self = this, array = nil;

            
            array = (function() {if ($truthy(self["native"].removedNodes != null)) {
              return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array').$new(self["native"].removedNodes)
              } else {
              return []
            }; return nil; })();
            return Opal.const_get_relative($nesting, 'NodeSet')['$[]'](array);
          }, TMP_Record_removed_7.$$arity = 0);
          
          Opal.defn(self, '$target', TMP_Record_target_8 = function $$target() {
            var self = this;

            return self.$DOM(self["native"].target)
          }, TMP_Record_target_8.$$arity = 0);
          self.$alias_native("old", "oldValue");
          self.$alias_native("name", "attributeName");
          return self.$alias_native("namespace", "attributeNamespace");
        })($nesting[0], null, $nesting);
        
        Opal.defn(self, '$initialize', TMP_MutationObserver_initialize_9 = function $$initialize() {
          var TMP_10, self = this, $iter = TMP_MutationObserver_initialize_9.$$p, block = $iter || nil;

          if ($iter) TMP_MutationObserver_initialize_9.$$p = null;
          
          
      var func = function(records) {
        return block.$call($send((records), 'map', [], (TMP_10 = function(r){var self = TMP_10.$$s || this;
if (r == null) r = nil;
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'MutationObserver'), 'Record').$new(r)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10)));
      }
    ;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_MutationObserver_initialize_9, false), [new window.MutationObserver(func)], null);
        }, TMP_MutationObserver_initialize_9.$$arity = 0);
        
        Opal.defn(self, '$observe', TMP_MutationObserver_observe_11 = function $$observe(target, options) {
          var self = this;

          if (options == null) {
            options = nil;
          }
          
          if ($truthy(options)) {
            } else {
            options = $hash2(["children", "tree", "attributes", "cdata"], {"children": true, "tree": true, "attributes": "old", "cdata": "old"})
          };
          self["native"].observe(Opal.const_get_relative($nesting, 'Native').$convert(target), self.$convert(options));
          return self;
        }, TMP_MutationObserver_observe_11.$$arity = -2);
        
        Opal.defn(self, '$take', TMP_MutationObserver_take_13 = function $$take() {
          var TMP_12, self = this;

          return $send((self["native"].takeRecords()), 'map', [], (TMP_12 = function(r){var self = TMP_12.$$s || this;
if (r == null) r = nil;
          return Opal.const_get_relative($nesting, 'Record').$new(r)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12))
        }, TMP_MutationObserver_take_13.$$arity = 0);
        
        Opal.defn(self, '$disconnect', TMP_MutationObserver_disconnect_14 = function $$disconnect() {
          var self = this;

          return self["native"].disconnect()
        }, TMP_MutationObserver_disconnect_14.$$arity = 0);
        self.$private();
        return (Opal.defn(self, '$convert', TMP_MutationObserver_convert_15 = function $$convert(hash) {
          var self = this, options = nil, $writer = nil, attrs = nil, filter = nil, cdata = nil;

          
          options = self.$Native({});
          if ($truthy(hash['$[]']("children"))) {
            
            $writer = ["childList", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(hash['$[]']("tree"))) {
            
            $writer = ["subtree", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((attrs = hash['$[]']("attributes")))) {
            
            
            $writer = ["attributes", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (attrs['$==']("old")) {
              
              $writer = ["attributeOldValue", true];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};
          if ($truthy((filter = hash['$[]']("filter")))) {
            
            $writer = ["attributeFilter", filter];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy((cdata = hash['$[]']("cdata")))) {
            
            
            $writer = ["characterData", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (cdata['$==']("old")) {
              
              $writer = ["characterDataOldValue", true];
              $send(options, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};};
          return options.$to_n();
        }, TMP_MutationObserver_convert_15.$$arity = 1), nil) && 'convert';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/dom"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send, $klass = Opal.klass;
  if ($gvars.window == null) $gvars.window = nil;

  Opal.add_stubs(['$require', '$DOM', '$shift', '$to_a', '$new', '$to_proc', '$==', '$length', '$first', '$native?', '$===', '$try_convert', '$raise', '$document']);
  
  self.$require("browser/dom/node_set");
  self.$require("browser/dom/node");
  self.$require("browser/dom/attribute");
  self.$require("browser/dom/character_data");
  self.$require("browser/dom/text");
  self.$require("browser/dom/cdata");
  self.$require("browser/dom/comment");
  self.$require("browser/dom/element");
  self.$require("browser/dom/document");
  self.$require("browser/dom/document_fragment");
  self.$require("browser/dom/builder");
  self.$require("browser/dom/mutation_observer");
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_XML_1, TMP_Kernel_DOM_2;

    
    
    Opal.defn(self, '$XML', TMP_Kernel_XML_1 = function $$XML(what) {
      var self = this;

      
      
      var doc;

      if (window.DOMParser) {
        doc = new DOMParser().parseFromString(what, 'text/xml');
      }
      else {
        doc       = new ActiveXObject('Microsoft.XMLDOM');
        doc.async = 'false';
        doc.loadXML(what);
      }
    ;
      return self.$DOM(doc);
    }, TMP_Kernel_XML_1.$$arity = 1);
    
    Opal.defn(self, '$DOM', TMP_Kernel_DOM_2 = function $$DOM($a_rest) {
      var $b, self = this, args, $iter = TMP_Kernel_DOM_2.$$p, block = $iter || nil, document = nil, roots = nil, what = nil;
      if ($gvars.document == null) $gvars.document = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Kernel_DOM_2.$$p = null;
      if ($truthy(block)) {
        
        document = ($truthy($b = args.$shift()) ? $b : $gvars.document);
        roots = $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'Builder'), 'new', [document], block.$to_proc()).$to_a();
        if (roots.$length()['$=='](1)) {
          return roots.$first()
          } else {
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'NodeSet').$new(roots)
        };
        } else {
        
        what = args.$shift();
        document = ($truthy($b = args.$shift()) ? $b : $gvars.document);
        if ($truthy(self['$native?'](what))) {
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'Node').$new(what)
        } else if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Browser'), 'DOM'), 'Node')['$==='](what))) {
          return what
        } else if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](what))) {
          
          var doc = Opal.const_get_relative($nesting, 'Native').$try_convert(document).createElement('div');
          doc.innerHTML = what;

          return self.$DOM(doc.childNodes.length == 1 ? doc.childNodes[0] : doc);
        
          } else {
          return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "argument not DOM convertible")
        };
      }
    }, TMP_Kernel_DOM_2.$$arity = -1);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_document_3;

      def["native"] = nil;
      return (Opal.defn(self, '$document', TMP_Window_document_3 = function $$document() {
        var self = this;

        return self.$DOM(self["native"].document)
      }, TMP_Window_document_3.$$arity = 0), nil) && 'document'
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  return ($gvars.document = $gvars.window.$document());
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/css/declaration"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$include', '$new', '$each', '$[]=', '$-', '$to_proc', '$important', '$name', '$value', '$to_s', '$enum_for', '$[]', '$alias_native', '$end_with?']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Declaration(){};
        var self = $Declaration = $klass($base, $super, 'Declaration', $Declaration);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Declaration_rule_1, TMP_Declaration_assign_3, TMP_Declaration_replace_4, TMP_Declaration_apply_5, TMP_Declaration_delete_7, TMP_Declaration_$$_8, TMP_Declaration_$$$eq_9, TMP_Declaration_important$q_10, TMP_Declaration_each_11, TMP_Declaration_method_missing_12;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
        
        Opal.defn(self, '$rule', TMP_Declaration_rule_1 = function $$rule() {
          var self = this;

          if ($truthy((typeof(self["native"].parentRule) !== "undefined"))) {
            return Opal.const_get_relative($nesting, 'Rule').$new(self["native"].parentRule)
            } else {
            return nil
          }
        }, TMP_Declaration_rule_1.$$arity = 0);
        
        Opal.defn(self, '$assign', TMP_Declaration_assign_3 = function $$assign(data) {
          var TMP_2, self = this;

          
          $send(data, 'each', [], (TMP_2 = function(name, value){var self = TMP_2.$$s || this, $writer = nil;
if (name == null) name = nil;if (value == null) value = nil;
          
            $writer = [name, value];
            $send(self, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2));
          return self;
        }, TMP_Declaration_assign_3.$$arity = 1);
        
        Opal.defn(self, '$replace', TMP_Declaration_replace_4 = function $$replace(string) {
          var self = this;

          return self["native"].cssText = string
        }, TMP_Declaration_replace_4.$$arity = 1);
        
        Opal.defn(self, '$apply', TMP_Declaration_apply_5 = function $$apply() {
          var TMP_6, self = this, $iter = TMP_Declaration_apply_5.$$p, block = $iter || nil;

          if ($iter) TMP_Declaration_apply_5.$$p = null;
          return $send($send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Paggio'), 'CSS'), 'Definition'), 'new', [], block.$to_proc()), 'each', [], (TMP_6 = function(style){var self = TMP_6.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (style == null) style = nil;
          if ($truthy(style.$important())) {
              return self["native"].setProperty(style.$name(), style.$value(), "important")
              } else {
              return self["native"].setProperty(style.$name(), style.$value(), "")
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
        }, TMP_Declaration_apply_5.$$arity = 0);
        
        Opal.defn(self, '$delete', TMP_Declaration_delete_7 = function(name) {
          var self = this;

          return self["native"].removeProperty(name)
        }, TMP_Declaration_delete_7.$$arity = 1);
        
        Opal.defn(self, '$[]', TMP_Declaration_$$_8 = function(name) {
          var self = this;

          
      var result = self["native"].getPropertyValue(name);

      if (result == null || result === "") {
        return nil;
      }

      return result;
    
        }, TMP_Declaration_$$_8.$$arity = 1);
        
        Opal.defn(self, '$[]=', TMP_Declaration_$$$eq_9 = function(name, value) {
          var self = this;

          return self["native"].setProperty(name, value.$to_s(), "")
        }, TMP_Declaration_$$$eq_9.$$arity = 2);
        
        Opal.defn(self, '$important?', TMP_Declaration_important$q_10 = function(name) {
          var self = this;

          return self["native"].getPropertyPriority(name) == "important"
        }, TMP_Declaration_important$q_10.$$arity = 1);
        
        Opal.defn(self, '$each', TMP_Declaration_each_11 = function $$each() {
          var self = this, $iter = TMP_Declaration_each_11.$$p, block = $iter || nil;

          if ($iter) TMP_Declaration_each_11.$$p = null;
          
          if ((block !== nil)) {
            } else {
            return self.$enum_for("each")
          };
          
      for (var i = 0, length = self["native"].length; i < length; i++) {
        var name  = self["native"].item(i);

        Opal.yieldX(block, [name, self['$[]'](name)])
      }
    ;
          return self;
        }, TMP_Declaration_each_11.$$arity = 0);
        self.$alias_native("length");
        self.$alias_native("to_s", "cssText");
        return (Opal.defn(self, '$method_missing', TMP_Declaration_method_missing_12 = function $$method_missing(name, value) {
          var self = this, $writer = nil;

          if (value == null) {
            value = nil;
          }
          if ($truthy(name['$end_with?']("="))) {
            
            $writer = [name['$[]']($range(0, -2, false)), value];
            $send(self, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return self['$[]'](name)
          }
        }, TMP_Declaration_method_missing_12.$$arity = -2), nil) && 'method_missing';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/css/style_sheet"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$is_a?', '$to_n', '$alias_native', '$new', '$DOM', '$===', '$join', '$map', '$insert', '$length', '$find', '$rules', '$log', '$==', '$id', '$__send__', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $StyleSheet(){};
        var self = $StyleSheet = $klass($base, $super, 'StyleSheet', $StyleSheet);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StyleSheet_initialize_1, TMP_StyleSheet_media_2, TMP_StyleSheet_owner_3, TMP_StyleSheet_parent_4, TMP_StyleSheet_rules_6, TMP_StyleSheet_delete_7, TMP_StyleSheet_insert_8, TMP_StyleSheet_rule_10, TMP_StyleSheet_$$_12, TMP_StyleSheet_method_missing_13;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        
        Opal.defn(self, '$initialize', TMP_StyleSheet_initialize_1 = function $$initialize(what) {
          var self = this, $iter = TMP_StyleSheet_initialize_1.$$p, $yield = $iter || nil;

          if ($iter) TMP_StyleSheet_initialize_1.$$p = null;
          if ($truthy(what['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'DOM'), 'Element')))) {
            return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_StyleSheet_initialize_1, false), [what.$to_n().sheet], null)
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_StyleSheet_initialize_1, false), [what], null)
          }
        }, TMP_StyleSheet_initialize_1.$$arity = 1);
        self.$alias_native("disabled?", "disabled");
        self.$alias_native("href");
        self.$alias_native("title");
        self.$alias_native("type");
        
        Opal.defn(self, '$media', TMP_StyleSheet_media_2 = function $$media() {
          var self = this;

          if ($truthy(self["native"].media != null)) {
            return Opal.const_get_relative($nesting, 'Media').$new(self["native"].media)
            } else {
            return nil
          }
        }, TMP_StyleSheet_media_2.$$arity = 0);
        
        Opal.defn(self, '$owner', TMP_StyleSheet_owner_3 = function $$owner() {
          var self = this;

          return self.$DOM(self["native"].ownerNode)
        }, TMP_StyleSheet_owner_3.$$arity = 0);
        
        Opal.defn(self, '$parent', TMP_StyleSheet_parent_4 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentStyleSheet != null)) {
            return Opal.const_get_relative($nesting, 'Sheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          }
        }, TMP_StyleSheet_parent_4.$$arity = 0);
        
        Opal.defn(self, '$rules', TMP_StyleSheet_rules_6 = function $$rules() {
          var TMP_5, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), 'new', [self["native"].cssRules], (TMP_5 = function(e){var self = TMP_5.$$s || this;
if (e == null) e = nil;
          return Opal.const_get_relative($nesting, 'Rule').$new(e)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))
        }, TMP_StyleSheet_rules_6.$$arity = 0);
        
        Opal.defn(self, '$delete', TMP_StyleSheet_delete_7 = function(index) {
          var self = this;

          return self["native"].deleteRule(index)
        }, TMP_StyleSheet_delete_7.$$arity = 1);
        
        Opal.defn(self, '$insert', TMP_StyleSheet_insert_8 = function $$insert(index, rule) {
          var self = this;

          return self["native"].insertRule(rule, index)
        }, TMP_StyleSheet_insert_8.$$arity = 2);
        
        Opal.defn(self, '$rule', TMP_StyleSheet_rule_10 = function $$rule(selector, body) {
          var TMP_9, self = this;

          
          if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](selector))) {
            } else {
            selector = selector.$join(", ")
          };
          if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](body))) {
            } else {
            body = $send(body, 'map', [], (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return "" + (name) + ": " + (value) + ";"}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9)).$join("\n")
          };
          return self.$insert(self.$length(), "" + (selector) + " { " + (body) + " }");
        }, TMP_StyleSheet_rule_10.$$arity = 2);
        
        Opal.defn(self, '$[]', TMP_StyleSheet_$$_12 = function(id) {
          var TMP_11, self = this;

          return $send(self.$rules(), 'find', [], (TMP_11 = function(r){var self = TMP_11.$$s || this;
if (r == null) r = nil;
          
            self.$log(r);
            return r.$id()['$=='](id);}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))
        }, TMP_StyleSheet_$$_12.$$arity = 1);
        
        Opal.defn(self, '$method_missing', TMP_StyleSheet_method_missing_13 = function $$method_missing($a_rest) {
          var self = this, args, $iter = TMP_StyleSheet_method_missing_13.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_StyleSheet_method_missing_13.$$p = null;
          return $send(self.$rules(), '__send__', Opal.to_a(args), block.$to_proc())
        }, TMP_StyleSheet_method_missing_13.$$arity = -1);
        return (function($base, $super, $parent_nesting) {
          function $Media(){};
          var self = $Media = $klass($base, $super, 'Media', $Media);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Media_push_14, TMP_Media_delete_15;

          def["native"] = nil;
          
          self.$alias_native("text", "mediaText");
          self.$alias_native("to_s", "mediaText");
          
          Opal.defn(self, '$push', TMP_Media_push_14 = function $$push(medium) {
            var self = this;

            
            self["native"].appendMedium(medium);
            return self;
          }, TMP_Media_push_14.$$arity = 1);
          return (Opal.defn(self, '$delete', TMP_Media_delete_15 = function(medium) {
            var self = this;

            return self["native"].deleteMedium(medium)
          }, TMP_Media_delete_15.$$arity = 1), nil) && 'delete';
        })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Array'), $nesting);
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/css/rule"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$==', '$[]', '$new', '$raise', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Rule_new_1, TMP_Rule_parent_2, TMP_Rule_style_sheet_3;

        def["native"] = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        Opal.const_set($nesting[0], 'STYLE_RULE', 1);
        Opal.const_set($nesting[0], 'CHARSET_RULE', 2);
        Opal.const_set($nesting[0], 'IMPORT_RULE', 3);
        Opal.const_set($nesting[0], 'MEDIA_RULE', 4);
        Opal.const_set($nesting[0], 'FONT_FACE_RULE', 5);
        Opal.const_set($nesting[0], 'PAGE_RULE', 6);
        Opal.const_set($nesting[0], 'KEYFRAMES_RULE', 7);
        Opal.const_set($nesting[0], 'KEYFRAME_RULE', 8);
        Opal.const_set($nesting[0], 'NAMESPACE_RULE', 10);
        Opal.const_set($nesting[0], 'COUNTER_STYLE_RULE', 11);
        Opal.const_set($nesting[0], 'SUPPORTS_RULE', 12);
        Opal.const_set($nesting[0], 'DOCUMENT_RULE', 13);
        Opal.const_set($nesting[0], 'FONT_FEATURE_VALUES_RULE', 14);
        Opal.const_set($nesting[0], 'VIEWPORT_RULE', 15);
        Opal.const_set($nesting[0], 'REGION_STYLE_RULE', 16);
        Opal.defs(self, '$new', TMP_Rule_new_1 = function(rule) {
          var $a, self = this, $iter = TMP_Rule_new_1.$$p, $yield = $iter || nil, klass = nil;
          if (self.classes == null) self.classes = nil;

          if ($iter) TMP_Rule_new_1.$$p = null;
          if (self['$=='](Opal.const_get_relative($nesting, 'Rule'))) {
            
            self.classes = ($truthy($a = self.classes) ? $a : [nil, Opal.const_get_relative($nesting, 'Style')]);
            if ($truthy((klass = self.classes['$[]'](rule.type)))) {
              return klass.$new(rule)
              } else {
              return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "cannot instantiate a non derived Rule object")
            };
            } else {
            return $send(self, Opal.find_super_dispatcher(self, 'new', TMP_Rule_new_1, false, $Rule), [rule], null)
          }
        }, TMP_Rule_new_1.$$arity = 1);
        self.$alias_native("text", "cssText");
        self.$alias_native("to_s", "cssText");
        
        Opal.defn(self, '$parent', TMP_Rule_parent_2 = function $$parent() {
          var self = this;

          if ($truthy(self["native"].parentRule != null)) {
            return Opal.const_get_relative($nesting, 'Rule').$new(self["native"].parentRule)
            } else {
            return nil
          }
        }, TMP_Rule_parent_2.$$arity = 0);
        return (Opal.defn(self, '$style_sheet', TMP_Rule_style_sheet_3 = function $$style_sheet() {
          var self = this;

          if ($truthy(self["native"].parentStyleSheet != null)) {
            return Opal.const_get_relative($nesting, 'StyleSheet').$new(self["native"].parentStyleSheet)
            } else {
            return nil
          }
        }, TMP_Rule_style_sheet_3.$$arity = 0), nil) && 'style_sheet';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/css/rule/style"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$alias_native', '$new', '$__send__', '$declaration', '$to_proc']);
  return (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $CSS, self = $CSS = $module($base, 'CSS');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Rule(){};
        var self = $Rule = $klass($base, $super, 'Rule', $Rule);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Style(){};
          var self = $Style = $klass($base, $super, 'Style', $Style);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Style_declaration_1, TMP_Style_method_missing_2;

          def["native"] = nil;
          
          self.$alias_native("selector", "selectorText");
          self.$alias_native("id", "selectorText");
          
          Opal.defn(self, '$declaration', TMP_Style_declaration_1 = function $$declaration() {
            var self = this;

            return Opal.const_get_relative($nesting, 'Declaration').$new(self["native"].style)
          }, TMP_Style_declaration_1.$$arity = 0);
          return (Opal.defn(self, '$method_missing', TMP_Style_method_missing_2 = function $$method_missing($a_rest) {
            var self = this, args, $iter = TMP_Style_method_missing_2.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_Style_method_missing_2.$$p = null;
            return $send(self.$declaration(), '__send__', Opal.to_a(args), block.$to_proc())
          }, TMP_Style_method_missing_2.$$arity = -1), nil) && 'method_missing';
        })($nesting[0], Opal.const_get_relative($nesting, 'Rule'), $nesting)
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/css"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$create_element', '$[]=', '$-', '$css', '$to_proc', '$inner_text=']);
  
  self.$require("browser/css/declaration");
  self.$require("browser/css/style_sheet");
  self.$require("browser/css/rule");
  self.$require("browser/css/rule/style");
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_CSS_1;

    
    Opal.defn(self, '$CSS', TMP_Kernel_CSS_1 = function $$CSS(text) {
      var self = this, $iter = TMP_Kernel_CSS_1.$$p, block = $iter || nil, style = nil, $writer = nil;
      if ($gvars.document == null) $gvars.document = nil;

      if (text == null) {
        text = nil;
      }
      if ($iter) TMP_Kernel_CSS_1.$$p = null;
      
      style = $gvars.document.$create_element("style");
      
      $writer = ["type", "text/css"];
      $send(style, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      if ($truthy(block)) {
        
        $writer = [$send(Opal.const_get_relative($nesting, 'Paggio'), 'css', [], block.$to_proc())];
        $send(style, 'inner_text=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
        } else {
        
        $writer = [text];
        $send(style, 'inner_text=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return style;
    }, TMP_Kernel_CSS_1.$$arity = -1)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("native");
  self.$require("paggio");
  self.$require("browser/version");
  self.$require("browser/utils");
  self.$require("browser/support");
  self.$require("browser/event");
  self.$require("browser/window");
  self.$require("browser/dom");
  return self.$require("browser/css");
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/interval"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$nil?', '$stopped?', '$aborted?', '$raise', '$call', '$tap', '$new', '$to_proc', '$every', '$every!']);
  
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Interval(){};
      var self = $Interval = $klass($base, $super, 'Interval', $Interval);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Interval_initialize_1, TMP_Interval_stopped$q_2, TMP_Interval_aborted$q_3, TMP_Interval_abort_4, TMP_Interval_stop_5, TMP_Interval_start_6, TMP_Interval_call_7;

      def.id = def.aborted = def.window = def.block = def.every = nil;
      
      self.$attr_reader("every");
      
      Opal.defn(self, '$initialize', TMP_Interval_initialize_1 = function $$initialize(window, time) {
        var self = this, $iter = TMP_Interval_initialize_1.$$p, block = $iter || nil;

        if ($iter) TMP_Interval_initialize_1.$$p = null;
        
        self.window = Opal.const_get_relative($nesting, 'Native').$convert(window);
        self.every = time;
        self.block = block;
        return (self.aborted = false);
      }, TMP_Interval_initialize_1.$$arity = 2);
      
      Opal.defn(self, '$stopped?', TMP_Interval_stopped$q_2 = function() {
        var self = this;

        return self.id['$nil?']()
      }, TMP_Interval_stopped$q_2.$$arity = 0);
      
      Opal.defn(self, '$aborted?', TMP_Interval_aborted$q_3 = function() {
        var self = this;

        return self.aborted
      }, TMP_Interval_aborted$q_3.$$arity = 0);
      
      Opal.defn(self, '$abort', TMP_Interval_abort_4 = function $$abort() {
        var self = this;

        
        self.window.clearInterval(self.id);
        self.aborted = true;
        return (self.id = nil);
      }, TMP_Interval_abort_4.$$arity = 0);
      
      Opal.defn(self, '$stop', TMP_Interval_stop_5 = function $$stop() {
        var self = this;

        
        if ($truthy(self['$stopped?']())) {
          return nil};
        self.window.clearInterval(self.id);
        self.stopped = true;
        return (self.id = nil);
      }, TMP_Interval_stop_5.$$arity = 0);
      
      Opal.defn(self, '$start', TMP_Interval_start_6 = function $$start() {
        var self = this;

        
        if ($truthy(self['$aborted?']())) {
          self.$raise("the interval has been aborted")};
        if ($truthy(self['$stopped?']())) {
          } else {
          return nil
        };
        return (self.id = self.window.setInterval(self.block, self.every * 1000));
      }, TMP_Interval_start_6.$$arity = 0);
      return (Opal.defn(self, '$call', TMP_Interval_call_7 = function $$call() {
        var self = this;

        return self.block.$call()
      }, TMP_Interval_call_7.$$arity = 0), nil) && 'call';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_every_8, TMP_Window_every$B_9;

      def["native"] = nil;
      
      
      Opal.defn(self, '$every', TMP_Window_every_8 = function $$every(time) {
        var self = this, $iter = TMP_Window_every_8.$$p, block = $iter || nil;

        if ($iter) TMP_Window_every_8.$$p = null;
        return $send($send(Opal.const_get_relative($nesting, 'Interval'), 'new', [self["native"], time], block.$to_proc()), 'tap', [], "start".$to_proc())
      }, TMP_Window_every_8.$$arity = 1);
      return (Opal.defn(self, '$every!', TMP_Window_every$B_9 = function(time) {
        var self = this, $iter = TMP_Window_every$B_9.$$p, block = $iter || nil;

        if ($iter) TMP_Window_every$B_9.$$p = null;
        return $send(Opal.const_get_relative($nesting, 'Interval'), 'new', [self["native"], time], block.$to_proc())
      }, TMP_Window_every$B_9.$$arity = 1), nil) && 'every!';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_every_10, TMP_Kernel_every$B_11;

    
    
    Opal.defn(self, '$every', TMP_Kernel_every_10 = function $$every(time) {
      var self = this, $iter = TMP_Kernel_every_10.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) TMP_Kernel_every_10.$$p = null;
      return $send($gvars.window, 'every', [time], block.$to_proc())
    }, TMP_Kernel_every_10.$$arity = 1);
    
    Opal.defn(self, '$every!', TMP_Kernel_every$B_11 = function(time) {
      var self = this, $iter = TMP_Kernel_every$B_11.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) TMP_Kernel_every$B_11.$$p = null;
      return $send($gvars.window, 'every!', [time], block.$to_proc())
    }, TMP_Kernel_every$B_11.$$arity = 1);
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_every_12, TMP_Proc_every$B_13;

    
    
    Opal.defn(self, '$every', TMP_Proc_every_12 = function $$every(time) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send($gvars.window, 'every', [time], self.$to_proc())
    }, TMP_Proc_every_12.$$arity = 1);
    return (Opal.defn(self, '$every!', TMP_Proc_every$B_13 = function(time) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send($gvars.window, 'every!', [time], self.$to_proc())
    }, TMP_Proc_every$B_13.$$arity = 1), nil) && 'every!';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["browser/delay"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$convert', '$to_n', '$tap', '$new', '$to_proc', '$after', '$after!']);
  
  (function($base, $parent_nesting) {
    var $Browser, self = $Browser = $module($base, 'Browser');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $Delay(){};
      var self = $Delay = $klass($base, $super, 'Delay', $Delay);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Delay_initialize_1, TMP_Delay_abort_2, TMP_Delay_start_3;

      def.window = def.id = def.block = def.after = nil;
      
      self.$attr_reader("after");
      
      Opal.defn(self, '$initialize', TMP_Delay_initialize_1 = function $$initialize(window, time) {
        var self = this, $iter = TMP_Delay_initialize_1.$$p, block = $iter || nil;

        if ($iter) TMP_Delay_initialize_1.$$p = null;
        
        self.window = Opal.const_get_relative($nesting, 'Native').$convert(window);
        self.after = time;
        return (self.block = block);
      }, TMP_Delay_initialize_1.$$arity = 2);
      
      Opal.defn(self, '$abort', TMP_Delay_abort_2 = function $$abort() {
        var self = this;

        return self.window.clearTimeout(self.id)
      }, TMP_Delay_abort_2.$$arity = 0);
      return (Opal.defn(self, '$start', TMP_Delay_start_3 = function $$start() {
        var self = this;

        return (self.id = self.window.setTimeout(self.block.$to_n(), self.after * 1000))
      }, TMP_Delay_start_3.$$arity = 0), nil) && 'start';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Window(){};
      var self = $Window = $klass($base, $super, 'Window', $Window);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Window_after_4, TMP_Window_after$B_5;

      def["native"] = nil;
      
      
      Opal.defn(self, '$after', TMP_Window_after_4 = function $$after(time) {
        var self = this, $iter = TMP_Window_after_4.$$p, block = $iter || nil;

        if ($iter) TMP_Window_after_4.$$p = null;
        return $send($send(Opal.const_get_relative($nesting, 'Delay'), 'new', [self["native"], time], block.$to_proc()), 'tap', [], "start".$to_proc())
      }, TMP_Window_after_4.$$arity = 1);
      return (Opal.defn(self, '$after!', TMP_Window_after$B_5 = function(time) {
        var self = this, $iter = TMP_Window_after$B_5.$$p, block = $iter || nil;

        if ($iter) TMP_Window_after$B_5.$$p = null;
        return $send(Opal.const_get_relative($nesting, 'Delay'), 'new', [self["native"], time], block.$to_proc())
      }, TMP_Window_after$B_5.$$arity = 1), nil) && 'after!';
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_after_6, TMP_Kernel_after$B_7;

    
    
    Opal.defn(self, '$after', TMP_Kernel_after_6 = function $$after(time) {
      var self = this, $iter = TMP_Kernel_after_6.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) TMP_Kernel_after_6.$$p = null;
      return $send($gvars.window, 'after', [time], block.$to_proc())
    }, TMP_Kernel_after_6.$$arity = 1);
    
    Opal.defn(self, '$after!', TMP_Kernel_after$B_7 = function(time) {
      var self = this, $iter = TMP_Kernel_after$B_7.$$p, block = $iter || nil;
      if ($gvars.window == null) $gvars.window = nil;

      if ($iter) TMP_Kernel_after$B_7.$$p = null;
      return $send($gvars.window, 'after!', [time], block.$to_proc())
    }, TMP_Kernel_after$B_7.$$arity = 1);
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Proc_after_8, TMP_Proc_after$B_9;

    
    
    Opal.defn(self, '$after', TMP_Proc_after_8 = function $$after(time) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send($gvars.window, 'after', [time], self.$to_proc())
    }, TMP_Proc_after_8.$$arity = 1);
    return (Opal.defn(self, '$after!', TMP_Proc_after$B_9 = function(time) {
      var self = this;
      if ($gvars.window == null) $gvars.window = nil;

      return $send($gvars.window, 'after!', [time], self.$to_proc())
    }, TMP_Proc_after$B_9.$$arity = 1), nil) && 'after!';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/boot"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$<<', '$receivers', '$set_var', '$new', '$each', '$call']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a;

    if ($truthy((($a = Opal.const_get_relative($nesting, 'Operation', 'skip_raise')) ? 'constant' : nil))) {
      } else {
      
      (function($base, $super, $parent_nesting) {
        function $Operation(){};
        var self = $Operation = $klass($base, $super, 'Operation', $Operation);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        function $Application(){};
        var self = $Application = $klass($base, $super, 'Application', $Application);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return (function($base, $super, $parent_nesting) {
          function $Boot(){};
          var self = $Boot = $klass($base, $super, 'Boot', $Boot);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          
          (function($base, $super, $parent_nesting) {
            function $ReactDummyParams(){};
            var self = $ReactDummyParams = $klass($base, $super, 'ReactDummyParams', $ReactDummyParams);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ReactDummyParams_initialize_1;

            
            self.$attr_reader("context");
            return (Opal.defn(self, '$initialize', TMP_ReactDummyParams_initialize_1 = function $$initialize(context) {
              var self = this;

              return (self.context = context)
            }, TMP_ReactDummyParams_initialize_1.$$arity = 1), nil) && 'initialize';
          })($nesting[0], null, $nesting);
          return (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_on_dispatch_2, TMP_receivers_4, TMP_run_6;

            
            
            Opal.defn(self, '$on_dispatch', TMP_on_dispatch_2 = function $$on_dispatch() {
              var self = this, $iter = TMP_on_dispatch_2.$$p, block = $iter || nil;

              if ($iter) TMP_on_dispatch_2.$$p = null;
              return self.$receivers()['$<<'](block)
            }, TMP_on_dispatch_2.$$arity = 0);
            
            Opal.defn(self, '$receivers', TMP_receivers_4 = function $$receivers() {
              var TMP_3, self = this;

              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@receivers", $hash2(["force"], {"force": true})], (TMP_3 = function(){var self = TMP_3.$$s || this;

              return []}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
            }, TMP_receivers_4.$$arity = 0);
            return (Opal.defn(self, '$run', TMP_run_6 = function $$run($kwargs) {
              var TMP_5, self = this, context, params = nil;

              if ($kwargs == null || !$kwargs.$$is_hash) {
                if ($kwargs == null) {
                  $kwargs = $hash2([], {});
                } else {
                  throw Opal.ArgumentError.$new('expected kwargs');
                }
              }
              context = $kwargs.$$smap["context"];
              if (context == null) {
                context = nil
              }
              
              params = Opal.const_get_relative($nesting, 'ReactDummyParams').$new(context);
              return $send(self.$receivers(), 'each', [], (TMP_5 = function(receiver){var self = TMP_5.$$s || this;
if (receiver == null) receiver = nil;
              return receiver.$call(params)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
            }, TMP_run_6.$$arity = -1), nil) && 'run';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], Opal.const_get_relative($nesting, 'Operation'), $nesting)
      })($nesting[0], null, $nesting);
    }
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/deprecation_warning"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$production?', '$env', '$include?', '$<<']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_deprecation_warning_1;

    Opal.defs(self, '$deprecation_warning', TMP_Hyperstack_deprecation_warning_1 = function $$deprecation_warning(name, message) {
      var $a, self = this;
      if (self.deprecation_messages == null) self.deprecation_messages = nil;

      
      if ($truthy(self.$env()['$production?']())) {
        return nil};
      self.deprecation_messages = ($truthy($a = self.deprecation_messages) ? $a : []);
      message = "" + "Warning: Deprecated feature used in " + (name) + ". " + (message);
      if ($truthy(self.deprecation_messages['$include?'](message))) {
        return nil};
      self.deprecation_messages['$<<'](message);
      return console.warn.apply(console, [message]);
    }, TMP_Hyperstack_deprecation_warning_1.$$arity = 2)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_to_json_1;

    return (Opal.defn(self, '$to_json', TMP_String_to_json_1 = function $$to_json() {
      var self = this;

      return JSON.stringify(self)
    }, TMP_String_to_json_1.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/client_stubs"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_import_1, TMP_imports_2, TMP_import_tree_3;

      
      
      Opal.defn(self, '$import', TMP_import_1 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_import_1.$$arity = -1);
      
      Opal.defn(self, '$imports', TMP_imports_2 = function $$imports($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_imports_2.$$arity = -1);
      return (Opal.defn(self, '$import_tree', TMP_import_tree_3 = function $$import_tree($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil
      }, TMP_import_tree_3.$$arity = -1), nil) && 'import_tree';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/context"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_variable_get', '$!', '$key?', '$[]', '$dup', '$[]=', '$-', '$instance_variable_set', '$each', '$run', '$new']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Context, self = $Context = $module($base, 'Context');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Context_set_var_1, TMP_Context_reset$B_5;

      
      Opal.defs(self, '$set_var', TMP_Context_set_var_1 = function $$set_var(ctx, var$, $kwargs) {
        var $a, $b, self = this, force, $iter = TMP_Context_set_var_1.$$p, $yield = $iter || nil, inst_value_b4 = nil, $writer = nil;
        if (self.context == null) self.context = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        force = $kwargs.$$smap["force"];
        if (force == null) {
          force = nil
        }
        if ($iter) TMP_Context_set_var_1.$$p = null;
        
        inst_value_b4 = ctx.$instance_variable_get(var$);
        if ($truthy(($truthy($a = ($truthy($b = self.context) ? self.context['$[]'](ctx)['$key?'](var$)['$!']() : $b)) ? ($truthy($b = force) ? $b : inst_value_b4['$!']()) : $a))) {
          
          $writer = [var$, ($truthy($a = inst_value_b4) ? inst_value_b4.$dup() : $a)];
          $send(self.context['$[]'](ctx), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        return ($truthy($a = inst_value_b4) ? $a : ctx.$instance_variable_set(var$, Opal.yieldX($yield, [])));
      }, TMP_Context_set_var_1.$$arity = -3);
      Opal.defs(self, '$reset!', TMP_Context_reset$B_5 = function(reboot) {
        var TMP_2, TMP_4, self = this;
        if (self.context == null) self.context = nil;

        if (reboot == null) {
          reboot = true;
        }
        if ($truthy(self.context)) {
          
          $send(self.context, 'each', [], (TMP_2 = function(ctx, vars){var self = TMP_2.$$s || this, TMP_3;
if (ctx == null) ctx = nil;if (vars == null) vars = nil;
          return $send(vars, 'each', [], (TMP_3 = function(var$, init){var self = TMP_3.$$s || this, $a;
if (var$ == null) var$ = nil;if (init == null) init = nil;
            return ctx.$instance_variable_set(var$, ($truthy($a = init) ? init.$dup() : $a))}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3))}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2));
          if ($truthy(reboot)) {
            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Application'), 'Boot').$run()
            } else {
            return nil
          };
          } else {
          return (self.context = $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_4 = function(h, k){var self = TMP_4.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
          
            $writer = [k, $hash2([], {})];
            $send(h, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4)))
        }
      }, TMP_Context_reset$B_5.$$arity = -1);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/js_imports"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$!=', '$!', '$each', '$raise']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_js_import_2;

      return (Opal.defn(self, '$js_import', TMP_js_import_2 = function $$js_import(value, $kwargs) {
        var $a, $b, TMP_1, self = this, client_only, server_only, defines, on_server = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        client_only = $kwargs.$$smap["client_only"];
        if (client_only == null) {
          client_only = nil
        }
        server_only = $kwargs.$$smap["server_only"];
        if (server_only == null) {
          server_only = nil
        }
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'defines')) {
          throw Opal.ArgumentError.$new('missing keyword: defines');
        }
        defines = $kwargs.$$smap["defines"];
        
        defines = [].concat(Opal.to_a(defines));
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          return nil
          } else {
          
          on_server = typeof Opal.global.document === 'undefined';
          if ($truthy(($truthy($a = ($truthy($b = server_only) ? on_server['$!']() : $b)) ? $a : ($truthy($b = client_only) ? on_server : $b)))) {
            return nil};
          return $send(defines, 'each', [], (TMP_1 = function(name){var self = TMP_1.$$s || this;
if (name == null) name = nil;
          
            if ($truthy(Opal.global[name] === undefined)) {
              } else {
              return nil;
            };
            return self.$raise("" + ("" + "The package " + (name) + " was not found. Add it to the webpack ") + ("" + ((function() {if ($truthy(client_only)) {
              return "client_only.js"
              } else {
              return "client_and_server.js"
            }; return nil; })()) + " manifest."));}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        };
      }, TMP_js_import_2.$$arity = 2), nil) && 'js_import'
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/on_client"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$!']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_on_client$q_1;

    Opal.defs(self, '$on_client?', TMP_Hyperstack_on_client$q_1 = function() {
      var self = this;

      if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        return (typeof Opal.global.document === 'undefined')['$!']()
        } else {
        return nil
      }
    }, TMP_Hyperstack_on_client$q_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/active_support_string_inquirer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range;

  Opal.add_stubs(['$private', '$==', '$[]']);
  return (function($base, $parent_nesting) {
    var $ActiveSupport, self = $ActiveSupport = $module($base, 'ActiveSupport');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $StringInquirer(){};
      var self = $StringInquirer = $klass($base, $super, 'StringInquirer', $StringInquirer);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StringInquirer_respond_to_missing$q_1, TMP_StringInquirer_method_missing_2;

      
      self.$private();
      
      Opal.defn(self, '$respond_to_missing?', TMP_StringInquirer_respond_to_missing$q_1 = function(method_name, include_private) {
        var $a, self = this, $iter = TMP_StringInquirer_respond_to_missing$q_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if (include_private == null) {
          include_private = false;
        }
        if ($iter) TMP_StringInquirer_respond_to_missing$q_1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return ($truthy($a = method_name['$[]'](-1)['$==']("?")) ? $a : $send(self, Opal.find_super_dispatcher(self, 'respond_to_missing?', TMP_StringInquirer_respond_to_missing$q_1, false), $zuper, $iter))
      }, TMP_StringInquirer_respond_to_missing$q_1.$$arity = -2);
      return (Opal.defn(self, '$method_missing', TMP_StringInquirer_method_missing_2 = function $$method_missing(method_name, $a_rest) {
        var self = this, arguments$, $iter = TMP_StringInquirer_method_missing_2.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        arguments$ = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          arguments$[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_StringInquirer_method_missing_2.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        if (method_name['$[]'](-1)['$==']("?")) {
          return self['$=='](method_name['$[]']($range(0, -2, false)))
          } else {
          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_StringInquirer_method_missing_2, false), $zuper, $iter)
        }
      }, TMP_StringInquirer_method_missing_2.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'String'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack_env"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_env_1;

    Opal.defs(self, '$env', TMP_Hyperstack_env_1 = function $$env() {
      var $a, self = this;
      if (self.environment == null) self.environment = nil;

      return (self.environment = ($truthy($a = self.environment) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'StringInquirer').$new("development")))
    }, TMP_Hyperstack_env_1.$$arity = 0)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/hotloader/stub"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a;

    if ($truthy((($a = Opal.const_get_relative($nesting, 'Hotloader', 'skip_raise')) ? 'constant' : nil))) {
      } else {
      (function($base, $super, $parent_nesting) {
        function $Hotloader(){};
        var self = $Hotloader = $klass($base, $super, 'Hotloader', $Hotloader);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hotloader_when_file_updates_1;

        return Opal.defs(self, '$when_file_updates', TMP_Hotloader_when_file_updates_1 = function $$when_file_updates() {
          var self = this, $iter = TMP_Hotloader_when_file_updates_1.$$p, block = $iter || nil;

          if ($iter) TMP_Hotloader_when_file_updates_1.$$p = null;
          return nil
        }, TMP_Hotloader_when_file_updates_1.$$arity = 0)
      })($nesting[0], null, $nesting)
    }
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack-config"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$==']);
  
  self.$require("hyperstack/boot");
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_naming_convention_1;

    Opal.defs(self, '$naming_convention', TMP_Hyperstack_naming_convention_1 = function $$naming_convention() {
      var self = this;

      return "camelize_params"
    }, TMP_Hyperstack_naming_convention_1.$$arity = 0)
  })($nesting[0], $nesting);
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("hyperstack/deprecation_warning");
    self.$require("hyperstack/string");
    self.$require("hyperstack/client_stubs");
    self.$require("hyperstack/context");
    self.$require("hyperstack/js_imports");
    self.$require("hyperstack/on_client");
    self.$require("hyperstack/active_support_string_inquirer.rb");
    self.$require("hyperstack_env");
    return self.$require("hyperstack/hotloader/stub");
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/autoloader"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$history=', '$-', '$load_paths=', '$loaded=', '$loading=', '$nil?', '$name', '$guess_for_anonymous', '$load_missing_constant', '$puts', '$const_defined?', '$raise', '$qualified_name_for', '$underscore', '$search_for_module', '$include?', '$loading', '$require_or_load', '$const_get', '$respond_to?', '$parent', '$!=', '$!', '$any?', '$parents', '$const_missing', '$missing_name?', '$!~', '$message', '$=~', '$==', '$to_constant_name', '$to_s', '$loaded', '$<<', '$delete', '$pop', '$history', '$each', '$load_paths', '$+', '$===', '$sub', '$inspect', '$downcase', '$tr', '$gsub']);
  
  self.$require("set");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Autoloader(){};
      var self = $Autoloader = $klass($base, $super, 'Autoloader', $Autoloader);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Autoloader_history$eq_1, TMP_Autoloader_history_2, TMP_Autoloader_load_paths$eq_3, TMP_Autoloader_load_paths_4, TMP_Autoloader_loaded$eq_5, TMP_Autoloader_loaded_6, TMP_Autoloader_loading$eq_7, TMP_Autoloader_loading_8, TMP_Autoloader_const_missing_9, TMP_Autoloader_guess_for_anonymous_10, TMP_Autoloader_load_missing_constant_12, TMP_Autoloader_missing_name$q_13, TMP_Autoloader_qualified_name_for_14, TMP_Autoloader_require_or_load_15, TMP_Autoloader_search_for_module_17, TMP_Autoloader_to_constant_name_18, TMP_Autoloader_underscore_19, $writer = nil;

      
      Opal.defs(self, '$history=', TMP_Autoloader_history$eq_1 = function(a) {
        var self = this;

        return (Opal.class_variable_set($Autoloader, '@@history', a))
      }, TMP_Autoloader_history$eq_1.$$arity = 1);
      Opal.defs(self, '$history', TMP_Autoloader_history_2 = function $$history() {
        var $a, self = this;

        return (($a = $Autoloader.$$cvars['@@history']) == null ? nil : $a)
      }, TMP_Autoloader_history_2.$$arity = 0);
      
      $writer = [Opal.const_get_relative($nesting, 'Set').$new()];
      $send(self, 'history=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defs(self, '$load_paths=', TMP_Autoloader_load_paths$eq_3 = function(a) {
        var self = this;

        return (Opal.class_variable_set($Autoloader, '@@load_paths', a))
      }, TMP_Autoloader_load_paths$eq_3.$$arity = 1);
      Opal.defs(self, '$load_paths', TMP_Autoloader_load_paths_4 = function $$load_paths() {
        var $a, self = this;

        return (($a = $Autoloader.$$cvars['@@load_paths']) == null ? nil : $a)
      }, TMP_Autoloader_load_paths_4.$$arity = 0);
      
      $writer = [[]];
      $send(self, 'load_paths=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defs(self, '$loaded=', TMP_Autoloader_loaded$eq_5 = function(a) {
        var self = this;

        return (Opal.class_variable_set($Autoloader, '@@loaded', a))
      }, TMP_Autoloader_loaded$eq_5.$$arity = 1);
      Opal.defs(self, '$loaded', TMP_Autoloader_loaded_6 = function $$loaded() {
        var $a, self = this;

        return (($a = $Autoloader.$$cvars['@@loaded']) == null ? nil : $a)
      }, TMP_Autoloader_loaded_6.$$arity = 0);
      
      $writer = [Opal.const_get_relative($nesting, 'Set').$new()];
      $send(self, 'loaded=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defs(self, '$loading=', TMP_Autoloader_loading$eq_7 = function(a) {
        var self = this;

        return (Opal.class_variable_set($Autoloader, '@@loading', a))
      }, TMP_Autoloader_loading$eq_7.$$arity = 1);
      Opal.defs(self, '$loading', TMP_Autoloader_loading_8 = function $$loading() {
        var $a, self = this;

        return (($a = $Autoloader.$$cvars['@@loading']) == null ? nil : $a)
      }, TMP_Autoloader_loading_8.$$arity = 0);
      
      $writer = [[]];
      $send(self, 'loading=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      Opal.defs(self, '$const_missing', TMP_Autoloader_const_missing_9 = function $$const_missing(const_name, mod) {
        var self = this, from_mod = nil, e = nil;

        try {
          
          from_mod = (function() {if ($truthy(mod.$name()['$nil?']())) {
            return self.$guess_for_anonymous(const_name)
            } else {
            return mod
          }; return nil; })();
          return self.$load_missing_constant(from_mod, const_name);
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
            try {
              return self.$puts("" + "HyperStack autoloader failed attempting to load " + (mod) + "::" + (const_name) + ".  Could be a bug in autoloader")
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_Autoloader_const_missing_9.$$arity = 2);
      Opal.defs(self, '$guess_for_anonymous', TMP_Autoloader_guess_for_anonymous_10 = function $$guess_for_anonymous(const_name) {
        var self = this;

        if ($truthy(Opal.const_get_relative($nesting, 'Object')['$const_defined?'](const_name))) {
          return self.$raise(Opal.const_get_relative($nesting, 'NameError').$new("" + (const_name) + " cannot be autoloaded from an anonymous class or module", const_name))
          } else {
          return Opal.const_get_relative($nesting, 'Object')
        }
      }, TMP_Autoloader_guess_for_anonymous_10.$$arity = 1);
      Opal.defs(self, '$load_missing_constant', TMP_Autoloader_load_missing_constant_12 = function $$load_missing_constant(from_mod, const_name) {
        var $a, $b, $c, TMP_11, self = this, qualified_name = nil, qualified_path = nil, module_path = nil, parent = nil, e = nil;

        
        qualified_name = self.$qualified_name_for(from_mod, const_name);
        qualified_path = self.$underscore(qualified_name);
        module_path = self.$search_for_module(qualified_path);
        if ($truthy(module_path)) {
          if ($truthy(self.$loading()['$include?'](module_path))) {
            return self.$raise("" + "Circular dependency detected while autoloading constant " + (qualified_name))
            } else {
            
            self.$require_or_load(from_mod, module_path);
            if ($truthy(from_mod['$const_defined?'](const_name, false))) {
              } else {
              self.$raise(Opal.const_get_relative($nesting, 'LoadError'), "" + "Unable to autoload constant " + (qualified_name) + ", expected " + (module_path) + " to define it")
            };
            return from_mod.$const_get(const_name);
          }
        } else if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = from_mod['$respond_to?']("parent")) ? (parent = from_mod.$parent()) : $c)) ? parent['$!='](from_mod) : $b)) ? $send(from_mod.$parents(), 'any?', [], (TMP_11 = function(p){var self = TMP_11.$$s || this;
if (p == null) p = nil;
        return p['$const_defined?'](const_name, false)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))['$!']() : $a))) {
          
          try {
            return parent.$const_missing(const_name)
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {e = $err;
              try {
                if ($truthy(self['$missing_name?'](e, self.$qualified_name_for(parent, const_name)))) {
                  return nil
                  } else {
                  return self.$raise()
                }
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
          } else {
          return nil
        };
      }, TMP_Autoloader_load_missing_constant_12.$$arity = 2);
      Opal.defs(self, '$missing_name?', TMP_Autoloader_missing_name$q_13 = function(e, name) {
        var $a, self = this, mn = nil;

        
        mn = (function() {if ($truthy(/undefined/['$!~'](e.$message()))) {
          if ($truthy(/((::)?([A-Z]\w*)(::[A-Z]\w*)*)$/['$=~'](e.$message()))) {
            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))
            } else {
            return nil
          }
          } else {
          return nil
        }; return nil; })();
        return mn['$=='](name);
      }, TMP_Autoloader_missing_name$q_13.$$arity = 2);
      Opal.defs(self, '$qualified_name_for', TMP_Autoloader_qualified_name_for_14 = function $$qualified_name_for(mod, name) {
        var self = this, mod_name = nil;

        
        mod_name = self.$to_constant_name(mod);
        if (mod_name['$==']("Object")) {
          return name.$to_s()
          } else {
          return "" + (mod_name) + "::" + (name)
        };
      }, TMP_Autoloader_qualified_name_for_14.$$arity = 2);
      Opal.defs(self, '$require_or_load', TMP_Autoloader_require_or_load_15 = function $$require_or_load(from_mod, module_path) {
        var self = this, result = nil;

        
        if ($truthy(self.$loaded()['$include?'](module_path))) {
          return nil};
        self.$loaded()['$<<'](module_path);
        self.$loading()['$<<'](module_path);
        
        try {
        try {
          result = self.$require(module_path)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
            try {
              
              self.$loaded().$delete(module_path);
              self.$raise(Opal.const_get_relative($nesting, 'LoadError'), "" + "Unable to autoload: require_or_load " + (module_path) + " failed");
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
        } finally {
          self.$loading().$pop()
        };;
        self.$history()['$<<'](module_path);
        return result;
      }, TMP_Autoloader_require_or_load_15.$$arity = 2);
      Opal.defs(self, '$search_for_module', TMP_Autoloader_search_for_module_17 = function $$search_for_module(path) {try {

        var TMP_16, self = this;

        
        $send(self.$load_paths(), 'each', [], (TMP_16 = function(load_path){var self = TMP_16.$$s || this, mod_path = nil;
if (load_path == null) load_path = nil;
        
          mod_path = $rb_plus($rb_plus(load_path, "/"), path);
          if ($truthy(Opal.modules.hasOwnProperty(mod_path))) {
            Opal.ret(mod_path)
            } else {
            return nil
          };}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
        if ($truthy(Opal.modules.hasOwnProperty(path))) {
          return path};
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_Autoloader_search_for_module_17.$$arity = 1);
      Opal.defs(self, '$to_constant_name', TMP_Autoloader_to_constant_name_18 = function $$to_constant_name(desc) {
        var $a, self = this, $case = nil;

        return (function() {$case = desc;
        if (Opal.const_get_relative($nesting, 'String')['$===']($case)) {return desc.$sub(/^::/, "")}
        else if (Opal.const_get_relative($nesting, 'Symbol')['$===']($case)) {return desc.$to_s()}
        else if (Opal.const_get_relative($nesting, 'Module')['$===']($case)) {return ($truthy($a = desc.$name()) ? $a : self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "Anonymous modules have no name to be referenced by"))}
        else {return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + "Not a valid constant descriptor: " + (desc.$inspect()))}})()
      }, TMP_Autoloader_to_constant_name_18.$$arity = 1);
      return Opal.defs(self, '$underscore', TMP_Autoloader_underscore_19 = function $$underscore(string) {
        var self = this;

        return string.$gsub(/::/, "/").$gsub(/([A-Z]+)([A-Z][a-z])/, "\\1_\\2").$gsub(/([a-z\d])([A-Z])/, "\\1_\\2").$tr("-", "_").$downcase()
      }, TMP_Autoloader_underscore_19.$$arity = 1);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/autoloader_starter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send, $klass = Opal.klass, $truthy = Opal.truthy, $writer = nil;

  Opal.add_stubs(['$load_paths=', '$-', '$_autoloader_original_const_missing', '$const_missing', '$raise']);
  
  
  $writer = [["components", "models", "operations", "stores"]];
  $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Autoloader'), 'load_paths=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_const_missing_1;

      
      Opal.alias(self, "_autoloader_original_const_missing", "const_missing");
      return (Opal.defn(self, '$const_missing', TMP_const_missing_1 = function $$const_missing(const_name) {
        var $a, self = this, e = nil;

        try {
          return self.$_autoloader_original_const_missing(const_name)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {e = $err;
            try {
              return ($truthy($a = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Autoloader').$const_missing(const_name, self)) ? $a : self.$raise(e))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_const_missing_1.$$arity = 1), nil) && 'const_missing';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$!=', '$attr_accessor']);
  
  self.$require("hyperstack-config");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
      nil};
    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          return self.$attr_accessor("after_error_args")
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/callbacks"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$!=', '$extend', '$each', '$flatten', '$callbacks_for', '$class', '$is_a?', '$instance_exec', '$to_proc', '$send', '$define_singleton_method', '$set_var', '$<<', '$push', '$when_file_updates', '$delete_if', '$equal?', '$call', '$+', '$respond_to?', '$superclass', '$any?']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Callbacks, self = $Callbacks = $module($base, 'Callbacks');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Callbacks_included_1, TMP_Callbacks_run_callback_3;

        
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil};
        Opal.defs(self, '$included', TMP_Callbacks_included_1 = function $$included(base) {
          var self = this;

          return base.$extend(Opal.const_get_relative($nesting, 'ClassMethods'))
        }, TMP_Callbacks_included_1.$$arity = 1);
        
        Opal.defn(self, '$run_callback', TMP_Callbacks_run_callback_3 = function $$run_callback(name, $a_rest) {
          var TMP_2, self = this, args, $iter = TMP_Callbacks_run_callback_3.$$p, $yield = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_Callbacks_run_callback_3.$$p = null;
          
          $send(self.$class().$callbacks_for(name).$flatten(), 'each', [], (TMP_2 = function(callback){var self = TMP_2.$$s || this, result = nil;
if (callback == null) callback = nil;
          
            result = (function() {if ($truthy(callback['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
              return $send(self, 'instance_exec', Opal.to_a(args), callback.$to_proc())
              } else {
              return $send(self, 'send', [callback].concat(Opal.to_a(args)))
            }; return nil; })();
            if (($yield !== nil)) {
              return (args = Opal.yield1($yield, result))
              } else {
              return nil
            };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
          return args;
        }, TMP_Callbacks_run_callback_3.$$arity = -2);
        (function($base, $parent_nesting) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_define_callback_4, TMP_ClassMethods_callbacks_for_10, TMP_ClassMethods_callbacks$q_11;

          
          
          Opal.defn(self, '$define_callback', TMP_ClassMethods_define_callback_4 = function $$define_callback(callback_name) {
            var TMP_5, TMP_7, self = this, $iter = TMP_ClassMethods_define_callback_4.$$p, after_define_hook = $iter || nil, wrapper_name = nil;

            if ($iter) TMP_ClassMethods_define_callback_4.$$p = null;
            
            wrapper_name = "" + "_" + (callback_name) + "_callbacks";
            $send(self, 'define_singleton_method', [wrapper_name], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

            return $send(Opal.const_get_relative($nesting, 'Context'), 'set_var', [self, "" + "@" + (wrapper_name), $hash2(["force"], {"force": true})], (TMP_6 = function(){var self = TMP_6.$$s || this;

              return []}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
            return $send(self, 'define_singleton_method', [callback_name], (TMP_7 = function($a_rest){var self = TMP_7.$$s || this, block, args, TMP_8;

              block = TMP_7.$$p || nil;
              if (block) TMP_7.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              if ((block !== nil)) {
                args['$<<'](block)};
              self.$send(wrapper_name).$push(args);
              $send(Opal.const_get_relative($nesting, 'Hotloader'), 'when_file_updates', [], (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_9;

              return $send(self.$send(wrapper_name), 'delete_if', [], (TMP_9 = function(item){var self = TMP_9.$$s || this;
if (item == null) item = nil;
                return item['$equal?'](args)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));
              if ($truthy(after_define_hook)) {
                return $send(after_define_hook, 'call', Opal.to_a(args), block.$to_proc())
                } else {
                return nil
              };}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7));
          }, TMP_ClassMethods_define_callback_4.$$arity = 1);
          
          Opal.defn(self, '$callbacks_for', TMP_ClassMethods_callbacks_for_10 = function $$callbacks_for(callback_name) {
            var self = this, wrapper_name = nil;

            
            wrapper_name = "" + "_" + (callback_name) + "_callbacks";
            return $rb_plus((function() {if ($truthy(self.$superclass()['$respond_to?']("callbacks_for"))) {
              return self.$superclass().$callbacks_for(callback_name)
              } else {
              return []
            }; return nil; })(), self.$send(wrapper_name));
          }, TMP_ClassMethods_callbacks_for_10.$$arity = 1);
          
          Opal.defn(self, '$callbacks?', TMP_ClassMethods_callbacks$q_11 = function(name) {
            var self = this;

            return self.$callbacks_for(name)['$any?']()
          }, TMP_ClassMethods_callbacks$q_11.$$arity = 1);
        })($nesting[0], $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/auto_unmount"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$class_eval', '$define_callback', '$run_callback', '$each', '$[]', '$objects_to_unmount', '$to_proc', '$delete', '$instance_variables', '$instance_variable_get', '$respond_to?', '$unmount', '$==', '$unmounted?', '$tap', '$define_singleton_method', '$abort', '$<<', '$new', '$[]=', '$-']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $AutoUnmount, self = $AutoUnmount = $module($base, 'AutoUnmount');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AutoUnmount_included_2, TMP_AutoUnmount_unmounted$q_3, TMP_AutoUnmount_unmount_5, TMP_AutoUnmount_every_6, TMP_AutoUnmount_after_9;

        
        Opal.defs(self, '$included', TMP_AutoUnmount_included_2 = function $$included(base) {
          var TMP_1, self = this;

          
          base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Callbacks'));
          return $send(base, 'class_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this;

          return self.$define_callback("before_unmount")}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
        }, TMP_AutoUnmount_included_2.$$arity = 1);
        
        Opal.defn(self, '$unmounted?', TMP_AutoUnmount_unmounted$q_3 = function() {
          var self = this;
          if (self.__hyperstack_internal_auto_unmount_unmounted == null) self.__hyperstack_internal_auto_unmount_unmounted = nil;

          return self.__hyperstack_internal_auto_unmount_unmounted
        }, TMP_AutoUnmount_unmounted$q_3.$$arity = 0);
        
        Opal.defn(self, '$unmount', TMP_AutoUnmount_unmount_5 = function $$unmount() {
          var TMP_4, self = this;

          
          self.$run_callback("before_unmount");
          $send(Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self), 'each', [], "unmount".$to_proc());
          Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount().$delete(self);
          $send(self.$instance_variables(), 'each', [], (TMP_4 = function(var$){var self = TMP_4.$$s || this, val = nil;
if (var$ == null) var$ = nil;
          
            val = self.$instance_variable_get(var$);
            
            try {
              if ($truthy(val['$respond_to?']("unmount"))) {
                return val.$unmount()
                } else {
                return nil
              }
            } catch ($err) {
              if (Opal.rescue($err, [(function() {if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
                return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'JS'), 'Error')
                } else {
                return nil
              }; return nil; })()])) {
                try {
                  return nil
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
          return (self.__hyperstack_internal_auto_unmount_unmounted = true);
        }, TMP_AutoUnmount_unmount_5.$$arity = 0);
        
        Opal.defn(self, '$every', TMP_AutoUnmount_every_6 = function $$every($a_rest) {
          var TMP_7, self = this, args, $iter = TMP_AutoUnmount_every_6.$$p, block = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_AutoUnmount_every_6.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self['$unmounted?']())) {
            return nil};
          return $send($send(self, Opal.find_super_dispatcher(self, 'every', TMP_AutoUnmount_every_6, false), $zuper, $iter), 'tap', [], (TMP_7 = function(id){var self = TMP_7.$$s || this, TMP_8, sself = nil;
if (id == null) id = nil;
          
            sself = self;
            $send(id, 'define_singleton_method', ["unmount"], (TMP_8 = function(){var self = TMP_8.$$s || this;

            return self.$abort()}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));
            return Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self)['$<<'](id);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        }, TMP_AutoUnmount_every_6.$$arity = -1);
        
        Opal.defn(self, '$after', TMP_AutoUnmount_after_9 = function $$after($a_rest) {
          var TMP_10, self = this, args, $iter = TMP_AutoUnmount_after_9.$$p, block = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_AutoUnmount_after_9.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          if ($truthy(self['$unmounted?']())) {
            return nil};
          return $send($send(self, Opal.find_super_dispatcher(self, 'after', TMP_AutoUnmount_after_9, false), $zuper, $iter), 'tap', [], (TMP_10 = function(id){var self = TMP_10.$$s || this, TMP_11, sself = nil;
if (id == null) id = nil;
          
            sself = self;
            $send(id, 'define_singleton_method', ["unmount"], (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$abort()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
            return Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](self)['$<<'](id);}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
        }, TMP_AutoUnmount_after_9.$$arity = -1);
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_objects_to_unmount_13;

          return (Opal.defn(self, '$objects_to_unmount', TMP_objects_to_unmount_13 = function $$objects_to_unmount() {
            var $a, TMP_12, self = this;
            if (self.objects_to_unmount == null) self.objects_to_unmount = nil;

            return (self.objects_to_unmount = ($truthy($a = self.objects_to_unmount) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_12 = function(h, k){var self = TMP_12.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
            
              $writer = [k, Opal.const_get_relative($nesting, 'Set').$new()];
              $send(h, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))))
          }, TMP_objects_to_unmount_13.$$arity = 0), nil) && 'objects_to_unmount'
        })(Opal.get_singleton_class(self), $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/state/observer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$observing', '$to_proc', '$update_objects_to_observe', '$remove']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Observer, self = $Observer = $module($base, 'Observer');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Observer_observing_1, TMP_Observer_update_objects_to_observe_2, TMP_Observer_remove_3;

        
        
        Opal.defn(self, '$observing', TMP_Observer_observing_1 = function $$observing($kwargs) {
          var self = this, immediate_update, rendering, update_objects, $iter = TMP_Observer_observing_1.$$p, block = $iter || nil;

          if ($kwargs == null || !$kwargs.$$is_hash) {
            if ($kwargs == null) {
              $kwargs = $hash2([], {});
            } else {
              throw Opal.ArgumentError.$new('expected kwargs');
            }
          }
          immediate_update = $kwargs.$$smap["immediate_update"];
          if (immediate_update == null) {
            immediate_update = false
          }
          rendering = $kwargs.$$smap["rendering"];
          if (rendering == null) {
            rendering = false
          }
          update_objects = $kwargs.$$smap["update_objects"];
          if (update_objects == null) {
            update_objects = false
          }
          if ($iter) TMP_Observer_observing_1.$$p = null;
          return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper'), 'observing', [self, immediate_update, rendering, update_objects], block.$to_proc())
        }, TMP_Observer_observing_1.$$arity = -1);
        
        Opal.defn(self, '$update_objects_to_observe', TMP_Observer_update_objects_to_observe_2 = function $$update_objects_to_observe() {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper').$update_objects_to_observe(self)
        }, TMP_Observer_update_objects_to_observe_2.$$arity = 0);
        
        Opal.defn(self, '$remove', TMP_Observer_remove_3 = function $$remove() {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper').$remove(self)
        }, TMP_Observer_remove_3.$$arity = 0);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/validator"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$private', '$tap', '$new', '$each', '$instance_variable_set', '$dup', '$instance_variable_get', '$build', '$to_proc', '$instance_eval', '$[]=', '$-', '$define_rule', '$coerce_native_hash_values', '$rules', '$define_all_others', '$props_wrapper', '$reject', '$[]', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$defined_props', '$validate_required', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$define_param', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$each_with_index', '$Native']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $Validator(){};
          var self = $Validator = $klass($base, $super, 'Validator', $Validator);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Validator_copy_3, TMP_Validator_initialize_4, TMP_Validator_build_5, TMP_Validator_build_6, TMP_Validator_requires_7, TMP_Validator_optional_8, TMP_Validator_event_9, TMP_Validator_all_other_params_12, TMP_Validator_validate_14, TMP_Validator_default_props_17, TMP_Validator_defined_props_19, TMP_Validator_allow_undefined_props$q_20, TMP_Validator_rules_21, TMP_Validator_define_rule_22, TMP_Validator_errors_23, TMP_Validator_validate_types_24, TMP_Validator_type_check_25, TMP_Validator_validate_allowed_26, TMP_Validator_validate_required_28, TMP_Validator_validate_undefined_30, TMP_Validator_validate_value_array_32, TMP_Validator_coerce_native_hash_values_34;

          def.allow_undefined_props = def.rules = def.errors = nil;
          
          self.$attr_accessor("errors");
          self.$attr_reader("props_wrapper");
          self.$private("errors", "props_wrapper");
          
          Opal.defn(self, '$copy', TMP_Validator_copy_3 = function $$copy(new_props_wrapper) {
            var TMP_1, self = this;

            return $send(Opal.const_get_relative($nesting, 'Validator').$new(new_props_wrapper), 'tap', [], (TMP_1 = function(c){var self = TMP_1.$$s || this, TMP_2;
if (c == null) c = nil;
            return $send(["@allow_undefined_props", "@rules", "@errors"], 'each', [], (TMP_2 = function(var$){var self = TMP_2.$$s || this;
if (var$ == null) var$ = nil;
              return c.$instance_variable_set(var$, self.$instance_variable_get(var$).$dup())}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1))
          }, TMP_Validator_copy_3.$$arity = 1);
          
          Opal.defn(self, '$initialize', TMP_Validator_initialize_4 = function $$initialize(props_wrapper) {
            var self = this;

            if (props_wrapper == null) {
              props_wrapper = Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'PropsWrapper'));
            }
            return (self.props_wrapper = props_wrapper)
          }, TMP_Validator_initialize_4.$$arity = -1);
          Opal.defs(self, '$build', TMP_Validator_build_5 = function $$build() {
            var self = this, $iter = TMP_Validator_build_5.$$p, block = $iter || nil;

            if ($iter) TMP_Validator_build_5.$$p = null;
            return $send(self.$new(), 'build', [], block.$to_proc())
          }, TMP_Validator_build_5.$$arity = 0);
          
          Opal.defn(self, '$build', TMP_Validator_build_6 = function $$build() {
            var self = this, $iter = TMP_Validator_build_6.$$p, block = $iter || nil;

            if ($iter) TMP_Validator_build_6.$$p = null;
            
            $send(self, 'instance_eval', [], block.$to_proc());
            return self;
          }, TMP_Validator_build_6.$$arity = 0);
          
          Opal.defn(self, '$requires', TMP_Validator_requires_7 = function $$requires(name, options) {
            var self = this, $writer = nil;

            if (options == null) {
              options = $hash2([], {});
            }
            
            
            $writer = ["required", true];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$define_rule(name, options);
          }, TMP_Validator_requires_7.$$arity = -2);
          
          Opal.defn(self, '$optional', TMP_Validator_optional_8 = function $$optional(name, options) {
            var self = this, $writer = nil;

            if (options == null) {
              options = $hash2([], {});
            }
            
            
            $writer = ["required", false];
            $send(options, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$define_rule(name, options);
          }, TMP_Validator_optional_8.$$arity = -2);
          
          Opal.defn(self, '$event', TMP_Validator_event_9 = function $$event(name) {
            var self = this, $writer = nil;

            
            $writer = [name, self.$coerce_native_hash_values($hash2(["default", "type", "allow_nil"], {"default": nil, "type": Opal.const_get_relative($nesting, 'Proc'), "allow_nil": true}))];
            $send(self.$rules(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_Validator_event_9.$$arity = 1);
          
          Opal.defn(self, '$all_other_params', TMP_Validator_all_other_params_12 = function $$all_other_params(name) {
            var TMP_10, self = this;

            
            self.allow_undefined_props = true;
            return $send(self.$props_wrapper(), 'define_all_others', [name], (TMP_10 = function(props){var self = TMP_10.$$s || this, TMP_11;
if (props == null) props = nil;
            return $send(props, 'reject', [], (TMP_11 = function(name, value){var self = TMP_11.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
              return self.$rules()['$[]'](name)}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11))}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
          }, TMP_Validator_all_other_params_12.$$arity = 1);
          
          Opal.defn(self, '$validate', TMP_Validator_validate_14 = function $$validate(props) {
            var TMP_13, self = this, $writer = nil;

            
            
            $writer = [[]];
            $send(self, 'errors=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(self['$allow_undefined_props?']())) {
              } else {
              self.$validate_undefined(props)
            };
            props = self.$coerce_native_hash_values(self.$defined_props(props));
            self.$validate_required(props);
            $send(props, 'each', [], (TMP_13 = function(name, value){var self = TMP_13.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            
              self.$validate_types(name, value);
              return self.$validate_allowed(name, value);}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13));
            return self.$errors();
          }, TMP_Validator_validate_14.$$arity = 1);
          
          Opal.defn(self, '$default_props', TMP_Validator_default_props_17 = function $$default_props() {
            var TMP_15, TMP_16, self = this;

            return $send($send(self.$rules(), 'select', [], (TMP_15 = function(key, value){var self = TMP_15.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
            return value.$keys()['$include?']("default")}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15)), 'inject', [$hash2([], {})], (TMP_16 = function(memo, $a){var self = TMP_16.$$s || this, $a_args, k, v, $writer = nil;

              if ($a == null) {
                $a = nil;
              }
              $a = Opal.to_ary($a);
              $a_args = Opal.slice.call($a, 0, $a.length);
              k = $a_args.splice(0,1)[0];
              if (k == null) {
                k = nil;
              }
              v = $a_args.splice(0,1)[0];
              if (v == null) {
                v = nil;
              }if (memo == null) memo = nil;
            
              
              $writer = [k, v['$[]']("default")];
              $send(memo, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return memo;}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16.$$has_top_level_mlhs_arg = true, TMP_16))
          }, TMP_Validator_default_props_17.$$arity = 0);
          self.$private();
          
          Opal.defn(self, '$defined_props', TMP_Validator_defined_props_19 = function $$defined_props(props) {
            var TMP_18, self = this;

            return $send(props, 'select', [], (TMP_18 = function(name){var self = TMP_18.$$s || this;
if (name == null) name = nil;
            return self.$rules().$keys()['$include?'](name)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18))
          }, TMP_Validator_defined_props_19.$$arity = 1);
          
          Opal.defn(self, '$allow_undefined_props?', TMP_Validator_allow_undefined_props$q_20 = function() {
            var self = this;

            return self.allow_undefined_props['$!']()['$!']()
          }, TMP_Validator_allow_undefined_props$q_20.$$arity = 0);
          
          Opal.defn(self, '$rules', TMP_Validator_rules_21 = function $$rules() {
            var $a, self = this;

            return (self.rules = ($truthy($a = self.rules) ? $a : $hash2(["children"], {"children": $hash2(["required"], {"required": false})})))
          }, TMP_Validator_rules_21.$$arity = 0);
          
          Opal.defn(self, '$define_rule', TMP_Validator_define_rule_22 = function $$define_rule(name, options) {
            var self = this, $writer = nil;

            if (options == null) {
              options = $hash2([], {});
            }
            
            
            $writer = [name, self.$coerce_native_hash_values(options)];
            $send(self.$rules(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$props_wrapper().$define_param(name, options['$[]']("type"), options['$[]']("alias"));
          }, TMP_Validator_define_rule_22.$$arity = -2);
          
          Opal.defn(self, '$errors', TMP_Validator_errors_23 = function $$errors() {
            var $a, self = this;

            return (self.errors = ($truthy($a = self.errors) ? $a : []))
          }, TMP_Validator_errors_23.$$arity = 0);
          
          Opal.defn(self, '$validate_types', TMP_Validator_validate_types_24 = function $$validate_types(prop_name, value) {
            var self = this, klass = nil, allow_nil = nil;

            
            if ($truthy((klass = self.$rules()['$[]'](prop_name)['$[]']("type")))) {
              } else {
              return nil
            };
            if ($truthy(klass['$is_a?'](Opal.const_get_relative($nesting, 'Array'))['$!']())) {
              
              allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
              return self.$type_check("" + "`" + (prop_name) + "`", value, klass, allow_nil);
            } else if ($truthy($rb_gt(klass.$length(), 0))) {
              return self.$validate_value_array(prop_name, value)
              } else {
              
              allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
              return self.$type_check("" + "`" + (prop_name) + "`", value, Opal.const_get_relative($nesting, 'Array'), allow_nil);
            };
          }, TMP_Validator_validate_types_24.$$arity = 2);
          
          Opal.defn(self, '$type_check', TMP_Validator_type_check_25 = function $$type_check(prop_name, value, klass, allow_nil) {
            var $a, self = this;

            
            if ($truthy(($truthy($a = allow_nil) ? value['$nil?']() : $a))) {
              return nil};
            if ($truthy(value['$is_a?'](klass))) {
              return nil};
            if ($truthy(($truthy($a = klass['$respond_to?']("_react_param_conversion")) ? klass.$_react_param_conversion(value, "validate_only") : $a))) {
              return nil};
            return self.$errors()['$<<']("" + "Provided prop " + (prop_name) + " could not be converted to " + (klass));
          }, TMP_Validator_type_check_25.$$arity = 4);
          
          Opal.defn(self, '$validate_allowed', TMP_Validator_validate_allowed_26 = function $$validate_allowed(prop_name, value) {
            var self = this, values = nil;

            
            if ($truthy((values = self.$rules()['$[]'](prop_name)['$[]']("values")))) {
              } else {
              return nil
            };
            if ($truthy(values['$include?'](value))) {
              return nil};
            return self.$errors()['$<<']("" + "Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
          }, TMP_Validator_validate_allowed_26.$$arity = 2);
          
          Opal.defn(self, '$validate_required', TMP_Validator_validate_required_28 = function $$validate_required(props) {
            var TMP_27, self = this;

            return $send($rb_minus(self.$rules().$keys(), props.$keys()), 'each', [], (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
            
              if ($truthy(self.$rules()['$[]'](name)['$[]']("required"))) {
                } else {
                return nil;
              };
              return self.$errors()['$<<']("" + "Required prop `" + (name) + "` was not specified");}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
          }, TMP_Validator_validate_required_28.$$arity = 1);
          
          Opal.defn(self, '$validate_undefined', TMP_Validator_validate_undefined_30 = function $$validate_undefined(props) {
            var TMP_29, self = this;

            return $send($rb_minus(props.$keys(), self.$rules().$keys()), 'each', [], (TMP_29 = function(prop_name){var self = TMP_29.$$s || this;
if (prop_name == null) prop_name = nil;
            return self.$errors()['$<<']("" + "Provided prop `" + (prop_name) + "` not specified in spec")}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29))
          }, TMP_Validator_validate_undefined_30.$$arity = 1);
          
          Opal.defn(self, '$validate_value_array', TMP_Validator_validate_value_array_32 = function $$validate_value_array(name, value) {
            var TMP_31, self = this, klass = nil, allow_nil = nil;

            try {
              
              klass = self.$rules()['$[]'](name)['$[]']("type");
              allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
              return $send(value, 'each_with_index', [], (TMP_31 = function(item, index){var self = TMP_31.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
              return self.$type_check("" + "`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil)}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31));
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NoMethodError')])) {
                try {
                  return self.$errors()['$<<']("" + "Provided prop `" + (name) + "` was not an Array")
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_Validator_validate_value_array_32.$$arity = 2);
          return (Opal.defn(self, '$coerce_native_hash_values', TMP_Validator_coerce_native_hash_values_34 = function $$coerce_native_hash_values(hash) {
            var TMP_33, self = this;

            return $send(hash, 'each', [], (TMP_33 = function(key, value){var self = TMP_33.$$s || this, $writer = nil;
if (key == null) key = nil;if (value == null) value = nil;
            
              $writer = [key, self.$Native(value)];
              $send(hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_33.$$s = self, TMP_33.$$arity = 2, TMP_33))
          }, TMP_Validator_coerce_native_hash_values_34.$$arity = 1), nil) && 'coerce_native_hash_values';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/string"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_event_camelize_1;

    return (Opal.defn(self, '$event_camelize', TMP_String_event_camelize_1 = function $$event_camelize() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    })
    }, TMP_String_event_camelize_1.$$arity = 0), nil) && 'event_camelize'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/element"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$alias_native', '$attr_reader', '$attr_accessor', '$_update_ref', '$[]', '$properties', '$raise', '$type', '$ref', '$dom_node', '$each', '$!=', '$strip', '$merge_event_prop!', '$to_proc', '$shallow_to_n', '$empty?', '$render', '$convert_props', '$new', '$block', '$delete', '$private', '$=~', '$merge_component_event_prop!', '$gsub', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$==', '$key_code', '$instance_variable_get', '$merge!', '$Array', '$ignore_bulk_updates']);
  
  self.$require("hyperstack/ext/component/string");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Element(){};
        var self = $Element = $klass($base, $super, 'Element', $Element);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Element_initialize_1, TMP_Element__update_ref_2, TMP_Element_ref_3, TMP_Element_dom_node_4, TMP_Element_on_5, TMP_Element_render_7, TMP_Element_delete_8, TMP_Element_merge_event_prop$B_9, TMP_Element_merge_built_in_event_prop$B_11, TMP_Element_merge_component_event_prop$B_12;

        def._child_element = def.ref = def["native"] = def.properties = def.type = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        self.$alias_native("element_type", "type");
        self.$alias_native("props", "props");
        self.$attr_reader("type");
        self.$attr_reader("properties");
        self.$attr_reader("block");
        self.$attr_accessor("waiting_on_resources");
        
        Opal.defn(self, '$initialize', TMP_Element_initialize_1 = function $$initialize(native_element, type, properties, block) {
          var $a, self = this;

          if (type == null) {
            type = nil;
          }
          if (properties == null) {
            properties = $hash2([], {});
          }
          if (block == null) {
            block = nil;
          }
          
          self.type = type;
          self.properties = ($truthy($a = (function() {if ($truthy(typeof properties === 'undefined')) {
            return nil
            } else {
            return properties
          }; return nil; })()) ? $a : $hash2([], {}));
          self.block = block;
          return (self["native"] = native_element);
        }, TMP_Element_initialize_1.$$arity = -2);
        
        Opal.defn(self, '$_update_ref', TMP_Element__update_ref_2 = function $$_update_ref(x) {
          var self = this;

          
          self.ref = x;
          if ($truthy(self._child_element)) {
            return self._child_element.$_update_ref(x)
            } else {
            return nil
          };
        }, TMP_Element__update_ref_2.$$arity = 1);
        
        Opal.defn(self, '$ref', TMP_Element_ref_3 = function $$ref() {
          var self = this;

          
          if ($truthy(self.ref)) {
            return self.ref};
          if ($truthy(self.$properties()['$[]']("ref"))) {
            self.$raise("" + "The instance of " + (self.$type()) + " has not been mounted yet")};
          return self.$raise("" + "Attempt to get a ref on " + (self.$type()) + " which is a static component.");
        }, TMP_Element_ref_3.$$arity = 0);
        
        Opal.defn(self, '$dom_node', TMP_Element_dom_node_4 = function $$dom_node() {
          var self = this;

          if ($truthy(typeof self.$ref().$dom_node == 'function')) {
            return self.$ref().$dom_node()
            } else {
            return self.$ref()
          }
        }, TMP_Element_dom_node_4.$$arity = 0);
        
        Opal.defn(self, '$on', TMP_Element_on_5 = function $$on($a_rest) {
          var TMP_6, self = this, event_names, $iter = TMP_Element_on_5.$$p, block = $iter || nil, any_found = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          event_names = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            event_names[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Element_on_5.$$p = null;
          
          any_found = false;
          $send(event_names, 'each', [], (TMP_6 = function(event_name){var self = TMP_6.$$s || this, $a;
if (event_name == null) event_name = nil;
          
            if ($truthy(($truthy($a = event_name) ? event_name.$strip()['$!=']("") : $a))) {
              } else {
              return nil;
            };
            $send(self, 'merge_event_prop!', [event_name], block.$to_proc());
            return (any_found = true);}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
          if ($truthy(any_found)) {
            self["native"] = React.cloneElement(self["native"], self.properties.$shallow_to_n())};
          return self;
        }, TMP_Element_on_5.$$arity = -1);
        
        Opal.defn(self, '$render', TMP_Element_render_7 = function $$render($a_rest) {
          var self = this, props;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          props = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            props[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($truthy(props['$empty?']())) {
            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render(self)
            } else {
            
            props = $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper'), 'convert_props', [self.type, self.properties].concat(Opal.to_a(props)));
            return (self._child_element = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render(Opal.const_get_relative($nesting, 'Element').$new(React.cloneElement(self["native"], props.$shallow_to_n()), self.$type(), props, self.$block())));
          }
        }, TMP_Element_render_7.$$arity = -1);
        
        Opal.defn(self, '$delete', TMP_Element_delete_8 = function() {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$delete(self)
        }, TMP_Element_delete_8.$$arity = 0);
        Opal.alias(self, "as_node", "delete");
        self.$private();
        
        Opal.defn(self, '$merge_event_prop!', TMP_Element_merge_event_prop$B_9 = function(event_name) {
          var TMP_10, self = this, $iter = TMP_Element_merge_event_prop$B_9.$$p, block = $iter || nil, name = nil;

          if ($iter) TMP_Element_merge_event_prop$B_9.$$p = null;
          if ($truthy(event_name['$=~'](/^<(.+)>$/))) {
            return $send(self, 'merge_component_event_prop!', [event_name.$gsub(/^<(.+)>$/, "\\1")], block.$to_proc())
          } else if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'BUILT_IN_EVENTS')['$include?']((name = "" + "on" + (event_name.$event_camelize()))))) {
            return $send(self, 'merge_built_in_event_prop!', [name], block.$to_proc())
          } else if (event_name['$==']("enter")) {
            return $send(self, 'merge_built_in_event_prop!', ["onKeyDown"], (TMP_10 = function(evt){var self = TMP_10.$$s || this;
if (evt == null) evt = nil;
            if (evt.$key_code()['$=='](13)) {
                return Opal.yield1(block, evt);
                } else {
                return nil
              }}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10))
          } else if ($truthy(self.type.$instance_variable_get("@native_import"))) {
            return $send(self, 'merge_component_event_prop!', [name], block.$to_proc())
            } else {
            return $send(self, 'merge_component_event_prop!', ["" + "on_" + (event_name)], block.$to_proc())
          }
        }, TMP_Element_merge_event_prop$B_9.$$arity = 1);
        
        Opal.defn(self, '$merge_built_in_event_prop!', TMP_Element_merge_built_in_event_prop$B_11 = function(prop_name) {
          var self = this, $iter = TMP_Element_merge_built_in_event_prop$B_11.$$p, block = $iter || nil;

          if ($iter) TMP_Element_merge_built_in_event_prop$B_11.$$p = null;
          return self.properties['$merge!']($hash(prop_name, 
            function(){
              var react_event = arguments[0];
              if (arguments.length == 0 || !react_event.nativeEvent) {
                return Opal.yieldX(block, Opal.to_a(self.$Array(arguments)))
              }
              var all_args;
              var other_args;
              if (arguments.length > 1) {
                all_args = Array.prototype.slice.call(arguments);
                other_args = all_args.slice(1, arguments.length);
                return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper'), 'ignore_bulk_updates', [Opal.const_get_relative($nesting, 'Event').$new(react_event)].concat(Opal.to_a((other_args))), block.$to_proc());
              } else {
                return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper'), 'ignore_bulk_updates', [Opal.const_get_relative($nesting, 'Event').$new(react_event)], block.$to_proc());
              }
            }
          ))
        }, TMP_Element_merge_built_in_event_prop$B_11.$$arity = 1);
        return (Opal.defn(self, '$merge_component_event_prop!', TMP_Element_merge_component_event_prop$B_12 = function(prop_name) {
          var self = this, $iter = TMP_Element_merge_component_event_prop$B_12.$$p, $yield = $iter || nil;

          if ($iter) TMP_Element_merge_component_event_prop$B_12.$$p = null;
          return self.properties['$merge!']($hash(prop_name, 
            function(){
              return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
            }
          ))
        }, TMP_Element_merge_component_event_prop$B_12.$$arity = 1), nil) && 'merge_component_event_prop!';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/native_library"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$const_defined?', '$const_get', '$render', '$to_proc', '$private', '$native_react_component?', '$const_set', '$imports', '$new', '$class_eval', '$include']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $NativeLibrary(){};
        var self = $NativeLibrary = $klass($base, $super, 'NativeLibrary', $NativeLibrary);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_imports_1, TMP_rename_3, TMP_import_const_from_native_4, TMP_const_missing_5, TMP_method_missing_6, TMP_lookup_native_name_7, TMP_scope_native_name_8, TMP_create_component_wrapper_10, TMP_create_library_wrapper_11;

          
          
          Opal.defn(self, '$imports', TMP_imports_1 = function $$imports(native_name) {
            var self = this;

            
            self.__hyperstack_component_native_prefix = "" + (native_name) + ".";
            return self;
          }, TMP_imports_1.$$arity = 1);
          
          Opal.defn(self, '$rename', TMP_rename_3 = function $$rename(rename_list) {
            var TMP_2, self = this;

            return $send(rename_list, 'each', [], (TMP_2 = function(js_name, ruby_name){var self = TMP_2.$$s || this, $a, native_name = nil;
if (js_name == null) js_name = nil;if (ruby_name == null) ruby_name = nil;
            
              native_name = self.$lookup_native_name(js_name);
              if ($truthy(self.$lookup_native_name(js_name))) {
                return ($truthy($a = self.$create_component_wrapper(self, native_name, ruby_name)) ? $a : self.$create_library_wrapper(self, native_name, ruby_name))
                } else {
                return self.$raise("" + ("" + "class " + (self.$name()) + " < Hyperstack::Component::NativeLibrary could not import " + (js_name) + ". ") + ("" + "Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
              };}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2))
          }, TMP_rename_3.$$arity = 1);
          
          Opal.defn(self, '$import_const_from_native', TMP_import_const_from_native_4 = function $$import_const_from_native(klass, const_name, create_library) {
            var $a, $b, $c, self = this, native_name = nil;

            
            native_name = ($truthy($a = self.$lookup_native_name(const_name)) ? $a : self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false)))));
            return ($truthy($a = native_name) ? ($truthy($b = self.$create_component_wrapper(klass, native_name, const_name)) ? $b : ($truthy($c = create_library) ? self.$create_library_wrapper(klass, native_name, const_name) : $c)) : $a);
          }, TMP_import_const_from_native_4.$$arity = 3);
          
          Opal.defn(self, '$const_missing', TMP_const_missing_5 = function $$const_missing(const_name) {
            var $a, self = this, $iter = TMP_const_missing_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            if ($iter) TMP_const_missing_5.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            return ($truthy($a = self.$import_const_from_native(self, const_name, true)) ? $a : $send(self, Opal.find_super_dispatcher(self, 'const_missing', TMP_const_missing_5, false), $zuper, $iter))
          }, TMP_const_missing_5.$$arity = 1);
          
          Opal.defn(self, '$method_missing', TMP_method_missing_6 = function $$method_missing(method, $a_rest) {
            var $b, self = this, args, $iter = TMP_method_missing_6.$$p, block = $iter || nil, component_class = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_method_missing_6.$$p = null;
            
            if ($truthy(self['$const_defined?'](method, false))) {
              component_class = self.$const_get(method)};
            component_class = ($truthy($b = component_class) ? $b : self.$import_const_from_native(self, method, false));
            if ($truthy(component_class)) {
              } else {
              self.$raise("" + "could not import a react component named: " + ("" + (self.$scope_native_name(method))))
            };
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [component_class].concat(Opal.to_a(args)), block.$to_proc());
          }, TMP_method_missing_6.$$arity = -2);
          self.$private();
          
          Opal.defn(self, '$lookup_native_name', TMP_lookup_native_name_7 = function $$lookup_native_name(js_name) {
            var self = this, native_name = nil;

            try {
              
              native_name = self.$scope_native_name(js_name);
              return eval(native_name) !== undefined && native_name;
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
                try {
                  return nil
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_lookup_native_name_7.$$arity = 1);
          
          Opal.defn(self, '$scope_native_name', TMP_scope_native_name_8 = function $$scope_native_name(js_name) {
            var self = this;
            if (self.__hyperstack_component_native_prefix == null) self.__hyperstack_component_native_prefix = nil;

            return "" + (self.__hyperstack_component_native_prefix) + (js_name)
          }, TMP_scope_native_name_8.$$arity = 1);
          
          Opal.defn(self, '$create_component_wrapper', TMP_create_component_wrapper_10 = function $$create_component_wrapper(klass, native_name, ruby_name) {
            var TMP_9, self = this, new_klass = nil;

            if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper')['$native_react_component?'](native_name))) {
              
              new_klass = klass.$const_set(ruby_name, Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'NativeLibrary')).$imports(native_name));
              $send(new_klass, 'class_eval', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

              
                self.$include(Opal.const_get_relative($nesting, 'Component'));
                return self.$imports(native_name);}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
              return new_klass;
              } else {
              return nil
            }
          }, TMP_create_component_wrapper_10.$$arity = 3);
          return (Opal.defn(self, '$create_library_wrapper', TMP_create_library_wrapper_11 = function $$create_library_wrapper(klass, native_name, ruby_name) {
            var self = this;

            return klass.$const_set(ruby_name, Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'NativeLibrary')).$imports(native_name))
          }, TMP_create_library_wrapper_11.$$arity = 3), nil) && 'create_library_wrapper';
        })(Opal.get_singleton_class(self), $nesting);
        return self.$imports("NativeLibrary");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/react_wrapper"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$-', '$raise', '$stateless?', '$eval_native_react_component', '$add_after_error_hook_to_native', '$[]', '$!', '$method_defined?', '$respond_to?', '$native_mixins', '$to_n', '$static_call_backs', '$new', '$name', '$default_props', '$prop_types', '$callbacks?', '$<<', '$is_a?', '$create_native_react_class', '$include?', '$lambda', '$_update_ref', '$convert_props', '$shallow_to_n', '$flatten', '$call', '$each', '$split', '$==', '$merge', '$lower_camelize', '$join', '$to_key', '$ignore_mutations', '$const_defined?', '$gsub', '$html_attr?', '$private', '$first', '$concat', '$map', '$+', '$upcase']);
  
  self.$require("hyperstack/component/native_library");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $ReactWrapper(){};
          var self = $ReactWrapper = $klass($base, $super, 'ReactWrapper', $ReactWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ReactWrapper_stateless$q_1, TMP_ReactWrapper_import_native_component_2, TMP_ReactWrapper_eval_native_react_component_3, TMP_ReactWrapper_native_react_component$q_4, TMP_ReactWrapper_add_after_error_hook_5, TMP_ReactWrapper_add_after_error_hook_to_native_6, TMP_ReactWrapper_create_native_react_class_7, TMP_ReactWrapper_create_element_8, TMP_ReactWrapper_clear_component_class_cache_10, TMP_ReactWrapper_convert_props_21, TMP_ReactWrapper_lower_camelize_23;

          
          (Opal.class_variable_set($ReactWrapper, '@@component_classes', $hash2([], {})));
          Opal.defs(self, '$stateless?', TMP_ReactWrapper_stateless$q_1 = function(ncc) {
            var self = this;

            return typeof ncc === 'function' && !(ncc.prototype && ncc.prototype.isReactComponent)
          }, TMP_ReactWrapper_stateless$q_1.$$arity = 1);
          Opal.defs(self, '$import_native_component', TMP_ReactWrapper_import_native_component_2 = function $$import_native_component(opal_class, native_class) {
            var $a, self = this, $writer = nil;

            
            opal_class.$instance_variable_set("@native_import", true);
            
            $writer = [opal_class, native_class];
            $send((($a = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $a), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, TMP_ReactWrapper_import_native_component_2.$$arity = 2);
          Opal.defs(self, '$eval_native_react_component', TMP_ReactWrapper_eval_native_react_component_3 = function $$eval_native_react_component(name) {
            var $a, $b, self = this, component = nil, is_component_class = nil, has_render_method = nil;

            
            component = eval(name);
            if ($truthy(component === undefined)) {
              self.$raise("" + (name) + " is not defined")};
            if ($truthy(component.__esModule)) {
              component = component.default};
            is_component_class = ($truthy($a = component.prototype !== undefined) ? ($truthy($b = !!component.prototype.isReactComponent) ? $b : !!component.prototype.render) : $a);
            has_render_method = typeof component.render === "function";
            if ($truthy(($truthy($a = ($truthy($b = is_component_class) ? $b : self['$stateless?'](component))) ? $a : has_render_method))) {
              } else {
              self.$raise("does not appear to be a native react component")
            };
            return component;
          }, TMP_ReactWrapper_eval_native_react_component_3.$$arity = 1);
          Opal.defs(self, '$native_react_component?', TMP_ReactWrapper_native_react_component$q_4 = function(name) {
            var self = this;

            if (name == null) {
              name = nil;
            }
            try {
              
              if ($truthy(name)) {
                } else {
                return false
              };
              self.$eval_native_react_component(name);
              return true;
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                try {
                  return false
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          }, TMP_ReactWrapper_native_react_component$q_4.$$arity = -1);
          Opal.defs(self, '$add_after_error_hook', TMP_ReactWrapper_add_after_error_hook_5 = function $$add_after_error_hook(klass) {
            var $a, self = this;

            return self.$add_after_error_hook_to_native((($a = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $a)['$[]'](klass))
          }, TMP_ReactWrapper_add_after_error_hook_5.$$arity = 1);
          Opal.defs(self, '$add_after_error_hook_to_native', TMP_ReactWrapper_add_after_error_hook_to_native_6 = function $$add_after_error_hook_to_native(native_comp) {
            var self = this;

            
            if ($truthy(native_comp)) {
              } else {
              return nil
            };
            
            native_comp.prototype.componentDidCatch = function(error, info) {
              this.__opalInstanceSyncSetState = false;
              this.__opalInstance.$component_did_catch(error, Opal.Hash.$new(info));
            }
          ;
          }, TMP_ReactWrapper_add_after_error_hook_to_native_6.$$arity = 1);
          Opal.defs(self, '$create_native_react_class', TMP_ReactWrapper_create_native_react_class_7 = function $$create_native_react_class(type) {
            var $a, $b, self = this, render_fn = nil, $writer = nil, comp = nil;

            
            if ($truthy(typeof(createReactClass)=='undefined')) {
              self.$raise("createReactClass is undefined. Add the 'react-create-class' npm module, and import it as 'createReactClass'")};
            if ($truthy(type['$method_defined?']("render")['$!']())) {
              self.$raise("Provided class should define `render` method")};
            render_fn = (function() {if ($truthy(type['$method_defined?']("_render_wrapper"))) {
              return "_render_wrapper"
              } else {
              return "render"
            }; return nil; })();
            return ($truthy($a = (($b = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $b)['$[]'](type)) ? $a : (($writer = [type, ((comp = 
              createReactClass({
                getInitialState: function() {
                  this.mixins = (function() {if ($truthy(type['$respond_to?']("native_mixins"))) {
              return type.$native_mixins()
              } else {
              return []
            }; return nil; })();
                  this.statics = (function() {if ($truthy(type['$respond_to?']("static_call_backs"))) {
              return type.$static_call_backs().$to_n()
              } else {
              return {}
            }; return nil; })();
                  this.__opalInstanceInitializedState = false;
                  this.__opalInstanceSyncSetState = true;
                  this.__opalInstance = type.$new(this);
                  this.__opalInstanceInitializedState = true;
                  this.__opalInstanceSyncSetState = false;
                  this.__name = type.$name();
                  return {}
                },
                displayName: type.$name(),
                getDefaultProps: function() {
                  return (function() {if ($truthy(type['$respond_to?']("default_props"))) {
              return type.$default_props().$to_n()
              } else {
              return {}
            }; return nil; })();
                },
                propTypes: (function() {if ($truthy(type['$respond_to?']("prop_types"))) {
              return type.$prop_types().$to_n()
              } else {
              return {}
            }; return nil; })(),
                componentWillMount: function() {
                  if (type['$method_defined?']("component_will_mount")) {
                    this.__opalInstanceSyncSetState = true;
                    this.__opalInstance.$component_will_mount();
                    this.__opalInstanceSyncSetState = false;
                  }
                },
                componentDidMount: function() {
                  this.__opalInstance.__hyperstack_component_is_mounted = true
                  if (type['$method_defined?']("component_did_mount")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_did_mount();
                  }
                },
                componentWillReceiveProps: function(next_props) {
                  if (type['$method_defined?']("component_will_receive_props")) {
                    this.__opalInstanceSyncSetState = true;
                    this.__opalInstance.$component_will_receive_props(Opal.Hash.$new(next_props));
                    this.__opalInstanceSyncSetState = false;
                  }
                },
                shouldComponentUpdate: function(next_props, next_state) {
                  if (type['$method_defined?']("should_component_update?")) {
                    this.__opalInstanceSyncSetState = false;
                    return this.__opalInstance["$should_component_update?"](Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
                  } else { return true; }
                },
                componentWillUpdate: function(next_props, next_state) {
                  if (type['$method_defined?']("component_will_update")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_will_update(Opal.Hash.$new(next_props), Opal.Hash.$new(next_state));
                  }
                },
                componentDidUpdate: function(prev_props, prev_state) {
                  if (type['$method_defined?']("component_did_update")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_did_update(Opal.Hash.$new(prev_props), Opal.Hash.$new(prev_state));
                  }
                },
                componentWillUnmount: function() {
                  if (type['$method_defined?']("component_will_unmount")) {
                    this.__opalInstanceSyncSetState = false;
                    this.__opalInstance.$component_will_unmount();
                  }
                  this.__opalInstance.__hyperstack_component_is_mounted = false;
                },
                render: function() {
                  this.__opalInstanceSyncSetState = false;
                  return this.__opalInstance.$send(render_fn).$to_n();
                }
              })
            ), (function() {if ($truthy(($truthy($b = type['$respond_to?']("callbacks?")) ? type['$callbacks?']("after_error") : $b))) {
              return self.$add_after_error_hook_to_native(comp)
              } else {
              return nil
            }; return nil; })(), comp)]), $send((($b = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $b), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          }, TMP_ReactWrapper_create_native_react_class_7.$$arity = 1);
          Opal.defs(self, '$create_element', TMP_ReactWrapper_create_element_8 = function $$create_element(type, $a_rest) {
            var $b, TMP_9, self = this, args, $iter = TMP_ReactWrapper_create_element_8.$$p, block = $iter || nil, params = nil, ncc = nil, ele = nil, ref = nil, properties = nil, a = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_ReactWrapper_create_element_8.$$p = null;
            
            params = [];
            ncc = (($b = $ReactWrapper.$$cvars['@@component_classes']) == null ? nil : $b)['$[]'](type);
            if ($truthy(ncc)) {
              params['$<<'](ncc)
            } else if ($truthy(type['$is_a?'](Opal.const_get_relative($nesting, 'Class')))) {
              params['$<<'](self.$create_native_react_class(type))
            } else if ($truthy(($truthy($b = (block !== nil)) ? $b : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Tags'), 'HTML_TAGS')['$include?'](type)))) {
              params['$<<'](type)
            } else if ($truthy(type['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
              return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element').$new(type)
              } else {
              self.$raise("" + (type) + " not implemented")
            };
            ele = nil;
            if ($truthy(self['$stateless?'](ncc))) {
              } else {
              ref = $send(self, 'lambda', [], (TMP_9 = function(ref){var self = TMP_9.$$s || this;
if (ref == null) ref = nil;
              return ele.$_update_ref(ref)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))
            };
            properties = $send(self, 'convert_props', [type, $hash2(["ref"], {"ref": ref})].concat(Opal.to_a(args)));
            params['$<<'](properties.$shallow_to_n());
            if ($truthy(block)) {
              
              a = [block.$call()].$flatten();
              
              for(var i=0, l=a.length; i<l; i++) {
                params.push(a[i].$to_n());
              }
            ;};
            return (ele = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element').$new(React.createElement.apply(null, params), type, properties, block));
          }, TMP_ReactWrapper_create_element_8.$$arity = -2);
          Opal.defs(self, '$clear_component_class_cache', TMP_ReactWrapper_clear_component_class_cache_10 = function $$clear_component_class_cache() {
            var self = this;

            return (Opal.class_variable_set($ReactWrapper, '@@component_classes', $hash2([], {})))
          }, TMP_ReactWrapper_clear_component_class_cache_10.$$arity = 0);
          Opal.defs(self, '$convert_props', TMP_ReactWrapper_convert_props_21 = function $$convert_props(type, $a_rest) {
            var TMP_11, TMP_13, self = this, args, properties = nil, props = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            
            properties = $hash2([], {});
            $send(args, 'each', [], (TMP_11 = function(arg){var self = TMP_11.$$s || this, TMP_12, $writer = nil;
if (arg == null) arg = nil;
            if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                
                $writer = [arg, true];
                $send(properties, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(arg['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
                return $send(arg, 'each', [], (TMP_12 = function(key, value){var self = TMP_12.$$s || this, $a;
if (key == null) key = nil;if (value == null) value = nil;
                if ($truthy(["class", "className", "class_name"]['$include?'](key))) {
                    
                    if ($truthy(value)) {
                      } else {
                      return nil;
                    };
                    if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                      value = value.$split(" ")
                    } else if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Array'))['$!']())) {
                      self.$raise("The class param must be a string or array of strings")};
                    
                    $writer = ["className", [].concat(Opal.to_a(properties['$[]']("className"))).concat(Opal.to_a(value))];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;
                  } else if (key['$==']("style")) {
                    
                    if ($truthy(value)) {
                      } else {
                      return nil;
                    };
                    if ($truthy(value['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))['$!']())) {
                      self.$raise("The style param must be a Hash")};
                    
                    $writer = ["style", ($truthy($a = properties['$[]']("style")) ? $a : $hash2([], {})).$merge(value)];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;
                  } else if ($truthy(($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'ReactAPI'), 'HASH_ATTRIBUTES')['$include?'](key)) ? value['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
                    
                    $writer = [key, ($truthy($a = properties['$[]'](key)) ? $a : $hash2([], {})).$merge(value)];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                    } else {
                    
                    $writer = [key, value];
                    $send(properties, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];
                  }}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))
                } else {
                return nil
              }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
            props = $hash2([], {});
            $send(properties, 'each', [], (TMP_13 = function(key, value){var self = TMP_13.$$s || this, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, $a, TMP_20, $writer = nil, fn = nil;
if (key == null) key = nil;if (value == null) value = nil;
            if ($truthy(["style", "dangerously_set_inner_HTML"]['$include?'](key))) {
                
                $writer = [self.$lower_camelize(key), value.$to_n()];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("className")) {
                
                $writer = [key, value.$join(" ")];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("key")) {
                
                $writer = ["key", value.$to_key()];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if (key['$==']("init")) {
                
                if ($truthy(["select", "textarea"]['$include?'](type))) {
                  key = "defaultValue"
                } else if (type['$==']("input")) {
                  key = (function() {if ($truthy(["radio", "checkbox"]['$include?'](properties['$[]']("type")))) {
                    return "defaultChecked"
                    } else {
                    return "defaultValue"
                  }; return nil; })()};
                
                $writer = [key, value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("ref")) {
                
                if ($truthy(value)) {
                  } else {
                  return nil;
                };
                if ($truthy(value['$respond_to?']("call"))) {
                  } else {
                  self.$raise("" + "The ref and dom params must be given a Proc.\n" + "If you want to capture the ref in an instance variable use the `set` method.\n" + "For example `ref: set(:TheRef)` will capture assign the ref to `@TheRef`\n")
                };
                if ($truthy(value.__hyperstack_component_ref_is_already_wrapped)) {
                  } else {
                  
                  fn = value;
                  value = 
                          function(dom_node){
                            if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                              $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_14 = function(){var self = TMP_14.$$s || this;

                  return fn.$call(dom_node.__opalInstance)}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14));
                            } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                              $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_15 = function(){var self = TMP_15.$$s || this;

                  return fn.$call(ReactDOM.findDOMNode(dom_node))}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
                            } else if(dom_node !== null){
                              $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_16 = function(){var self = TMP_16.$$s || this;

                  return fn.$call(dom_node)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16));
                            }
                          }
                        ;
                  value.__hyperstack_component_ref_is_already_wrapped = true;
                };
                
                $writer = [key, value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if (key['$==']("jq_ref")) {
                
                if ($truthy(value['$respond_to?']("call"))) {
                  } else {
                  self.$raise("" + "The ref and dom params must be given a Proc.\n" + "If you want to capture the dom node in an instance variable use the `set` method.\n" + "For example `dom: set(:DomNode)` will assign the dom node to `@DomNode`\n")
                };
                if ($truthy(Opal.const_get_relative($nesting, 'Module')['$const_defined?']("Element"))) {
                  } else {
                  self.$raise("" + "You must include 'hyperstack/component/jquery' " + "in your manifest to use the `dom` reference key.\n" + "For example if using rails include " + "`config.import 'hyperstack/component/jquery', client_only: true`" + "in your config/initializer/hyperstack.rb file")
                };
                
                $writer = ["ref", 
                              function(dom_node){
                                if (dom_node !== null && dom_node.__opalInstance !== undefined && dom_node.__opalInstance !== null) {
                                  $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_17 = function(){var self = TMP_17.$$s || this;

                return value.$call(Opal.const_get_qualified('::', 'Element')['$[]'](dom_node.__opalInstance))}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17));
                                } else if(dom_node !== null && ReactDOM.findDOMNode !== undefined && dom_node.nodeType === undefined) {
                                  $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_18 = function(){var self = TMP_18.$$s || this;

                return value.$call(Opal.const_get_qualified('::', 'Element')['$[]'](ReactDOM.findDOMNode(dom_node)))}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18));
                                } else if(dom_node !== null) {
                                  $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper'), 'ignore_mutations', [], (TMP_19 = function(){var self = TMP_19.$$s || this;

                return value.$call(Opal.const_get_qualified('::', 'Element')['$[]'](dom_node))}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19));
                                }
                              }
                            ];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
              } else if ($truthy(($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'ReactAPI'), 'HASH_ATTRIBUTES')['$include?'](key)) ? value['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
                return $send(value, 'each', [], (TMP_20 = function(k, v){var self = TMP_20.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
                
                  $writer = ["" + (key) + "-" + (k.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}))), v.$to_n()];
                  $send(props, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20))
                } else {
                
                $writer = [(function() {if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'ReactAPI')['$html_attr?'](self.$lower_camelize(key)))) {
                  return self.$lower_camelize(key)
                  } else {
                  return key
                }; return nil; })(), value];
                $send(props, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              }}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13));
            return props;
          }, TMP_ReactWrapper_convert_props_21.$$arity = -2);
          self.$private();
          return Opal.defs(self, '$lower_camelize', TMP_ReactWrapper_lower_camelize_23 = function $$lower_camelize(snake_cased_word) {
            var TMP_22, self = this, words = nil, result = nil;

            
            words = snake_cased_word.$split("_");
            result = [words.$first()];
            return result.$concat($send(words['$[]']($range(1, -1, false)), 'map', [], (TMP_22 = function(word){var self = TMP_22.$$s || this;
if (word == null) word = nil;
            return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)))}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22))).$join("");
          }, TMP_ReactWrapper_lower_camelize_23.$$arity = 1);
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/hash"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$each']);
  return (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hash_shallow_to_n_2;

    return (Opal.defn(self, '$shallow_to_n', TMP_Hash_shallow_to_n_2 = function $$shallow_to_n() {
      var TMP_1, self = this, hash = nil;

      
      hash = {};
      $send(self, 'each', [], (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
      return hash[key] = value}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1));
      return hash;
    }, TMP_Hash_shallow_to_n_2.$$arity = 0), nil) && 'shallow_to_n'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/rendering_context"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$waiting_on_resources', '$raise_if_not_quiet?', '$raise', '$new', '$!', '$remove_nodes_from_args', '$build', '$waiting_on_resources=', '$-', '$run_child_block', '$nil?', '$to_proc', '$dup', '$tap', '$create_element', '$detect', '$respond_to?', '$is_a?', '$last', '$to_s', '$render', '$<<', '$delete', '$include?', '$index', '$[]=', '$[]', '$each', '$acts_as_string?', '$empty?', '$!=', '$raise_render_error', '$==', '$count', '$improper_render', '$>', '$try', '$class', '$define_method', '$unshift', '$hyper_component?', '$send']);
  
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $RenderingContext(){};
          var self = $RenderingContext = $klass($base, $super, 'RenderingContext', $RenderingContext);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          
          (function($base, $super, $parent_nesting) {
            function $NotQuiet(){};
            var self = $NotQuiet = $klass($base, $super, 'NotQuiet', $NotQuiet);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting);

            return nil
          })($nesting[0], Opal.const_get_relative($nesting, 'Exception'), $nesting);
          return (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_raise_if_not_quiet$q_1, TMP_raise_if_not_quiet$eq_2, TMP_quiet_test_3, TMP_render_4, TMP_build_12, TMP_delete_13, TMP_rendered$q_14, TMP_replace_15, TMP_remove_nodes_from_args_17, TMP_run_child_block_18, TMP_raise_render_error_20, TMP_improper_render_21;

            
            self.$attr_accessor("waiting_on_resources");
            
            Opal.defn(self, '$raise_if_not_quiet?', TMP_raise_if_not_quiet$q_1 = function() {
              var self = this;
              if (self.raise_if_not_quiet == null) self.raise_if_not_quiet = nil;

              return self.raise_if_not_quiet
            }, TMP_raise_if_not_quiet$q_1.$$arity = 0);
            
            Opal.defn(self, '$raise_if_not_quiet=', TMP_raise_if_not_quiet$eq_2 = function(x) {
              var self = this;

              return (self.raise_if_not_quiet = x)
            }, TMP_raise_if_not_quiet$eq_2.$$arity = 1);
            
            Opal.defn(self, '$quiet_test', TMP_quiet_test_3 = function $$quiet_test(component) {
              var $a, self = this;

              
              if ($truthy(($truthy($a = component.$waiting_on_resources()) ? self['$raise_if_not_quiet?']() : $a))) {
                } else {
                return nil
              };
              return self.$raise(Opal.const_get_relative($nesting, 'NotQuiet').$new("" + (component) + " is waiting on resources"));
            }, TMP_quiet_test_3.$$arity = 1);
            
            Opal.defn(self, '$render', TMP_render_4 = function $$render(name, $a_rest) {
              var $b, TMP_5, self = this, args, $iter = TMP_render_4.$$p, block = $iter || nil, was_outer_most = nil, element = nil, $writer = nil;
              if (self.not_outer_most == null) self.not_outer_most = nil;
              if (self.buffer == null) self.buffer = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 1;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 1] = arguments[$arg_idx];
              }
              if ($iter) TMP_render_4.$$p = null;
              return (function() { try {
              
              was_outer_most = self.not_outer_most['$!']();
              self.not_outer_most = true;
              self.$remove_nodes_from_args(args);
              if ($truthy(self.buffer)) {
                } else {
                self.buffer = ($truthy($b = self.buffer) ? $b : [])
              };
              if ($truthy(block)) {
                element = $send(self, 'build', [], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, saved_waiting_on_resources = nil, $writer = nil, buffer = nil, buffer_s = nil;
                  if (self.buffer == null) self.buffer = nil;

                
                  saved_waiting_on_resources = nil;
                  
                  $writer = [nil];
                  $send(self, 'waiting_on_resources=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  $send(self, 'run_child_block', [name['$nil?']()], block.$to_proc());
                  if ($truthy(name)) {
                    
                    buffer = self.buffer.$dup();
                    return $send($send(Opal.const_get_relative($nesting, 'ReactWrapper'), 'create_element', [name].concat(Opal.to_a(args)), (TMP_6 = function(){var self = TMP_6.$$s || this;

                    return buffer}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6)), 'tap', [], (TMP_7 = function(element){var self = TMP_7.$$s || this, $a, TMP_8;
if (element == null) element = nil;
                    
                      
                      $writer = [($truthy($a = saved_waiting_on_resources) ? $a : $send(buffer, 'detect', [], (TMP_8 = function(e){var self = TMP_8.$$s || this;
if (e == null) e = nil;
                      if ($truthy(e['$respond_to?']("waiting_on_resources"))) {
                          return e.$waiting_on_resources()
                          } else {
                          return nil
                        }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))['$!']()['$!']())];
                      $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      if ($truthy(buffer.$last()['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
                        return ($truthy($a = element.$waiting_on_resources()) ? $a : (($writer = [self.$waiting_on_resources()]), $send(element, 'waiting_on_resources=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                        } else {
                        return nil
                      };}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
                  } else if ($truthy(self.buffer.$last()['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                    return $send(self.buffer.$last(), 'tap', [], (TMP_9 = function(element){var self = TMP_9.$$s || this, $a;
if (element == null) element = nil;
                    return ($truthy($a = element.$waiting_on_resources()) ? $a : (($writer = [saved_waiting_on_resources]), $send(element, 'waiting_on_resources=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))
                    } else {
                    
                    buffer_s = self.buffer.$last().$to_s();
                    return $send($send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', ["span"], (TMP_10 = function(){var self = TMP_10.$$s || this;

                    return buffer_s}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10)), 'tap', [], (TMP_11 = function(element){var self = TMP_11.$$s || this;
if (element == null) element = nil;
                    
                      $writer = [saved_waiting_on_resources];
                      $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                      return $writer[$rb_minus($writer["length"], 1)];}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
                  };}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))
              } else if ($truthy(name['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                element = name
                } else {
                
                element = $send(Opal.const_get_relative($nesting, 'ReactWrapper'), 'create_element', [name].concat(Opal.to_a(args)));
                
                $writer = [self.$waiting_on_resources()];
                $send(element, 'waiting_on_resources=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              };
              self.buffer['$<<'](element);
              
              $writer = [nil];
              $send(self, 'waiting_on_resources=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return element;
              } finally {
                (function() {if ($truthy(was_outer_most)) {
                  return (self.not_outer_most = (self.buffer = nil))
                  } else {
                  return nil
                }; return nil; })()
              }; })()
            }, TMP_render_4.$$arity = -2);
            
            Opal.defn(self, '$build', TMP_build_12 = function $$build() {
              var self = this, $iter = TMP_build_12.$$p, $yield = $iter || nil, current = nil, return_val = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) TMP_build_12.$$p = null;
              
              current = self.buffer;
              self.buffer = [];
              return_val = Opal.yield1($yield, self.buffer);
              self.buffer = current;
              return return_val;
            }, TMP_build_12.$$arity = 0);
            
            Opal.defn(self, '$delete', TMP_delete_13 = function(element) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              
              self.buffer.$delete(element);
              return element;
            }, TMP_delete_13.$$arity = 1);
            Opal.alias(self, "as_node", "delete");
            
            Opal.defn(self, '$rendered?', TMP_rendered$q_14 = function(element) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              return self.buffer['$include?'](element)
            }, TMP_rendered$q_14.$$arity = 1);
            
            Opal.defn(self, '$replace', TMP_replace_15 = function $$replace(e1, e2) {
              var self = this, $writer = nil;
              if (self.buffer == null) self.buffer = nil;

              
              $writer = [self.buffer.$index(e1), e2];
              $send(self.buffer, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            }, TMP_replace_15.$$arity = 2);
            
            Opal.defn(self, '$remove_nodes_from_args', TMP_remove_nodes_from_args_17 = function $$remove_nodes_from_args(args) {
              var $a, TMP_16, self = this;

              if ($truthy(($truthy($a = args['$[]'](0)) ? args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')) : $a))) {
                return $send(args['$[]'](0), 'each', [], (TMP_16 = function(key, value){var self = TMP_16.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
                
                  try {
                    if ($truthy(value['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                      return value.$delete()
                      } else {
                      return nil
                    }
                  } catch ($err) {
                    if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {
                      try {
                        return nil
                      } finally { Opal.pop_exception() }
                    } else { throw $err; }
                  };}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16))
                } else {
                return nil
              }
            }, TMP_remove_nodes_from_args_17.$$arity = 1);
            
            Opal.defn(self, '$run_child_block', TMP_run_child_block_18 = function $$run_child_block(is_outer_scope) {
              var $a, TMP_19, $b, self = this, $iter = TMP_run_child_block_18.$$p, $yield = $iter || nil, result = nil;
              if (self.buffer == null) self.buffer = nil;

              if ($iter) TMP_run_child_block_18.$$p = null;
              
              result = Opal.yieldX($yield, []);
              if ($truthy(($truthy($a = result['$respond_to?']("acts_as_string?")) ? result['$acts_as_string?']() : $a))) {
                $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', ["span"], (TMP_19 = function(){var self = TMP_19.$$s || this;

                return result.$to_s()}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19))
              } else if ($truthy(($truthy($a = result['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? $a : ($truthy($b = result['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element'))) ? self.buffer['$empty?']() : $b)))) {
                self.buffer['$<<'](result)};
              if ($truthy(($truthy($a = is_outer_scope) ? self.buffer['$!=']([result]) : $a))) {
                return self.$raise_render_error(result)
                } else {
                return nil
              };
            }, TMP_run_child_block_18.$$arity = 1);
            
            Opal.defn(self, '$raise_render_error', TMP_raise_render_error_20 = function $$raise_render_error(result) {
              var self = this;
              if (self.buffer == null) self.buffer = nil;

              
              if (self.buffer.$count()['$=='](1)) {
                self.$improper_render("A different element was returned than was generated within the DSL.", "Possibly improper use of Element#delete.")};
              if ($truthy($rb_gt(self.buffer.$count(), 1))) {
                self.$improper_render("" + "Instead " + (self.buffer.$count()) + " elements were generated.", "Do you want to wrap your elements in a div?")};
              if ($truthy(result.$try("hyper_component?"))) {
                self.$improper_render("" + "Instead the component " + (result) + " was returned.", "" + "Did you mean " + (result) + "()?")};
              return self.$improper_render("" + "Instead the " + (result.$class()) + " " + (result) + " was returned.", "You may need to convert this to a string.");
            }, TMP_raise_render_error_20.$$arity = 1);
            return (Opal.defn(self, '$improper_render', TMP_improper_render_21 = function $$improper_render(message, solution) {
              var self = this;

              return self.$raise("" + "a component's render method must generate and return exactly 1 element or a string.\n" + ("" + "    " + (message) + "  " + (solution)))
            }, TMP_improper_render_21.$$arity = 2), nil) && 'improper_render';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_22, TMP_Object_para_25, TMP_Object_br_28;

    
    $send(["span", "td", "th"], 'each', [], (TMP_Object_22 = function(tag){var self = TMP_Object_22.$$s || this, TMP_23;
if (tag == null) tag = nil;
    return $send(self, 'define_method', [tag], (TMP_23 = function($a_rest){var self = TMP_23.$$s || this, block, args, $b, TMP_24;

        block = TMP_23.$$p || nil;
        if (block) TMP_23.$$p = null;
        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      
        args.$unshift(tag);
        if ($truthy(($truthy($b = self['$respond_to?']("hyper_component?")) ? self['$hyper_component?']() : $b))) {
          return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
        return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', Opal.to_a(args), (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$to_s()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24));}, TMP_23.$$s = self, TMP_23.$$arity = -1, TMP_23))}, TMP_Object_22.$$s = self, TMP_Object_22.$$arity = 1, TMP_Object_22));
    
    Opal.defn(self, '$para', TMP_Object_para_25 = function $$para($a_rest) {
      var $b, TMP_26, self = this, args, $iter = TMP_Object_para_25.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Object_para_25.$$p = null;
      
      args.$unshift("p");
      if ($truthy(($truthy($b = self['$respond_to?']("hyper_component?")) ? self['$hyper_component?']() : $b))) {
        return $send(self, 'send', Opal.to_a(args), block.$to_proc())};
      return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', Opal.to_a(args), (TMP_26 = function(){var self = TMP_26.$$s || this;

      return self.$to_s()}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26));
    }, TMP_Object_para_25.$$arity = -1);
    return (Opal.defn(self, '$br', TMP_Object_br_28 = function $$br() {
      var $a, TMP_27, self = this;

      
      if ($truthy(($truthy($a = self['$respond_to?']("hyper_component?")) ? self['$hyper_component?']() : $a))) {
        return self.$send("br")};
      return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', ["span"], (TMP_27 = function(){var self = TMP_27.$$s || this;

      
        Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render(self.$to_s());
        return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$render("br");}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27));
    }, TMP_Object_br_28.$$arity = 0), nil) && 'br';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/children"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$each', '$to_proc', '$lambda', '$render', '$to_enum', '$length', '$>', '$new', '$call', '$<<', '$alias_method']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Children(){};
        var self = $Children = $klass($base, $super, 'Children', $Children);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Children_initialize_1, TMP_Children_render_2, TMP_Children_to_proc_4, TMP_Children_each_5, TMP_Children_length_7;

        def.children = def.length = nil;
        
        self.$include(Opal.const_get_relative($nesting, 'Enumerable'));
        
        Opal.defn(self, '$initialize', TMP_Children_initialize_1 = function $$initialize(children) {
          var self = this;

          return (self.children = children)
        }, TMP_Children_initialize_1.$$arity = 1);
        
        Opal.defn(self, '$render', TMP_Children_render_2 = function $$render() {
          var self = this;

          return $send(self, 'each', [], "render".$to_proc())
        }, TMP_Children_render_2.$$arity = 0);
        
        Opal.defn(self, '$to_proc', TMP_Children_to_proc_4 = function $$to_proc() {
          var TMP_3, self = this;

          return $send(self, 'lambda', [], (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$render()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
        }, TMP_Children_to_proc_4.$$arity = 0);
        
        Opal.defn(self, '$each', TMP_Children_each_5 = function $$each() {
          var TMP_6, self = this, $iter = TMP_Children_each_5.$$p, block = $iter || nil, collection = nil, element = nil;

          if ($iter) TMP_Children_each_5.$$p = null;
          
          if ((block !== nil)) {
            } else {
            return $send(self, 'to_enum', ["each"], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$length()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
          };
          if ($truthy($rb_gt(self.$length(), 0))) {
            } else {
            return []
          };
          collection = [];
          
          React.Children.forEach(self.children, function(context){
            ((element = Opal.const_get_relative($nesting, 'Element').$new(context)), block.$call(element), collection['$<<'](element))
          })
        ;
          return collection;
        }, TMP_Children_each_5.$$arity = 0);
        
        Opal.defn(self, '$length', TMP_Children_length_7 = function $$length() {
          var $a, self = this;

          return (self.length = ($truthy($a = self.length) ? $a : React.Children.count(self.children)))
        }, TMP_Children_length_7.$$arity = 0);
        return self.$alias_method("size", "length");
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/instance_methods"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$include?', '$param_accessor_style', '$raise', '$[]', '$dom_node', '$==', '$=~', '$pluralize', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$lambda', '$instance_eval', '$callbacks?', '$class', '$RescueWrapper', '$call', '$after_error_args=', '$-', '$__hyperstack_component_run_post_render_hooks', '$__hyperstack_component_rescue_wrapper', '$__hyperstack_router_wrapper', '$shallow_to_n']);
  
  self.$require("hyperstack/component/children");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InstanceMethods_children_1, TMP_InstanceMethods_params_2, TMP_InstanceMethods_props_3, TMP_InstanceMethods_dom_node_4, TMP_InstanceMethods_jq_node_5, TMP_InstanceMethods_mounted$q_6, TMP_InstanceMethods_pluralize_7, TMP_InstanceMethods_force_update$B_8, TMP_InstanceMethods_set_state_9, TMP_InstanceMethods_set_state$B_10, TMP_InstanceMethods___hyperstack_router_wrapper_11, TMP_InstanceMethods___hyperstack_component_rescue_wrapper_13, TMP_InstanceMethods___hyperstack_component_select_wrappers_14, TMP_InstanceMethods_set_or_replace_state_or_prop_15;

          
          
          Opal.defn(self, '$children', TMP_InstanceMethods_children_1 = function $$children() {
            var self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Children').$new(self.__hyperstack_component_native.props.children)
          }, TMP_InstanceMethods_children_1.$$arity = 0);
          
          Opal.defn(self, '$params', TMP_InstanceMethods_params_2 = function $$params() {
            var self = this;
            if (self.__hyperstack_component_params_wrapper == null) self.__hyperstack_component_params_wrapper = nil;

            
            if ($truthy(["hyperstack", "accessors"]['$include?'](self.__hyperstack_component_params_wrapper.$param_accessor_style()))) {
              self.$raise("" + "params are now directly accessible via instance variables.\n" + "  to access the legacy behavior add `param_accessor_style = :legacy` " + "to your component class\n" + "  to access both behaviors add `param_accessor_style = :both` " + "to your component class")};
            return self.__hyperstack_component_params_wrapper;
          }, TMP_InstanceMethods_params_2.$$arity = 0);
          
          Opal.defn(self, '$props', TMP_InstanceMethods_props_3 = function $$props() {
            var self = this;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            return Opal.const_get_relative($nesting, 'Hash').$new(self.__hyperstack_component_native.props)
          }, TMP_InstanceMethods_props_3.$$arity = 0);
          
          Opal.defn(self, '$dom_node', TMP_InstanceMethods_dom_node_4 = function $$dom_node() {
            var self = this;

            return ReactDOM.findDOMNode(self.__hyperstack_component_native)
          }, TMP_InstanceMethods_dom_node_4.$$arity = 0);
          
          Opal.defn(self, '$jq_node', TMP_InstanceMethods_jq_node_5 = function $$jq_node() {
            var self = this;

            return Opal.const_get_qualified('::', 'Element')['$[]'](self.$dom_node())
          }, TMP_InstanceMethods_jq_node_5.$$arity = 0);
          
          Opal.defn(self, '$mounted?', TMP_InstanceMethods_mounted$q_6 = function() {
            var self = this;

            return (self.__hyperstack_component_is_mounted === undefined) ? false : self.__hyperstack_component_is_mounted
          }, TMP_InstanceMethods_mounted$q_6.$$arity = 0);
          
          Opal.defn(self, '$pluralize', TMP_InstanceMethods_pluralize_7 = function $$pluralize(count, singular, plural) {
            var $a, self = this, word = nil;

            if (plural == null) {
              plural = nil;
            }
            
            word = (function() {if ($truthy(($truthy($a = count['$=='](1)) ? $a : count['$=~'](/^1(\.0+)?$/)))) {
              return singular
              } else {
              return ($truthy($a = plural) ? $a : singular.$pluralize())
            }; return nil; })();
            return "" + (($truthy($a = count) ? $a : 0)) + " " + (word);
          }, TMP_InstanceMethods_pluralize_7.$$arity = -3);
          
          Opal.defn(self, '$force_update!', TMP_InstanceMethods_force_update$B_8 = function() {
            var self = this;

            
            self.__hyperstack_component_native.forceUpdate();
            return self;
          }, TMP_InstanceMethods_force_update$B_8.$$arity = 0);
          
          Opal.defn(self, '$set_state', TMP_InstanceMethods_set_state_9 = function $$set_state(state) {
            var self = this, $iter = TMP_InstanceMethods_set_state_9.$$p, block = $iter || nil;

            if ($iter) TMP_InstanceMethods_set_state_9.$$p = null;
            return $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc())
          }, TMP_InstanceMethods_set_state_9.$$arity = 1);
          
          Opal.defn(self, '$set_state!', TMP_InstanceMethods_set_state$B_10 = function(state) {
            var self = this, $iter = TMP_InstanceMethods_set_state$B_10.$$p, block = $iter || nil;

            if ($iter) TMP_InstanceMethods_set_state$B_10.$$p = null;
            
            $send(self, 'set_or_replace_state_or_prop', [state, "setState"], block.$to_proc());
            return self.__hyperstack_component_native.forceUpdate();
          }, TMP_InstanceMethods_set_state$B_10.$$arity = 1);
          self.$private();
          
          Opal.defn(self, '$__hyperstack_router_wrapper', TMP_InstanceMethods___hyperstack_router_wrapper_11 = function $$__hyperstack_router_wrapper() {
            var TMP_12, self = this, $iter = TMP_InstanceMethods___hyperstack_router_wrapper_11.$$p, block = $iter || nil;

            if ($iter) TMP_InstanceMethods___hyperstack_router_wrapper_11.$$p = null;
            return $send(self, 'lambda', [], (TMP_12 = function(){var self = TMP_12.$$s || this;

            return $send(self, 'instance_eval', [], block.$to_proc())}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12))
          }, TMP_InstanceMethods___hyperstack_router_wrapper_11.$$arity = 0);
          
          Opal.defn(self, '$__hyperstack_component_rescue_wrapper', TMP_InstanceMethods___hyperstack_component_rescue_wrapper_13 = function $$__hyperstack_component_rescue_wrapper(child) {
            var self = this;

            if ($truthy(self.$class()['$callbacks?']("__hyperstack_component_rescue_hook"))) {
              return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component').$RescueWrapper($hash2(["child", "children_elements"], {"child": self, "children_elements": child}))
              } else {
              return child.$call()
            }
          }, TMP_InstanceMethods___hyperstack_component_rescue_wrapper_13.$$arity = 1);
          
          Opal.defn(self, '$__hyperstack_component_select_wrappers', TMP_InstanceMethods___hyperstack_component_select_wrappers_14 = function $$__hyperstack_component_select_wrappers() {
            var self = this, $iter = TMP_InstanceMethods___hyperstack_component_select_wrappers_14.$$p, block = $iter || nil, $writer = nil;

            if ($iter) TMP_InstanceMethods___hyperstack_component_select_wrappers_14.$$p = null;
            
            
            $writer = [nil];
            $send(Opal.const_get_relative($nesting, 'RescueWrapper'), 'after_error_args=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return self.$__hyperstack_component_run_post_render_hooks(self.$__hyperstack_component_rescue_wrapper($send(self, '__hyperstack_router_wrapper', [], block.$to_proc())));
          }, TMP_InstanceMethods___hyperstack_component_select_wrappers_14.$$arity = 0);
          
          Opal.defn(self, '$set_or_replace_state_or_prop', TMP_InstanceMethods_set_or_replace_state_or_prop_15 = function $$set_or_replace_state_or_prop(state_or_prop, method) {
            var self = this, $iter = TMP_InstanceMethods_set_or_replace_state_or_prop_15.$$p, block = $iter || nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            if ($iter) TMP_InstanceMethods_set_or_replace_state_or_prop_15.$$p = null;
            
            if ($truthy(self.__hyperstack_component_native)) {
              } else {
              self.$raise("No native ReactComponent associated")
            };
            var state_prop_n = state_or_prop.$shallow_to_n();
            if ($truthy(block)) {
              
              if (self.__hyperstack_component_native.__opalInstanceInitializedState === true) {
                self.__hyperstack_component_native[method](state_prop_n, function(){
                  block.$call();
                });
              } else {
                for (var sp in state_prop_n) {
                  if (state_prop_n.hasOwnProperty(sp)) {
                    self.__hyperstack_component_native.state[sp] = state_prop_n[sp];
                  }
                }
              }
            
              } else {
              
              if (self.__hyperstack_component_native.__opalInstanceInitializedState === true) {
                self.__hyperstack_component_native[method](state_prop_n);
              } else {
                for (var sp in state_prop_n) {
                  if (state_prop_n.hasOwnProperty(sp)) {
                    self.__hyperstack_component_native.state[sp] = state_prop_n[sp];
                  }
                }
              }
            
            };
          }, TMP_InstanceMethods_set_or_replace_state_or_prop_15.$$arity = 2);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/class_methods"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$create_element', '$to_proc', '$render', '$deprecation_warning', '$select', '$mounted_components', '$<=', '$class', '$param_accessor_style', '$props_wrapper', '$==', '$[]', '$<<', '$each', '$before_new_params', '$included', '$is_a?', '$type', '$define_method', '$__hyperstack_component_select_wrappers', '$instance_eval', '$__hyperstack_component_after_render_hook', '$on', '$instance_exec', '$empty?', '$__hyperstack_component_rescue_hook', '$!', '$detect', '$before_mount', '$before_update', '$after_mount', '$after_update', '$any?', '$respond_to?', '$haml_class_name', '$superclass', '$copy', '$validator', '$new', '$validate', '$>', '$count', '$+', '$name', '$join', '$default_props', '$build', '$first', '$delete', '$merge!', '$[]=', '$-', '$key?', '$optional', '$requires', '$all_other_params', '$props', '$=~', '$gsub', '$include?', '$event_camelize', '$event', '$call', '$arity', '$last', '$pop', '$state', '$singleton_class', '$__send__', '$mutate', '$native_mixins', '$static_call_backs', '$split', '$to_n', '$add_item_to_tree', '$Native', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$raise', '$message', '$!=', '$length', '$inject']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_create_element_1, TMP_ClassMethods_insert_element_2, TMP_ClassMethods_deprecation_warning_3, TMP_ClassMethods_hyper_component$q_4, TMP_ClassMethods_allow_deprecated_render_definition$q_5, TMP_ClassMethods_mounted_components_7, TMP_ClassMethods_param_accessor_style_8, TMP_ClassMethods_backtrace_9, TMP_ClassMethods_append_backtrace_11, TMP_ClassMethods_before_receive_props_12, TMP_ClassMethods_render_13, TMP_ClassMethods_on_19, TMP_ClassMethods_rescues_22, TMP_ClassMethods_before_render_25, TMP_ClassMethods_after_render_26, TMP_ClassMethods_method_missing_27, TMP_ClassMethods_validator_28, TMP_ClassMethods_prop_types_29, TMP_ClassMethods_default_props_30, TMP_ClassMethods_params_31, TMP_ClassMethods_props_wrapper_32, TMP_ClassMethods_param_33, TMP_ClassMethods_collect_other_params_as_35, TMP_ClassMethods_fires_37, TMP_ClassMethods_define_state_38, TMP_ClassMethods_export_state_41, TMP_ClassMethods_native_mixin_45, TMP_ClassMethods_native_mixins_46, TMP_ClassMethods_static_call_back_47, TMP_ClassMethods_static_call_backs_48, TMP_ClassMethods_export_component_49, TMP_ClassMethods_imports_51, TMP_ClassMethods_add_item_to_tree_53, TMP_ClassMethods_to_n_54;

          
          
          Opal.defn(self, '$create_element', TMP_ClassMethods_create_element_1 = function $$create_element($a_rest) {
            var self = this, params, $iter = TMP_ClassMethods_create_element_1.$$p, children = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_create_element_1.$$p = null;
            return $send(Opal.const_get_relative($nesting, 'ReactWrapper'), 'create_element', [self].concat(Opal.to_a(params)), children.$to_proc())
          }, TMP_ClassMethods_create_element_1.$$arity = -1);
          
          Opal.defn(self, '$insert_element', TMP_ClassMethods_insert_element_2 = function $$insert_element($a_rest) {
            var self = this, params, $iter = TMP_ClassMethods_insert_element_2.$$p, children = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_insert_element_2.$$p = null;
            return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [self].concat(Opal.to_a(params)), children.$to_proc())
          }, TMP_ClassMethods_insert_element_2.$$arity = -1);
          
          Opal.defn(self, '$deprecation_warning', TMP_ClassMethods_deprecation_warning_3 = function $$deprecation_warning(message) {
            var self = this;

            return Opal.const_get_relative($nesting, 'Hyperstack').$deprecation_warning(self, message)
          }, TMP_ClassMethods_deprecation_warning_3.$$arity = 1);
          
          Opal.defn(self, '$hyper_component?', TMP_ClassMethods_hyper_component$q_4 = function() {
            var self = this;

            return true
          }, TMP_ClassMethods_hyper_component$q_4.$$arity = 0);
          
          Opal.defn(self, '$allow_deprecated_render_definition?', TMP_ClassMethods_allow_deprecated_render_definition$q_5 = function() {
            var self = this;

            return false
          }, TMP_ClassMethods_allow_deprecated_render_definition$q_5.$$arity = 0);
          
          Opal.defn(self, '$mounted_components', TMP_ClassMethods_mounted_components_7 = function $$mounted_components() {
            var TMP_6, self = this;

            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component').$mounted_components(), 'select', [], (TMP_6 = function(c){var self = TMP_6.$$s || this;
if (c == null) c = nil;
            return $rb_le(c.$class(), self)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
          }, TMP_ClassMethods_mounted_components_7.$$arity = 0);
          
          Opal.defn(self, '$param_accessor_style', TMP_ClassMethods_param_accessor_style_8 = function $$param_accessor_style($a_rest) {
            var self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            return $send(self.$props_wrapper(), 'param_accessor_style', Opal.to_a(args))
          }, TMP_ClassMethods_param_accessor_style_8.$$arity = -1);
          
          Opal.defn(self, '$backtrace', TMP_ClassMethods_backtrace_9 = function $$backtrace($a_rest) {
            var $b, self = this, args;
            if (self.__hyperstack_component_dont_catch_exceptions == null) self.__hyperstack_component_dont_catch_exceptions = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            self.__hyperstack_component_dont_catch_exceptions = args['$[]'](0)['$==']("none");
            return (self.__hyperstack_component_backtrace_off = ($truthy($b = self.__hyperstack_component_dont_catch_exceptions) ? $b : args['$[]'](0)['$==']("off")));
          }, TMP_ClassMethods_backtrace_9.$$arity = -1);
          
          Opal.defn(self, '$append_backtrace', TMP_ClassMethods_append_backtrace_11 = function $$append_backtrace(message_array, backtrace) {
            var TMP_10, self = this;

            
            message_array['$<<']("" + "    " + (backtrace['$[]'](0)));
            return $send(backtrace['$[]']($range(1, -1, false)), 'each', [], (TMP_10 = function(line){var self = TMP_10.$$s || this;
if (line == null) line = nil;
            return message_array['$<<'](line)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
          }, TMP_ClassMethods_append_backtrace_11.$$arity = 2);
          
          Opal.defn(self, '$before_receive_props', TMP_ClassMethods_before_receive_props_12 = function $$before_receive_props($a_rest) {
            var self = this, args, $iter = TMP_ClassMethods_before_receive_props_12.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_before_receive_props_12.$$p = null;
            
            self.$deprecation_warning("'before_receive_props' is deprecated. Use the 'before_new_params' macro instead.");
            return $send(self, 'before_new_params', Opal.to_a(args), block.$to_proc());
          }, TMP_ClassMethods_before_receive_props_12.$$arity = -1);
          
          Opal.defn(self, '$render', TMP_ClassMethods_render_13 = function $$render(container, params) {
            var TMP_14, TMP_17, self = this, $iter = TMP_ClassMethods_render_13.$$p, block = $iter || nil;

            if (container == null) {
              container = nil;
            }
            if (params == null) {
              params = $hash2([], {});
            }
            if ($iter) TMP_ClassMethods_render_13.$$p = null;
            
            Opal.const_get_relative($nesting, 'Tags').$included(self);
            if ($truthy(container)) {
              
              if ($truthy(container['$is_a?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')))) {
                container = container.$type()};
              return $send(self, 'define_method', ["__hyperstack_component_render"], (TMP_14 = function(){var self = TMP_14.$$s || this, TMP_15;

              return $send(self, '__hyperstack_component_select_wrappers', [], (TMP_15 = function(){var self = TMP_15.$$s || this, TMP_16;

                return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [container, params], (TMP_16 = function(){var self = TMP_16.$$s || this;

                  if ($truthy(block)) {
                      return $send(self, 'instance_eval', [], block.$to_proc())
                      } else {
                      return nil
                    }}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15))}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14));
              } else {
              return $send(self, 'define_method', ["__hyperstack_component_render"], (TMP_17 = function(){var self = TMP_17.$$s || this, TMP_18;

              return $send(self, '__hyperstack_component_select_wrappers', [], (TMP_18 = function(){var self = TMP_18.$$s || this;

                return $send(self, 'instance_eval', [], block.$to_proc())}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18))}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17))
            };
          }, TMP_ClassMethods_render_13.$$arity = -1);
          
          Opal.defn(self, '$on', TMP_ClassMethods_on_19 = function $$on($a_rest) {
            var TMP_20, self = this, args, $iter = TMP_ClassMethods_on_19.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_on_19.$$p = null;
            return $send(self, '__hyperstack_component_after_render_hook', [], (TMP_20 = function(element){var self = TMP_20.$$s || this, TMP_21;
if (element == null) element = nil;
            return $send(element, 'on', Opal.to_a(args), (TMP_21 = function($a_rest){var self = TMP_21.$$s || this, aargs;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                aargs = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  aargs[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(self, 'instance_exec', Opal.to_a(aargs), block.$to_proc())}, TMP_21.$$s = self, TMP_21.$$arity = -1, TMP_21))}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20))
          }, TMP_ClassMethods_on_19.$$arity = -1);
          
          Opal.defn(self, '$rescues', TMP_ClassMethods_rescues_22 = function $$rescues($a_rest) {
            var TMP_23, self = this, klasses, $iter = TMP_ClassMethods_rescues_22.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            klasses = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              klasses[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_rescues_22.$$p = null;
            
            if ($truthy(klasses['$empty?']())) {
              klasses = [Opal.const_get_relative($nesting, 'StandardError')]};
            return $send(self, '__hyperstack_component_rescue_hook', [], (TMP_23 = function(found, $a_rest){var self = TMP_23.$$s || this, args, $b, TMP_24;

              var $args_len = arguments.length, $rest_len = $args_len - 1;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 1] = arguments[$arg_idx];
              }if (found == null) found = nil;
            
              if ($truthy(($truthy($b = found) ? $b : $send(klasses, 'detect', [], (TMP_24 = function(klass){var self = TMP_24.$$s || this;
if (klass == null) klass = nil;
              return args['$[]'](0)['$is_a?'](klass)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24))['$!']()))) {
                return [found].concat(Opal.to_a(args));};
              $send(self, 'instance_exec', Opal.to_a(args), block.$to_proc());
              return [true].concat(Opal.to_a(args));}, TMP_23.$$s = self, TMP_23.$$arity = -2, TMP_23));
          }, TMP_ClassMethods_rescues_22.$$arity = -1);
          
          Opal.defn(self, '$before_render', TMP_ClassMethods_before_render_25 = function $$before_render($a_rest) {
            var self = this, args, $iter = TMP_ClassMethods_before_render_25.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_before_render_25.$$p = null;
            
            $send(self, 'before_mount', Opal.to_a(args), block.$to_proc());
            return $send(self, 'before_update', Opal.to_a(args), block.$to_proc());
          }, TMP_ClassMethods_before_render_25.$$arity = -1);
          
          Opal.defn(self, '$after_render', TMP_ClassMethods_after_render_26 = function $$after_render($a_rest) {
            var self = this, args, $iter = TMP_ClassMethods_after_render_26.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_after_render_26.$$p = null;
            
            $send(self, 'after_mount', Opal.to_a(args), block.$to_proc());
            return $send(self, 'after_update', Opal.to_a(args), block.$to_proc());
          }, TMP_ClassMethods_after_render_26.$$arity = -1);
          
          Opal.defn(self, '$method_missing', TMP_ClassMethods_method_missing_27 = function $$method_missing(name, $a_rest) {
            var $b, self = this, args, $iter = TMP_ClassMethods_method_missing_27.$$p, children = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_method_missing_27.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            if ($truthy(($truthy($b = args['$any?']()) ? $b : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element')['$respond_to?']("haml_class_name")['$!']()))) {
              return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_ClassMethods_method_missing_27, false), $zuper, $iter)
              } else {
              return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [self, $hash2(["class"], {"class": Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element').$haml_class_name(name)})], children.$to_proc())
            }
          }, TMP_ClassMethods_method_missing_27.$$arity = -2);
          
          Opal.defn(self, '$validator', TMP_ClassMethods_validator_28 = function $$validator() {
            var self = this;
            if (self.__hyperstack_component_validator == null) self.__hyperstack_component_validator = nil;

            
            if ($truthy(self.__hyperstack_component_validator)) {
              return self.__hyperstack_component_validator};
            if ($truthy(self.$superclass()['$respond_to?']("validator"))) {
              return (self.__hyperstack_component_validator = self.$superclass().$validator().$copy(self.$props_wrapper()))
              } else {
              return (self.__hyperstack_component_validator = Opal.const_get_relative($nesting, 'Validator').$new(self.$props_wrapper()))
            };
          }, TMP_ClassMethods_validator_28.$$arity = 0);
          
          Opal.defn(self, '$prop_types', TMP_ClassMethods_prop_types_29 = function $$prop_types() {
            var self = this;

            if ($truthy(self.$validator())) {
              return $hash2(["_componentValidator"], {"_componentValidator": 
                function(props, propName, componentName) {
                  var errors = self.$validator().$validate(Opal.const_get_relative($nesting, 'Hash').$new(props));
                  return (function() {if ($truthy($rb_gt((errors).$count(), 0))) {
                return new Error($rb_plus("" + "In component `" + (self.$name()) + "`\n", (errors).$join("\n")))
                } else {
                return undefined
              }; return nil; })();
                }
              })
              } else {
              return $hash2([], {})
            }
          }, TMP_ClassMethods_prop_types_29.$$arity = 0);
          
          Opal.defn(self, '$default_props', TMP_ClassMethods_default_props_30 = function $$default_props() {
            var self = this;

            return self.$validator().$default_props()
          }, TMP_ClassMethods_default_props_30.$$arity = 0);
          
          Opal.defn(self, '$params', TMP_ClassMethods_params_31 = function $$params() {
            var self = this, $iter = TMP_ClassMethods_params_31.$$p, block = $iter || nil;

            if ($iter) TMP_ClassMethods_params_31.$$p = null;
            return $send(self.$validator(), 'build', [], block.$to_proc())
          }, TMP_ClassMethods_params_31.$$arity = 0);
          
          Opal.defn(self, '$props_wrapper', TMP_ClassMethods_props_wrapper_32 = function $$props_wrapper() {
            var $a, self = this;
            if (self.__hyperstack_component_props_wrapper == null) self.__hyperstack_component_props_wrapper = nil;

            
            if ($truthy(self.__hyperstack_component_props_wrapper)) {
              return self.__hyperstack_component_props_wrapper};
            if ($truthy(self.$superclass()['$respond_to?']("props_wrapper"))) {
              return (self.__hyperstack_component_props_wrapper = Opal.const_get_relative($nesting, 'Class').$new(self.$superclass().$props_wrapper()))
              } else {
              return (self.__hyperstack_component_props_wrapper = ($truthy($a = self.__hyperstack_component_props_wrapper) ? $a : Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'PropsWrapper'))))
            };
          }, TMP_ClassMethods_props_wrapper_32.$$arity = 0);
          
          Opal.defn(self, '$param', TMP_ClassMethods_param_33 = function $$param($a_rest) {
            var $b, self = this, args, options = nil, name = nil, default$ = nil, $writer = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            if ($truthy(args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              
              options = args['$[]'](0);
              name = options.$first()['$[]'](0);
              default$ = options.$first()['$[]'](1);
              options.$delete(name);
              options['$merge!']($hash2(["default"], {"default": default$}));
              } else {
              
              name = args['$[]'](0);
              options = ($truthy($b = args['$[]'](1)) ? $b : $hash2([], {}));
            };
            if (options['$[]']("type")['$=='](Opal.const_get_relative($nesting, 'Proc'))) {
              
              ($truthy($b = options['$[]']("default")) ? $b : (($writer = ["default", nil]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
              if ($truthy(options['$key?']("allow_nil"))) {
                } else {
                
                $writer = ["allow_nil", true];
                $send(options, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              };};
            if (name['$==']("class")) {
              
              name = "className";
              ($truthy($b = options['$[]']("alias")) ? $b : (($writer = ["alias", "Class"]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));};
            if ($truthy(options['$[]']("default"))) {
              return self.$validator().$optional(name, options)
              } else {
              return self.$validator().$requires(name, options)
            };
          }, TMP_ClassMethods_param_33.$$arity = -1);
          
          Opal.defn(self, '$collect_other_params_as', TMP_ClassMethods_collect_other_params_as_35 = function $$collect_other_params_as(name) {
            var TMP_34, self = this;

            return $send(self.$validator(), 'all_other_params', [name], (TMP_34 = function(){var self = TMP_34.$$s || this;

            return self.$props()}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))
          }, TMP_ClassMethods_collect_other_params_as_35.$$arity = 1);
          Opal.alias(self, "other_params", "collect_other_params_as");
          Opal.alias(self, "others", "collect_other_params_as");
          Opal.alias(self, "other", "collect_other_params_as");
          Opal.alias(self, "opts", "collect_other_params_as");
          
          Opal.defn(self, '$fires', TMP_ClassMethods_fires_37 = function $$fires(name, opts) {
            var $a, TMP_36, self = this, aka = nil;

            if (opts == null) {
              opts = $hash2([], {});
            }
            
            aka = ($truthy($a = opts['$[]']("alias")) ? $a : "" + (name) + "!");
            name = (function() {if ($truthy(name['$=~'](/^<(.+)>$/))) {
              return name.$gsub(/^<(.+)>$/, "\\1")
            } else if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Event'), 'BUILT_IN_EVENTS')['$include?']("" + "on" + (name.$event_camelize())))) {
              return "" + "on" + (name.$event_camelize())
              } else {
              return "" + "on_" + (name)
            }; return nil; })();
            self.$validator().$event(name);
            return $send(self, 'define_method', [aka], (TMP_36 = function($b_rest){var self = TMP_36.$$s || this, args, $c;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($c = self.$props()['$[]'](name), ($c === nil || $c == null) ? nil : $send($c, 'call', Opal.to_a(args)))}, TMP_36.$$s = self, TMP_36.$$arity = -1, TMP_36));
          }, TMP_ClassMethods_fires_37.$$arity = -2);
          Opal.alias(self, "triggers", "fires");
          
          Opal.defn(self, '$define_state', TMP_ClassMethods_define_state_38 = function $$define_state($a_rest) {
            var $b, TMP_39, TMP_40, self = this, states, $iter = TMP_ClassMethods_define_state_38.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            states = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              states[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_define_state_38.$$p = null;
            
            self.$deprecation_warning("'define_state' is deprecated. Use the 'state' macro to declare states.");
            default_initial_value = (function() {if ($truthy(($truthy($b = block) ? block.$arity()['$=='](0) : $b))) {
              return Opal.yieldX(block, []);
              } else {
              return nil
            }; return nil; })();
            states_hash = (function() {if ($truthy(states.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              return states.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            $send(states, 'each', [], (TMP_39 = function(name){var self = TMP_39.$$s || this;
if (name == null) name = nil;
            return self.$state($hash(name, default_initial_value))}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39));
            return $send(states_hash, 'each', [], (TMP_40 = function(name, value){var self = TMP_40.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
            return self.$state($hash(name, value))}, TMP_40.$$s = self, TMP_40.$$arity = 2, TMP_40));
          }, TMP_ClassMethods_define_state_38.$$arity = -1);
          
          Opal.defn(self, '$export_state', TMP_ClassMethods_export_state_41 = function $$export_state($a_rest) {
            var $b, TMP_42, TMP_43, self = this, states, $iter = TMP_ClassMethods_export_state_41.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            states = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              states[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_ClassMethods_export_state_41.$$p = null;
            
            self.$deprecation_warning("'export_state' is deprecated. Use the 'state' macro to declare states.");
            default_initial_value = (function() {if ($truthy(($truthy($b = block) ? block.$arity()['$=='](0) : $b))) {
              return Opal.yieldX(block, []);
              } else {
              return nil
            }; return nil; })();
            states_hash = (function() {if ($truthy(states.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              return states.$pop()
              } else {
              return $hash2([], {})
            }; return nil; })();
            $send(states, 'each', [], (TMP_42 = function(name){var self = TMP_42.$$s || this, $writer = nil;
if (name == null) name = nil;
            
              $writer = [name, default_initial_value];
              $send(states_hash, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42));
            return $send(states_hash, 'each', [], (TMP_43 = function(name, value){var self = TMP_43.$$s || this, TMP_44;
if (name == null) name = nil;if (value == null) value = nil;
            
              self.$state($hash(name, value, "scope", "class", "reader", true));
              return $send(self.$singleton_class(), 'define_method', ["" + (name) + "!"], (TMP_44 = function($a_rest){var self = TMP_44.$$s || this, args;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(self.$mutate(), '__send__', [name].concat(Opal.to_a(args)))}, TMP_44.$$s = self, TMP_44.$$arity = -1, TMP_44));}, TMP_43.$$s = self, TMP_43.$$arity = 2, TMP_43));
          }, TMP_ClassMethods_export_state_41.$$arity = -1);
          
          Opal.defn(self, '$native_mixin', TMP_ClassMethods_native_mixin_45 = function $$native_mixin(item) {
            var self = this;

            return self.$native_mixins()['$<<'](item)
          }, TMP_ClassMethods_native_mixin_45.$$arity = 1);
          
          Opal.defn(self, '$native_mixins', TMP_ClassMethods_native_mixins_46 = function $$native_mixins() {
            var $a, self = this;
            if (self.__hyperstack_component_native_mixins == null) self.__hyperstack_component_native_mixins = nil;

            return (self.__hyperstack_component_native_mixins = ($truthy($a = self.__hyperstack_component_native_mixins) ? $a : []))
          }, TMP_ClassMethods_native_mixins_46.$$arity = 0);
          
          Opal.defn(self, '$static_call_back', TMP_ClassMethods_static_call_back_47 = function $$static_call_back(name) {
            var self = this, $iter = TMP_ClassMethods_static_call_back_47.$$p, block = $iter || nil, $writer = nil;

            if ($iter) TMP_ClassMethods_static_call_back_47.$$p = null;
            
            $writer = [name, block];
            $send(self.$static_call_backs(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          }, TMP_ClassMethods_static_call_back_47.$$arity = 1);
          
          Opal.defn(self, '$static_call_backs', TMP_ClassMethods_static_call_backs_48 = function $$static_call_backs() {
            var $a, self = this;
            if (self.__hyperstack_component_static_call_backs == null) self.__hyperstack_component_static_call_backs = nil;

            return (self.__hyperstack_component_static_call_backs = ($truthy($a = self.__hyperstack_component_static_call_backs) ? $a : $hash2([], {})))
          }, TMP_ClassMethods_static_call_backs_48.$$arity = 0);
          
          Opal.defn(self, '$export_component', TMP_ClassMethods_export_component_49 = function $$export_component(opts) {
            var $a, self = this, export_name = nil, first_name = nil, $writer = nil;

            if (opts == null) {
              opts = $hash2([], {});
            }
            
            export_name = ($truthy($a = opts['$[]']("as")) ? $a : self.$name()).$split("::");
            first_name = export_name.$first();
            
            $writer = [first_name, self.$add_item_to_tree(self.$Native(Opal.global)['$[]'](first_name), $rb_plus([Opal.const_get_relative($nesting, 'ReactWrapper').$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n()];
            $send(self.$Native(Opal.global), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, TMP_ClassMethods_export_component_49.$$arity = -1);
          
          Opal.defn(self, '$imports', TMP_ClassMethods_imports_51 = function $$imports(component_name) {
            var TMP_50, self = this, e = nil;

            return (function() { try {
            try {
              
              Opal.const_get_relative($nesting, 'ReactWrapper').$import_native_component(self, Opal.const_get_relative($nesting, 'ReactWrapper').$eval_native_react_component(component_name));
              return $send(self, 'render', [], (TMP_50 = function(){var self = TMP_50.$$s || this;

              return nil}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50));
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
                try {
                  return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
            } finally {
              self
            }; })()
          }, TMP_ClassMethods_imports_51.$$arity = 1);
          
          Opal.defn(self, '$add_item_to_tree', TMP_ClassMethods_add_item_to_tree_53 = function $$add_item_to_tree(current_tree, new_item) {
            var $a, TMP_52, self = this, $writer = nil;

            if ($truthy(($truthy($a = self.$Native(current_tree).$class()['$!='](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Native'), 'Object'))) ? $a : new_item.$length()['$=='](1)))) {
              return $send(new_item, 'inject', [], (TMP_52 = function(a, e){var self = TMP_52.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
              return $hash(e, a)}, TMP_52.$$s = self, TMP_52.$$arity = 2, TMP_52))
              } else {
              
              
              $writer = [new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false)))];
              $send(self.$Native(current_tree), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return current_tree;
            }
          }, TMP_ClassMethods_add_item_to_tree_53.$$arity = 2);
          
          Opal.defn(self, '$to_n', TMP_ClassMethods_to_n_54 = function $$to_n() {
            var self = this;

            return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$create_native_react_class(self)
          }, TMP_ClassMethods_to_n_54.$$arity = 0);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/props_wrapper"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_reader', '$naming_convention', '$===', '$fix_suffix', '$camelize', '$=~', '$+', '$[]', '$respond_to?', '$superclass', '$param_accessor_style', '$dup', '$param_definitions', '$new', '$!=', '$instance_var_name_for', '$lambda', '$instance_variable_set', '$fetch_from_cache', '$==', '$[]=', '$-', '$include?', '$define_method', '$to_sym', '$props', '$call', '$to_proc', '$class', '$each_value', '$instance_exec', '$initialize', '$private', '$cache', '$equal?', '$tap', '$convert_param', '$_react_param_conversion', '$is_a?', '$collect', '$component', '$instance_variable_get']);
  
  self.$require("active_support/core_ext/string");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $PropsWrapper(){};
          var self = $PropsWrapper = $klass($base, $super, 'PropsWrapper', $PropsWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_PropsWrapper_param_accessor_style_12, TMP_PropsWrapper_initialize_14, TMP_PropsWrapper_reload_15, TMP_PropsWrapper_$$_16, TMP_PropsWrapper_fetch_from_cache_18, TMP_PropsWrapper_convert_param_20, TMP_PropsWrapper_cache_22, TMP_PropsWrapper_props_23, TMP_PropsWrapper_value_for_24;

          def.component = def.cache = nil;
          
          self.$attr_reader("component");
          (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_instance_var_name_for_1, TMP_fix_suffix_2, TMP_param_accessor_style_3, TMP_param_definitions_4, TMP_define_param_8, TMP_define_all_others_10;

            
            
            Opal.defn(self, '$instance_var_name_for', TMP_instance_var_name_for_1 = function $$instance_var_name_for(name) {
              var self = this, $case = nil;

              return (function() {$case = Opal.const_get_relative($nesting, 'Hyperstack').$naming_convention();
              if ("camelize_params"['$===']($case)) {return self.$fix_suffix(name.$camelize())}
              else if ("prefix_params"['$===']($case)) {return "" + "_" + (name)}
              else {return name}})()
            }, TMP_instance_var_name_for_1.$$arity = 1);
            
            Opal.defn(self, '$fix_suffix', TMP_fix_suffix_2 = function $$fix_suffix(name) {
              var self = this;

              
              if ($truthy(name)) {
                } else {
                return nil
              };
              if ($truthy(name['$=~'](/\?$/))) {
                return $rb_plus(name['$[]']($range(0, -2, false)), "_q")
              } else if ($truthy(name['$=~'](/\!$/))) {
                return $rb_plus(name['$[]']($range(0, -2, false)), "_b")
                } else {
                return name
              };
            }, TMP_fix_suffix_2.$$arity = 1);
            
            Opal.defn(self, '$param_accessor_style', TMP_param_accessor_style_3 = function $$param_accessor_style(style) {
              var $a, self = this;
              if (self.param_accessor_style == null) self.param_accessor_style = nil;

              if (style == null) {
                style = nil;
              }
              
              if ($truthy(style)) {
                self.param_accessor_style = style};
              return (self.param_accessor_style = ($truthy($a = self.param_accessor_style) ? $a : (function() {if ($truthy(self.$superclass()['$respond_to?']("param_accessor_style"))) {
                return self.$superclass().$param_accessor_style()
                } else {
                return "hyperstack"
              }; return nil; })()));
            }, TMP_param_accessor_style_3.$$arity = -1);
            
            Opal.defn(self, '$param_definitions', TMP_param_definitions_4 = function $$param_definitions() {
              var $a, self = this;
              if (self.param_definitions == null) self.param_definitions = nil;

              return (self.param_definitions = ($truthy($a = self.param_definitions) ? $a : (function() {if ($truthy(self.$superclass()['$respond_to?']("param_definitions"))) {
                return self.$superclass().$param_definitions().$dup()
                } else {
                return Opal.const_get_relative($nesting, 'Hash').$new()
              }; return nil; })()))
            }, TMP_param_definitions_4.$$arity = 0);
            
            Opal.defn(self, '$define_param', TMP_define_param_8 = function $$define_param(name, param_type, aka) {
              var $a, TMP_5, TMP_6, TMP_7, self = this, meth_name = nil, var_name = nil, $writer = nil;

              if (aka == null) {
                aka = nil;
              }
              
              if ($truthy(($truthy($a = self.$param_accessor_style()['$!=']("legacy")) ? $a : aka))) {
                
                meth_name = ($truthy($a = aka) ? $a : name);
                var_name = ($truthy($a = self.$fix_suffix(aka)) ? $a : self.$instance_var_name_for(name));
                
                $writer = [name, $send(self, 'lambda', [], (TMP_5 = function(props){var self = TMP_5.$$s || this, val = nil;
                  if (self.component == null) self.component = nil;
if (props == null) props = nil;
                
                  self.component.$instance_variable_set("" + "@" + (var_name), (val = self.$fetch_from_cache(name, param_type, props)));
                  if (self.$param_accessor_style()['$==']("accessors")) {
                    } else {
                    return nil;
                  };
                  return self.component["" + "$" + (meth_name)] = function() { return val };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5))];
                $send(self.$param_definitions(), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy(["hyperstack", "accessors"]['$include?'](self.$param_accessor_style()))) {
                  return nil};};
              if (param_type['$=='](Opal.const_get_relative($nesting, 'Proc'))) {
                return $send(self, 'define_method', [name.$to_sym()], (TMP_6 = function($b_rest){var self = TMP_6.$$s || this, block, args;

                  block = TMP_6.$$p || nil;
                  if (block) TMP_6.$$p = null;
                  var $args_len = arguments.length, $rest_len = $args_len - 0;
                  if ($rest_len < 0) { $rest_len = 0; }
                  args = new Array($rest_len);
                  for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                    args[$arg_idx - 0] = arguments[$arg_idx];
                  }
                if ($truthy(self.$props()['$[]'](name))) {
                    return $send(self.$props()['$[]'](name), 'call', Opal.to_a(args), block.$to_proc())
                    } else {
                    return nil
                  }}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6))
                } else {
                return $send(self, 'define_method', [name.$to_sym()], (TMP_7 = function(){var self = TMP_7.$$s || this;

                return self.$fetch_from_cache(name, param_type, self.$props())}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))
              };
            }, TMP_define_param_8.$$arity = -3);
            return (Opal.defn(self, '$define_all_others', TMP_define_all_others_10 = function $$define_all_others(name) {
              var TMP_9, TMP_11, self = this, $iter = TMP_define_all_others_10.$$p, $yield = $iter || nil, var_name = nil, $writer = nil;

              if ($iter) TMP_define_all_others_10.$$p = null;
              
              var_name = self.$instance_var_name_for(name);
              
              $writer = [name, $send(self, 'lambda', [], (TMP_9 = function(props){var self = TMP_9.$$s || this, val = nil;
                if (self.component == null) self.component = nil;
if (props == null) props = nil;
              
                self.component.$instance_variable_set("" + "@" + (var_name), (val = Opal.yield1($yield, props)));
                if (self.$param_accessor_style()['$==']("accessors")) {
                  } else {
                  return nil;
                };
                return self.component["" + "$" + (name)] = function() { return val };}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))];
              $send(self.$param_definitions(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return $send(self, 'define_method', [name.$to_sym()], (TMP_11 = function(){var self = TMP_11.$$s || this, $a;
                if (self._all_others_cache == null) self._all_others_cache = nil;

              return (self._all_others_cache = ($truthy($a = self._all_others_cache) ? $a : Opal.yield1($yield, self.$props())))}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
            }, TMP_define_all_others_10.$$arity = 1), nil) && 'define_all_others';
          })(Opal.get_singleton_class(self), $nesting);
          
          Opal.defn(self, '$param_accessor_style', TMP_PropsWrapper_param_accessor_style_12 = function $$param_accessor_style() {
            var self = this;

            return self.$class().$param_accessor_style()
          }, TMP_PropsWrapper_param_accessor_style_12.$$arity = 0);
          
          Opal.defn(self, '$initialize', TMP_PropsWrapper_initialize_14 = function $$initialize(component, incoming) {
            var TMP_13, self = this;

            if (incoming == null) {
              incoming = nil;
            }
            
            self.component = component;
            return $send(self.$class().$param_definitions(), 'each_value', [], (TMP_13 = function(initializer){var self = TMP_13.$$s || this, $a;
if (initializer == null) initializer = nil;
            return $send(self, 'instance_exec', [($truthy($a = incoming) ? $a : self.$props())], initializer.$to_proc())}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13));
          }, TMP_PropsWrapper_initialize_14.$$arity = -2);
          
          Opal.defn(self, '$reload', TMP_PropsWrapper_reload_15 = function $$reload(next_props) {
            var self = this;

            
            self._all_others_cache = nil;
            return self.$initialize(self.component, next_props);
          }, TMP_PropsWrapper_reload_15.$$arity = 1);
          
          Opal.defn(self, '$[]', TMP_PropsWrapper_$$_16 = function(prop) {
            var self = this;

            return self.$props()['$[]'](prop)
          }, TMP_PropsWrapper_$$_16.$$arity = 1);
          self.$private();
          
          Opal.defn(self, '$fetch_from_cache', TMP_PropsWrapper_fetch_from_cache_18 = function $$fetch_from_cache(name, param_type, props) {
            var $a, $b, TMP_17, self = this, last = nil, cached_value = nil;

            
            $b = self.$cache()['$[]'](name), $a = Opal.to_ary($b), (last = ($a[0] == null ? nil : $a[0])), (cached_value = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(last['$equal?'](props['$[]'](name)))) {
              return cached_value};
            return $send(self.$convert_param(name, param_type, props), 'tap', [], (TMP_17 = function(value){var self = TMP_17.$$s || this, $writer = nil;
if (value == null) value = nil;
            
              $writer = [name, [props['$[]'](name), value]];
              $send(self.$cache(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
          }, TMP_PropsWrapper_fetch_from_cache_18.$$arity = 3);
          
          Opal.defn(self, '$convert_param', TMP_PropsWrapper_convert_param_20 = function $$convert_param(name, param_type, props) {
            var $a, TMP_19, self = this;

            if ($truthy(param_type['$respond_to?']("_react_param_conversion"))) {
              return param_type.$_react_param_conversion(props['$[]'](name), nil)
            } else if ($truthy(($truthy($a = param_type['$is_a?'](Opal.const_get_relative($nesting, 'Array'))) ? param_type['$[]'](0)['$respond_to?']("_react_param_conversion") : $a))) {
              return $send(props['$[]'](name), 'collect', [], (TMP_19 = function(param){var self = TMP_19.$$s || this;
if (param == null) param = nil;
              return param_type['$[]'](0).$_react_param_conversion(param, nil)}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19))
              } else {
              return props['$[]'](name)
            }
          }, TMP_PropsWrapper_convert_param_20.$$arity = 3);
          
          Opal.defn(self, '$cache', TMP_PropsWrapper_cache_22 = function $$cache() {
            var $a, TMP_21, self = this;

            return (self.cache = ($truthy($a = self.cache) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_21 = function(h, k){var self = TMP_21.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
            
              $writer = [k, []];
              $send(h, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21))))
          }, TMP_PropsWrapper_cache_22.$$arity = 0);
          
          Opal.defn(self, '$props', TMP_PropsWrapper_props_23 = function $$props() {
            var self = this;

            return self.$component().$props()
          }, TMP_PropsWrapper_props_23.$$arity = 0);
          return (Opal.defn(self, '$value_for', TMP_PropsWrapper_value_for_24 = function $$value_for(name) {
            var self = this;

            if ($truthy(self['$[]'](name))) {
              return self['$[]'](name).$instance_variable_get("@value")
              } else {
              return nil
            }
          }, TMP_PropsWrapper_value_for_24.$$arity = 1), nil) && 'value_for';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$define_callback', '$add_after_error_hook', '$extend', '$respond_to?', '$!', '$<', '$allow_deprecated_render_definition?', '$deprecation_warning', '$new', '$to_a', '$mounted_components', '$each', '$include?', '$force_update!', '$name', '$class', '$event_camelize', '$to_s', '$call', '$[]', '$params', '$props_wrapper', '$on_opal_client?', '$load_context', '$observing', '$<<', '$run_callback', '$props', '$quiet_test', '$reload', '$unmount', '$remove', '$delete', '$set_state', '$==', '$method_defined?', '$raise', '$first', '$render', '$waiting_on_resources']);
  
  self.$require("hyperstack/ext/component/string");
  self.$require("hyperstack/ext/component/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("hyperstack/internal/auto_unmount");
  self.$require("hyperstack/internal/component/rendering_context");
  self.$require("hyperstack/internal/component");
  self.$require("hyperstack/internal/component/instance_methods");
  self.$require("hyperstack/internal/component/class_methods");
  self.$require("hyperstack/internal/component/props_wrapper");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Component_included_3, TMP_Component_mounted_components_4, TMP_Component_force_update$B_6, TMP_Component_deprecation_warning_7, TMP_Component_deprecation_warning_8, TMP_Component_initialize_9, TMP_Component_emit_10, TMP_Component_component_will_mount_12, TMP_Component_component_did_mount_14, TMP_Component_component_will_receive_props_16, TMP_Component_component_will_update_18, TMP_Component_component_did_update_20, TMP_Component_component_will_unmount_22, TMP_Component_component_did_catch_24, TMP_Component_mutations_25, TMP_Component_update_react_js_state_26, TMP_Component_render_27, TMP_Component_waiting_on_resources_28, TMP_Component___hyperstack_component_run_post_render_hooks_30, TMP_Component__render_wrapper_33;

      
      Opal.defs(self, '$included', TMP_Component_included_3 = function $$included(base) {
        var TMP_1, $a, self = this;

        
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'State'), 'Observer'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'InstanceMethods'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'AutoUnmount'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'));
        base.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ShouldComponentUpdate'));
        $send(base, 'class_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2;

        
          self.$class_attribute("initial_state");
          self.$define_callback("before_mount");
          self.$define_callback("after_mount");
          self.$define_callback("before_new_params");
          self.$define_callback("before_update");
          self.$define_callback("after_update");
          self.$define_callback("__hyperstack_component_after_render_hook");
          self.$define_callback("__hyperstack_component_rescue_hook");
          return $send(self, 'define_callback', ["after_error"], (TMP_2 = function(){var self = TMP_2.$$s || this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper').$add_after_error_hook(base)}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
        base.$extend(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ClassMethods'));
        if ($truthy(Opal.__hyperstack_component_original_defn)) {
          return nil
          } else {
          
          
         Opal.__hyperstack_component_original_defn = Opal.defn
         Opal.defn = function(klass, name, fn) {
           (function() {if ($truthy(($truthy($a = (klass)['$respond_to?']("hyper_component?")) ? $rb_lt(klass, Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'))['$!']() : $a))) {
            if ($truthy(($truthy($a = name == '$render') ? (klass)['$allow_deprecated_render_definition?']()['$!']() : $a))) {
              return Opal.const_get_relative($nesting, 'Hyperstack').$deprecation_warning(klass, "Do not directly define the render method. Use the render macro instead.")
            } else if ($truthy(name == '$__hyperstack_component_render')) {
              return name = '$render'
              } else {
              return nil
            }
            } else {
            return nil
          }; return nil; })()
           Opal.__hyperstack_component_original_defn(klass, name, fn)
           }
         ;
          return nil;
        };
      }, TMP_Component_included_3.$$arity = 1);
      Opal.defs(self, '$mounted_components', TMP_Component_mounted_components_4 = function $$mounted_components() {
        var $a, self = this;
        if (self.__hyperstack_component_mounted_components == null) self.__hyperstack_component_mounted_components = nil;

        return (self.__hyperstack_component_mounted_components = ($truthy($a = self.__hyperstack_component_mounted_components) ? $a : Opal.const_get_relative($nesting, 'Set').$new()))
      }, TMP_Component_mounted_components_4.$$arity = 0);
      Opal.defs(self, '$force_update!', TMP_Component_force_update$B_6 = function() {
        var TMP_5, self = this, components = nil;

        
        components = self.$mounted_components().$to_a();
        return $send(components, 'each', [], (TMP_5 = function(comp){var self = TMP_5.$$s || this;
if (comp == null) comp = nil;
        
          if ($truthy(self.$mounted_components()['$include?'](comp))) {
            } else {
            return nil;
          };
          return comp['$force_update!']();}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
      }, TMP_Component_force_update$B_6.$$arity = 0);
      Opal.defs(self, '$deprecation_warning', TMP_Component_deprecation_warning_7 = function $$deprecation_warning(message) {
        var self = this;

        return Opal.const_get_relative($nesting, 'Hyperstack').$deprecation_warning(self.$name(), message)
      }, TMP_Component_deprecation_warning_7.$$arity = 1);
      
      Opal.defn(self, '$deprecation_warning', TMP_Component_deprecation_warning_8 = function $$deprecation_warning(message) {
        var self = this;

        return Opal.const_get_relative($nesting, 'Hyperstack').$deprecation_warning(self.$class().$name(), message)
      }, TMP_Component_deprecation_warning_8.$$arity = 1);
      
      Opal.defn(self, '$initialize', TMP_Component_initialize_9 = function $$initialize(native_element) {
        var self = this;

        return (self.__hyperstack_component_native = native_element)
      }, TMP_Component_initialize_9.$$arity = 1);
      
      Opal.defn(self, '$emit', TMP_Component_emit_10 = function $$emit(event_name, $a_rest) {
        var self = this, args, built_in_event_name = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Event'), 'BUILT_IN_EVENTS')['$include?']((built_in_event_name = "" + "on" + (event_name.$to_s().$event_camelize()))))) {
          return $send(self.$params()['$[]'](built_in_event_name), 'call', Opal.to_a(args))
          } else {
          return $send(self.$params()['$[]']("" + "on_" + (event_name)), 'call', Opal.to_a(args))
        }
      }, TMP_Component_emit_10.$$arity = -2);
      
      Opal.defn(self, '$component_will_mount', TMP_Component_component_will_mount_12 = function $$component_will_mount() {
        var TMP_11, self = this;

        
        self.__hyperstack_component_params_wrapper = self.$class().$props_wrapper().$new(self);
        if ($truthy(Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
          Opal.const_get_relative($nesting, 'IsomorphicHelpers').$load_context(true)};
        return $send(self, 'observing', [$hash2(["immediate_update"], {"immediate_update": true})], (TMP_11 = function(){var self = TMP_11.$$s || this;

        
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component').$mounted_components()['$<<'](self);
          return self.$run_callback("before_mount", self.$props());}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
      }, TMP_Component_component_will_mount_12.$$arity = 0);
      
      Opal.defn(self, '$component_did_mount', TMP_Component_component_did_mount_14 = function $$component_did_mount() {
        var TMP_13, self = this;

        return $send(self, 'observing', [$hash2(["update_objects"], {"update_objects": true})], (TMP_13 = function(){var self = TMP_13.$$s || this;

        
          self.$run_callback("after_mount");
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$quiet_test(self);}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))
      }, TMP_Component_component_did_mount_14.$$arity = 0);
      
      Opal.defn(self, '$component_will_receive_props', TMP_Component_component_will_receive_props_16 = function $$component_will_receive_props(next_props) {
        var TMP_15, self = this;

        
        $send(self, 'observing', [$hash2(["immediate_update"], {"immediate_update": true})], (TMP_15 = function(){var self = TMP_15.$$s || this;

        return self.$run_callback("before_new_params", next_props)}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
        return (self.__hyperstack_component_receiving_props = true);
      }, TMP_Component_component_will_receive_props_16.$$arity = 1);
      
      Opal.defn(self, '$component_will_update', TMP_Component_component_will_update_18 = function $$component_will_update(next_props, next_state) {
        var TMP_17, self = this;
        if (self.__hyperstack_component_receiving_props == null) self.__hyperstack_component_receiving_props = nil;
        if (self.__hyperstack_component_params_wrapper == null) self.__hyperstack_component_params_wrapper = nil;

        
        $send(self, 'observing', [], (TMP_17 = function(){var self = TMP_17.$$s || this;

        return self.$run_callback("before_update", next_props, next_state)}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17));
        if ($truthy(self.__hyperstack_component_receiving_props)) {
          self.__hyperstack_component_params_wrapper.$reload(next_props)};
        return (self.__hyperstack_component_receiving_props = false);
      }, TMP_Component_component_will_update_18.$$arity = 2);
      
      Opal.defn(self, '$component_did_update', TMP_Component_component_did_update_20 = function $$component_did_update(prev_props, prev_state) {
        var TMP_19, self = this;

        return $send(self, 'observing', [$hash2(["update_objects"], {"update_objects": true})], (TMP_19 = function(){var self = TMP_19.$$s || this;

        
          self.$run_callback("after_update", prev_props, prev_state);
          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext').$quiet_test(self);}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19))
      }, TMP_Component_component_did_update_20.$$arity = 2);
      
      Opal.defn(self, '$component_will_unmount', TMP_Component_component_will_unmount_22 = function $$component_will_unmount() {
        var TMP_21, self = this;

        return $send(self, 'observing', [], (TMP_21 = function(){var self = TMP_21.$$s || this;

        
          self.$unmount();
          self.$remove();
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component').$mounted_components().$delete(self);}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21))
      }, TMP_Component_component_will_unmount_22.$$arity = 0);
      
      Opal.defn(self, '$component_did_catch', TMP_Component_component_did_catch_24 = function $$component_did_catch(error, info) {
        var TMP_23, self = this;

        return $send(self, 'observing', [], (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$run_callback("after_error", error, info)}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23))
      }, TMP_Component_component_did_catch_24.$$arity = 2);
      
      Opal.defn(self, '$mutations', TMP_Component_mutations_25 = function $$mutations(_objects) {
        var self = this;

        return self.$set_state($hash2(["***_state_updated_at-***"], {"***_state_updated_at-***": Date.now() + Math.random()}))
      }, TMP_Component_mutations_25.$$arity = 1);
      
      Opal.defn(self, '$update_react_js_state', TMP_Component_update_react_js_state_26 = function $$update_react_js_state(object, name, value) {
        var self = this;

        if ($truthy(object)) {
          
          if (object['$=='](self)) {
            } else {
            name = "" + (object.$class()) + "." + (name)
          };
          return self.$set_state($hash("***_state_updated_at-***", Date.now() + Math.random(), name, value));
          } else {
          return self.$set_state($hash(name, value))
        }
      }, TMP_Component_update_react_js_state_26.$$arity = 3);
      if ($truthy(self['$method_defined?']("render"))) {
        } else {
        
        Opal.defn(self, '$render', TMP_Component_render_27 = function $$render() {
          var self = this;

          return self.$raise("no render defined")
        }, TMP_Component_render_27.$$arity = 0)
      };
      
      Opal.defn(self, '$waiting_on_resources', TMP_Component_waiting_on_resources_28 = function $$waiting_on_resources() {
        var self = this;
        if (self.__hyperstack_component_waiting_on_resources == null) self.__hyperstack_component_waiting_on_resources = nil;

        return self.__hyperstack_component_waiting_on_resources
      }, TMP_Component_waiting_on_resources_28.$$arity = 0);
      
      Opal.defn(self, '$__hyperstack_component_run_post_render_hooks', TMP_Component___hyperstack_component_run_post_render_hooks_30 = function $$__hyperstack_component_run_post_render_hooks(element) {
        var TMP_29, self = this;

        return $send(self, 'run_callback', ["__hyperstack_component_after_render_hook", element], (TMP_29 = function($a_rest){var self = TMP_29.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return args}, TMP_29.$$s = self, TMP_29.$$arity = -1, TMP_29)).$first()
      }, TMP_Component___hyperstack_component_run_post_render_hooks_30.$$arity = 1);
      
      Opal.defn(self, '$_render_wrapper', TMP_Component__render_wrapper_33 = function $$_render_wrapper() {
        var TMP_31, self = this;

        return $send(self, 'observing', [$hash2(["rendering"], {"rendering": true})], (TMP_31 = function(){var self = TMP_31.$$s || this, TMP_32, element = nil;

        
          element = $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [nil], (TMP_32 = function(){var self = TMP_32.$$s || this, $a;

          return ($truthy($a = self.$render()) ? $a : "")}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32));
          if ($truthy(element['$respond_to?']("waiting_on_resources"))) {
            self.__hyperstack_component_waiting_on_resources = element.$waiting_on_resources()};
          return element;}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))
      }, TMP_Component__render_wrapper_33.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/should_component_update"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$observing', '$respond_to?', '$!', '$call_needs_update', '$props_changed?', '$native_state_changed?', '$define_singleton_method', '$needs_update?', '$new', '$!=']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $ShouldComponentUpdate, self = $ShouldComponentUpdate = $module($base, 'ShouldComponentUpdate');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ShouldComponentUpdate_should_component_update$q_2, TMP_ShouldComponentUpdate_call_needs_update_5, TMP_ShouldComponentUpdate_native_state_changed$q_6, TMP_ShouldComponentUpdate_props_changed$q_7;

          
          
          Opal.defn(self, '$should_component_update?', TMP_ShouldComponentUpdate_should_component_update$q_2 = function(next_props, next_state) {
            var TMP_1, self = this;

            return $send(self, 'observing', [], (TMP_1 = function(){var self = TMP_1.$$s || this, $a;

            if ($truthy(self['$respond_to?']("needs_update?"))) {
                return self.$call_needs_update(next_props, next_state)['$!']()['$!']()
                } else {
                return ($truthy($a = self['$props_changed?'](next_props)) ? $a : self['$native_state_changed?'](next_state))
              }}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1))
          }, TMP_ShouldComponentUpdate_should_component_update$q_2.$$arity = 2);
          
          Opal.defn(self, '$call_needs_update', TMP_ShouldComponentUpdate_call_needs_update_5 = function $$call_needs_update(next_params, next_state) {
            var TMP_3, TMP_4, self = this, component = nil;

            
            component = self;
            $send(next_params, 'define_singleton_method', ["changed?"], (TMP_3 = function(){var self = TMP_3.$$s || this;

            return component['$props_changed?'](self)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));
            $send(next_state, 'define_singleton_method', ["changed?"], (TMP_4 = function(){var self = TMP_4.$$s || this;

            return component['$native_state_changed?'](next_state)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
            return self['$needs_update?'](next_params, next_state);
          }, TMP_ShouldComponentUpdate_call_needs_update_5.$$arity = 2);
          
          Opal.defn(self, '$native_state_changed?', TMP_ShouldComponentUpdate_native_state_changed$q_6 = function(next_state_hash) {
            var self = this, state_hash = nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            
            state_hash = Opal.const_get_relative($nesting, 'Hash').$new(self.__hyperstack_component_native.state);
            return next_state_hash['$!='](state_hash);
          }, TMP_ShouldComponentUpdate_native_state_changed$q_6.$$arity = 1);
          
          Opal.defn(self, '$props_changed?', TMP_ShouldComponentUpdate_props_changed$q_7 = function(next_props) {
            var self = this, props = nil;
            if (self.__hyperstack_component_native == null) self.__hyperstack_component_native = nil;

            
            props = Opal.const_get_relative($nesting, 'Hash').$new(self.__hyperstack_component_native.props);
            return next_props['$!='](props);
          }, TMP_ShouldComponentUpdate_props_changed$q_7.$$arity = 1);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/tags"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $klass = Opal.klass;

  Opal.add_stubs(['$+', '$each', '$define_method', '$upcase', '$render', '$to_proc', '$const_set', '$downcase', '$=~', '$include?', '$create_element', '$find_component', '$find_name_and_parent', '$new', '$extend', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$_reactrb_import_component_class', '$reverse', '$to_s', '$class', '$detect', '$const_defined?', '$respond_to?']);
  
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $Tags, self = $Tags = $module($base, 'Tags');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Tags_1, TMP_Tags_html_tag_class_for_3, TMP_Tags_method_missing_4, TMP_Tags_find_component_10, TMP_Tags_lookup_const_13;

          
          Opal.const_set($nesting[0], 'HTML_TAGS', $rb_plus(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], ["circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]));
          $send(Opal.const_get_relative($nesting, 'HTML_TAGS'), 'each', [], (TMP_Tags_1 = function(tag){var self = TMP_Tags_1.$$s || this, TMP_2;
if (tag == null) tag = nil;
          
            $send(self, 'define_method', [tag.$upcase()], (TMP_2 = function($a_rest){var self = TMP_2.$$s || this, children, params;

              children = TMP_2.$$p || nil;
              if (children) TMP_2.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              params = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                params[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [tag].concat(Opal.to_a(params)), children.$to_proc())}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2));
            return self.$const_set(tag.$upcase(), tag);}, TMP_Tags_1.$$s = self, TMP_Tags_1.$$arity = 1, TMP_Tags_1));
          Opal.defs(self, '$html_tag_class_for', TMP_Tags_html_tag_class_for_3 = function $$html_tag_class_for(tag) {
            var $a, self = this, downcased_tag = nil;

            
            downcased_tag = tag.$downcase();
            if ($truthy(($truthy($a = tag['$=~'](/^[A-Z]+$/)) ? Opal.const_get_relative($nesting, 'HTML_TAGS')['$include?'](downcased_tag) : $a))) {
              return Opal.const_get_relative($nesting, 'Object').$const_set(tag, Opal.const_get_relative($nesting, 'ReactWrapper').$create_element(downcased_tag))
              } else {
              return nil
            };
          }, TMP_Tags_html_tag_class_for_3.$$arity = 1);
          
          Opal.defn(self, '$method_missing', TMP_Tags_method_missing_4 = function $$method_missing(name, $a_rest) {
            var self = this, params, $iter = TMP_Tags_method_missing_4.$$p, children = $iter || nil, component = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_Tags_method_missing_4.$$p = null;
            // Prepare super implicit arguments
            for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
              $zuper[$zuper_i] = arguments[$zuper_i];
            }
            
            component = self.$find_component(name);
            if ($truthy(component)) {
              return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())};
            return $send(self, Opal.find_super_dispatcher(self, 'method_missing', TMP_Tags_method_missing_4, false), $zuper, $iter);
          }, TMP_Tags_method_missing_4.$$arity = -2);
          (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_included_7, TMP_find_name_and_parent_9;

            
            
            Opal.defn(self, '$included', TMP_included_7 = function $$included(component) {
              var $a, $b, TMP_5, self = this, name = nil, parent = nil, tag_names_module = nil;

              
              $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), (name = ($a[0] == null ? nil : $a[0])), (parent = ($a[1] == null ? nil : $a[1])), $b;
              tag_names_module = $send(Opal.const_get_relative($nesting, 'Module'), 'new', [], (TMP_5 = function(){var self = TMP_5.$$s || this, TMP_6;

              return $send(self, 'define_method', [name], (TMP_6 = function($c_rest){var self = TMP_6.$$s || this, children, params;

                  children = TMP_6.$$p || nil;
                  if (children) TMP_6.$$p = null;
                  var $args_len = arguments.length, $rest_len = $args_len - 0;
                  if ($rest_len < 0) { $rest_len = 0; }
                  params = new Array($rest_len);
                  for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                    params[$arg_idx - 0] = arguments[$arg_idx];
                  }
                return $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'render', [component].concat(Opal.to_a(params)), children.$to_proc())}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5));
              return parent.$extend(tag_names_module);
            }, TMP_included_7.$$arity = 1);
            self.$private();
            return (Opal.defn(self, '$find_name_and_parent', TMP_find_name_and_parent_9 = function $$find_name_and_parent(component) {
              var $a, TMP_8, self = this, split_name = nil;

              
              split_name = ($truthy($a = component.$name()) ? component.$name().$split("::") : $a);
              if ($truthy(($truthy($a = split_name) ? $rb_gt(split_name.$length(), 1) : $a))) {
                return [split_name.$last(), $send(split_name, 'inject', [[Opal.const_get_relative($nesting, 'Module')]], (TMP_8 = function(a, e){var self = TMP_8.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
                return $rb_plus(a, [a.$last().$const_get(e)])}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8))['$[]'](-2)]
                } else {
                return nil
              };
            }, TMP_find_name_and_parent_9.$$arity = 1), nil) && 'find_name_and_parent';
          })(Opal.get_singleton_class(self), $nesting);
          self.$private();
          
          Opal.defn(self, '$find_component', TMP_Tags_find_component_10 = function $$find_component(name) {
            var $a, self = this, component = nil;

            
            component = self.$lookup_const(name);
            if ($truthy(($truthy($a = component) ? component['$method_defined?']("render")['$!']() : $a))) {
              self.$raise("" + (name) + " does not appear to be a react component.")};
            return ($truthy($a = component) ? $a : Opal.const_get_relative($nesting, 'Object').$_reactrb_import_component_class(name));
          }, TMP_Tags_find_component_10.$$arity = 1);
          
          Opal.defn(self, '$lookup_const', TMP_Tags_lookup_const_13 = function $$lookup_const(name) {
            var TMP_11, TMP_12, self = this, scopes = nil, scope = nil;

            
            if ($truthy(name['$=~'](/^[A-Z]/))) {
              } else {
              return nil
            };
            scopes = $send(self.$class().$name().$to_s().$split("::"), 'inject', [[Opal.const_get_relative($nesting, 'Object')]], (TMP_11 = function(nesting, next_const){var self = TMP_11.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
            return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11)).$reverse();
            scope = $send(scopes, 'detect', [], (TMP_12 = function(s){var self = TMP_12.$$s || this;
if (s == null) s = nil;
            return s['$const_defined?'](name, false)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
            if ($truthy(scope)) {
              return scope.$const_get(name, false)
              } else {
              return nil
            };
          }, TMP_Tags_lookup_const_13.$$arity = 1);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  if ($truthy(Opal.const_get_relative($nesting, 'Object')['$respond_to?']("_reactrb_import_component_class"))) {
    return nil
    } else {
    return (function($base, $super, $parent_nesting) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object__reactrb_import_component_class_14;

      return Opal.defs(self, '$_reactrb_import_component_class', TMP_Object__reactrb_import_component_class_14 = function $$_reactrb_import_component_class(_name) {
        var self = this;

        return nil
      }, TMP_Object__reactrb_import_component_class_14.$$arity = 1)
    })($nesting[0], null, $nesting)
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/event"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Event(){};
        var self = $Event = $klass($base, $super, 'Event', $Event);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Event_initialize_1;

        
        self.$include(Opal.const_get_relative($nesting, 'Native'));
        self.$alias_native("bubbles", "bubbles");
        self.$alias_native("cancelable", "cancelable");
        self.$alias_native("current_target", "currentTarget");
        self.$alias_native("default_prevented", "defaultPrevented");
        self.$alias_native("event_phase", "eventPhase");
        self.$alias_native("is_trusted?", "isTrusted");
        self.$alias_native("native_event", "nativeEvent");
        self.$alias_native("target", "target");
        self.$alias_native("timestamp", "timeStamp");
        self.$alias_native("event_type", "type");
        self.$alias_native("prevent_default", "preventDefault");
        self.$alias_native("stop_propagation", "stopPropagation");
        self.$alias_native("clipboard_data", "clipboardData");
        self.$alias_native("alt_key", "altKey");
        self.$alias_native("char_code", "charCode");
        self.$alias_native("ctrl_key", "ctrlKey");
        self.$alias_native("get_modifier_state", "getModifierState");
        self.$alias_native("key", "key");
        self.$alias_native("key_code", "keyCode");
        self.$alias_native("locale", "locale");
        self.$alias_native("location", "location");
        self.$alias_native("meta_key", "metaKey");
        self.$alias_native("repeat", "repeat");
        self.$alias_native("shift_key", "shiftKey");
        self.$alias_native("which", "which");
        self.$alias_native("related_target", "relatedTarget");
        self.$alias_native("button", "button");
        self.$alias_native("buttons", "buttons");
        self.$alias_native("client_x", "clientX");
        self.$alias_native("client_y", "clientY");
        self.$alias_native("get_modifier_state", "getModifierState");
        self.$alias_native("page_x", "pageX");
        self.$alias_native("page_y", "pageY");
        self.$alias_native("screen_x", "screen_x");
        self.$alias_native("screen_y", "screen_y");
        self.$alias_native("changed_touches", "changedTouches");
        self.$alias_native("target_touches", "targetTouches");
        self.$alias_native("touches", "touches");
        self.$alias_native("detail", "detail");
        self.$alias_native("view", "view");
        self.$alias_native("delta_mode", "deltaMode");
        self.$alias_native("delta_x", "deltaX");
        self.$alias_native("delta_y", "deltaY");
        self.$alias_native("delta_z", "deltaZ");
        Opal.const_set($nesting[0], 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onSelect", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll", "onWheel"]);
        return (Opal.defn(self, '$initialize', TMP_Event_initialize_1 = function $$initialize(native_event) {
          var self = this;

          return (self["native"] = native_event)
        }, TMP_Event_initialize_1.$$arity = 1), nil) && 'initialize';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/object"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$_reactrb_tag_original_const_missing', '$html_tag_class_for', '$raise', '$object_id']);
  return (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Object_to_key_2;

    
    (function($base, $super, $parent_nesting) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_const_missing_1;

        
        Opal.alias(self, "_reactrb_tag_original_const_missing", "const_missing");
        return (Opal.defn(self, '$const_missing', TMP_const_missing_1 = function $$const_missing(const_name) {
          var $a, self = this, e = nil;

          try {
            return self.$_reactrb_tag_original_const_missing(const_name)
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {e = $err;
              try {
                return ($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags').$html_tag_class_for(const_name)) ? $a : self.$raise(e))
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, TMP_const_missing_1.$$arity = 1), nil) && 'const_missing';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], null, $nesting);
    return (Opal.defn(self, '$to_key', TMP_Object_to_key_2 = function $$to_key() {
      var self = this;

      return self.$object_id()
    }, TMP_Object_to_key_2.$$arity = 0), nil) && 'to_key';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/kernel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$tap', '$new', '$after', '$resolve', '$call']);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_pause_1;

    
    
    Opal.defn(self, '$pause', TMP_Kernel_pause_1 = function $$pause(s) {
      var TMP_2, self = this, $iter = TMP_Kernel_pause_1.$$p, block = $iter || nil;

      if ($iter) TMP_Kernel_pause_1.$$p = null;
      return $send(Opal.const_get_relative($nesting, 'Promise').$new(), 'tap', [], (TMP_2 = function(p){var self = TMP_2.$$s || this, TMP_3;
if (p == null) p = nil;
      return $send(self, 'after', [s], (TMP_3 = function(){var self = TMP_3.$$s || this, $a;

        return $send(p, 'resolve', Opal.to_a(($truthy($a = block) ? [block.$call()] : $a)))}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2))
    }, TMP_Kernel_pause_1.$$arity = 1);
    Opal.alias(self, "busy_sleep", "sleep");
    Opal.alias(self, "sleep", "pause");
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/number"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Number_to_key_1;

    return (Opal.defn(self, '$to_key', TMP_Number_to_key_1 = function $$to_key() {
      var self = this;

      return self
    }, TMP_Number_to_key_1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/boolean"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_key_1;

    return (Opal.defn(self, '$to_key', TMP_Boolean_to_key_1 = function $$to_key() {
      var self = this;

      return self
    }, TMP_Boolean_to_key_1.$$arity = 0), nil) && 'to_key'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$to_enum', '$size', '$reject!', '$<<']);
  return (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Array_extract$B_1;

    return (Opal.defn(self, '$extract!', TMP_Array_extract$B_1 = function() {
      var TMP_2, TMP_3, self = this, $iter = TMP_Array_extract$B_1.$$p, $yield = $iter || nil, extracted_elements = nil;

      if ($iter) TMP_Array_extract$B_1.$$p = null;
      
      if (($yield !== nil)) {
        } else {
        return $send(self, 'to_enum', ["extract!"], (TMP_2 = function(){var self = TMP_2.$$s || this;

        return self.$size()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
      };
      extracted_elements = [];
      $send(self, 'reject!', [], (TMP_3 = function(element){var self = TMP_3.$$s || this;
if (element == null) element = nil;
      if ($truthy(Opal.yield1($yield, element))) {
          return extracted_elements['$<<'](element)
          } else {
          return nil
        }}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
      return extracted_elements;
    }, TMP_Array_extract$B_1.$$arity = 0), nil) && 'extract!'
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/ext/component/enumerable"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$private_constant', '$each', '$[]=', '$-', '$!=', '$to_enum', '$respond_to?', '$size']);
  return (function($base, $parent_nesting) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Enumerable_index_with_1;

    
    Opal.const_set($nesting[0], 'INDEX_WITH_DEFAULT', Opal.const_get_relative($nesting, 'Object').$new());
    self.$private_constant("INDEX_WITH_DEFAULT");
    
    Opal.defn(self, '$index_with', TMP_Enumerable_index_with_1 = function $$index_with(default$) {
      var TMP_2, TMP_3, TMP_4, self = this, $iter = TMP_Enumerable_index_with_1.$$p, $yield = $iter || nil, result = nil;

      if (default$ == null) {
        default$ = Opal.const_get_relative($nesting, 'INDEX_WITH_DEFAULT');
      }
      if ($iter) TMP_Enumerable_index_with_1.$$p = null;
      if (($yield !== nil)) {
        
        result = $hash2([], {});
        $send(self, 'each', [], (TMP_2 = function(elem){var self = TMP_2.$$s || this, $writer = nil;
if (elem == null) elem = nil;
        
          $writer = [elem, Opal.yield1($yield, elem)];
          $send(result, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        return result;
      } else if ($truthy(default$['$!='](Opal.const_get_relative($nesting, 'INDEX_WITH_DEFAULT')))) {
        
        result = $hash2([], {});
        $send(self, 'each', [], (TMP_3 = function(elem){var self = TMP_3.$$s || this, $writer = nil;
if (elem == null) elem = nil;
        
          $writer = [elem, default$];
          $send(result, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        return result;
        } else {
        return $send(self, 'to_enum', ["index_with"], (TMP_4 = function(){var self = TMP_4.$$s || this;

        if ($truthy(self['$respond_to?']("size"))) {
            return self.$size()
            } else {
            return nil
          }}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4))
      }
    }, TMP_Enumerable_index_with_1.$$arity = -1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/isomorphic_helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$!=', '$!', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$production?', '$env', '$+', '$[]', '$class', '$on_opal_client?', '$join', '$collect', '$prerender_footer_blocks', '$call', '$attr_reader', '$[]=', '$-', '$run', '$each', '$before_first_mount_blocks', '$send_to_opal', '$eval', '$length', '$load!', '$tr', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$send', '$result']);
  
  self.$require("hyperstack/internal/component");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $IsomorphicHelpers, self = $IsomorphicHelpers = $module($base, 'IsomorphicHelpers');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IsomorphicHelpers_included_1, TMP_IsomorphicHelpers_load_context_2, TMP_IsomorphicHelpers_context_3, TMP_IsomorphicHelpers_log_4, TMP_IsomorphicHelpers_on_opal_server$q_5, TMP_IsomorphicHelpers_on_opal_client$q_6, TMP_IsomorphicHelpers_log_7, TMP_IsomorphicHelpers_on_opal_server$q_8, TMP_IsomorphicHelpers_on_opal_client$q_9, TMP_IsomorphicHelpers_prerender_footers_11;

        
        Opal.defs(self, '$included', TMP_IsomorphicHelpers_included_1 = function $$included(base) {
          var self = this;

          return base.$extend(Opal.const_get_relative($nesting, 'ClassMethods'))
        }, TMP_IsomorphicHelpers_included_1.$$arity = 1);
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil
          } else {
          Opal.defs(self, '$load_context', TMP_IsomorphicHelpers_load_context_2 = function $$load_context(unique_id, name) {
            var $a, $b, self = this, message = nil;
            if (self.context == null) self.context = nil;

            if (unique_id == null) {
              unique_id = nil;
            }
            if (name == null) {
              name = nil;
            }
            
            if ($truthy(($truthy($a = ($truthy($b = unique_id['$!']()) ? $b : self.context['$!']())) ? $a : self.context.$unique_id()['$!='](unique_id)))) {
              
              message = (function() {if ($truthy(self['$on_opal_server?']())) {
                
                try {
                  console.history = []
                } catch ($err) {
                  if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                    try {
                      nil
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                };
                return "" + "************************ React Prerendering Context Initialized " + (name) + " ***********************";
                } else {
                return "************************ React Browser Context Initialized ****************************"
              }; return nil; })();
              self.$log(message);
              self.context = Opal.const_get_relative($nesting, 'Context').$new(unique_id);};
            return true;
          }, TMP_IsomorphicHelpers_load_context_2.$$arity = -1)
        };
        Opal.defs(self, '$context', TMP_IsomorphicHelpers_context_3 = function $$context() {
          var self = this;
          if (self.context == null) self.context = nil;

          return self.context
        }, TMP_IsomorphicHelpers_context_3.$$arity = 0);
        Opal.defs(self, '$log', TMP_IsomorphicHelpers_log_4 = function $$log(message, message_type) {
          var $a, $b, self = this, style = nil;

          if (message_type == null) {
            message_type = "info";
          }
          
          if ($truthy(message['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
            } else {
            message = [message]
          };
          if ($truthy(($truthy($a = ($truthy($b = message_type['$==']("info")) ? $b : message_type['$==']("warning"))) ? Opal.const_get_relative($nesting, 'Hyperstack').$env()['$production?']() : $a))) {
            return nil};
          if (message_type['$==']("info")) {
            
            if ($truthy(self['$on_opal_server?']())) {
              style = "background: #00FFFF; color: red"
              } else {
              style = "background: #222; color: #bada55"
            };
            message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
            return console.log.apply(console, message);
          } else if (message_type['$==']("warning")) {
            return console.warn.apply(console, message)
            } else {
            return console.error.apply(console, message)
          };
        }, TMP_IsomorphicHelpers_log_4.$$arity = -2);
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil
          } else {
          
          Opal.defs(self, '$on_opal_server?', TMP_IsomorphicHelpers_on_opal_server$q_5 = function() {
            var self = this;

            return typeof Opal.global.document === 'undefined'
          }, TMP_IsomorphicHelpers_on_opal_server$q_5.$$arity = 0);
          Opal.defs(self, '$on_opal_client?', TMP_IsomorphicHelpers_on_opal_client$q_6 = function() {
            var self = this;

            return self['$on_opal_server?']()['$!']()
          }, TMP_IsomorphicHelpers_on_opal_client$q_6.$$arity = 0);
        };
        
        Opal.defn(self, '$log', TMP_IsomorphicHelpers_log_7 = function $$log($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args))
        }, TMP_IsomorphicHelpers_log_7.$$arity = -1);
        
        Opal.defn(self, '$on_opal_server?', TMP_IsomorphicHelpers_on_opal_server$q_8 = function() {
          var self = this;

          return self.$class()['$on_opal_server?']()
        }, TMP_IsomorphicHelpers_on_opal_server$q_8.$$arity = 0);
        
        Opal.defn(self, '$on_opal_client?', TMP_IsomorphicHelpers_on_opal_client$q_9 = function() {
          var self = this;

          return self.$class()['$on_opal_client?']()
        }, TMP_IsomorphicHelpers_on_opal_client$q_9.$$arity = 0);
        Opal.defs(self, '$prerender_footers', TMP_IsomorphicHelpers_prerender_footers_11 = function $$prerender_footers(controller) {
          var TMP_10, self = this, footer = nil;

          if (controller == null) {
            controller = nil;
          }
          
          footer = $send(Opal.const_get_relative($nesting, 'Context').$prerender_footer_blocks(), 'collect', [], (TMP_10 = function(block){var self = TMP_10.$$s || this;
if (block == null) block = nil;
          return block.$call(controller)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10)).$join("\n");
          if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
            nil};
          return footer;
        }, TMP_IsomorphicHelpers_prerender_footers_11.$$arity = -1);
        (function($base, $super, $parent_nesting) {
          function $Context(){};
          var self = $Context = $klass($base, $super, 'Context', $Context);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Context_define_isomorphic_method_12, TMP_Context_before_first_mount_blocks_13, TMP_Context_prerender_footer_blocks_14, TMP_Context_initialize_16, TMP_Context_load_opal_context_17, TMP_Context_eval_18, TMP_Context_send_to_opal_20, TMP_Context_register_before_first_mount_block_21, TMP_Context_register_prerender_footer_block_22;

          def.unique_id = def.cname = def.ctx = nil;
          
          self.$attr_reader("controller");
          self.$attr_reader("unique_id");
          Opal.defs(self, '$define_isomorphic_method', TMP_Context_define_isomorphic_method_12 = function $$define_isomorphic_method(method_name) {
            var $a, $b, self = this, $iter = TMP_Context_define_isomorphic_method_12.$$p, block = $iter || nil, $writer = nil;

            if ($iter) TMP_Context_define_isomorphic_method_12.$$p = null;
            
            (Opal.class_variable_set($Context, '@@ctx_methods', ($truthy($a = (($b = $Context.$$cvars['@@ctx_methods']) == null ? nil : $b)) ? $a : $hash2([], {}))));
            
            $writer = [method_name, block];
            $send((($a = $Context.$$cvars['@@ctx_methods']) == null ? nil : $a), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          }, TMP_Context_define_isomorphic_method_12.$$arity = 1);
          Opal.defs(self, '$before_first_mount_blocks', TMP_Context_before_first_mount_blocks_13 = function $$before_first_mount_blocks() {
            var $a, self = this;
            if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

            return (self.before_first_mount_blocks = ($truthy($a = self.before_first_mount_blocks) ? $a : []))
          }, TMP_Context_before_first_mount_blocks_13.$$arity = 0);
          Opal.defs(self, '$prerender_footer_blocks', TMP_Context_prerender_footer_blocks_14 = function $$prerender_footer_blocks() {
            var $a, self = this;
            if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

            return (self.prerender_footer_blocks = ($truthy($a = self.prerender_footer_blocks) ? $a : []))
          }, TMP_Context_prerender_footer_blocks_14.$$arity = 0);
          
          Opal.defn(self, '$initialize', TMP_Context_initialize_16 = function $$initialize(unique_id, ctx, controller, cname) {
            var TMP_15, self = this;

            if (ctx == null) {
              ctx = nil;
            }
            if (controller == null) {
              controller = nil;
            }
            if (cname == null) {
              cname = nil;
            }
            
            self.unique_id = unique_id;
            self.cname = cname;
            if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
              nil};
            Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Application'), 'Boot').$run($hash2(["context"], {"context": self}));
            return $send(self.$class().$before_first_mount_blocks(), 'each', [], (TMP_15 = function(block){var self = TMP_15.$$s || this;
if (block == null) block = nil;
            return block.$call(self)}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15));
          }, TMP_Context_initialize_16.$$arity = -2);
          
          Opal.defn(self, '$load_opal_context', TMP_Context_load_opal_context_17 = function $$load_opal_context() {
            var self = this;

            return self.$send_to_opal("load_context", self.unique_id, self.cname)
          }, TMP_Context_load_opal_context_17.$$arity = 0);
          
          Opal.defn(self, '$eval', TMP_Context_eval_18 = function(js) {
            var self = this;

            if ($truthy(self.ctx)) {
              return self.ctx.$eval(js)
              } else {
              return nil
            }
          }, TMP_Context_eval_18.$$arity = 1);
          
          Opal.defn(self, '$send_to_opal', TMP_Context_send_to_opal_20 = function $$send_to_opal(method_name, $a_rest) {
            var TMP_19, self = this, args, method_args = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            
            if ($truthy(self.ctx)) {
              } else {
              return nil
            };
            if (args.$length()['$=='](0)) {
              args = [1]};
            Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Rails'), 'ComponentLoader').$new(self.ctx)['$load!']();
            method_args = $send(args, 'collect', [], (TMP_19 = function(arg){var self = TMP_19.$$s || this, quarg = nil;
if (arg == null) arg = nil;
            
              quarg = ("" + (arg)).$tr("\"", "'");
              return "" + "\"" + (quarg) + "\"";}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19)).$join(", ");
            return self.ctx.$eval("" + "Opal.Hyperstack.$const_get('Component').$const_get('IsomorphicHelpers').$" + (method_name) + "(" + (method_args) + ")");
          }, TMP_Context_send_to_opal_20.$$arity = -2);
          Opal.defs(self, '$register_before_first_mount_block', TMP_Context_register_before_first_mount_block_21 = function $$register_before_first_mount_block() {
            var self = this, $iter = TMP_Context_register_before_first_mount_block_21.$$p, block = $iter || nil;

            if ($iter) TMP_Context_register_before_first_mount_block_21.$$p = null;
            return self.$before_first_mount_blocks()['$<<'](block)
          }, TMP_Context_register_before_first_mount_block_21.$$arity = 0);
          return Opal.defs(self, '$register_prerender_footer_block', TMP_Context_register_prerender_footer_block_22 = function $$register_prerender_footer_block() {
            var self = this, $iter = TMP_Context_register_prerender_footer_block_22.$$p, block = $iter || nil;

            if ($iter) TMP_Context_register_prerender_footer_block_22.$$p = null;
            return self.$prerender_footer_blocks()['$<<'](block)
          }, TMP_Context_register_prerender_footer_block_22.$$arity = 0);
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          function $IsomorphicProcCall(){};
          var self = $IsomorphicProcCall = $klass($base, $super, 'IsomorphicProcCall', $IsomorphicProcCall);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IsomorphicProcCall_result_23, TMP_IsomorphicProcCall_initialize_24, TMP_IsomorphicProcCall_when_on_client_25, TMP_IsomorphicProcCall_send_to_server_26, TMP_IsomorphicProcCall_when_on_server_27;

          def.result = def.name = nil;
          
          self.$attr_reader("context");
          
          Opal.defn(self, '$result', TMP_IsomorphicProcCall_result_23 = function $$result() {
            var self = this;

            if ($truthy(self.result)) {
              return self.result.$first()
              } else {
              return nil
            }
          }, TMP_IsomorphicProcCall_result_23.$$arity = 0);
          
          Opal.defn(self, '$initialize', TMP_IsomorphicProcCall_initialize_24 = function $$initialize(name, block, context, $a_rest) {
            var $b, self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 3;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 3] = arguments[$arg_idx];
            }
            
            self.name = name;
            self.context = context;
            $send(block, 'call', [self].concat(Opal.to_a(args)));
            return (self.result = ($truthy($b = self.result) ? $b : $send(self, 'send_to_server', Opal.to_a(args))));
          }, TMP_IsomorphicProcCall_initialize_24.$$arity = -4);
          
          Opal.defn(self, '$when_on_client', TMP_IsomorphicProcCall_when_on_client_25 = function $$when_on_client() {
            var self = this, $iter = TMP_IsomorphicProcCall_when_on_client_25.$$p, block = $iter || nil;

            if ($iter) TMP_IsomorphicProcCall_when_on_client_25.$$p = null;
            if ($truthy(Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']())) {
              return (self.result = [block.$call()])
              } else {
              return nil
            }
          }, TMP_IsomorphicProcCall_when_on_client_25.$$arity = 0);
          
          Opal.defn(self, '$send_to_server', TMP_IsomorphicProcCall_send_to_server_26 = function $$send_to_server($a_rest) {
            var self = this, args, method_string = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($truthy(Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']())) {
              
              method_string = $rb_plus($rb_plus($rb_plus($rb_plus("ServerSideIsomorphicMethod.", self.name), "("), args.$to_json()), ")");
              return (self.result = [Opal.const_get_relative($nesting, 'JSON').$parse(eval(method_string))]);
              } else {
              return nil
            }
          }, TMP_IsomorphicProcCall_send_to_server_26.$$arity = -1);
          return (Opal.defn(self, '$when_on_server', TMP_IsomorphicProcCall_when_on_server_27 = function $$when_on_server() {
            var $a, self = this, $iter = TMP_IsomorphicProcCall_when_on_server_27.$$p, block = $iter || nil;

            if ($iter) TMP_IsomorphicProcCall_when_on_server_27.$$p = null;
            if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']()) ? $a : Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']()))) {
              return nil
              } else {
              return (self.result = [block.$call().$to_json()])
            }
          }, TMP_IsomorphicProcCall_when_on_server_27.$$arity = 0), nil) && 'when_on_server';
        })($nesting[0], null, $nesting);
        (function($base, $parent_nesting) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClassMethods_on_opal_server$q_28, TMP_ClassMethods_on_opal_client$q_29, TMP_ClassMethods_log_30, TMP_ClassMethods_controller_31, TMP_ClassMethods_before_first_mount_32, TMP_ClassMethods_prerender_footer_33, TMP_ClassMethods_isomorphic_method_34;

          
          
          Opal.defn(self, '$on_opal_server?', TMP_ClassMethods_on_opal_server$q_28 = function() {
            var self = this;

            return Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_server?']()
          }, TMP_ClassMethods_on_opal_server$q_28.$$arity = 0);
          
          Opal.defn(self, '$on_opal_client?', TMP_ClassMethods_on_opal_client$q_29 = function() {
            var self = this;

            return Opal.const_get_relative($nesting, 'IsomorphicHelpers')['$on_opal_client?']()
          }, TMP_ClassMethods_on_opal_client$q_29.$$arity = 0);
          
          Opal.defn(self, '$log', TMP_ClassMethods_log_30 = function $$log($a_rest) {
            var self = this, args;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            return $send(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'log', Opal.to_a(args))
          }, TMP_ClassMethods_log_30.$$arity = -1);
          
          Opal.defn(self, '$controller', TMP_ClassMethods_controller_31 = function $$controller() {
            var self = this;

            return Opal.const_get_relative($nesting, 'IsomorphicHelpers').$context().$controller()
          }, TMP_ClassMethods_controller_31.$$arity = 0);
          
          Opal.defn(self, '$before_first_mount', TMP_ClassMethods_before_first_mount_32 = function $$before_first_mount() {
            var self = this, $iter = TMP_ClassMethods_before_first_mount_32.$$p, block = $iter || nil;

            if ($iter) TMP_ClassMethods_before_first_mount_32.$$p = null;
            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'Context'), 'register_before_first_mount_block', [], block.$to_proc())
          }, TMP_ClassMethods_before_first_mount_32.$$arity = 0);
          
          Opal.defn(self, '$prerender_footer', TMP_ClassMethods_prerender_footer_33 = function $$prerender_footer() {
            var self = this, $iter = TMP_ClassMethods_prerender_footer_33.$$p, block = $iter || nil;

            if ($iter) TMP_ClassMethods_prerender_footer_33.$$p = null;
            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'Context'), 'register_prerender_footer_block', [], block.$to_proc())
          }, TMP_ClassMethods_prerender_footer_33.$$arity = 0);
          if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
            nil
            } else {
            
            self.$require("json");
            
            Opal.defn(self, '$isomorphic_method', TMP_ClassMethods_isomorphic_method_34 = function $$isomorphic_method(name) {
              var TMP_35, self = this, $iter = TMP_ClassMethods_isomorphic_method_34.$$p, block = $iter || nil;

              if ($iter) TMP_ClassMethods_isomorphic_method_34.$$p = null;
              return $send(self.$class(), 'send', ["define_method", name], (TMP_35 = function($a_rest){var self = TMP_35.$$s || this, args;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'IsomorphicHelpers'), 'IsomorphicProcCall'), 'new', [name, block, self].concat(Opal.to_a(args))).$result()}, TMP_35.$$s = self, TMP_35.$$arity = -1, TMP_35))
            }, TMP_ClassMethods_isomorphic_method_34.$$arity = 1);
          };
        })($nesting[0], $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/react_api"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$+', '$create_element', '$to_proc', '$raise', '$to_n', '$kind_of?', '$!', '$build']);
  
  self.$require("native");
  self.$require("active_support/core_ext/object/try");
  self.$require("hyperstack/internal/component/tags");
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $ReactAPI, self = $ReactAPI = $module($base, 'ReactAPI');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ReactAPI_html_tag$q_1, TMP_ReactAPI_html_attr$q_2, TMP_ReactAPI_create_element_3, TMP_ReactAPI_render_4, TMP_ReactAPI_is_valid_element_5, TMP_ReactAPI_is_valid_element$q_6, TMP_ReactAPI_render_to_string_8, TMP_ReactAPI_render_to_static_markup_10, TMP_ReactAPI_unmount_component_at_node_11;

        
        Opal.const_set($nesting[0], 'ATTRIBUTES', $rb_plus(["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"], ["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]));
        Opal.const_set($nesting[0], 'HASH_ATTRIBUTES', ["data", "aria"]);
        Opal.const_set($nesting[0], 'HTML_TAGS', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'HTML_TAGS'));
        Opal.defs(self, '$html_tag?', TMP_ReactAPI_html_tag$q_1 = function(name) {
          var self = this, tags = nil;

          
          tags = Opal.const_get_relative($nesting, 'HTML_TAGS');
          
          for(var i = 0; i < tags.length; i++) {
            if(tags[i] === name)
              return true;
          }
          return false;
        ;
        }, TMP_ReactAPI_html_tag$q_1.$$arity = 1);
        Opal.defs(self, '$html_attr?', TMP_ReactAPI_html_attr$q_2 = function(name) {
          var self = this, attrs = nil;

          
          attrs = Opal.const_get_relative($nesting, 'ATTRIBUTES');
          
          for(var i = 0; i < attrs.length; i++) {
            if(attrs[i] === name)
              return true;
          }
          return false;
        ;
        }, TMP_ReactAPI_html_attr$q_2.$$arity = 1);
        Opal.defs(self, '$create_element', TMP_ReactAPI_create_element_3 = function $$create_element(type, $a_rest) {
          var self = this, properties, $iter = TMP_ReactAPI_create_element_3.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          properties = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            properties[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_ReactAPI_create_element_3.$$p = null;
          return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'ReactWrapper'), 'create_element', [type].concat(Opal.to_a(properties)), block.$to_proc())
        }, TMP_ReactAPI_create_element_3.$$arity = -2);
        Opal.defs(self, '$render', TMP_ReactAPI_render_4 = function $$render(element, container) {
          var self = this, $iter = TMP_ReactAPI_render_4.$$p, $yield = $iter || nil, cb = nil, native$ = nil;

          if ($iter) TMP_ReactAPI_render_4.$$p = null;
          
          if ($truthy(typeof ReactDOM === 'undefined')) {
            self.$raise("ReactDOM.render is not defined.  In React >= v15 you must import it with ReactDOM")};
          container = container.$$class ? container[0] : container;
          if (($yield !== nil)) {
            
            cb = 
            function(){
              setTimeout(function(){
                Opal.yieldX($yield, [])
              }, 0)
            }
          ;
            native$ = ReactDOM.render(element.$to_n(), container, cb);
            } else {
            native$ = ReactDOM.render(element.$to_n(), container)
          };
          if ($truthy(native$ !== null)) {
            } else {
            return nil
          };
          if ($truthy(native$.__opalInstance !== undefined && native$.__opalInstance !== null)) {
            return native$.__opalInstance
          } else if ($truthy(ReactDOM.findDOMNode !== undefined && native$.nodeType === undefined)) {
            return ReactDOM.findDOMNode(native$)
            } else {
            return native$
          };
        }, TMP_ReactAPI_render_4.$$arity = 2);
        Opal.defs(self, '$is_valid_element', TMP_ReactAPI_is_valid_element_5 = function $$is_valid_element(element) {
          var $a, self = this;

          
           console.error("Warning: `is_valid_element` is deprecated in favor of `is_valid_element?`."); ;
          return ($truthy($a = element['$kind_of?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element'))) ? React.isValidElement(element.$to_n()) : $a);
        }, TMP_ReactAPI_is_valid_element_5.$$arity = 1);
        Opal.defs(self, '$is_valid_element?', TMP_ReactAPI_is_valid_element$q_6 = function(element) {
          var $a, self = this;

          return ($truthy($a = element['$kind_of?'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'Element'))) ? React.isValidElement(element.$to_n()) : $a)
        }, TMP_ReactAPI_is_valid_element$q_6.$$arity = 1);
        Opal.defs(self, '$render_to_string', TMP_ReactAPI_render_to_string_8 = function $$render_to_string(element) {
          var TMP_7, self = this;

          
           console.error("Warning: `Hyperstack::Component::ReactAPI.render_to_string` is deprecated in favor of `React::Server.render_to_string`."); ;
          if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'build', [], (TMP_7 = function(){var self = TMP_7.$$s || this;

            return ReactDOMServer.renderToString(element.$to_n())}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))
            } else {
            return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
          };
        }, TMP_ReactAPI_render_to_string_8.$$arity = 1);
        Opal.defs(self, '$render_to_static_markup', TMP_ReactAPI_render_to_static_markup_10 = function $$render_to_static_markup(element) {
          var TMP_9, self = this;

          
           console.error("Warning: `Hyperstack::Component::ReactAPI.render_to_static_markup` is deprecated in favor of `React::Server.render_to_static_markup`."); ;
          if ($truthy((typeof ReactDOMServer === 'undefined')['$!']())) {
            return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'build', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

            return ReactDOMServer.renderToStaticMarkup(element.$to_n())}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9))
            } else {
            return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
          };
        }, TMP_ReactAPI_render_to_static_markup_10.$$arity = 1);
        Opal.defs(self, '$unmount_component_at_node', TMP_ReactAPI_unmount_component_at_node_11 = function $$unmount_component_at_node(node) {
          var self = this;

          if ($truthy((typeof ReactDOM === 'undefined')['$!']())) {
            return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node)
            } else {
            return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
          }
        }, TMP_ReactAPI_unmount_component_at_node_11.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/top_level_rails_component"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$top_level_render', '$start_with?', '$<<', '$const_get', '$each', '$search_path', '$class', '$name', '$!=', '$method_defined?', '$render', '$raise', '$join', '$search_path=', '$-', '$!', '$include?', '$add_to_react_search_path']);
  
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $TopLevelRailsComponent(){};
          var self = $TopLevelRailsComponent = $klass($base, $super, 'TopLevelRailsComponent', $TopLevelRailsComponent);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TopLevelRailsComponent_search_path_1, TMP_TopLevelRailsComponent_allow_deprecated_render_definition$q_2, TMP_TopLevelRailsComponent_render_3, TMP_TopLevelRailsComponent_top_level_render_6;

          def.ComponentName = def.RenderParams = def.Controller = nil;
          
          self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'));
          Opal.defs(self, '$search_path', TMP_TopLevelRailsComponent_search_path_1 = function $$search_path() {
            var $a, self = this;
            if (self.search_path == null) self.search_path = nil;

            return (self.search_path = ($truthy($a = self.search_path) ? $a : [Opal.const_get_relative($nesting, 'Object')]))
          }, TMP_TopLevelRailsComponent_search_path_1.$$arity = 0);
          self.$export_component();
          self.$param("component_name");
          self.$param("controller");
          self.$param("render_params");
          self.$backtrace("off");
          Opal.defs(self, '$allow_deprecated_render_definition?', TMP_TopLevelRailsComponent_allow_deprecated_render_definition$q_2 = function() {
            var self = this;

            return true
          }, TMP_TopLevelRailsComponent_allow_deprecated_render_definition$q_2.$$arity = 0);
          
          Opal.defn(self, '$render', TMP_TopLevelRailsComponent_render_3 = function $$render() {
            var self = this;

            return self.$top_level_render()
          }, TMP_TopLevelRailsComponent_render_3.$$arity = 0);
          return (Opal.defn(self, '$top_level_render', TMP_TopLevelRailsComponent_top_level_render_6 = function $$top_level_render() {
            var TMP_4, TMP_5, $a, self = this, paths_searched = nil, component = nil;

            
            paths_searched = [];
            component = nil;
            if ($truthy(self.ComponentName['$start_with?']("::"))) {
              
              paths_searched['$<<'](self.ComponentName);
              component = (function() { try {
                return Opal.const_get_relative($nesting, 'Object').$const_get(self.ComponentName)
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }})();
              } else {
              
              (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], (TMP_4 = function(scope){var self = TMP_4.$$s || this;
                if (self.Controller == null) self.Controller = nil;
                if (self.ComponentName == null) self.ComponentName = nil;
if (scope == null) scope = nil;
              
                paths_searched['$<<']("" + (scope.$name()) + "::" + (self.Controller) + "::" + (self.ComponentName));
                component = (function() { try {
                  return scope.$const_get(self.Controller, false).$const_get(self.ComponentName, false)
                } catch ($err) {
                  if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                    try {
                      return nil
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                }})();
                if ($truthy(component['$!='](nil))) {
                  
                  Opal.brk(nil, $brk)
                  } else {
                  return nil
                };}, TMP_4.$$s = self, TMP_4.$$brk = $brk, TMP_4.$$arity = 1, TMP_4))
              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
              if ($truthy(component)) {
                } else {
                (function(){var $brk = Opal.new_brk(); try {return $send(self.$class().$search_path(), 'each', [], (TMP_5 = function(scope){var self = TMP_5.$$s || this;
                  if (self.ComponentName == null) self.ComponentName = nil;
if (scope == null) scope = nil;
                
                  paths_searched['$<<']("" + (scope.$name()) + "::" + (self.ComponentName));
                  component = (function() { try {
                    return scope.$const_get(self.ComponentName, false)
                  } catch ($err) {
                    if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                      try {
                        return nil
                      } finally { Opal.pop_exception() }
                    } else { throw $err; }
                  }})();
                  if ($truthy(component['$!='](nil))) {
                    
                    Opal.brk(nil, $brk)
                    } else {
                    return nil
                  };}, TMP_5.$$s = self, TMP_5.$$brk = $brk, TMP_5.$$arity = 1, TMP_5))
                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
              };
            };
            if ($truthy(($truthy($a = component) ? component['$method_defined?']("render") : $a))) {
              return Opal.const_get_relative($nesting, 'RenderingContext').$render(component, self.RenderParams)};
            return self.$raise("" + "Could not find component class '" + (self.ComponentName) + "' for @Controller '" + (self.Controller) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
          }, TMP_TopLevelRailsComponent_top_level_render_6.$$arity = 0), nil) && 'top_level_render';
        })($nesting[0], null, $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Module_add_to_react_search_path_7;

    return (Opal.defn(self, '$add_to_react_search_path', TMP_Module_add_to_react_search_path_7 = function $$add_to_react_search_path(replace_search_path) {
      var self = this, $writer = nil;

      if (replace_search_path == null) {
        replace_search_path = nil;
      }
      if ($truthy(replace_search_path)) {
        
        $writer = [[self]];
        $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent'), 'search_path=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      } else if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent').$search_path()['$include?'](self)['$!']())) {
        return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'TopLevelRailsComponent').$search_path()['$<<'](self)
        } else {
        return nil
      }
    }, TMP_Module_add_to_react_search_path_7.$$arity = -1), nil) && 'add_to_react_search_path'
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    self.$add_to_react_search_path()
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/while_loading"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$WhileLoadingWrapper', '$!', '$on_opal_client?']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $WhileLoading, self = $WhileLoading = $module($base, 'WhileLoading');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_WhileLoading___hyperstack_component_rescue_wrapper_1, TMP_WhileLoading_resources_loading$q_2, TMP_WhileLoading_resources_loaded$q_3;

        
        
        Opal.defn(self, '$__hyperstack_component_rescue_wrapper', TMP_WhileLoading___hyperstack_component_rescue_wrapper_1 = function $$__hyperstack_component_rescue_wrapper(child) {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component').$WhileLoadingWrapper($hash2(["child", "children_elements"], {"child": self, "children_elements": child}))
        }, TMP_WhileLoading___hyperstack_component_rescue_wrapper_1.$$arity = 1);
        
        Opal.defn(self, '$resources_loading?', TMP_WhileLoading_resources_loading$q_2 = function() {
          var self = this;
          if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

          return self.__hyperstack_while_loading_waiting_on_resources
        }, TMP_WhileLoading_resources_loading$q_2.$$arity = 0);
        
        Opal.defn(self, '$resources_loaded?', TMP_WhileLoading_resources_loaded$q_3 = function() {
          var self = this;
          if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

          return self.__hyperstack_while_loading_waiting_on_resources['$!']()
        }, TMP_WhileLoading_resources_loaded$q_3.$$arity = 0);
        if ($truthy(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers')['$on_opal_client?']())) {
          
          function onError(event) {
            if (event.message.match(/^Uncaught NotQuiet: /)) event.preventDefault();
          }

          window.addEventListener('error', onError);
         };
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/free_render"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$instance_eval', '$const_defined?', '$const_get', '$is_a?', '$method_defined?', '$include?', '$render', '$to_proc', '$hyperstack_component_original_meth_missing']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $FreeRender, self = $FreeRender = $module($base, 'FreeRender');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_FreeRender_included_3;

        Opal.defs(self, '$included', TMP_FreeRender_included_3 = function $$included(base) {
          var TMP_1, self = this;

          return $send(base, 'instance_eval', [], (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_method_missing_2;

          
            Opal.alias(self, "hyperstack_component_original_meth_missing", "method_missing");
            return (Opal.def(self, '$method_missing', TMP_method_missing_2 = function $$method_missing(name, $a_rest) {
              var $b, $c, $d, self = this, args, $iter = TMP_method_missing_2.$$p, block = $iter || nil, klass = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 1;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 1] = arguments[$arg_idx];
              }
              if ($iter) TMP_method_missing_2.$$p = null;
              if ($truthy(($truthy($b = ($truthy($c = self['$const_defined?'](name)) ? (klass = self.$const_get(name)) : $c)) ? ($truthy($c = ($truthy($d = klass['$is_a?'](Opal.const_get_relative($nesting, 'Class'))) ? klass['$method_defined?']("render") : $d)) ? $c : Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'Tags'), 'HTML_TAGS')['$include?'](klass)) : $b))) {
                return $send(self, 'render', [klass].concat(Opal.to_a(args)), block.$to_proc())
                } else {
                return $send(self, 'hyperstack_component_original_meth_missing', [name].concat(Opal.to_a(args)), block.$to_proc())
              }
            }, TMP_method_missing_2.$$arity = -2), nil) && 'method_missing';}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1))
        }, TMP_FreeRender_included_3.$$arity = 1)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/rescue_wrapper"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$param', '$render', '$call', '$attr_accessor', '$RescueMetaWrapper', '$after_error', '$after_error_args', '$run_callback', '$after_error_args=', '$-', '$raise', '$force_update!']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        
        (function($base, $super, $parent_nesting) {
          function $RescueMetaWrapper(){};
          var self = $RescueMetaWrapper = $klass($base, $super, 'RescueMetaWrapper', $RescueMetaWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_RescueMetaWrapper_1;

          
          self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'));
          self.$param("children_elements");
          return $send(self, 'render', [], (TMP_RescueMetaWrapper_1 = function(){var self = TMP_RescueMetaWrapper_1.$$s || this;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

          return self.ChildrenElements.$call()}, TMP_RescueMetaWrapper_1.$$s = self, TMP_RescueMetaWrapper_1.$$arity = 0, TMP_RescueMetaWrapper_1));
        })($nesting[0], null, $nesting);
        (function($base, $super, $parent_nesting) {
          function $RescueWrapper(){};
          var self = $RescueWrapper = $klass($base, $super, 'RescueWrapper', $RescueWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_RescueWrapper_2, TMP_RescueWrapper_3;

          
          (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting);

            return self.$attr_accessor("after_error_args")
          })(Opal.get_singleton_class(self), $nesting);
          self.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'));
          self.$param("child");
          self.$param("children_elements");
          $send(self, 'render', [], (TMP_RescueWrapper_2 = function(){var self = TMP_RescueWrapper_2.$$s || this;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

          return self.$RescueMetaWrapper($hash2(["children_elements"], {"children_elements": self.ChildrenElements}))}, TMP_RescueWrapper_2.$$s = self, TMP_RescueWrapper_2.$$arity = 0, TMP_RescueWrapper_2));
          return $send(self, 'after_error', [], (TMP_RescueWrapper_3 = function(error, info){var self = TMP_RescueWrapper_3.$$s || this, $a, $b, TMP_4, args = nil, found = nil, $writer = nil;
            if (self.Child == null) self.Child = nil;
if (error == null) error = nil;if (info == null) info = nil;
          
            args = ($truthy($a = Opal.const_get_relative($nesting, 'RescueWrapper').$after_error_args()) ? $a : [error, info]);
            $b = $send(self.Child, 'run_callback', ["__hyperstack_component_rescue_hook", found].concat(Opal.to_a(args)), (TMP_4 = function(a){var self = TMP_4.$$s || this;
if (a == null) a = nil;
            return a}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4)), $a = Opal.to_ary($b), (found = ($a[0] == null ? nil : $a[0])), $b;
            if ($truthy(found)) {
              } else {
              
              
              $writer = [args];
              $send(Opal.const_get_relative($nesting, 'RescueWrapper'), 'after_error_args=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.$raise(error);
            };
            return self.Child['$force_update!']();}, TMP_RescueWrapper_3.$$s = self, TMP_RescueWrapper_3.$$arity = 2, TMP_RescueWrapper_3));
        })($nesting[0], null, $nesting);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/component/while_loading_wrapper"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$render', '$!', '$quiet?', '$raise_if_not_quiet=', '$-', '$instance_eval', '$mutate', '$RescueMetaWrapper', '$before_mount', '$rescues', '$class', '$instance_variable_set']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Component, self = $Component = $module($base, 'Component');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
          function $WhileLoadingWrapper(){};
          var self = $WhileLoadingWrapper = $klass($base, $super, 'WhileLoadingWrapper', $WhileLoadingWrapper);

          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_WhileLoadingWrapper_1, TMP_WhileLoadingWrapper_3;

          
          $send(self, 'render', [], (TMP_WhileLoadingWrapper_1 = function(){var self = TMP_WhileLoadingWrapper_1.$$s || this, $a, TMP_2, $writer = nil;
            if (self.waiting_on_resources == null) self.waiting_on_resources = nil;
            if (self.Child == null) self.Child = nil;
            if (self.ChildrenElements == null) self.ChildrenElements = nil;

          
            if ($truthy(($truthy($a = self.waiting_on_resources) ? self['$quiet?']()['$!']() : $a))) {
              
              $writer = [false];
              $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'raise_if_not_quiet=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              } else {
              
              self.waiting_on_resources = false;
              $send(self.Child, 'instance_eval', [], (TMP_2 = function(){var self = TMP_2.$$s || this;
                if (self.__hyperstack_while_loading_waiting_on_resources == null) self.__hyperstack_while_loading_waiting_on_resources = nil;

              
                if ($truthy(self.__hyperstack_while_loading_waiting_on_resources)) {
                  self.$mutate()};
                return (self.__hyperstack_while_loading_waiting_on_resources = false);}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
              
              $writer = [true];
              $send(Opal.const_get_relative($nesting, 'RenderingContext'), 'raise_if_not_quiet=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            return self.$RescueMetaWrapper($hash2(["children_elements"], {"children_elements": self.ChildrenElements}));}, TMP_WhileLoadingWrapper_1.$$s = self, TMP_WhileLoadingWrapper_1.$$arity = 0, TMP_WhileLoadingWrapper_1));
          return $send(self, 'before_mount', [], (TMP_WhileLoadingWrapper_3 = function(){var self = TMP_WhileLoadingWrapper_3.$$s || this, TMP_4, wrapper = nil;
            if (self.Child == null) self.Child = nil;

          
            wrapper = self;
            return $send(self.Child.$class(), 'rescues', [Opal.const_get_qualified(Opal.const_get_relative($nesting, 'RenderingContext'), 'NotQuiet')], (TMP_4 = function(){var self = TMP_4.$$s || this;

            
              wrapper.$instance_variable_set("@waiting_on_resources", true);
              return (self.__hyperstack_while_loading_waiting_on_resources = true);}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));}, TMP_WhileLoadingWrapper_3.$$s = self, TMP_WhileLoadingWrapper_3.$$arity = 0, TMP_WhileLoadingWrapper_3));
        })($nesting[0], Opal.const_get_relative($nesting, 'RescueWrapper'), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'VERSION', "1.0.alpha1.5")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-component"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$import', '$js_import', '$==']);
  
  self.$require("hyperstack/internal/component");
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyper-state");
  Opal.const_get_relative($nesting, 'Hyperstack').$js_import("react/react-source-browser", $hash2(["client_only", "defines"], {"client_only": true, "defines": ["ReactDOM", "React"]}));
  Opal.const_get_relative($nesting, 'Hyperstack').$js_import("react/react-source-server", $hash2(["server_only", "defines"], {"server_only": true, "defines": "React"}));
  Opal.const_get_relative($nesting, 'Hyperstack').$import("browser/delay", $hash2(["client_only"], {"client_only": true}));
  Opal.const_get_relative($nesting, 'Hyperstack').$js_import("react_ujs", $hash2(["defines"], {"defines": "ReactRailsUJS"}));
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyper-component");
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyperstack/component/auto-import");
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("hyperstack/internal/callbacks");
    self.$require("hyperstack/internal/auto_unmount");
    self.$require("native");
    self.$require("hyperstack/state/observer");
    self.$require("hyperstack/internal/component/validator");
    self.$require("hyperstack/component/element");
    self.$require("hyperstack/internal/component/react_wrapper");
    self.$require("hyperstack/component");
    self.$require("hyperstack/internal/component/should_component_update");
    self.$require("hyperstack/internal/component/tags");
    self.$require("hyperstack/component/event");
    self.$require("hyperstack/internal/component/rendering_context");
    self.$require("hyperstack/ext/component/object");
    self.$require("hyperstack/ext/component/kernel");
    self.$require("hyperstack/ext/component/number");
    self.$require("hyperstack/ext/component/boolean");
    self.$require("hyperstack/ext/component/array");
    self.$require("hyperstack/ext/component/enumerable");
    self.$require("hyperstack/component/isomorphic_helpers");
    self.$require("hyperstack/component/react_api");
    self.$require("hyperstack/internal/component/top_level_rails_component");
    self.$require("hyperstack/component/while_loading");
    self.$require("hyperstack/component/free_render");
    self.$require("hyperstack/internal/component/rescue_wrapper");
    self.$require("hyperstack/internal/component/while_loading_wrapper");
    return self.$require("hyperstack/component/version");
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/component/auto-import"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;

  Opal.add_stubs(['$==', '$_reactrb_original_const_missing', '$import_const_from_native', '$raise', '$_reactrb_import_component_class', '$_reactrb_original_method_missing', '$to_proc', '$render']);
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    (function($base, $super, $parent_nesting) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_const_missing_1, TMP__reactrb_import_component_class_2, TMP_method_missing_3;

        
        Opal.alias(self, "_reactrb_original_const_missing", "const_missing");
        Opal.alias(self, "_reactrb_original_method_missing", "method_missing");
        
        Opal.defn(self, '$const_missing', TMP_const_missing_1 = function $$const_missing(const_name) {
          var $a, self = this, e = nil;

          try {
            return self.$_reactrb_original_const_missing(const_name)
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {e = $err;
              try {
                return ($truthy($a = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'NativeLibrary').$import_const_from_native(Opal.const_get_relative($nesting, 'Object'), const_name, true)) ? $a : self.$raise(e))
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, TMP_const_missing_1.$$arity = 1);
        
        Opal.defn(self, '$_reactrb_import_component_class', TMP__reactrb_import_component_class_2 = function $$_reactrb_import_component_class(method) {
          var self = this;

          return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'NativeLibrary').$import_const_from_native(self, method, false)
        }, TMP__reactrb_import_component_class_2.$$arity = 1);
        return (Opal.defn(self, '$method_missing', TMP_method_missing_3 = function $$method_missing(method, $a_rest) {
          var self = this, args, $iter = TMP_method_missing_3.$$p, block = $iter || nil, component_class = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ($iter) TMP_method_missing_3.$$p = null;
          
          component_class = self.$_reactrb_import_component_class(method);
          if ($truthy(component_class)) {
            } else {
            $send(self, '_reactrb_original_method_missing', [method].concat(Opal.to_a(args)), block.$to_proc())
          };
          return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'Component'), 'RenderingContext'), 'render', [component_class].concat(Opal.to_a(args)), block.$to_proc());
        }, TMP_method_missing_3.$$arity = -2), nil) && 'method_missing';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], null, $nesting);
    return (function($base, $parent_nesting) {
      var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Internal, self = $Internal = $module($base, 'Internal');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $Component, self = $Component = $module($base, 'Component');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          (function($base, $super, $parent_nesting) {
            function $NativeLibrary(){};
            var self = $NativeLibrary = $klass($base, $super, 'NativeLibrary', $NativeLibrary);

            var def = self.$$proto, $nesting = [self].concat($parent_nesting);

            return nil
          })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'NativeLibrary'), $nesting)
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting);
    } else {
    return nil
  }
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/state/mapper"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$+', '$observed!', '$class', '$update_objects_to_observe', '$-', '$<<', '$[]', '$new_objects', '$update_exclusions', '$delay_updates?', '$schedule_delayed_updater', '$zero?', '$key?', '$current_observers', '$each', '$mutations', '$remove_current_observers_and_objects', '$delete', '$[]=', '$current_objects', '$new', '$raise', '$empty?', '$on_client?', '$!=', '$after', '$run_delayed_updater', '$observers_to_update', '$include?', '$tap']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $State, self = $State = $module($base, 'State');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $Mapper, self = $Mapper = $module($base, 'Mapper');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          
          self.rendering_level = 0;
          (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_observing_1, TMP_observed$B_2, TMP_mutated$B_4, TMP_observed$q_5, TMP_bulk_update_6, TMP_ignore_bulk_updates_7, TMP_ignore_mutations_8, TMP_update_objects_to_observe_10, TMP_remove_11, TMP_new_objects_13, TMP_current_observers_15, TMP_current_objects_17, TMP_update_exclusions_18, TMP_remove_current_observers_and_objects_20, TMP_delay_updates$q_21, TMP_schedule_delayed_updater_23, TMP_run_delayed_updater_25, TMP_observers_to_update_30;

            
            
            Opal.defn(self, '$observing', TMP_observing_1 = function $$observing(observer, immediate_update, rendering, update_objects) {
              var $a, $b, self = this, $iter = TMP_observing_1.$$p, $yield = $iter || nil, saved_context = nil, return_value = nil;
              if (self.current_observer == null) self.current_observer = nil;
              if (self.immediate_update == null) self.immediate_update = nil;
              if (self.rendering_level == null) self.rendering_level = nil;

              if ($iter) TMP_observing_1.$$p = null;
              return (function() { try {
              
              saved_context = [self.current_observer, self.immediate_update];
              self.current_observer = observer;
              self.immediate_update = ($truthy($a = immediate_update) ? observer : $a);
              if ($truthy(rendering)) {
                
                self.rendering_level = $rb_plus(self.rendering_level, 1);
                self['$observed!'](observer);
                self['$observed!'](observer.$class());};
              return_value = Opal.yieldX($yield, []);
              if ($truthy(update_objects)) {
                self.$update_objects_to_observe(observer)};
              return return_value;
              } finally {
                ($b = saved_context, $a = Opal.to_ary($b), (self.current_observer = ($a[0] == null ? nil : $a[0])), (self.immediate_update = ($a[1] == null ? nil : $a[1])), $b, (function() {if ($truthy(rendering)) {
                  return (self.rendering_level = $rb_minus(self.rendering_level, 1))
                  } else {
                  return nil
                }; return nil; })(), return_value)
              }; })()
            }, TMP_observing_1.$$arity = 4);
            
            Opal.defn(self, '$observed!', TMP_observed$B_2 = function(object) {
              var self = this;
              if (self.current_observer == null) self.current_observer = nil;

              
              if ($truthy(self.current_observer)) {
                } else {
                return nil
              };
              self.$new_objects()['$[]'](self.current_observer)['$<<'](object);
              if ($truthy(self.$update_exclusions()['$[]'](object))) {
                } else {
                return nil
              };
              return self.$update_exclusions()['$[]'](object)['$<<'](self.current_observer);
            }, TMP_observed$B_2.$$arity = 1);
            
            Opal.defn(self, '$mutated!', TMP_mutated$B_4 = function(object) {
              var TMP_3, self = this;
              if (self.ignore_mutations == null) self.ignore_mutations = nil;
              if (self.rendering_level == null) self.rendering_level = nil;

              
              if ($truthy(self.ignore_mutations)) {
                return nil};
              if ($truthy(self['$delay_updates?'](object))) {
                return self.$schedule_delayed_updater(object)
              } else if ($truthy(self.rendering_level['$zero?']())) {
                if ($truthy(self.$current_observers()['$key?'](object))) {
                  return $send(self.$current_observers()['$[]'](object), 'each', [], (TMP_3 = function(observer){var self = TMP_3.$$s || this;
if (observer == null) observer = nil;
                  return observer.$mutations([object])}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3))
                  } else {
                  return nil
                }
                } else {
                return nil
              };
            }, TMP_mutated$B_4.$$arity = 1);
            
            Opal.defn(self, '$observed?', TMP_observed$q_5 = function(object) {
              var self = this;

              return self.$current_observers()['$key?'](object)
            }, TMP_observed$q_5.$$arity = 1);
            
            Opal.defn(self, '$bulk_update', TMP_bulk_update_6 = function $$bulk_update() {
              var self = this, $iter = TMP_bulk_update_6.$$p, $yield = $iter || nil, saved_bulk_update_flag = nil;
              if (self.bulk_update_flag == null) self.bulk_update_flag = nil;

              if ($iter) TMP_bulk_update_6.$$p = null;
              return (function() { try {
              
              saved_bulk_update_flag = self.bulk_update_flag;
              self.bulk_update_flag = true;
              return Opal.yieldX($yield, []);;
              } finally {
                (self.bulk_update_flag = saved_bulk_update_flag)
              }; })()
            }, TMP_bulk_update_6.$$arity = 0);
            
            Opal.defn(self, '$ignore_bulk_updates', TMP_ignore_bulk_updates_7 = function $$ignore_bulk_updates($a_rest) {
              var self = this, args, $iter = TMP_ignore_bulk_updates_7.$$p, $yield = $iter || nil, saved_ignore_bulk_update_flag = nil;
              if (self.ignore_bulk_update_flag == null) self.ignore_bulk_update_flag = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              if ($iter) TMP_ignore_bulk_updates_7.$$p = null;
              return (function() { try {
              
              saved_ignore_bulk_update_flag = self.ignore_bulk_update_flag;
              self.ignore_bulk_update_flag = true;
              return Opal.yieldX($yield, Opal.to_a(args));;
              } finally {
                (self.ignore_bulk_update_flag = saved_ignore_bulk_update_flag)
              }; })()
            }, TMP_ignore_bulk_updates_7.$$arity = -1);
            
            Opal.defn(self, '$ignore_mutations', TMP_ignore_mutations_8 = function $$ignore_mutations() {
              var self = this, $iter = TMP_ignore_mutations_8.$$p, $yield = $iter || nil, saved_ignore_mutations_flag = nil;
              if (self.ignore_mutations == null) self.ignore_mutations = nil;

              if ($iter) TMP_ignore_mutations_8.$$p = null;
              return (function() { try {
              
              saved_ignore_mutations_flag = self.ignore_mutations;
              self.ignore_mutations = true;
              return Opal.yieldX($yield, []);;
              } finally {
                (self.ignore_mutations = saved_ignore_mutations_flag)
              }; })()
            }, TMP_ignore_mutations_8.$$arity = 0);
            
            Opal.defn(self, '$update_objects_to_observe', TMP_update_objects_to_observe_10 = function $$update_objects_to_observe(observer) {
              var TMP_9, self = this, objects = nil, $writer = nil;
              if (self.current_observer == null) self.current_observer = nil;

              if (observer == null) {
                observer = self.current_observer;
              }
              
              self.$remove_current_observers_and_objects(observer);
              objects = self.$new_objects().$delete(observer);
              if ($truthy(objects)) {
                $send(objects, 'each', [], (TMP_9 = function(object){var self = TMP_9.$$s || this;
if (object == null) object = nil;
                return self.$current_observers()['$[]'](object)['$<<'](observer)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))};
              
              $writer = [observer, objects];
              $send(self.$current_objects(), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            }, TMP_update_objects_to_observe_10.$$arity = -1);
            
            Opal.defn(self, '$remove', TMP_remove_11 = function $$remove(observer) {
              var self = this;
              if (self.removed_observers == null) self.removed_observers = nil;
              if (self.current_observer == null) self.current_observer = nil;

              if (observer == null) {
                observer = self.current_observer;
              }
              
              self.$remove_current_observers_and_objects(observer);
              self.$new_objects().$delete(observer);
              if ($truthy(self.removed_observers)) {
                return self.removed_observers['$<<'](observer)
                } else {
                return nil
              };
            }, TMP_remove_11.$$arity = -1);
            
            Opal.defn(self, '$new_objects', TMP_new_objects_13 = function $$new_objects() {
              var $a, TMP_12, self = this;
              if (self.new_objects == null) self.new_objects = nil;

              return (self.new_objects = ($truthy($a = self.new_objects) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_12 = function(h, k){var self = TMP_12.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
              
                $writer = [k, Opal.const_get_relative($nesting, 'Set').$new()];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))))
            }, TMP_new_objects_13.$$arity = 0);
            
            Opal.defn(self, '$current_observers', TMP_current_observers_15 = function $$current_observers() {
              var $a, TMP_14, self = this;
              if (self.current_observers == null) self.current_observers = nil;

              return (self.current_observers = ($truthy($a = self.current_observers) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_14 = function(h, k){var self = TMP_14.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
              
                $writer = [k, []];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14))))
            }, TMP_current_observers_15.$$arity = 0);
            
            Opal.defn(self, '$current_objects', TMP_current_objects_17 = function $$current_objects() {
              var $a, TMP_16, self = this;
              if (self.current_objects == null) self.current_objects = nil;

              return (self.current_objects = ($truthy($a = self.current_objects) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_16 = function(h, k){var self = TMP_16.$$s || this, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
              
                $writer = [k, []];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16))))
            }, TMP_current_objects_17.$$arity = 0);
            
            Opal.defn(self, '$update_exclusions', TMP_update_exclusions_18 = function $$update_exclusions() {
              var $a, self = this;
              if (self.update_exclusions == null) self.update_exclusions = nil;

              return (self.update_exclusions = ($truthy($a = self.update_exclusions) ? $a : Opal.const_get_relative($nesting, 'Hash').$new()))
            }, TMP_update_exclusions_18.$$arity = 0);
            
            Opal.defn(self, '$remove_current_observers_and_objects', TMP_remove_current_observers_and_objects_20 = function $$remove_current_observers_and_objects(observer) {
              var TMP_19, self = this, deleted_objects = nil;

              
              if ($truthy(observer)) {
                } else {
                self.$raise("state management called outside of watch block")
              };
              deleted_objects = self.$current_objects().$delete(observer);
              if ($truthy(deleted_objects)) {
                } else {
                return nil
              };
              return $send(deleted_objects, 'each', [], (TMP_19 = function(object){var self = TMP_19.$$s || this;
if (object == null) object = nil;
              
                if ($truthy(self.$current_observers()['$key?'](object))) {
                  } else {
                  return nil;
                };
                self.$current_observers()['$[]'](object).$delete(observer);
                if ($truthy(self.$current_observers()['$[]'](object)['$empty?']())) {
                  return self.$current_observers().$delete(object)
                  } else {
                  return nil
                };}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
            }, TMP_remove_current_observers_and_objects_20.$$arity = 1);
            
            Opal.defn(self, '$delay_updates?', TMP_delay_updates$q_21 = function(object) {
              var $a, self = this;
              if (self.ignore_bulk_update_flag == null) self.ignore_bulk_update_flag = nil;
              if (self.bulk_update_flag == null) self.bulk_update_flag = nil;
              if (self.immediate_update == null) self.immediate_update = nil;
              if (self.current_observer == null) self.current_observer = nil;

              
              if ($truthy(self.ignore_bulk_update_flag)) {
                return false};
              if ($truthy(self.bulk_update_flag)) {
                return true};
              if ($truthy(Opal.const_get_relative($nesting, 'Hyperstack')['$on_client?']())) {
                } else {
                return false
              };
              
              return ($truthy($a = self.immediate_update['$!='](self.current_observer)) ? $a : self.current_observer['$!='](object));;
            }, TMP_delay_updates$q_21.$$arity = 1);
            
            Opal.defn(self, '$schedule_delayed_updater', TMP_schedule_delayed_updater_23 = function $$schedule_delayed_updater(object) {
              var $a, TMP_22, self = this, $writer = nil;
              if (self.delayed_updater == null) self.delayed_updater = nil;

              
              
              $writer = [object, Opal.const_get_relative($nesting, 'Set').$new()];
              $send(self.$update_exclusions(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return (self.delayed_updater = ($truthy($a = self.delayed_updater) ? $a : $send(self, 'after', [0], (TMP_22 = function(){var self = TMP_22.$$s || this;

              return self.$run_delayed_updater()}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22))));
            }, TMP_schedule_delayed_updater_23.$$arity = 1);
            
            Opal.defn(self, '$run_delayed_updater', TMP_run_delayed_updater_25 = function $$run_delayed_updater() {
              var TMP_24, self = this, current_update_exclusions = nil;
              if (self.update_exclusions == null) self.update_exclusions = nil;

              return (function() { try {
              
              current_update_exclusions = self.update_exclusions;
              self.update_exclusions = (self.delayed_updater = nil);
              self.removed_observers = Opal.const_get_relative($nesting, 'Set').$new();
              return $send(self.$observers_to_update(current_update_exclusions), 'each', [], (TMP_24 = function(observer, objects){var self = TMP_24.$$s || this;
                if (self.removed_observers == null) self.removed_observers = nil;
if (observer == null) observer = nil;if (objects == null) objects = nil;
              if ($truthy(self.removed_observers['$include?'](observer))) {
                  return nil
                  } else {
                  return observer.$mutations(objects)
                }}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24));
              } finally {
                (self.removed_observers = nil)
              }; })()
            }, TMP_run_delayed_updater_25.$$arity = 0);
            return (Opal.defn(self, '$observers_to_update', TMP_observers_to_update_30 = function $$observers_to_update(exclusions) {
              var TMP_26, TMP_27, self = this;

              return $send($send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_26 = function(hash, key){var self = TMP_26.$$s || this, $writer = nil;
if (hash == null) hash = nil;if (key == null) key = nil;
              
                $writer = [key, Opal.const_get_relative($nesting, 'Array').$new()];
                $send(hash, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26)), 'tap', [], (TMP_27 = function(updates){var self = TMP_27.$$s || this, TMP_28;
if (updates == null) updates = nil;
              return $send(exclusions, 'each', [], (TMP_28 = function(object, excluded_observers){var self = TMP_28.$$s || this, TMP_29;
if (object == null) object = nil;if (excluded_observers == null) excluded_observers = nil;
                if ($truthy(self.$current_observers()['$key?'](object))) {
                    return $send(self.$current_observers()['$[]'](object), 'each', [], (TMP_29 = function(observer){var self = TMP_29.$$s || this;
if (observer == null) observer = nil;
                    
                      if ($truthy(excluded_observers['$include?'](observer))) {
                        return nil;};
                      return updates['$[]'](observer)['$<<'](object);}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29))
                    } else {
                    return nil
                  }}, TMP_28.$$s = self, TMP_28.$$arity = 2, TMP_28))}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
            }, TMP_observers_to_update_30.$$arity = 1), nil) && 'observers_to_update';
          })(Opal.get_singleton_class(self), $nesting);
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/state/variable"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$new', '$[]=', '$-', '$[]', '$legacy_map', '$observed!', '$object_id', '$mutated!', '$observed?']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $State, self = $State = $module($base, 'State');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function($base, $parent_nesting) {
          var $Variable, self = $Variable = $module($base, 'Variable');

          var def = self.$$proto, $nesting = [self].concat($parent_nesting);

          (function(self, $parent_nesting) {
            var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_legacy_map_3, TMP_get_4, TMP_set_5, TMP_observed$q_6;

            
            
            Opal.defn(self, '$legacy_map', TMP_legacy_map_3 = function $$legacy_map() {
              var $a, TMP_1, self = this;
              if (self.legacy_map == null) self.legacy_map = nil;

              return (self.legacy_map = ($truthy($a = self.legacy_map) ? $a : $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_1 = function(h, k){var self = TMP_1.$$s || this, TMP_2, $writer = nil;
if (h == null) h = nil;if (k == null) k = nil;
              
                $writer = [k, $send(Opal.const_get_relative($nesting, 'Hash'), 'new', [], (TMP_2 = function(h2, k2){var self = TMP_2.$$s || this;
if (h2 == null) h2 = nil;if (k2 == null) k2 = nil;
                
                  $writer = [k2, Opal.const_get_relative($nesting, 'Array').$new()];
                  $send(h2, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2))];
                $send(h, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1))))
            }, TMP_legacy_map_3.$$arity = 0);
            
            Opal.defn(self, '$get', TMP_get_4 = function $$get(obj, name) {
              var self = this, map_object = nil;

              
              map_object = self.$legacy_map()['$[]'](obj)['$[]'](name);
              Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$observed!'](map_object.$object_id());
              return map_object['$[]'](0);
            }, TMP_get_4.$$arity = 2);
            
            Opal.defn(self, '$set', TMP_set_5 = function $$set(obj, name, value) {
              var self = this, map_object = nil, $writer = nil;

              
              map_object = self.$legacy_map()['$[]'](obj)['$[]'](name);
              
              $writer = [0, value];
              $send(map_object, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$mutated!'](map_object.$object_id());
              return value;
            }, TMP_set_5.$$arity = 3);
            return (Opal.defn(self, '$observed?', TMP_observed$q_6 = function(obj, name) {
              var self = this, map_object = nil;

              
              map_object = self.$legacy_map()['$[]'](obj)['$[]'](name);
              return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Internal'), 'State'), 'Mapper')['$observed?'](map_object.$object_id());
            }, TMP_observed$q_6.$$arity = 2), nil) && 'observed?';
          })(Opal.get_singleton_class(self), $nesting)
        })($nesting[0], $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/internal/receiver"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$respond_to?', '$unmounted?', '$format_callback', '$each', '$on_dispatch', '$call', '$<<', '$[]', '$objects_to_unmount', '$is_a?', '$last', '$pop', '$lambda', '$send', '$empty?', '$raise']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Internal, self = $Internal = $module($base, 'Internal');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Receiver, self = $Receiver = $module($base, 'Receiver');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_mount_1, TMP_format_callback_5;

          
          
          Opal.defn(self, '$mount', TMP_mount_1 = function $$mount(receiver, $a_rest) {
            var $b, TMP_2, self = this, args, $iter = TMP_mount_1.$$p, block = $iter || nil, callback = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }
            if ($iter) TMP_mount_1.$$p = null;
            
            if ($truthy(($truthy($b = receiver['$respond_to?']("unmounted?")) ? receiver['$unmounted?']() : $b))) {
              return nil};
            callback = self.$format_callback(receiver, args);
            return $send(args, 'each', [], (TMP_2 = function(operation){var self = TMP_2.$$s || this, TMP_3, id = nil;
if (operation == null) operation = nil;
            
              id = $send(operation, 'on_dispatch', [], (TMP_3 = function(params){var self = TMP_3.$$s || this;
if (params == null) params = nil;
              
                if ($truthy(callback)) {
                  callback.$call(params)};
                if ($truthy(block)) {
                  return Opal.yield1(block, params);
                  } else {
                  return nil
                };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
              if ($truthy(receiver['$respond_to?']("unmount"))) {
                return Opal.const_get_relative($nesting, 'AutoUnmount').$objects_to_unmount()['$[]'](receiver)['$<<'](id)
                } else {
                return nil
              };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
          }, TMP_mount_1.$$arity = -2);
          return (Opal.defn(self, '$format_callback', TMP_format_callback_5 = function $$format_callback(receiver, args) {
            var TMP_4, self = this, call_back = nil, method_name = nil, message = nil;

            
            call_back = (function() {if ($truthy(args.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
              
              method_name = args.$pop();
              return $send(self, 'lambda', [], (TMP_4 = function($a_rest){var self = TMP_4.$$s || this, aargs;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                aargs = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  aargs[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send(receiver, 'send', ["" + (method_name)].concat(Opal.to_a(aargs)))}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4));
            } else if ($truthy(args.$last()['$is_a?'](Opal.const_get_relative($nesting, 'Proc')))) {
              return args.$pop()
              } else {
              return nil
            }; return nil; })();
            if ($truthy(args['$empty?']())) {
              } else {
              return call_back
            };
            message = "At least one operation must be passed in to the 'receives' macro";
            return self.$raise(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Legacy'), 'Store'), 'InvalidOperationError'), message);
          }, TMP_format_callback_5.$$arity = 2), nil) && 'format_callback';
        })(Opal.get_singleton_class(self), $nesting)
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/state/observable"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$bulk_update', '$to_proc', '$include', '$each', '$send', '$mount', '$call', '$last', '$observed!', '$mutated!', '$instance_variable_set', '$!', '$instance_variable_get', '$==', '$naming_convention', '$!~', '$!=', '$lambda', '$mutate', '$singleton_class', '$define_method', '$tap', '$instance_exec', '$state_reader', '$state_writer']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var $Observable, self = $Observable = $module($base, 'Observable');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Observable_bulk_update_1, TMP_Observable_included_24;

        
        Opal.defs(self, '$bulk_update', TMP_Observable_bulk_update_1 = function $$bulk_update() {
          var self = this, $iter = TMP_Observable_bulk_update_1.$$p, block = $iter || nil;

          if ($iter) TMP_Observable_bulk_update_1.$$p = null;
          return $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper'), 'bulk_update', [], block.$to_proc())
        }, TMP_Observable_bulk_update_1.$$arity = 0);
        Opal.defs(self, '$included', TMP_Observable_included_24 = function $$included(base) {
          var TMP_2, self = this;

          
          base.$include(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'AutoUnmount'));
          return $send(["singleton_method", "method"], 'each', [], (TMP_2 = function(kind){var self = TMP_2.$$s || this, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9, TMP_12, TMP_15, TMP_19, TMP_23;
if (kind == null) kind = nil;
          
            $send(base, 'send', ["" + "define_" + (kind), "receives"], (TMP_3 = function($a_rest){var self = TMP_3.$$s || this, block, args;

              block = TMP_3.$$p || nil;
              if (block) TMP_3.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'Receiver'), 'mount', [self].concat(Opal.to_a(args)), block.$to_proc())}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3));
            $send(base, 'send', ["" + "define_" + (kind), "observe"], (TMP_4 = function($a_rest){var self = TMP_4.$$s || this, block, args, $b, $c, result = nil;

              block = TMP_4.$$p || nil;
              if (block) TMP_4.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              result = ($truthy($b = ($truthy($c = block) ? block.$call() : $c)) ? $b : args.$last());
              Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper')['$observed!'](self);
              return result;}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4));
            $send(base, 'send', ["" + "define_" + (kind), "mutate"], (TMP_5 = function($a_rest){var self = TMP_5.$$s || this, block, args, $b, $c, result = nil;

              block = TMP_5.$$p || nil;
              if (block) TMP_5.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              result = ($truthy($b = ($truthy($c = block) ? block.$call() : $c)) ? $b : args.$last());
              Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper')['$mutated!'](self);
              return result;}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5));
            $send(base, 'send', ["" + "define_" + (kind), "toggle"], (TMP_6 = function(var$){var self = TMP_6.$$s || this, result = nil;
if (var$ == null) var$ = nil;
            
              var$ = "" + "@" + (var$);
              result = self.$instance_variable_set(var$, self.$instance_variable_get(var$)['$!']());
              Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper')['$mutated!'](self);
              return result;}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
            if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
              $send(base, 'send', ["" + "define_" + (kind), "set"], (TMP_7 = function(var$){var self = TMP_7.$$s || this, $a, TMP_8, dont_mutate = nil;
if (var$ == null) var$ = nil;
              
                if (Opal.const_get_relative($nesting, 'Hyperstack').$naming_convention()['$==']("prefix_state")) {
                  if ($truthy(var$['$!~'](/^_/))) {
                    var$ = "" + "_" + (var$)}
                } else if ($truthy(($truthy($a = Opal.const_get_relative($nesting, 'Hyperstack').$naming_convention()['$!=']("none")) ? var$['$!~'](/^[a-z]/) : $a))) {
                  dont_mutate = true};
                return $send(self, 'lambda', [], (TMP_8 = function(val){var self = TMP_8.$$s || this;
if (val == null) val = nil;
                
                  self[var$] = val;
                  if ($truthy(dont_mutate)) {
                    return nil
                    } else {
                    return self.$mutate()
                  };}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7))
              } else {
              nil
            };
            $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "observer"], (TMP_9 = function(name){var self = TMP_9.$$s || this, block, TMP_10;

              block = TMP_9.$$p || nil;
              if (block) TMP_9.$$p = null;if (name == null) name = nil;
            return $send(self, 'define_method', [name], (TMP_10 = function($a_rest){var self = TMP_10.$$s || this, args, TMP_11;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send($send(self, 'instance_exec', Opal.to_a(args), block.$to_proc()), 'tap', [], (TMP_11 = function(){var self = TMP_11.$$s || this;

                return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper')['$observed!'](self)}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11))}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9));
            $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "mutator"], (TMP_12 = function(name){var self = TMP_12.$$s || this, block, TMP_13;

              block = TMP_12.$$p || nil;
              if (block) TMP_12.$$p = null;if (name == null) name = nil;
            return $send(self, 'define_method', [name], (TMP_13 = function($a_rest){var self = TMP_13.$$s || this, args, TMP_14;

                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                args = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  args[$arg_idx - 0] = arguments[$arg_idx];
                }
              return $send($send(self, 'instance_exec', Opal.to_a(args), block.$to_proc()), 'tap', [], (TMP_14 = function(){var self = TMP_14.$$s || this;

                return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper')['$mutated!'](self)}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14))}, TMP_13.$$s = self, TMP_13.$$arity = -1, TMP_13))}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
            $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "state_reader"], (TMP_15 = function($a_rest){var self = TMP_15.$$s || this, names, TMP_16;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              names = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                names[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(names, 'each', [], (TMP_16 = function(name){var self = TMP_16.$$s || this, $a, TMP_17, var_name = nil;
if (name == null) name = nil;
              
                var_name = (function() {if ($truthy((($a = Opal.const_get_relative($nesting, 'Hyperstack').$naming_convention()['$==']("prefix_state")) ? name['$!~'](/^_/) : Opal.const_get_relative($nesting, 'Hyperstack').$naming_convention()['$==']("prefix_state")))) {
                  return "" + "_" + (name)
                  } else {
                  return name
                }; return nil; })();
                return $send(self, 'define_method', [name], (TMP_17 = function(){var self = TMP_17.$$s || this, TMP_18;

                return $send(self.$instance_variable_get("" + "@" + (var_name)), 'tap', [], (TMP_18 = function(){var self = TMP_18.$$s || this;

                  return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper')['$observed!'](self)}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18))}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17));}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = -1, TMP_15));
            $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "state_writer"], (TMP_19 = function($a_rest){var self = TMP_19.$$s || this, names, TMP_20;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              names = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                names[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(names, 'each', [], (TMP_20 = function(name){var self = TMP_20.$$s || this, $a, TMP_21, var_name = nil;
if (name == null) name = nil;
              
                var_name = (function() {if ($truthy((($a = Opal.const_get_relative($nesting, 'Hyperstack').$naming_convention()['$==']("prefix_state")) ? name['$!~'](/^_/) : Opal.const_get_relative($nesting, 'Hyperstack').$naming_convention()['$==']("prefix_state")))) {
                  return "" + "_" + (name)
                  } else {
                  return name
                }; return nil; })();
                return $send(self, 'define_method', ["" + (name) + "="], (TMP_21 = function(x){var self = TMP_21.$$s || this, TMP_22;
if (x == null) x = nil;
                return $send(self.$instance_variable_set("" + "@" + (var_name), x), 'tap', [], (TMP_22 = function(){var self = TMP_22.$$s || this;

                  return Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Internal'), 'State'), 'Mapper')['$mutated!'](self)}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22))}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21));}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20))}, TMP_19.$$s = self, TMP_19.$$arity = -1, TMP_19));
            return $send(base.$singleton_class(), 'send', ["" + "define_" + (kind), "state_accessor"], (TMP_23 = function($a_rest){var self = TMP_23.$$s || this, names;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              names = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                names[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              $send(self, 'state_reader', Opal.to_a(names));
              return $send(self, 'state_writer', Opal.to_a(names));}, TMP_23.$$s = self, TMP_23.$$arity = -1, TMP_23));}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        }, TMP_Observable_included_24.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyperstack/state/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $State, self = $State = $module($base, 'State');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      Opal.const_set($nesting[0], 'VERSION', "1.0.alpha1.5")
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-state"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$import', '$!=']);
  
  self.$require("set");
  self.$require("hyperstack-config");
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyper-state");
  self.$require("hyperstack/internal/callbacks");
  self.$require("hyperstack/internal/auto_unmount");
  self.$require("hyperstack/internal/state/mapper");
  self.$require("hyperstack/internal/state/variable");
  self.$require("hyperstack/internal/auto_unmount");
  self.$require("hyperstack/internal/receiver");
  self.$require("hyperstack/state/observable");
  self.$require("hyperstack/state/observer");
  self.$require("hyperstack/state/version");
  if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
    return nil
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return Opal.const_set($nesting[0], 'VERSION', "1.0.alpha1.5")
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["js"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$insert', '$<<', '$global', '$extend']);
  return (function($base, $parent_nesting) {
    var $JS, self = $JS = $module($base, 'JS');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_JS_delete_1, TMP_JS_global_2, TMP_JS_in_3, TMP_JS_instanceof_4, TMP_JS_new_5, TMP_JS_new_6, TMP_JS_typeof_7, TMP_JS_void_8, TMP_JS_call_9;

    
    
    Opal.defn(self, '$delete', TMP_JS_delete_1 = function(object, property) {
      var self = this;

      return delete object[property]
    }, TMP_JS_delete_1.$$arity = 2);
    
    Opal.defn(self, '$global', TMP_JS_global_2 = function $$global() {
      var self = this;

      return Opal.global
    }, TMP_JS_global_2.$$arity = 0);
    
    Opal.defn(self, '$in', TMP_JS_in_3 = function(property, object) {
      var self = this;

      return property in object
    }, TMP_JS_in_3.$$arity = 2);
    
    Opal.defn(self, '$instanceof', TMP_JS_instanceof_4 = function(value, func) {
      var self = this;

      return value instanceof func
    }, TMP_JS_instanceof_4.$$arity = 2);
    if ($truthy(typeof Function.prototype.bind == 'function')) {
      
      Opal.defn(self, '$new', TMP_JS_new_5 = function(func, $a_rest) {
        var self = this, args, $iter = TMP_JS_new_5.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_JS_new_5.$$p = null;
        
        args.$insert(0, this);
        if ($truthy(block)) {
          args['$<<'](block)};
        return new (func.bind.apply(func, args))();
      }, TMP_JS_new_5.$$arity = -2)
      } else {
      
      Opal.defn(self, '$new', TMP_JS_new_6 = function(func, $a_rest) {
        var self = this, args, $iter = TMP_JS_new_6.$$p, block = $iter || nil, f = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_JS_new_6.$$p = null;
        
        if ($truthy(block)) {
          args['$<<'](block)};
        f = function(){return func.apply(this, args)};
        f["prototype"] = func["prototype"];
        return new f();
      }, TMP_JS_new_6.$$arity = -2)
    };
    
    Opal.defn(self, '$typeof', TMP_JS_typeof_7 = function(value) {
      var self = this;

      return typeof value
    }, TMP_JS_typeof_7.$$arity = 1);
    
    Opal.defn(self, '$void', TMP_JS_void_8 = function(expr) {
      var self = this;

      return void expr
    }, TMP_JS_void_8.$$arity = 1);
    
    Opal.defn(self, '$call', TMP_JS_call_9 = function $$call(func, $a_rest) {
      var self = this, args, $iter = TMP_JS_call_9.$$p, block = $iter || nil, g = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_JS_call_9.$$p = null;
      
      g = self.$global();
      if ($truthy(block)) {
        args['$<<'](block)};
      return g[func].apply(g, args);
    }, TMP_JS_call_9.$$arity = -2);
    Opal.alias(self, "method_missing", "call");
    self.$extend(self);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["bigdecimal/kernel"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new']);
  return (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_BigDecimal_1;

    
    Opal.defn(self, '$BigDecimal', TMP_Kernel_BigDecimal_1 = function $$BigDecimal(initial, digits) {
      var self = this;

      if (digits == null) {
        digits = 0;
      }
      return Opal.const_get_relative($nesting, 'BigDecimal').$new(initial, digits)
    }, TMP_Kernel_BigDecimal_1.$$arity = -2)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["bigdecimal/bignumber"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    function $BigDecimal(){};
    var self = $BigDecimal = $klass($base, $super, 'BigDecimal', $BigDecimal);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    var define = function (f) { Opal.const_set(self, 'BigNumber', f()); };
    define.amd = true;

    /* jshint ignore:start */
    /* bignumber.js v2.1.4 https://github.com/MikeMcl/bignumber.js/LICENCE */
    !function(e){"use strict";function n(e){function E(e,n){var t,r,i,o,u,s,f=this;if(!(f instanceof E))return j&&L(26,"constructor call without new",e),new E(e,n);if(null!=n&&H(n,2,64,M,"base")){if(n=0|n,s=e+"",10==n)return f=new E(e instanceof E?e:s),U(f,P+f.e+1,k);if((o="number"==typeof e)&&0*e!=0||!new RegExp("^-?"+(t="["+N.slice(0,n)+"]+")+"(?:\\."+t+")?$",37>n?"i":"").test(s))return h(f,s,o,n);o?(f.s=0>1/e?(s=s.slice(1),-1):1,j&&s.replace(/^0\.0*|\./,"").length>15&&L(M,v,e),o=!1):f.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1,s=D(s,10,n,f.s)}else{if(e instanceof E)return f.s=e.s,f.e=e.e,f.c=(e=e.c)?e.slice():e,void(M=0);if((o="number"==typeof e)&&0*e==0){if(f.s=0>1/e?(e=-e,-1):1,e===~~e){for(r=0,i=e;i>=10;i/=10,r++);return f.e=r,f.c=[e],void(M=0)}s=e+""}else{if(!g.test(s=e+""))return h(f,s,o);f.s=45===s.charCodeAt(0)?(s=s.slice(1),-1):1}}for((r=s.indexOf("."))>-1&&(s=s.replace(".","")),(i=s.search(/e/i))>0?(0>r&&(r=i),r+=+s.slice(i+1),s=s.substring(0,i)):0>r&&(r=s.length),i=0;48===s.charCodeAt(i);i++);for(u=s.length;48===s.charCodeAt(--u););if(s=s.slice(i,u+1))if(u=s.length,o&&j&&u>15&&L(M,v,f.s*e),r=r-i-1,r>z)f.c=f.e=null;else if(G>r)f.c=[f.e=0];else{if(f.e=r,f.c=[],i=(r+1)%O,0>r&&(i+=O),u>i){for(i&&f.c.push(+s.slice(0,i)),u-=O;u>i;)f.c.push(+s.slice(i,i+=O));s=s.slice(i),i=O-s.length}else i-=u;for(;i--;s+="0");f.c.push(+s)}else f.c=[f.e=0];M=0}function D(e,n,t,i){var o,u,f,c,a,h,g,p=e.indexOf("."),d=P,m=k;for(37>t&&(e=e.toLowerCase()),p>=0&&(f=J,J=0,e=e.replace(".",""),g=new E(t),a=g.pow(e.length-p),J=f,g.c=s(l(r(a.c),a.e),10,n),g.e=g.c.length),h=s(e,t,n),u=f=h.length;0==h[--f];h.pop());if(!h[0])return"0";if(0>p?--u:(a.c=h,a.e=u,a.s=i,a=C(a,g,d,m,n),h=a.c,c=a.r,u=a.e),o=u+d+1,p=h[o],f=n/2,c=c||0>o||null!=h[o+1],c=4>m?(null!=p||c)&&(0==m||m==(a.s<0?3:2)):p>f||p==f&&(4==m||c||6==m&&1&h[o-1]||m==(a.s<0?8:7)),1>o||!h[0])e=c?l("1",-d):"0";else{if(h.length=o,c)for(--n;++h[--o]>n;)h[o]=0,o||(++u,h.unshift(1));for(f=h.length;!h[--f];);for(p=0,e="";f>=p;e+=N.charAt(h[p++]));e=l(e,u)}return e}function F(e,n,t,i){var o,u,s,c,a;if(t=null!=t&&H(t,0,8,i,w)?0|t:k,!e.c)return e.toString();if(o=e.c[0],s=e.e,null==n)a=r(e.c),a=19==i||24==i&&B>=s?f(a,s):l(a,s);else if(e=U(new E(e),n,t),u=e.e,a=r(e.c),c=a.length,19==i||24==i&&(u>=n||B>=u)){for(;n>c;a+="0",c++);a=f(a,u)}else if(n-=s,a=l(a,u),u+1>c){if(--n>0)for(a+=".";n--;a+="0");}else if(n+=u-c,n>0)for(u+1==c&&(a+=".");n--;a+="0");return e.s<0&&o?"-"+a:a}function _(e,n){var t,r,i=0;for(u(e[0])&&(e=e[0]),t=new E(e[0]);++i<e.length;){if(r=new E(e[i]),!r.s){t=r;break}n.call(t,r)&&(t=r)}return t}function x(e,n,t,r,i){return(n>e||e>t||e!=c(e))&&L(r,(i||"decimal places")+(n>e||e>t?" out of range":" not an integer"),e),!0}function I(e,n,t){for(var r=1,i=n.length;!n[--i];n.pop());for(i=n[0];i>=10;i/=10,r++);return(t=r+t*O-1)>z?e.c=e.e=null:G>t?e.c=[e.e=0]:(e.e=t,e.c=n),e}function L(e,n,t){var r=new Error(["new BigNumber","cmp","config","div","divToInt","eq","gt","gte","lt","lte","minus","mod","plus","precision","random","round","shift","times","toDigits","toExponential","toFixed","toFormat","toFraction","pow","toPrecision","toString","BigNumber"][e]+"() "+n+": "+t);throw r.name="BigNumber Error",M=0,r}function U(e,n,t,r){var i,o,u,s,f,l,c,a=e.c,h=S;if(a){e:{for(i=1,s=a[0];s>=10;s/=10,i++);if(o=n-i,0>o)o+=O,u=n,f=a[l=0],c=f/h[i-u-1]%10|0;else if(l=p((o+1)/O),l>=a.length){if(!r)break e;for(;a.length<=l;a.push(0));f=c=0,i=1,o%=O,u=o-O+1}else{for(f=s=a[l],i=1;s>=10;s/=10,i++);o%=O,u=o-O+i,c=0>u?0:f/h[i-u-1]%10|0}if(r=r||0>n||null!=a[l+1]||(0>u?f:f%h[i-u-1]),r=4>t?(c||r)&&(0==t||t==(e.s<0?3:2)):c>5||5==c&&(4==t||r||6==t&&(o>0?u>0?f/h[i-u]:0:a[l-1])%10&1||t==(e.s<0?8:7)),1>n||!a[0])return a.length=0,r?(n-=e.e+1,a[0]=h[(O-n%O)%O],e.e=-n||0):a[0]=e.e=0,e;if(0==o?(a.length=l,s=1,l--):(a.length=l+1,s=h[O-o],a[l]=u>0?d(f/h[i-u]%h[u])*s:0),r)for(;;){if(0==l){for(o=1,u=a[0];u>=10;u/=10,o++);for(u=a[0]+=s,s=1;u>=10;u/=10,s++);o!=s&&(e.e++,a[0]==b&&(a[0]=1));break}if(a[l]+=s,a[l]!=b)break;a[l--]=0,s=1}for(o=a.length;0===a[--o];a.pop());}e.e>z?e.c=e.e=null:e.e<G&&(e.c=[e.e=0])}return e}var C,M=0,T=E.prototype,q=new E(1),P=20,k=4,B=-7,$=21,G=-1e7,z=1e7,j=!0,H=x,V=!1,W=1,J=100,X={decimalSeparator:".",groupSeparator:",",groupSize:3,secondaryGroupSize:0,fractionGroupSeparator:" ",fractionGroupSize:0};return E.another=n,E.ROUND_UP=0,E.ROUND_DOWN=1,E.ROUND_CEIL=2,E.ROUND_FLOOR=3,E.ROUND_HALF_UP=4,E.ROUND_HALF_DOWN=5,E.ROUND_HALF_EVEN=6,E.ROUND_HALF_CEIL=7,E.ROUND_HALF_FLOOR=8,E.EUCLID=9,E.config=function(){var e,n,t=0,r={},i=arguments,s=i[0],f=s&&"object"==typeof s?function(){return s.hasOwnProperty(n)?null!=(e=s[n]):void 0}:function(){return i.length>t?null!=(e=i[t++]):void 0};return f(n="DECIMAL_PLACES")&&H(e,0,A,2,n)&&(P=0|e),r[n]=P,f(n="ROUNDING_MODE")&&H(e,0,8,2,n)&&(k=0|e),r[n]=k,f(n="EXPONENTIAL_AT")&&(u(e)?H(e[0],-A,0,2,n)&&H(e[1],0,A,2,n)&&(B=0|e[0],$=0|e[1]):H(e,-A,A,2,n)&&(B=-($=0|(0>e?-e:e)))),r[n]=[B,$],f(n="RANGE")&&(u(e)?H(e[0],-A,-1,2,n)&&H(e[1],1,A,2,n)&&(G=0|e[0],z=0|e[1]):H(e,-A,A,2,n)&&(0|e?G=-(z=0|(0>e?-e:e)):j&&L(2,n+" cannot be zero",e))),r[n]=[G,z],f(n="ERRORS")&&(e===!!e||1===e||0===e?(M=0,H=(j=!!e)?x:o):j&&L(2,n+m,e)),r[n]=j,f(n="CRYPTO")&&(e===!!e||1===e||0===e?(V=!(!e||!a),e&&!V&&j&&L(2,"crypto unavailable",a)):j&&L(2,n+m,e)),r[n]=V,f(n="MODULO_MODE")&&H(e,0,9,2,n)&&(W=0|e),r[n]=W,f(n="POW_PRECISION")&&H(e,0,A,2,n)&&(J=0|e),r[n]=J,f(n="FORMAT")&&("object"==typeof e?X=e:j&&L(2,n+" not an object",e)),r[n]=X,r},E.max=function(){return _(arguments,T.lt)},E.min=function(){return _(arguments,T.gt)},E.random=function(){var e=9007199254740992,n=Math.random()*e&2097151?function(){return d(Math.random()*e)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)};return function(e){var t,r,i,o,u,s=0,f=[],l=new E(q);if(e=null!=e&&H(e,0,A,14)?0|e:P,o=p(e/O),V)if(a&&a.getRandomValues){for(t=a.getRandomValues(new Uint32Array(o*=2));o>s;)u=131072*t[s]+(t[s+1]>>>11),u>=9e15?(r=a.getRandomValues(new Uint32Array(2)),t[s]=r[0],t[s+1]=r[1]):(f.push(u%1e14),s+=2);s=o/2}else if(a&&a.randomBytes){for(t=a.randomBytes(o*=7);o>s;)u=281474976710656*(31&t[s])+1099511627776*t[s+1]+4294967296*t[s+2]+16777216*t[s+3]+(t[s+4]<<16)+(t[s+5]<<8)+t[s+6],u>=9e15?a.randomBytes(7).copy(t,s):(f.push(u%1e14),s+=7);s=o/7}else j&&L(14,"crypto unavailable",a);if(!s)for(;o>s;)u=n(),9e15>u&&(f[s++]=u%1e14);for(o=f[--s],e%=O,o&&e&&(u=S[O-e],f[s]=d(o/u)*u);0===f[s];f.pop(),s--);if(0>s)f=[i=0];else{for(i=-1;0===f[0];f.shift(),i-=O);for(s=1,u=f[0];u>=10;u/=10,s++);O>s&&(i-=O-s)}return l.e=i,l.c=f,l}}(),C=function(){function e(e,n,t){var r,i,o,u,s=0,f=e.length,l=n%R,c=n/R|0;for(e=e.slice();f--;)o=e[f]%R,u=e[f]/R|0,r=c*o+u*l,i=l*o+r%R*R+s,s=(i/t|0)+(r/R|0)+c*u,e[f]=i%t;return s&&e.unshift(s),e}function n(e,n,t,r){var i,o;if(t!=r)o=t>r?1:-1;else for(i=o=0;t>i;i++)if(e[i]!=n[i]){o=e[i]>n[i]?1:-1;break}return o}function r(e,n,t,r){for(var i=0;t--;)e[t]-=i,i=e[t]<n[t]?1:0,e[t]=i*r+e[t]-n[t];for(;!e[0]&&e.length>1;e.shift());}return function(i,o,u,s,f){var l,c,a,h,g,p,m,w,v,N,y,S,R,A,D,F,_,x=i.s==o.s?1:-1,I=i.c,L=o.c;if(!(I&&I[0]&&L&&L[0]))return new E(i.s&&o.s&&(I?!L||I[0]!=L[0]:L)?I&&0==I[0]||!L?0*x:x/0:NaN);for(w=new E(x),v=w.c=[],c=i.e-o.e,x=u+c+1,f||(f=b,c=t(i.e/O)-t(o.e/O),x=x/O|0),a=0;L[a]==(I[a]||0);a++);if(L[a]>(I[a]||0)&&c--,0>x)v.push(1),h=!0;else{for(A=I.length,F=L.length,a=0,x+=2,g=d(f/(L[0]+1)),g>1&&(L=e(L,g,f),I=e(I,g,f),F=L.length,A=I.length),R=F,N=I.slice(0,F),y=N.length;F>y;N[y++]=0);_=L.slice(),_.unshift(0),D=L[0],L[1]>=f/2&&D++;do{if(g=0,l=n(L,N,F,y),0>l){if(S=N[0],F!=y&&(S=S*f+(N[1]||0)),g=d(S/D),g>1)for(g>=f&&(g=f-1),p=e(L,g,f),m=p.length,y=N.length;1==n(p,N,m,y);)g--,r(p,m>F?_:L,m,f),m=p.length,l=1;else 0==g&&(l=g=1),p=L.slice(),m=p.length;if(y>m&&p.unshift(0),r(N,p,y,f),y=N.length,-1==l)for(;n(L,N,F,y)<1;)g++,r(N,y>F?_:L,y,f),y=N.length}else 0===l&&(g++,N=[0]);v[a++]=g,N[0]?N[y++]=I[R]||0:(N=[I[R]],y=1)}while((R++<A||null!=N[0])&&x--);h=null!=N[0],v[0]||v.shift()}if(f==b){for(a=1,x=v[0];x>=10;x/=10,a++);U(w,u+(w.e=a+c*O-1)+1,s,h)}else w.e=c,w.r=+h;return w}}(),h=function(){var e=/^(-?)0([xbo])(?=\w[\w.]*$)/i,n=/^([^.]+)\.$/,t=/^\.([^.]+)$/,r=/^-?(Infinity|NaN)$/,i=/^\s*\+(?=[\w.])|^\s+|\s+$/g;return function(o,u,s,f){var l,c=s?u:u.replace(i,"");if(r.test(c))o.s=isNaN(c)?null:0>c?-1:1;else{if(!s&&(c=c.replace(e,function(e,n,t){return l="x"==(t=t.toLowerCase())?16:"b"==t?2:8,f&&f!=l?e:n}),f&&(l=f,c=c.replace(n,"$1").replace(t,"0.$1")),u!=c))return new E(c,l);j&&L(M,"not a"+(f?" base "+f:"")+" number",u),o.s=null}o.c=o.e=null,M=0}}(),T.absoluteValue=T.abs=function(){var e=new E(this);return e.s<0&&(e.s=1),e},T.ceil=function(){return U(new E(this),this.e+1,2)},T.comparedTo=T.cmp=function(e,n){return M=1,i(this,new E(e,n))},T.decimalPlaces=T.dp=function(){var e,n,r=this.c;if(!r)return null;if(e=((n=r.length-1)-t(this.e/O))*O,n=r[n])for(;n%10==0;n/=10,e--);return 0>e&&(e=0),e},T.dividedBy=T.div=function(e,n){return M=3,C(this,new E(e,n),P,k)},T.dividedToIntegerBy=T.divToInt=function(e,n){return M=4,C(this,new E(e,n),0,1)},T.equals=T.eq=function(e,n){return M=5,0===i(this,new E(e,n))},T.floor=function(){return U(new E(this),this.e+1,3)},T.greaterThan=T.gt=function(e,n){return M=6,i(this,new E(e,n))>0},T.greaterThanOrEqualTo=T.gte=function(e,n){return M=7,1===(n=i(this,new E(e,n)))||0===n},T.isFinite=function(){return!!this.c},T.isInteger=T.isInt=function(){return!!this.c&&t(this.e/O)>this.c.length-2},T.isNaN=function(){return!this.s},T.isNegative=T.isNeg=function(){return this.s<0},T.isZero=function(){return!!this.c&&0==this.c[0]},T.lessThan=T.lt=function(e,n){return M=8,i(this,new E(e,n))<0},T.lessThanOrEqualTo=T.lte=function(e,n){return M=9,-1===(n=i(this,new E(e,n)))||0===n},T.minus=T.sub=function(e,n){var r,i,o,u,s=this,f=s.s;if(M=10,e=new E(e,n),n=e.s,!f||!n)return new E(NaN);if(f!=n)return e.s=-n,s.plus(e);var l=s.e/O,c=e.e/O,a=s.c,h=e.c;if(!l||!c){if(!a||!h)return a?(e.s=-n,e):new E(h?s:NaN);if(!a[0]||!h[0])return h[0]?(e.s=-n,e):new E(a[0]?s:3==k?-0:0)}if(l=t(l),c=t(c),a=a.slice(),f=l-c){for((u=0>f)?(f=-f,o=a):(c=l,o=h),o.reverse(),n=f;n--;o.push(0));o.reverse()}else for(i=(u=(f=a.length)<(n=h.length))?f:n,f=n=0;i>n;n++)if(a[n]!=h[n]){u=a[n]<h[n];break}if(u&&(o=a,a=h,h=o,e.s=-e.s),n=(i=h.length)-(r=a.length),n>0)for(;n--;a[r++]=0);for(n=b-1;i>f;){if(a[--i]<h[i]){for(r=i;r&&!a[--r];a[r]=n);--a[r],a[i]+=b}a[i]-=h[i]}for(;0==a[0];a.shift(),--c);return a[0]?I(e,a,c):(e.s=3==k?-1:1,e.c=[e.e=0],e)},T.modulo=T.mod=function(e,n){var t,r,i=this;return M=11,e=new E(e,n),!i.c||!e.s||e.c&&!e.c[0]?new E(NaN):!e.c||i.c&&!i.c[0]?new E(i):(9==W?(r=e.s,e.s=1,t=C(i,e,0,3),e.s=r,t.s*=r):t=C(i,e,0,W),i.minus(t.times(e)))},T.negated=T.neg=function(){var e=new E(this);return e.s=-e.s||null,e},T.plus=T.add=function(e,n){var r,i=this,o=i.s;if(M=12,e=new E(e,n),n=e.s,!o||!n)return new E(NaN);if(o!=n)return e.s=-n,i.minus(e);var u=i.e/O,s=e.e/O,f=i.c,l=e.c;if(!u||!s){if(!f||!l)return new E(o/0);if(!f[0]||!l[0])return l[0]?e:new E(f[0]?i:0*o)}if(u=t(u),s=t(s),f=f.slice(),o=u-s){for(o>0?(s=u,r=l):(o=-o,r=f),r.reverse();o--;r.push(0));r.reverse()}for(o=f.length,n=l.length,0>o-n&&(r=l,l=f,f=r,n=o),o=0;n;)o=(f[--n]=f[n]+l[n]+o)/b|0,f[n]%=b;return o&&(f.unshift(o),++s),I(e,f,s)},T.precision=T.sd=function(e){var n,t,r=this,i=r.c;if(null!=e&&e!==!!e&&1!==e&&0!==e&&(j&&L(13,"argument"+m,e),e!=!!e&&(e=null)),!i)return null;if(t=i.length-1,n=t*O+1,t=i[t]){for(;t%10==0;t/=10,n--);for(t=i[0];t>=10;t/=10,n++);}return e&&r.e+1>n&&(n=r.e+1),n},T.round=function(e,n){var t=new E(this);return(null==e||H(e,0,A,15))&&U(t,~~e+this.e+1,null!=n&&H(n,0,8,15,w)?0|n:k),t},T.shift=function(e){var n=this;return H(e,-y,y,16,"argument")?n.times("1e"+c(e)):new E(n.c&&n.c[0]&&(-y>e||e>y)?n.s*(0>e?0:1/0):n)},T.squareRoot=T.sqrt=function(){var e,n,i,o,u,s=this,f=s.c,l=s.s,c=s.e,a=P+4,h=new E("0.5");if(1!==l||!f||!f[0])return new E(!l||0>l&&(!f||f[0])?NaN:f?s:1/0);if(l=Math.sqrt(+s),0==l||l==1/0?(n=r(f),(n.length+c)%2==0&&(n+="0"),l=Math.sqrt(n),c=t((c+1)/2)-(0>c||c%2),l==1/0?n="1e"+c:(n=l.toExponential(),n=n.slice(0,n.indexOf("e")+1)+c),i=new E(n)):i=new E(l+""),i.c[0])for(c=i.e,l=c+a,3>l&&(l=0);;)if(u=i,i=h.times(u.plus(C(s,u,a,1))),r(u.c).slice(0,l)===(n=r(i.c)).slice(0,l)){if(i.e<c&&--l,n=n.slice(l-3,l+1),"9999"!=n&&(o||"4999"!=n)){(!+n||!+n.slice(1)&&"5"==n.charAt(0))&&(U(i,i.e+P+2,1),e=!i.times(i).eq(s));break}if(!o&&(U(u,u.e+P+2,0),u.times(u).eq(s))){i=u;break}a+=4,l+=4,o=1}return U(i,i.e+P+1,k,e)},T.times=T.mul=function(e,n){var r,i,o,u,s,f,l,c,a,h,g,p,d,m,w,v=this,N=v.c,y=(M=17,e=new E(e,n)).c;if(!(N&&y&&N[0]&&y[0]))return!v.s||!e.s||N&&!N[0]&&!y||y&&!y[0]&&!N?e.c=e.e=e.s=null:(e.s*=v.s,N&&y?(e.c=[0],e.e=0):e.c=e.e=null),e;for(i=t(v.e/O)+t(e.e/O),e.s*=v.s,l=N.length,h=y.length,h>l&&(d=N,N=y,y=d,o=l,l=h,h=o),o=l+h,d=[];o--;d.push(0));for(m=b,w=R,o=h;--o>=0;){for(r=0,g=y[o]%w,p=y[o]/w|0,s=l,u=o+s;u>o;)c=N[--s]%w,a=N[s]/w|0,f=p*c+a*g,c=g*c+f%w*w+d[u]+r,r=(c/m|0)+(f/w|0)+p*a,d[u--]=c%m;d[u]=r}return r?++i:d.shift(),I(e,d,i)},T.toDigits=function(e,n){var t=new E(this);return e=null!=e&&H(e,1,A,18,"precision")?0|e:null,n=null!=n&&H(n,0,8,18,w)?0|n:k,e?U(t,e,n):t},T.toExponential=function(e,n){return F(this,null!=e&&H(e,0,A,19)?~~e+1:null,n,19)},T.toFixed=function(e,n){return F(this,null!=e&&H(e,0,A,20)?~~e+this.e+1:null,n,20)},T.toFormat=function(e,n){var t=F(this,null!=e&&H(e,0,A,21)?~~e+this.e+1:null,n,21);if(this.c){var r,i=t.split("."),o=+X.groupSize,u=+X.secondaryGroupSize,s=X.groupSeparator,f=i[0],l=i[1],c=this.s<0,a=c?f.slice(1):f,h=a.length;if(u&&(r=o,o=u,u=r,h-=r),o>0&&h>0){for(r=h%o||o,f=a.substr(0,r);h>r;r+=o)f+=s+a.substr(r,o);u>0&&(f+=s+a.slice(r)),c&&(f="-"+f)}t=l?f+X.decimalSeparator+((u=+X.fractionGroupSize)?l.replace(new RegExp("\\d{"+u+"}\\B","g"),"$&"+X.fractionGroupSeparator):l):f}return t},T.toFraction=function(e){var n,t,i,o,u,s,f,l,c,a=j,h=this,g=h.c,p=new E(q),d=t=new E(q),m=f=new E(q);if(null!=e&&(j=!1,s=new E(e),j=a,(!(a=s.isInt())||s.lt(q))&&(j&&L(22,"max denominator "+(a?"out of range":"not an integer"),e),e=!a&&s.c&&U(s,s.e+1,1).gte(q)?s:null)),!g)return h.toString();for(c=r(g),o=p.e=c.length-h.e-1,p.c[0]=S[(u=o%O)<0?O+u:u],e=!e||s.cmp(p)>0?o>0?p:d:s,u=z,z=1/0,s=new E(c),f.c[0]=0;l=C(s,p,0,1),i=t.plus(l.times(m)),1!=i.cmp(e);)t=m,m=i,d=f.plus(l.times(i=d)),f=i,p=s.minus(l.times(i=p)),s=i;return i=C(e.minus(t),m,0,1),f=f.plus(i.times(d)),t=t.plus(i.times(m)),f.s=d.s=h.s,o*=2,n=C(d,m,o,k).minus(h).abs().cmp(C(f,t,o,k).minus(h).abs())<1?[d.toString(),m.toString()]:[f.toString(),t.toString()],z=u,n},T.toNumber=function(){return+this},T.toPower=T.pow=function(e){var n,t,r=d(0>e?-e:+e),i=this;if(!H(e,-y,y,23,"exponent")&&(!isFinite(e)||r>y&&(e/=0)||parseFloat(e)!=e&&!(e=NaN)))return new E(Math.pow(+i,e));for(n=J?p(J/O+2):0,t=new E(q);;){if(r%2){if(t=t.times(i),!t.c)break;n&&t.c.length>n&&(t.c.length=n)}if(r=d(r/2),!r)break;i=i.times(i),n&&i.c&&i.c.length>n&&(i.c.length=n)}return 0>e&&(t=q.div(t)),n?U(t,J,k):t},T.toPrecision=function(e,n){return F(this,null!=e&&H(e,1,A,24,"precision")?0|e:null,n,24)},T.toString=function(e){var n,t=this,i=t.s,o=t.e;return null===o?i?(n="Infinity",0>i&&(n="-"+n)):n="NaN":(n=r(t.c),n=null!=e&&H(e,2,64,25,"base")?D(l(n,o),0|e,10,i):B>=o||o>=$?f(n,o):l(n,o),0>i&&t.c[0]&&(n="-"+n)),n},T.truncated=T.trunc=function(){return U(new E(this),this.e+1,1)},T.valueOf=T.toJSON=function(){var e,n=this,t=n.e;return null===t?n.toString():(e=r(n.c),e=B>=t||t>=$?f(e,t):l(e,t),n.s<0?"-"+e:e)},null!=e&&E.config(e),E}function t(e){var n=0|e;return e>0||e===n?n:n-1}function r(e){for(var n,t,r=1,i=e.length,o=e[0]+"";i>r;){for(n=e[r++]+"",t=O-n.length;t--;n="0"+n);o+=n}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function i(e,n){var t,r,i=e.c,o=n.c,u=e.s,s=n.s,f=e.e,l=n.e;if(!u||!s)return null;if(t=i&&!i[0],r=o&&!o[0],t||r)return t?r?0:-s:u;if(u!=s)return u;if(t=0>u,r=f==l,!i||!o)return r?0:!i^t?1:-1;if(!r)return f>l^t?1:-1;for(s=(f=i.length)<(l=o.length)?f:l,u=0;s>u;u++)if(i[u]!=o[u])return i[u]>o[u]^t?1:-1;return f==l?0:f>l^t?1:-1}function o(e,n,t){return(e=c(e))>=n&&t>=e}function u(e){return"[object Array]"==Object.prototype.toString.call(e)}function s(e,n,t){for(var r,i,o=[0],u=0,s=e.length;s>u;){for(i=o.length;i--;o[i]*=n);for(o[r=0]+=N.indexOf(e.charAt(u++));r<o.length;r++)o[r]>t-1&&(null==o[r+1]&&(o[r+1]=0),o[r+1]+=o[r]/t|0,o[r]%=t)}return o.reverse()}function f(e,n){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(0>n?"e":"e+")+n}function l(e,n){var t,r;if(0>n){for(r="0.";++n;r+="0");e=r+e}else if(t=e.length,++n>t){for(r="0",n-=t;--n;r+="0");e+=r}else t>n&&(e=e.slice(0,n)+"."+e.slice(n));return e}function c(e){return e=parseFloat(e),0>e?p(e):d(e)}var a,h,g=/^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,p=Math.ceil,d=Math.floor,m=" not a boolean or binary digit",w="rounding mode",v="number type has more than 15 significant digits",N="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",b=1e14,O=14,y=9007199254740991,S=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],R=1e7,A=1e9;if("undefined"!=typeof crypto&&(a=crypto),"function"==typeof define&&define.amd)define(function(){return n()});else if("undefined"!=typeof module&&module.exports){if(module.exports=n(),!a)try{a=require("crypto")}catch(E){}}else e||(e="undefined"!=typeof self?self:Function("return this")()),e.BigNumber=n()}(this);
    /* jshint ignore:end */
  
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["bigdecimal"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$===', '$attr_reader', '$new', '$class', '$bignumber', '$nan?', '$==', '$raise', '$<', '$coerce', '$>', '$mode', '$>=', '$/', '$zero?', '$infinite?', '$finite?']);
  
  (function($base, $super, $parent_nesting) {
    function $BigDecimal(){};
    var self = $BigDecimal = $klass($base, $super, 'BigDecimal', $BigDecimal);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], Opal.const_get_relative($nesting, 'Numeric'), $nesting);
  self.$require("js");
  self.$require("bigdecimal/kernel");
  self.$require("bigdecimal/bignumber.js");
  return (function($base, $super, $parent_nesting) {
    function $BigDecimal(){};
    var self = $BigDecimal = $klass($base, $super, 'BigDecimal', $BigDecimal);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BigDecimal_limit_1, TMP_BigDecimal_mode_2, TMP_BigDecimal_initialize_3, TMP_BigDecimal_$eq$eq_4, TMP_BigDecimal_$lt$eq$gt_5, TMP_BigDecimal_$lt_6, TMP_BigDecimal_$lt$eq_7, TMP_BigDecimal_$gt_8, TMP_BigDecimal_$gt$eq_9, TMP_BigDecimal_abs_10, TMP_BigDecimal_add_11, TMP_BigDecimal_ceil_12, TMP_BigDecimal_coerce_13, TMP_BigDecimal_div_14, TMP_BigDecimal_finite$q_15, TMP_BigDecimal_infinite$q_16, TMP_BigDecimal_minus_17, TMP_BigDecimal_mult_18, TMP_BigDecimal_nan$q_19, TMP_BigDecimal_quo_20, TMP_BigDecimal_sign_21, TMP_BigDecimal_sub_22, TMP_BigDecimal_to_f_23, TMP_BigDecimal_to_s_24, TMP_BigDecimal_zero$q_25;

    
    Opal.const_set($nesting[0], 'ROUND_MODE', 256);
    Opal.const_set($nesting[0], 'ROUND_UP', 0);
    Opal.const_set($nesting[0], 'ROUND_DOWN', 1);
    Opal.const_set($nesting[0], 'ROUND_CEILING', 2);
    Opal.const_set($nesting[0], 'ROUND_FLOOR', 3);
    Opal.const_set($nesting[0], 'ROUND_HALF_UP', 4);
    Opal.const_set($nesting[0], 'ROUND_HALF_DOWN', 5);
    Opal.const_set($nesting[0], 'ROUND_HALF_EVEN', 6);
    Opal.const_set($nesting[0], 'SIGN_NaN', 0);
    Opal.const_set($nesting[0], 'SIGN_POSITIVE_ZERO', 1);
    Opal.const_set($nesting[0], 'SIGN_NEGATIVE_ZERO', -1);
    Opal.const_set($nesting[0], 'SIGN_POSITIVE_FINITE', 2);
    Opal.const_set($nesting[0], 'SIGN_NEGATIVE_FINITE', -2);
    Opal.const_set($nesting[0], 'SIGN_POSITIVE_INFINITE', 3);
    Opal.const_set($nesting[0], 'SIGN_NEGATIVE_INFINITE', -3);
    Opal.defs(self, '$limit', TMP_BigDecimal_limit_1 = function $$limit(digits) {
      var self = this;
      if (self.digits == null) self.digits = nil;

      if (digits == null) {
        digits = nil;
      }
      
      if ($truthy(digits)) {
        self.digits = digits};
      return self.digits;
    }, TMP_BigDecimal_limit_1.$$arity = -1);
    Opal.defs(self, '$mode', TMP_BigDecimal_mode_2 = function $$mode(mode, value) {
      var $a, self = this, $case = nil;
      if (self.round_mode == null) self.round_mode = nil;

      if (value == null) {
        value = nil;
      }
      return (function() {$case = mode;
      if (Opal.const_get_relative($nesting, 'ROUND_MODE')['$===']($case)) {
      if ($truthy(value)) {
        self.round_mode = value};
      return ($truthy($a = self.round_mode) ? $a : Opal.const_get_relative($nesting, 'ROUND_HALF_UP'));}
      else { return nil }})()
    }, TMP_BigDecimal_mode_2.$$arity = -2);
    self.$attr_reader("bignumber");
    
    Opal.defn(self, '$initialize', TMP_BigDecimal_initialize_3 = function $$initialize(initial, digits) {
      var self = this;

      if (digits == null) {
        digits = 0;
      }
      return (self.bignumber = Opal.const_get_relative($nesting, 'JS').$new(Opal.const_get_relative($nesting, 'BigNumber'), initial))
    }, TMP_BigDecimal_initialize_3.$$arity = -2);
    
    Opal.defn(self, '$==', TMP_BigDecimal_$eq$eq_4 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if (self.$class()['$===']($case)) {return self.$bignumber().equals(other.$bignumber())}
      else if (Opal.const_get_relative($nesting, 'Number')['$===']($case)) {return self.$bignumber().equals(other)}
      else {return false}})()
    }, TMP_BigDecimal_$eq$eq_4.$$arity = 1);
    Opal.alias(self, "===", "==");
    
    Opal.defn(self, '$<=>', TMP_BigDecimal_$lt$eq$gt_5 = function(other) {
      var self = this, $case = nil, result = nil;

      
      $case = other;
      if (self.$class()['$===']($case)) {result = self.$bignumber().comparedTo(other.$bignumber())}
      else if (Opal.const_get_relative($nesting, 'Number')['$===']($case)) {result = self.$bignumber().comparedTo(other)}
      else {result = nil};
      return result === null ? nil : result;
    }, TMP_BigDecimal_$lt$eq$gt_5.$$arity = 1);
    
    Opal.defn(self, '$<', TMP_BigDecimal_$lt_6 = function(other) {
      var $a, $b, self = this, $iter = TMP_BigDecimal_$lt_6.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_BigDecimal_$lt_6.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : ($truthy($b = other) ? other['$nan?']() : $b)))) {
        return false};
      return $send(self, Opal.find_super_dispatcher(self, '<', TMP_BigDecimal_$lt_6, false), $zuper, $iter);
    }, TMP_BigDecimal_$lt_6.$$arity = 1);
    
    Opal.defn(self, '$<=', TMP_BigDecimal_$lt$eq_7 = function(other) {
      var $a, $b, self = this, $iter = TMP_BigDecimal_$lt$eq_7.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_BigDecimal_$lt$eq_7.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : ($truthy($b = other) ? other['$nan?']() : $b)))) {
        return false};
      return $send(self, Opal.find_super_dispatcher(self, '<=', TMP_BigDecimal_$lt$eq_7, false), $zuper, $iter);
    }, TMP_BigDecimal_$lt$eq_7.$$arity = 1);
    
    Opal.defn(self, '$>', TMP_BigDecimal_$gt_8 = function(other) {
      var $a, $b, self = this, $iter = TMP_BigDecimal_$gt_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_BigDecimal_$gt_8.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : ($truthy($b = other) ? other['$nan?']() : $b)))) {
        return false};
      return $send(self, Opal.find_super_dispatcher(self, '>', TMP_BigDecimal_$gt_8, false), $zuper, $iter);
    }, TMP_BigDecimal_$gt_8.$$arity = 1);
    
    Opal.defn(self, '$>=', TMP_BigDecimal_$gt$eq_9 = function(other) {
      var $a, $b, self = this, $iter = TMP_BigDecimal_$gt$eq_9.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_BigDecimal_$gt$eq_9.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : ($truthy($b = other) ? other['$nan?']() : $b)))) {
        return false};
      return $send(self, Opal.find_super_dispatcher(self, '>=', TMP_BigDecimal_$gt$eq_9, false), $zuper, $iter);
    }, TMP_BigDecimal_$gt$eq_9.$$arity = 1);
    
    Opal.defn(self, '$abs', TMP_BigDecimal_abs_10 = function $$abs() {
      var self = this;

      return self.$class().$new(self.$bignumber().abs())
    }, TMP_BigDecimal_abs_10.$$arity = 0);
    
    Opal.defn(self, '$add', TMP_BigDecimal_add_11 = function $$add(other, digits) {
      var $a, $b, self = this, _ = nil, result = nil;

      if (digits == null) {
        digits = 0;
      }
      
      if (digits['$=='](nil)) {
        self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "wrong argument type nil (expected Fixnum)")};
      if ($truthy($rb_lt(digits, 0))) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "argument must be positive")};
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      result = self.$bignumber().plus(other.$bignumber());
      if ($truthy($rb_gt(digits, 0))) {
        result = result.toDigits(digits, self.$class().$mode(Opal.const_get_relative($nesting, 'ROUND_MODE')))};
      return self.$class().$new(result);
    }, TMP_BigDecimal_add_11.$$arity = -2);
    Opal.alias(self, "+", "add");
    
    Opal.defn(self, '$ceil', TMP_BigDecimal_ceil_12 = function $$ceil(n) {
      var self = this;

      if (n == null) {
        n = nil;
      }
      
      if ($truthy(self.$bignumber().isFinite())) {
        } else {
        self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Computation results to 'Infinity'")
      };
      if (n['$=='](nil)) {
        return self.$bignumber().round(0, Opal.const_get_relative($nesting, 'ROUND_CEILING')).toNumber()
      } else if ($truthy($rb_ge(n, 0))) {
        return self.$class().$new(self.$bignumber().round(n, Opal.const_get_relative($nesting, 'ROUND_CEILING')))
        } else {
        return self.$class().$new(self.$bignumber().round(0, Opal.const_get_relative($nesting, 'ROUND_CEILING')))
      };
    }, TMP_BigDecimal_ceil_12.$$arity = -1);
    
    Opal.defn(self, '$coerce', TMP_BigDecimal_coerce_13 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if (self.$class()['$===']($case)) {return [other, self]}
      else if (Opal.const_get_relative($nesting, 'Number')['$===']($case)) {return [self.$class().$new(other), self]}
      else {return self.$raise(Opal.const_get_relative($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into " + (self.$class()))}})()
    }, TMP_BigDecimal_coerce_13.$$arity = 1);
    
    Opal.defn(self, '$div', TMP_BigDecimal_div_14 = function $$div(other, digits) {
      var $a, $b, self = this, _ = nil;

      if (digits == null) {
        digits = nil;
      }
      
      if (digits['$=='](0)) {
        return $rb_divide(self, other)};
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : other['$nan?']()))) {
        self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Computation results to 'NaN'(Not a Number)")};
      if (digits['$=='](nil)) {
        
        if ($truthy(other['$zero?']())) {
          self.$raise(Opal.const_get_relative($nesting, 'ZeroDivisionError'), "divided by 0")};
        if ($truthy(self['$infinite?']())) {
          self.$raise(Opal.const_get_relative($nesting, 'FloatDomainError'), "Computation results to 'Infinity'")};
        return self.$class().$new(self.$bignumber().dividedToIntegerBy(other.$bignumber()));};
      return self.$class().$new(self.$bignumber().dividedBy(other.$bignumber()).round(digits, self.$class().$mode(Opal.const_get_relative($nesting, 'ROUND_MODE'))));
    }, TMP_BigDecimal_div_14.$$arity = -2);
    
    Opal.defn(self, '$finite?', TMP_BigDecimal_finite$q_15 = function() {
      var self = this;

      return self.$bignumber().isFinite()
    }, TMP_BigDecimal_finite$q_15.$$arity = 0);
    
    Opal.defn(self, '$infinite?', TMP_BigDecimal_infinite$q_16 = function() {
      var $a, self = this;

      
      if ($truthy(($truthy($a = self['$finite?']()) ? $a : self['$nan?']()))) {
        return nil};
      if ($truthy(self.$bignumber().isNegative())) {
        return -1
        } else {
        return 1
      };
    }, TMP_BigDecimal_infinite$q_16.$$arity = 0);
    
    Opal.defn(self, '$minus', TMP_BigDecimal_minus_17 = function $$minus(other) {
      var $a, $b, self = this, _ = nil;

      
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      return self.$class().$new(self.$bignumber().minus(other.$bignumber()));
    }, TMP_BigDecimal_minus_17.$$arity = 1);
    Opal.alias(self, "-", "minus");
    
    Opal.defn(self, '$mult', TMP_BigDecimal_mult_18 = function $$mult(other, digits) {
      var $a, $b, self = this, _ = nil;

      if (digits == null) {
        digits = nil;
      }
      
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      if (digits['$=='](nil)) {
        return self.$class().$new(self.$bignumber().times(other.$bignumber()))};
      return self.$class().$new(self.$bignumber().times(other.$bignumber()).round(digits, self.$class().$mode(Opal.const_get_relative($nesting, 'ROUND_MODE'))));
    }, TMP_BigDecimal_mult_18.$$arity = -2);
    Opal.alias(self, "*", "mult");
    
    Opal.defn(self, '$nan?', TMP_BigDecimal_nan$q_19 = function() {
      var self = this;

      return self.$bignumber().isNaN()
    }, TMP_BigDecimal_nan$q_19.$$arity = 0);
    
    Opal.defn(self, '$quo', TMP_BigDecimal_quo_20 = function $$quo(other) {
      var $a, $b, self = this, _ = nil;

      
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      return self.$class().$new(self.$bignumber().dividedBy(other.$bignumber()));
    }, TMP_BigDecimal_quo_20.$$arity = 1);
    Opal.alias(self, "/", "quo");
    
    Opal.defn(self, '$sign', TMP_BigDecimal_sign_21 = function $$sign() {
      var self = this;

      
      if ($truthy(self.$bignumber().isNaN())) {
        return Opal.const_get_relative($nesting, 'SIGN_NaN')};
      if ($truthy(self.$bignumber().isZero())) {
        return (function() {if ($truthy(self.$bignumber().isNegative())) {
          return Opal.const_get_relative($nesting, 'SIGN_NEGATIVE_ZERO')
          } else {
          return Opal.const_get_relative($nesting, 'SIGN_POSITIVE_ZERO')
        }; return nil; })()
        } else {
        return nil
      };
    }, TMP_BigDecimal_sign_21.$$arity = 0);
    
    Opal.defn(self, '$sub', TMP_BigDecimal_sub_22 = function $$sub(other, precision) {
      var $a, $b, self = this, _ = nil;

      
      $b = self.$coerce(other), $a = Opal.to_ary($b), (other = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
      return self.$class().$new(self.$bignumber().minus(other.$bignumber()));
    }, TMP_BigDecimal_sub_22.$$arity = 2);
    
    Opal.defn(self, '$to_f', TMP_BigDecimal_to_f_23 = function $$to_f() {
      var self = this;

      return self.$bignumber().toNumber()
    }, TMP_BigDecimal_to_f_23.$$arity = 0);
    
    Opal.defn(self, '$to_s', TMP_BigDecimal_to_s_24 = function $$to_s(s) {
      var self = this;

      if (s == null) {
        s = "";
      }
      return self.$bignumber().toString()
    }, TMP_BigDecimal_to_s_24.$$arity = -1);
    return (Opal.defn(self, '$zero?', TMP_BigDecimal_zero$q_25 = function() {
      var self = this;

      return self.$bignumber().isZero()
    }, TMP_BigDecimal_zero$q_25.$$arity = 0), nil) && 'zero?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    Opal.const_set($nesting[0], 'VERSION', "0.9.0")
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/exception"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$errors=', '$-', '$join', '$message_list', '$errors']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $ValidationException(){};
      var self = $ValidationException = $klass($base, $super, 'ValidationException', $ValidationException);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ValidationException_initialize_1, TMP_ValidationException_to_s_2;

      
      self.$attr_accessor("errors");
      
      Opal.defn(self, '$initialize', TMP_ValidationException_initialize_1 = function $$initialize(errors) {
        var self = this, $writer = nil;

        
        $writer = [errors];
        $send(self, 'errors=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_ValidationException_initialize_1.$$arity = 1);
      return (Opal.defn(self, '$to_s', TMP_ValidationException_to_s_2 = function $$to_s() {
        var self = this;

        return "" + (self.$errors().$message_list().$join("; "))
      }, TMP_ValidationException_to_s_2.$$arity = 0), nil) && 'to_s';
    })($nesting[0], Opal.const_get_qualified('::', 'StandardError'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/errors"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$tap', '$new', '$merge!', '$[]', '$titleize', '$downcase', '$to_s', '$==', '$end_with?', '$message', '$error_message_creator', '$Array', '$each', '$symbolic', '$[]=', '$-', '$concat', '$message_list', '$map', '$flatten', '$compact']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $DefaultErrorMessageCreator(){};
      var self = $DefaultErrorMessageCreator = $klass($base, $super, 'DefaultErrorMessageCreator', $DefaultErrorMessageCreator);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DefaultErrorMessageCreator_1, TMP_DefaultErrorMessageCreator_message_2, TMP_DefaultErrorMessageCreator_titleize_3;

      
      Opal.const_set($nesting[0], 'MESSAGES', $send(Opal.const_get_relative($nesting, 'Hash').$new("is invalid"), 'tap', [], (TMP_DefaultErrorMessageCreator_1 = function(h){var self = TMP_DefaultErrorMessageCreator_1.$$s || this;
if (h == null) h = nil;
      return h['$merge!']($hash2(["nils", "required", "string", "integer", "boolean", "hash", "array", "model", "date", "before", "after", "empty", "max_length", "min_length", "matches", "in", "class", "min", "max", "new_records"], {"nils": "can't be nil", "required": "is required", "string": "isn't a string", "integer": "isn't an integer", "boolean": "isn't a boolean", "hash": "isn't a hash", "array": "isn't an array", "model": "isn't the right class", "date": "date doesn't exist", "before": "isn't before given date", "after": "isn't after given date", "empty": "can't be blank", "max_length": "is too long", "min_length": "is too short", "matches": "isn't in the right format", "in": "isn't an option", "class": "isn't the right class", "min": "is too small", "max": "is too big", "new_records": "isn't a saved model"}))}, TMP_DefaultErrorMessageCreator_1.$$s = self, TMP_DefaultErrorMessageCreator_1.$$arity = 1, TMP_DefaultErrorMessageCreator_1)));
      
      Opal.defn(self, '$message', TMP_DefaultErrorMessageCreator_message_2 = function $$message(key, error_symbol, options) {
        var $a, self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        if ($truthy(options['$[]']("index"))) {
          return "" + (self.$titleize(($truthy($a = key) ? $a : "array"))) + "[" + (options['$[]']("index")) + "] " + (Opal.const_get_relative($nesting, 'MESSAGES')['$[]'](error_symbol))
          } else {
          return "" + (self.$titleize(key)) + " " + (Opal.const_get_relative($nesting, 'MESSAGES')['$[]'](error_symbol))
        }
      }, TMP_DefaultErrorMessageCreator_message_2.$$arity = -3);
      return (Opal.defn(self, '$titleize', TMP_DefaultErrorMessageCreator_titleize_3 = function $$titleize(key) {
        var self = this;

        
        key = key.$to_s().$downcase();
        if (key['$==']("id")) {
          return "ID"
        } else if ($truthy(key['$end_with?']("_id"))) {
          return "" + (key.$titleize()) + " ID"
          } else {
          return key.$titleize()
        };
      }, TMP_DefaultErrorMessageCreator_titleize_3.$$arity = 1), nil) && 'titleize';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $ErrorAtom(){};
      var self = $ErrorAtom = $klass($base, $super, 'ErrorAtom', $ErrorAtom);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ErrorAtom_initialize_4, TMP_ErrorAtom_symbolic_5, TMP_ErrorAtom_message_6, TMP_ErrorAtom_message_list_7;

      def.symbol = def.message = def.key = def.index = nil;
      
      
      Opal.defn(self, '$initialize', TMP_ErrorAtom_initialize_4 = function $$initialize(key, error_symbol, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        
        self.key = key;
        self.symbol = error_symbol;
        self.message = options['$[]']("message");
        return (self.index = options['$[]']("index"));
      }, TMP_ErrorAtom_initialize_4.$$arity = -3);
      
      Opal.defn(self, '$symbolic', TMP_ErrorAtom_symbolic_5 = function $$symbolic() {
        var self = this;

        return self.symbol
      }, TMP_ErrorAtom_symbolic_5.$$arity = 0);
      
      Opal.defn(self, '$message', TMP_ErrorAtom_message_6 = function $$message() {
        var $a, self = this;

        return (self.message = ($truthy($a = self.message) ? $a : Opal.const_get_relative($nesting, 'Mutations').$error_message_creator().$message(self.key, self.symbol, $hash2(["index"], {"index": self.index}))))
      }, TMP_ErrorAtom_message_6.$$arity = 0);
      return (Opal.defn(self, '$message_list', TMP_ErrorAtom_message_list_7 = function $$message_list() {
        var self = this;

        return self.$Array(self.$message())
      }, TMP_ErrorAtom_message_list_7.$$arity = 0), nil) && 'message_list';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $ErrorHash(){};
      var self = $ErrorHash = $klass($base, $super, 'ErrorHash', $ErrorHash);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ErrorHash_symbolic_10, TMP_ErrorHash_message_13, TMP_ErrorHash_message_list_15;

      
      
      Opal.defn(self, '$symbolic', TMP_ErrorHash_symbolic_10 = function $$symbolic() {
        var TMP_8, self = this;

        return $send(Opal.const_get_relative($nesting, 'HashWithIndifferentAccess').$new(), 'tap', [], (TMP_8 = function(hash){var self = TMP_8.$$s || this, TMP_9;
if (hash == null) hash = nil;
        return $send(self, 'each', [], (TMP_9 = function(k, v){var self = TMP_9.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
          
            $writer = [k, v.$symbolic()];
            $send(hash, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9))}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
      }, TMP_ErrorHash_symbolic_10.$$arity = 0);
      
      Opal.defn(self, '$message', TMP_ErrorHash_message_13 = function $$message() {
        var TMP_11, self = this;

        return $send(Opal.const_get_relative($nesting, 'HashWithIndifferentAccess').$new(), 'tap', [], (TMP_11 = function(hash){var self = TMP_11.$$s || this, TMP_12;
if (hash == null) hash = nil;
        return $send(self, 'each', [], (TMP_12 = function(k, v){var self = TMP_12.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
          
            $writer = [k, v.$message()];
            $send(hash, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))
      }, TMP_ErrorHash_message_13.$$arity = 0);
      return (Opal.defn(self, '$message_list', TMP_ErrorHash_message_list_15 = function $$message_list() {
        var TMP_14, self = this, list = nil;

        
        list = [];
        $send(self, 'each', [], (TMP_14 = function(k, v){var self = TMP_14.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
        return list.$concat(v.$message_list())}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14));
        return list;
      }, TMP_ErrorHash_message_list_15.$$arity = 0), nil) && 'message_list';
    })($nesting[0], Opal.const_get_relative($nesting, 'Hash'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ErrorArray(){};
      var self = $ErrorArray = $klass($base, $super, 'ErrorArray', $ErrorArray);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ErrorArray_symbolic_17, TMP_ErrorArray_message_19, TMP_ErrorArray_message_list_21;

      
      
      Opal.defn(self, '$symbolic', TMP_ErrorArray_symbolic_17 = function $$symbolic() {
        var TMP_16, self = this;

        return $send(self, 'map', [], (TMP_16 = function(e){var self = TMP_16.$$s || this, $a;
if (e == null) e = nil;
        return ($truthy($a = e) ? e.$symbolic() : $a)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))
      }, TMP_ErrorArray_symbolic_17.$$arity = 0);
      
      Opal.defn(self, '$message', TMP_ErrorArray_message_19 = function $$message() {
        var TMP_18, self = this;

        return $send(self, 'map', [], (TMP_18 = function(e){var self = TMP_18.$$s || this, $a;
if (e == null) e = nil;
        return ($truthy($a = e) ? e.$message() : $a)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18))
      }, TMP_ErrorArray_message_19.$$arity = 0);
      return (Opal.defn(self, '$message_list', TMP_ErrorArray_message_list_21 = function $$message_list() {
        var TMP_20, self = this;

        return $send(self.$compact(), 'map', [], (TMP_20 = function(e){var self = TMP_20.$$s || this;
if (e == null) e = nil;
        return e.$message_list()}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20)).$flatten()
      }, TMP_ErrorArray_message_list_21.$$arity = 0), nil) && 'message_list';
    })($nesting[0], Opal.const_get_relative($nesting, 'Array'), $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/input_filter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$merge', '$default_options', '$class', '$options=', '$-', '$has_key?', '$options', '$[]', '$!']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $InputFilter(){};
      var self = $InputFilter = $klass($base, $super, 'InputFilter', $InputFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_InputFilter_default_options_1, TMP_InputFilter_initialize_2, TMP_InputFilter_filter_3, TMP_InputFilter_has_default$q_4, TMP_InputFilter_default_5, TMP_InputFilter_discard_nils$q_6, TMP_InputFilter_discard_empty$q_7, TMP_InputFilter_discard_invalid$q_8;

      
      Opal.defs(self, '$default_options', TMP_InputFilter_default_options_1 = function $$default_options() {
        var $a, self = this;
        if (self.default_options == null) self.default_options = nil;

        return (self.default_options = ($truthy($a = self.default_options) ? $a : $hash2([], {})))
      }, TMP_InputFilter_default_options_1.$$arity = 0);
      self.$attr_accessor("options");
      
      Opal.defn(self, '$initialize', TMP_InputFilter_initialize_2 = function $$initialize(opts) {
        var $a, self = this, $writer = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        $writer = [($truthy($a = self.$class().$default_options()) ? $a : $hash2([], {})).$merge(opts)];
        $send(self, 'options=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_InputFilter_initialize_2.$$arity = -1);
      
      Opal.defn(self, '$filter', TMP_InputFilter_filter_3 = function $$filter(data) {
        var self = this;

        return [data, nil]
      }, TMP_InputFilter_filter_3.$$arity = 1);
      
      Opal.defn(self, '$has_default?', TMP_InputFilter_has_default$q_4 = function() {
        var self = this;

        return self.$options()['$has_key?']("default")
      }, TMP_InputFilter_has_default$q_4.$$arity = 0);
      
      Opal.defn(self, '$default', TMP_InputFilter_default_5 = function() {
        var self = this;

        return self.$options()['$[]']("default")
      }, TMP_InputFilter_default_5.$$arity = 0);
      
      Opal.defn(self, '$discard_nils?', TMP_InputFilter_discard_nils$q_6 = function() {
        var self = this;

        return self.$options()['$[]']("nils")['$!']()
      }, TMP_InputFilter_discard_nils$q_6.$$arity = 0);
      
      Opal.defn(self, '$discard_empty?', TMP_InputFilter_discard_empty$q_7 = function() {
        var self = this;

        return self.$options()['$[]']("discard_empty")
      }, TMP_InputFilter_discard_empty$q_7.$$arity = 0);
      return (Opal.defn(self, '$discard_invalid?', TMP_InputFilter_discard_invalid$q_8 = function() {
        var self = this;

        return self.$options()['$[]']("discard_invalid")
      }, TMP_InputFilter_discard_invalid$q_8.$$arity = 0), nil) && 'discard_invalid?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/hash_filter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$define_method', '$[]', '$to_sym', '$new', '$to_proc', '$[]=', '$-', '$attr_accessor', '$instance_eval', '$each_pair', '$optional_inputs', '$required_inputs', '$keys', '$nil?', '$options', '$respond_to?', '$is_a?', '$with_indifferent_access', '$to_hash', '$each', '$==', '$has_key?', '$filter', '$!', '$discard_invalid?', '$delete', '$discard_empty?', '$discard_nils?', '$has_default?', '$default', '$any?']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $HashFilter(){};
      var self = $HashFilter = $klass($base, $super, 'HashFilter', $HashFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HashFilter_register_additional_filter_2, TMP_HashFilter_initialize_3, TMP_HashFilter_dup_6, TMP_HashFilter_required_7, TMP_HashFilter_optional_8, TMP_HashFilter_required_keys_9, TMP_HashFilter_optional_keys_10, TMP_HashFilter_hash_11, TMP_HashFilter_model_12, TMP_HashFilter_array_13, TMP_HashFilter_filter_17;

      def.required_inputs = def.optional_inputs = def.current_inputs = nil;
      
      Opal.defs(self, '$register_additional_filter', TMP_HashFilter_register_additional_filter_2 = function $$register_additional_filter(type_class, type_name) {
        var TMP_1, self = this;

        return $send(self, 'define_method', [type_name], (TMP_1 = function($a_rest){var self = TMP_1.$$s || this, block, args, $b, name = nil, options = nil, $writer = nil;
          if (self.current_inputs == null) self.current_inputs = nil;

          block = TMP_1.$$p || nil;
          if (block) TMP_1.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        
          name = args['$[]'](0);
          options = ($truthy($b = args['$[]'](1)) ? $b : $hash2([], {}));
          
          $writer = [name.$to_sym(), $send(type_class, 'new', [options], block.$to_proc())];
          $send(self.current_inputs, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, TMP_1.$$s = self, TMP_1.$$arity = -1, TMP_1))
      }, TMP_HashFilter_register_additional_filter_2.$$arity = 2);
      self.default_options = $hash2(["nils"], {"nils": false});
      self.$attr_accessor("optional_inputs");
      self.$attr_accessor("required_inputs");
      
      Opal.defn(self, '$initialize', TMP_HashFilter_initialize_3 = function $$initialize(opts) {
        var self = this, $iter = TMP_HashFilter_initialize_3.$$p, block = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_HashFilter_initialize_3.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_HashFilter_initialize_3, false), [opts], null);
        self.optional_inputs = $hash2([], {});
        self.required_inputs = $hash2([], {});
        self.current_inputs = self.required_inputs;
        if ((block !== nil)) {
          return $send(self, 'instance_eval', [], block.$to_proc())
          } else {
          return nil
        };
      }, TMP_HashFilter_initialize_3.$$arity = -1);
      
      Opal.defn(self, '$dup', TMP_HashFilter_dup_6 = function $$dup() {
        var TMP_4, TMP_5, self = this, dupped = nil;

        
        dupped = Opal.const_get_relative($nesting, 'HashFilter').$new();
        $send(self.optional_inputs, 'each_pair', [], (TMP_4 = function(k, v){var self = TMP_4.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
        
          $writer = [k, v];
          $send(dupped.$optional_inputs(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4));
        $send(self.required_inputs, 'each_pair', [], (TMP_5 = function(k, v){var self = TMP_5.$$s || this, $writer = nil;
if (k == null) k = nil;if (v == null) v = nil;
        
          $writer = [k, v];
          $send(dupped.$required_inputs(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5));
        return dupped;
      }, TMP_HashFilter_dup_6.$$arity = 0);
      
      Opal.defn(self, '$required', TMP_HashFilter_required_7 = function $$required() {
        var self = this, $iter = TMP_HashFilter_required_7.$$p, block = $iter || nil;

        if ($iter) TMP_HashFilter_required_7.$$p = null;
        
        self.current_inputs = self.required_inputs;
        return $send(self, 'instance_eval', [], block.$to_proc());
      }, TMP_HashFilter_required_7.$$arity = 0);
      
      Opal.defn(self, '$optional', TMP_HashFilter_optional_8 = function $$optional() {
        var self = this, $iter = TMP_HashFilter_optional_8.$$p, block = $iter || nil;

        if ($iter) TMP_HashFilter_optional_8.$$p = null;
        
        self.current_inputs = self.optional_inputs;
        return $send(self, 'instance_eval', [], block.$to_proc());
      }, TMP_HashFilter_optional_8.$$arity = 0);
      
      Opal.defn(self, '$required_keys', TMP_HashFilter_required_keys_9 = function $$required_keys() {
        var self = this;

        return self.required_inputs.$keys()
      }, TMP_HashFilter_required_keys_9.$$arity = 0);
      
      Opal.defn(self, '$optional_keys', TMP_HashFilter_optional_keys_10 = function $$optional_keys() {
        var self = this;

        return self.optional_inputs.$keys()
      }, TMP_HashFilter_optional_keys_10.$$arity = 0);
      
      Opal.defn(self, '$hash', TMP_HashFilter_hash_11 = function $$hash(name, options) {
        var self = this, $iter = TMP_HashFilter_hash_11.$$p, block = $iter || nil, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        if ($iter) TMP_HashFilter_hash_11.$$p = null;
        
        $writer = [name.$to_sym(), $send(Opal.const_get_relative($nesting, 'HashFilter'), 'new', [options], block.$to_proc())];
        $send(self.current_inputs, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_HashFilter_hash_11.$$arity = -2);
      
      Opal.defn(self, '$model', TMP_HashFilter_model_12 = function $$model(name, options) {
        var self = this, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        
        $writer = [name.$to_sym(), Opal.const_get_relative($nesting, 'ModelFilter').$new(name.$to_sym(), options)];
        $send(self.current_inputs, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_HashFilter_model_12.$$arity = -2);
      
      Opal.defn(self, '$array', TMP_HashFilter_array_13 = function $$array(name, options) {
        var self = this, $iter = TMP_HashFilter_array_13.$$p, block = $iter || nil, name_sym = nil, $writer = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        if ($iter) TMP_HashFilter_array_13.$$p = null;
        
        name_sym = name.$to_sym();
        
        $writer = [name.$to_sym(), $send(Opal.const_get_relative($nesting, 'ArrayFilter'), 'new', [name_sym, options], block.$to_proc())];
        $send(self.current_inputs, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_HashFilter_array_13.$$arity = -2);
      return (Opal.defn(self, '$filter', TMP_HashFilter_filter_17 = function $$filter(data) {
        var TMP_14, TMP_16, self = this, errors = nil, filtered_data = nil, wildcard_filterer = nil, filtered_keys = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ($truthy(data['$respond_to?']("to_hash"))) {
          } else {
          return [data, "hash"]
        };
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'HashWithIndifferentAccess')))) {
          } else {
          data = data.$to_hash().$with_indifferent_access()
        };
        errors = Opal.const_get_relative($nesting, 'ErrorHash').$new();
        filtered_data = Opal.const_get_relative($nesting, 'HashWithIndifferentAccess').$new();
        wildcard_filterer = nil;
        $send([[self.required_inputs, true], [self.optional_inputs, false]], 'each', [], (TMP_14 = function($a){var self = TMP_14.$$s || this, $a_args, inputs, is_required, TMP_15;

          if ($a == null) {
            $a = nil;
          }
          $a = Opal.to_ary($a);
          $a_args = Opal.slice.call($a, 0, $a.length);
          inputs = $a_args.splice(0,1)[0];
          if (inputs == null) {
            inputs = nil;
          }
          is_required = $a_args.splice(0,1)[0];
          if (is_required == null) {
            is_required = nil;
          }
        return $send(inputs, 'each_pair', [], (TMP_15 = function(key, filterer){var self = TMP_15.$$s || this, $a, $b, data_element = nil, sub_data = nil, sub_error = nil, $writer = nil, error_key = nil;
if (key == null) key = nil;if (filterer == null) filterer = nil;
          
            if (key['$==']("*")) {
              
              wildcard_filterer = filterer;
              return nil;;};
            data_element = data['$[]'](key);
            if ($truthy(data['$has_key?'](key))) {
              
              $b = filterer.$filter(data_element), $a = Opal.to_ary($b), (sub_data = ($a[0] == null ? nil : $a[0])), (sub_error = ($a[1] == null ? nil : $a[1])), $b;
              if ($truthy(sub_error['$nil?']())) {
                
                $writer = [key, sub_data];
                $send(filtered_data, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(($truthy($a = is_required['$!']()) ? filterer['$discard_invalid?']() : $a))) {
                data.$delete(key)
              } else if ($truthy(($truthy($a = ($truthy($b = is_required['$!']()) ? sub_error['$==']("empty") : $b)) ? filterer['$discard_empty?']() : $a))) {
                data.$delete(key)
              } else if ($truthy(($truthy($a = ($truthy($b = is_required['$!']()) ? sub_error['$==']("nils") : $b)) ? filterer['$discard_nils?']() : $a))) {
                data.$delete(key)
                } else {
                
                error_key = ($truthy($a = filterer.$options()['$[]']("error_key")) ? $a : key);
                if ($truthy(sub_error['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
                  sub_error = Opal.const_get_relative($nesting, 'ErrorAtom').$new(error_key, sub_error)};
                
                $writer = [key, sub_error];
                $send(errors, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              };};
            if ($truthy(data['$has_key?'](key)['$!']())) {
              if ($truthy(filterer['$has_default?']())) {
                
                $writer = [key, filterer.$default()];
                $send(filtered_data, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(is_required)) {
                
                error_key = ($truthy($a = filterer.$options()['$[]']("error_key")) ? $a : key);
                
                $writer = [key, Opal.const_get_relative($nesting, 'ErrorAtom').$new(error_key, "required")];
                $send(errors, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;
                } else {
                return nil
              }
              } else {
              return nil
            };}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14.$$has_top_level_mlhs_arg = true, TMP_14));
        if ($truthy(wildcard_filterer)) {
          
          filtered_keys = $rb_minus(data.$keys(), filtered_data.$keys());
          $send(filtered_keys, 'each', [], (TMP_16 = function(key){var self = TMP_16.$$s || this, $a, $b, data_element = nil, sub_data = nil, sub_error = nil, $writer = nil;
if (key == null) key = nil;
          
            data_element = data['$[]'](key);
            $b = wildcard_filterer.$filter(data_element), $a = Opal.to_ary($b), (sub_data = ($a[0] == null ? nil : $a[0])), (sub_error = ($a[1] == null ? nil : $a[1])), $b;
            if ($truthy(sub_error['$nil?']())) {
              
              $writer = [key, sub_data];
              $send(filtered_data, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            } else if ($truthy(wildcard_filterer['$discard_invalid?']())) {
              return data.$delete(key)
            } else if ($truthy((($a = sub_error['$==']("empty")) ? wildcard_filterer['$discard_empty?']() : sub_error['$==']("empty")))) {
              return data.$delete(key)
            } else if ($truthy((($a = sub_error['$==']("nils")) ? wildcard_filterer['$discard_nils?']() : sub_error['$==']("nils")))) {
              return data.$delete(key)
              } else {
              
              if ($truthy(sub_error['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
                sub_error = Opal.const_get_relative($nesting, 'ErrorAtom').$new(key, sub_error)};
              
              $writer = [key, sub_error];
              $send(errors, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            };}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));};
        if ($truthy(errors['$any?']())) {
          return [data, errors]
          } else {
          return [filtered_data, nil]
        };
      }, TMP_HashFilter_filter_17.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'InputFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/array_filter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$define_method', '$[]', '$new', '$to_proc', '$instance_eval', '$options', '$raise', '$to_sym', '$is_a?', '$constantize', '$[]=', '$-', '$cache_constants?', '$to_s', '$initialize_constants!', '$nil?', '$!', '$==', '$Array', '$<', '$length', '$>', '$each_with_index', '$filter_element', '$<<', '$discard_invalid?', '$filter']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $ArrayFilter(){};
      var self = $ArrayFilter = $klass($base, $super, 'ArrayFilter', $ArrayFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ArrayFilter_register_additional_filter_2, TMP_ArrayFilter_initialize_3, TMP_ArrayFilter_hash_4, TMP_ArrayFilter_model_5, TMP_ArrayFilter_array_6, TMP_ArrayFilter_initialize_constants$B_7, TMP_ArrayFilter_filter_9, TMP_ArrayFilter_filter_element_10;

      def.element_filter = def.initialize_constants = nil;
      
      Opal.defs(self, '$register_additional_filter', TMP_ArrayFilter_register_additional_filter_2 = function $$register_additional_filter(type_class, type_name) {
        var TMP_1, self = this;

        return $send(self, 'define_method', [type_name], (TMP_1 = function($a_rest){var self = TMP_1.$$s || this, block, args, $b, options = nil;

          block = TMP_1.$$p || nil;
          if (block) TMP_1.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        
          options = ($truthy($b = args['$[]'](0)) ? $b : $hash2([], {}));
          return (self.element_filter = $send(type_class, 'new', [options], block.$to_proc()));}, TMP_1.$$s = self, TMP_1.$$arity = -1, TMP_1))
      }, TMP_ArrayFilter_register_additional_filter_2.$$arity = 2);
      self.default_options = $hash2(["nils", "class", "arrayize", "min_length", "max_length"], {"nils": false, "class": nil, "arrayize": false, "min_length": nil, "max_length": nil});
      
      Opal.defn(self, '$initialize', TMP_ArrayFilter_initialize_3 = function $$initialize(name, opts) {
        var $a, self = this, $iter = TMP_ArrayFilter_initialize_3.$$p, block = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_ArrayFilter_initialize_3.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ArrayFilter_initialize_3, false), [opts], null);
        self.name = name;
        self.element_filter = nil;
        if ((block !== nil)) {
          $send(self, 'instance_eval', [], block.$to_proc())};
        if ($truthy(($truthy($a = self.element_filter) ? self.$options()['$[]']("class") : $a))) {
          return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError').$new("Can't supply both a class and a filter"))
          } else {
          return nil
        };
      }, TMP_ArrayFilter_initialize_3.$$arity = -2);
      
      Opal.defn(self, '$hash', TMP_ArrayFilter_hash_4 = function $$hash(options) {
        var self = this, $iter = TMP_ArrayFilter_hash_4.$$p, block = $iter || nil;

        if (options == null) {
          options = $hash2([], {});
        }
        if ($iter) TMP_ArrayFilter_hash_4.$$p = null;
        return (self.element_filter = $send(Opal.const_get_relative($nesting, 'HashFilter'), 'new', [options], block.$to_proc()))
      }, TMP_ArrayFilter_hash_4.$$arity = -1);
      
      Opal.defn(self, '$model', TMP_ArrayFilter_model_5 = function $$model(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        return (self.element_filter = Opal.const_get_relative($nesting, 'ModelFilter').$new(name.$to_sym(), options))
      }, TMP_ArrayFilter_model_5.$$arity = -2);
      
      Opal.defn(self, '$array', TMP_ArrayFilter_array_6 = function $$array(options) {
        var self = this, $iter = TMP_ArrayFilter_array_6.$$p, block = $iter || nil;

        if (options == null) {
          options = $hash2([], {});
        }
        if ($iter) TMP_ArrayFilter_array_6.$$p = null;
        return (self.element_filter = $send(Opal.const_get_relative($nesting, 'ArrayFilter'), 'new', [nil, options], block.$to_proc()))
      }, TMP_ArrayFilter_array_6.$$arity = -1);
      
      Opal.defn(self, '$initialize_constants!', TMP_ArrayFilter_initialize_constants$B_7 = function() {
        var $a, self = this, $writer = nil;

        
        self.initialize_constants = ($truthy($a = self.initialize_constants) ? $a : ((function() {if ($truthy(self.$options()['$[]']("class"))) {
          if ($truthy(self.$options()['$[]']("class")['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            
            $writer = ["class", self.$options()['$[]']("class").$constantize()];
            $send(self.$options(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          }
          } else {
          return nil
        }; return nil; })(), true));
        if ($truthy(Opal.const_get_relative($nesting, 'Mutations')['$cache_constants?']())) {
          return nil
        } else if ($truthy(self.$options()['$[]']("class"))) {
          
          $writer = ["class", self.$options()['$[]']("class").$to_s().$constantize()];
          $send(self.$options(), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
          } else {
          return nil
        };
      }, TMP_ArrayFilter_initialize_constants$B_7.$$arity = 0);
      
      Opal.defn(self, '$filter', TMP_ArrayFilter_filter_9 = function $$filter(data) {
        var $a, TMP_8, $b, self = this, errors = nil, filtered_data = nil, found_error = nil;

        
        self['$initialize_constants!']();
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ($truthy(($truthy($a = data['$is_a?'](Opal.const_get_relative($nesting, 'Array'))['$!']()) ? self.$options()['$[]']("arrayize") : $a))) {
          
          if (data['$==']("")) {
            return [[], nil]};
          data = self.$Array(data);};
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
          
          errors = Opal.const_get_relative($nesting, 'ErrorArray').$new();
          filtered_data = [];
          found_error = false;
          if ($truthy(($truthy($a = self.$options()['$[]']("min_length")) ? $rb_lt(data.$length(), self.$options()['$[]']("min_length")) : $a))) {
            return [data, "min_length"]};
          if ($truthy(($truthy($a = self.$options()['$[]']("max_length")) ? $rb_gt(data.$length(), self.$options()['$[]']("max_length")) : $a))) {
            return [data, "max_length"]};
          $send(data, 'each_with_index', [], (TMP_8 = function(el, i){var self = TMP_8.$$s || this, $b, $c, el_filtered = nil, el_error = nil;
            if (self.name == null) self.name = nil;
if (el == null) el = nil;if (i == null) i = nil;
          
            $c = self.$filter_element(el), $b = Opal.to_ary($c), (el_filtered = ($b[0] == null ? nil : $b[0])), (el_error = ($b[1] == null ? nil : $b[1])), $c;
            if ($truthy(el_error['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
              el_error = Opal.const_get_relative($nesting, 'ErrorAtom').$new(self.name, el_error, $hash2(["index"], {"index": i}))};
            errors['$<<'](el_error);
            if ($truthy(el_error)) {
              return (found_error = true)
              } else {
              return filtered_data['$<<'](el_filtered)
            };}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8));
          if ($truthy(($truthy($a = found_error) ? ($truthy($b = self.element_filter) ? self.element_filter['$discard_invalid?']() : $b)['$!']() : $a))) {
            return [data, errors]
            } else {
            return [filtered_data, nil]
          };
          } else {
          return [data, "array"]
        };
      }, TMP_ArrayFilter_filter_9.$$arity = 1);
      return (Opal.defn(self, '$filter_element', TMP_ArrayFilter_filter_element_10 = function $$filter_element(data) {
        var $a, $b, self = this, el_errors = nil;

        
        if ($truthy(self.element_filter)) {
          
          $b = self.element_filter.$filter(data), $a = Opal.to_ary($b), (data = ($a[0] == null ? nil : $a[0])), (el_errors = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(el_errors)) {
            return [data, el_errors]};
        } else if ($truthy(self.$options()['$[]']("class"))) {
          if ($truthy(data['$is_a?'](self.$options()['$[]']("class"))['$!']())) {
            return [data, "class"]}};
        return [data, nil];
      }, TMP_ArrayFilter_filter_element_10.$$arity = 1), nil) && 'filter_element';
    })($nesting[0], Opal.const_get_relative($nesting, 'InputFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/additional_filter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$underscore', '$[]', '$name', '$register_additional_filter']);
  
  self.$require("mutations/hash_filter");
  self.$require("mutations/array_filter");
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $AdditionalFilter(){};
      var self = $AdditionalFilter = $klass($base, $super, 'AdditionalFilter', $AdditionalFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AdditionalFilter_inherited_1;

      return Opal.defs(self, '$inherited', TMP_AdditionalFilter_inherited_1 = function $$inherited(subclass) {
        var self = this, type_name = nil;

        
        type_name = subclass.$name()['$[]'](/^Mutations::([a-zA-Z]*)Filter$/, 1).$underscore();
        Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'HashFilter').$register_additional_filter(subclass, type_name);
        return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'ArrayFilter').$register_additional_filter(subclass, type_name);
      }, TMP_AdditionalFilter_inherited_1.$$arity = 1)
    })($nesting[0], Opal.const_get_relative($nesting, 'InputFilter'), $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/string_filter"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$[]', '$options', '$==', '$nil?', '$!', '$any?', '$is_a?', '$to_s', '$gsub', '$strip', '$<', '$length', '$>', '$include?', '$!~']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $StringFilter(){};
      var self = $StringFilter = $klass($base, $super, 'StringFilter', $StringFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_StringFilter_filter_2;

      
      self.default_options = $hash2(["strip", "strict", "nils", "empty_is_nil", "empty", "min_length", "max_length", "matches", "in", "discard_empty", "allow_control_characters"], {"strip": true, "strict": false, "nils": false, "empty_is_nil": false, "empty": false, "min_length": nil, "max_length": nil, "matches": nil, "in": nil, "discard_empty": false, "allow_control_characters": false});
      return (Opal.defn(self, '$filter', TMP_StringFilter_filter_2 = function $$filter(data) {
        var $a, TMP_1, self = this;

        
        if ($truthy(($truthy($a = self.$options()['$[]']("empty_is_nil")) ? data['$==']("") : $a))) {
          data = nil};
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ($truthy(($truthy($a = self.$options()['$[]']("strict")['$!']()) ? $send([Opal.const_get_relative($nesting, 'TrueClass'), Opal.const_get_relative($nesting, 'FalseClass'), Opal.const_get_relative($nesting, 'Integer'), Opal.const_get_relative($nesting, 'Float'), Opal.const_get_relative($nesting, 'BigDecimal'), Opal.const_get_relative($nesting, 'Symbol')], 'any?', [], (TMP_1 = function(klass){var self = TMP_1.$$s || this;
if (klass == null) klass = nil;
        return data['$is_a?'](klass)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1)) : $a))) {
          data = data.$to_s()};
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
          } else {
          return [data, "string"]
        };
        if ($truthy(self.$options()['$[]']("allow_control_characters"))) {
          } else {
          data = data.$gsub(/[^[:print:]\t\r\n]+/, " ")
        };
        if ($truthy(self.$options()['$[]']("strip"))) {
          data = data.$strip()};
        if (data['$==']("")) {
          if ($truthy(self.$options()['$[]']("empty"))) {
            return [data, nil]
            } else {
            return [data, "empty"]
          }};
        if ($truthy(($truthy($a = self.$options()['$[]']("min_length")) ? $rb_lt(data.$length(), self.$options()['$[]']("min_length")) : $a))) {
          return [data, "min_length"]};
        if ($truthy(($truthy($a = self.$options()['$[]']("max_length")) ? $rb_gt(data.$length(), self.$options()['$[]']("max_length")) : $a))) {
          return [data, "max_length"]};
        if ($truthy(($truthy($a = self.$options()['$[]']("in")) ? self.$options()['$[]']("in")['$include?'](data)['$!']() : $a))) {
          return [data, "in"]};
        if ($truthy(($truthy($a = self.$options()['$[]']("matches")) ? self.$options()['$[]']("matches")['$!~'](data) : $a))) {
          return [data, "matches"]};
        return [data, nil];
      }, TMP_StringFilter_filter_2.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/integer_filter"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]', '$options', '$==', '$nil?', '$!', '$is_a?', '$=~', '$to_i', '$<', '$>', '$include?']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $IntegerFilter(){};
      var self = $IntegerFilter = $klass($base, $super, 'IntegerFilter', $IntegerFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IntegerFilter_filter_1;

      
      self.default_options = $hash2(["nils", "empty_is_nil", "min", "max", "in"], {"nils": false, "empty_is_nil": false, "min": nil, "max": nil, "in": nil});
      return (Opal.defn(self, '$filter', TMP_IntegerFilter_filter_1 = function $$filter(data) {
        var $a, self = this;

        
        if ($truthy(($truthy($a = self.$options()['$[]']("empty_is_nil")) ? data['$==']("") : $a))) {
          data = nil};
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'Integer'))['$!']())) {
          if ($truthy(($truthy($a = data['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? data['$=~'](/^-?\d/) : $a))) {
            data = data.$to_i()
            } else {
            return [data, "integer"]
          }};
        if ($truthy(($truthy($a = self.$options()['$[]']("min")) ? $rb_lt(data, self.$options()['$[]']("min")) : $a))) {
          return [data, "min"]};
        if ($truthy(($truthy($a = self.$options()['$[]']("max")) ? $rb_gt(data, self.$options()['$[]']("max")) : $a))) {
          return [data, "max"]};
        if ($truthy(($truthy($a = self.$options()['$[]']("in")) ? self.$options()['$[]']("in")['$include?'](data)['$!']() : $a))) {
          return [data, "in"]};
        return [data, nil];
      }, TMP_IntegerFilter_filter_1.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/float_filter"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$!', '$is_a?', '$=~', '$to_f', '$<', '$>']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $FloatFilter(){};
      var self = $FloatFilter = $klass($base, $super, 'FloatFilter', $FloatFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_FloatFilter_filter_1;

      
      self.default_options = $hash2(["nils", "min", "max"], {"nils": false, "min": nil, "max": nil});
      return (Opal.defn(self, '$filter', TMP_FloatFilter_filter_1 = function $$filter(data) {
        var $a, self = this;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'Float'))['$!']())) {
          if ($truthy(($truthy($a = data['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? data['$=~'](/^[-+]?\d*\.?\d+/) : $a))) {
            data = data.$to_f()
          } else if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'Integer')))) {
            data = data.$to_f()
            } else {
            return [data, "float"]
          }};
        if ($truthy(($truthy($a = self.$options()['$[]']("min")) ? $rb_lt(data, self.$options()['$[]']("min")) : $a))) {
          return [data, "min"]};
        if ($truthy(($truthy($a = self.$options()['$[]']("max")) ? $rb_gt(data, self.$options()['$[]']("max")) : $a))) {
          return [data, "max"]};
        return [data, nil];
      }, TMP_FloatFilter_filter_1.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/boolean_filter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$is_a?', '$to_s', '$downcase']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $BooleanFilter(){};
      var self = $BooleanFilter = $klass($base, $super, 'BooleanFilter', $BooleanFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_BooleanFilter_filter_1;

      
      self.default_options = $hash2(["nils"], {"nils": false});
      Opal.const_set($nesting[0], 'BOOL_MAP', $hash2(["true", "1", "false", "0"], {"true": true, "1": true, "false": false, "0": false}));
      return (Opal.defn(self, '$filter', TMP_BooleanFilter_filter_1 = function $$filter(data) {
        var $a, self = this, res = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        if ($truthy(($truthy($a = data['$=='](true)) ? $a : data['$=='](false)))) {
          return [data, nil]};
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'Integer')))) {
          data = data.$to_s()};
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
          
          res = Opal.const_get_relative($nesting, 'BOOL_MAP')['$[]'](data.$downcase());
          if ($truthy(res['$nil?']())) {
            } else {
            return [res, nil]
          };
          return [data, "boolean"];
          } else {
          return [data, "boolean"]
        };
      }, TMP_BooleanFilter_filter_1.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/duck_filter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$each', '$Array', '$respond_to?']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $DuckFilter(){};
      var self = $DuckFilter = $klass($base, $super, 'DuckFilter', $DuckFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DuckFilter_filter_2;

      
      self.default_options = $hash2(["nils", "methods"], {"nils": false, "methods": nil});
      return (Opal.defn(self, '$filter', TMP_DuckFilter_filter_2 = function $$filter(data) {try {

        var TMP_1, self = this;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        $send(self.$Array(self.$options()['$[]']("methods")), 'each', [], (TMP_1 = function(method){var self = TMP_1.$$s || this;
if (method == null) method = nil;
        if ($truthy(data['$respond_to?'](method))) {
            return nil
            } else {
            Opal.ret([data, "duck"])
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        return [data, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_DuckFilter_filter_2.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/date_filter"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]', '$options', '$==', '$nil?', '$is_a?', '$strptime', '$parse', '$respond_to?', '$to_date', '$<=', '$>=']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $DateFilter(){};
      var self = $DateFilter = $klass($base, $super, 'DateFilter', $DateFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_DateFilter_filter_1;

      
      self.default_options = $hash2(["nils", "empty_is_nil", "format", "after", "before"], {"nils": false, "empty_is_nil": false, "format": nil, "after": nil, "before": nil});
      return (Opal.defn(self, '$filter', TMP_DateFilter_filter_1 = function $$filter(data) {
        var $a, self = this, actual_date = nil;

        
        if ($truthy(($truthy($a = self.$options()['$[]']("empty_is_nil")) ? data['$==']("") : $a))) {
          data = nil};
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (""['$=='](data)) {
          return [data, "empty"]};
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'Date')))) {
          actual_date = data
        } else if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
          
          try {
            actual_date = (function() {if ($truthy(self.$options()['$[]']("format"))) {
              return Opal.const_get_relative($nesting, 'Date').$strptime(data, self.$options()['$[]']("format"))
              } else {
              return Opal.const_get_relative($nesting, 'Date').$parse(data)
            }; return nil; })()
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {
              try {
                return [nil, "date"]
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        } else if ($truthy(data['$respond_to?']("to_date"))) {
          actual_date = data.$to_date()
          } else {
          return [nil, "date"]
        };
        if ($truthy(self.$options()['$[]']("after"))) {
          if ($truthy($rb_le(actual_date, self.$options()['$[]']("after")))) {
            return [nil, "after"]}};
        if ($truthy(self.$options()['$[]']("before"))) {
          if ($truthy($rb_ge(actual_date, self.$options()['$[]']("before")))) {
            return [nil, "before"]}};
        return [actual_date, nil];
      }, TMP_DateFilter_filter_1.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/time_filter"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$is_a?', '$strptime', '$parse', '$respond_to?', '$to_time', '$<=', '$>=']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $TimeFilter(){};
      var self = $TimeFilter = $klass($base, $super, 'TimeFilter', $TimeFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TimeFilter_filter_1;

      
      self.default_options = $hash2(["nils", "format", "after", "before"], {"nils": false, "format": nil, "after": nil, "before": nil});
      return (Opal.defn(self, '$filter', TMP_TimeFilter_filter_1 = function $$filter(data) {
        var self = this, actual_time = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (""['$=='](data)) {
          return [data, "empty"]};
        if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'Time')))) {
          actual_time = data
        } else if ($truthy(data['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
          
          try {
            actual_time = (function() {if ($truthy(self.$options()['$[]']("format"))) {
              return Opal.const_get_relative($nesting, 'Time').$strptime(data, self.$options()['$[]']("format"))
              } else {
              return Opal.const_get_relative($nesting, 'Time').$parse(data)
            }; return nil; })()
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'ArgumentError')])) {
              try {
                return [nil, "time"]
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        } else if ($truthy(data['$respond_to?']("to_time"))) {
          actual_time = data.$to_time()
          } else {
          return [nil, "time"]
        };
        if ($truthy(self.$options()['$[]']("after"))) {
          if ($truthy($rb_le(actual_time, self.$options()['$[]']("after")))) {
            return [nil, "after"]}};
        if ($truthy(self.$options()['$[]']("before"))) {
          if ($truthy($rb_ge(actual_time, self.$options()['$[]']("before")))) {
            return [nil, "before"]}};
        return [actual_time, nil];
      }, TMP_TimeFilter_filter_1.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/file_filter"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$==', '$concat', '$each', '$respond_to?', '$is_a?', '$>', '$size']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $FileFilter(){};
      var self = $FileFilter = $klass($base, $super, 'FileFilter', $FileFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_FileFilter_filter_2;

      
      self.default_options = $hash2(["nils", "upload", "size"], {"nils": false, "upload": false, "size": nil});
      return (Opal.defn(self, '$filter', TMP_FileFilter_filter_2 = function $$filter(data) {try {

        var TMP_1, self = this, methods = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if (data['$==']("")) {
          return [data, "empty"]};
        methods = ["read", "size"];
        if ($truthy(self.$options()['$[]']("upload"))) {
          methods.$concat(["original_filename", "content_type"])};
        $send(methods, 'each', [], (TMP_1 = function(method){var self = TMP_1.$$s || this;
if (method == null) method = nil;
        if ($truthy(data['$respond_to?'](method))) {
            return nil
            } else {
            Opal.ret([data, "file"])
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
        if ($truthy(self.$options()['$[]']("size")['$is_a?'](Opal.const_get_relative($nesting, 'Integer')))) {
          if ($truthy($rb_gt(data.$size(), self.$options()['$[]']("size")))) {
            return [data, "size"]}};
        return [data, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_FileFilter_filter_2.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/model_filter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]', '$options', '$camelize', '$to_s', '$is_a?', '$constantize', '$[]=', '$-', '$cache_constants?', '$initialize_constants!', '$nil?', '$run', '$success?', '$result', '$errors', '$!', '$respond_to?', '$new_record?']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $ModelFilter(){};
      var self = $ModelFilter = $klass($base, $super, 'ModelFilter', $ModelFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ModelFilter_initialize_1, TMP_ModelFilter_initialize_constants$B_2, TMP_ModelFilter_filter_3;

      def.initialize_constants = def.name = nil;
      
      self.default_options = $hash2(["nils", "class", "builder", "new_records"], {"nils": false, "class": nil, "builder": nil, "new_records": false});
      
      Opal.defn(self, '$initialize', TMP_ModelFilter_initialize_1 = function $$initialize(name, opts) {
        var self = this, $iter = TMP_ModelFilter_initialize_1.$$p, $yield = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ($iter) TMP_ModelFilter_initialize_1.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ModelFilter_initialize_1, false), [opts], null);
        return (self.name = name);
      }, TMP_ModelFilter_initialize_1.$$arity = -2);
      
      Opal.defn(self, '$initialize_constants!', TMP_ModelFilter_initialize_constants$B_2 = function() {
        var $a, $b, self = this, class_const = nil, $writer = nil;

        
        self.initialize_constants = ($truthy($a = self.initialize_constants) ? $a : ((class_const = ($truthy($b = self.$options()['$[]']("class")) ? $b : self.name.$to_s().$camelize())), (function() {if ($truthy(class_const['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
          return (class_const = class_const.$constantize())
          } else {
          return nil
        }; return nil; })(), (($writer = ["class", class_const]), $send(self.$options(), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), (function() {if ($truthy(self.$options()['$[]']("builder"))) {
          if ($truthy(self.$options()['$[]']("builder")['$is_a?'](Opal.const_get_relative($nesting, 'String')))) {
            
            $writer = ["builder", self.$options()['$[]']("builder").$constantize()];
            $send(self.$options(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          }
          } else {
          return nil
        }; return nil; })(), true));
        if ($truthy(Opal.const_get_relative($nesting, 'Mutations')['$cache_constants?']())) {
          return nil
          } else {
          
          if ($truthy(self.$options()['$[]']("class"))) {
            
            $writer = ["class", self.$options()['$[]']("class").$to_s().$constantize()];
            $send(self.$options(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(self.$options()['$[]']("builder"))) {
            
            $writer = ["builder", self.$options()['$[]']("builder").$to_s().$constantize()];
            $send(self.$options(), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
            } else {
            return nil
          };
        };
      }, TMP_ModelFilter_initialize_constants$B_2.$$arity = 0);
      return (Opal.defn(self, '$filter', TMP_ModelFilter_filter_3 = function $$filter(data) {
        var $a, $b, self = this, ret = nil;

        
        self['$initialize_constants!']();
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        if ($truthy(($truthy($a = data['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))) ? self.$options()['$[]']("builder") : $a))) {
          
          ret = self.$options()['$[]']("builder").$run(data);
          if ($truthy(ret['$success?']())) {
            data = ret.$result()
            } else {
            return [data, ret.$errors()]
          };};
        if ($truthy(data['$is_a?'](self.$options()['$[]']("class")))) {
          
          if ($truthy(($truthy($a = self.$options()['$[]']("new_records")['$!']()) ? ($truthy($b = data['$respond_to?']("new_record?")) ? data['$new_record?']() : $b) : $a))) {
            return [data, "new_records"]};
          return [data, nil];};
        return [data, "model"];
      }, TMP_ModelFilter_filter_3.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'InputFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/symbol_filter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$nil?', '$[]', '$options', '$===', '$to_sym', '$!', '$include?']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $SymbolFilter(){};
      var self = $SymbolFilter = $klass($base, $super, 'SymbolFilter', $SymbolFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_SymbolFilter_filter_1;

      
      self.default_options = $hash2(["nils", "in"], {"nils": false, "in": nil});
      return (Opal.defn(self, '$filter', TMP_SymbolFilter_filter_1 = function $$filter(data) {
        var $a, self = this, $case = nil;

        
        if ($truthy(data['$nil?']())) {
          
          if ($truthy(self.$options()['$[]']("nils"))) {
            return [nil, nil]};
          return [nil, "nils"];};
        $case = data;
        if (Opal.const_get_relative($nesting, 'Symbol')['$===']($case)) {nil}
        else if (Opal.const_get_relative($nesting, 'String')['$===']($case)) {data = data.$to_sym()}
        else {return [nil, "symbol"]};
        if ($truthy(($truthy($a = self.$options()['$[]']("in")) ? self.$options()['$[]']("in")['$include?'](data)['$!']() : $a))) {
          return [data, "in"]};
        return [data, nil];
      }, TMP_SymbolFilter_filter_1.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/outcome"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Outcome(){};
      var self = $Outcome = $klass($base, $super, 'Outcome', $Outcome);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Outcome_initialize_1, TMP_Outcome_success$q_2;

      def.success = nil;
      
      self.$attr_reader("result", "errors", "inputs");
      
      Opal.defn(self, '$initialize', TMP_Outcome_initialize_1 = function $$initialize(is_success, result, errors, inputs) {
        var $a, self = this;

        return $a = [is_success, result, errors, inputs], (self.success = $a[0]), (self.result = $a[1]), (self.errors = $a[2]), (self.inputs = $a[3]), $a
      }, TMP_Outcome_initialize_1.$$arity = 4);
      return (Opal.defn(self, '$success?', TMP_Outcome_success$q_2 = function() {
        var self = this;

        return self.success
      }, TMP_Outcome_success$q_2.$$arity = 0), nil) && 'success?';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations/command"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$send', '$input_filters', '$to_proc', '$each', '$define_method', '$[]', '$has_key?', '$[]=', '$-', '$private', '$create_attr_methods', '$run', '$new', '$run!', '$validation_outcome', '$==', '$superclass', '$dup', '$inject', '$with_indifferent_access', '$respond_to?', '$raise', '$merge!', '$filter', '$has_errors?', '$validate', '$class', '$!', '$nil?', '$execute', '$success?', '$result', '$errors', '$protected', '$attr_reader', '$is_a?', '$tap', '$split', '$to_s', '$pop', '$to_sym', '$any?']);
  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Command(){};
      var self = $Command = $klass($base, $super, 'Command', $Command);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Command_initialize_13, TMP_Command_input_filters_14, TMP_Command_has_errors$q_15, TMP_Command_run_16, TMP_Command_run$B_17, TMP_Command_validation_outcome_18, TMP_Command_validate_19, TMP_Command_execute_20, TMP_Command_add_error_23, TMP_Command_merge_errors_24;

      def.raw_inputs = def.errors = def.inputs = nil;
      
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_create_attr_methods_1, TMP_required_6, TMP_optional_7, TMP_run_8, TMP_run$B_9, TMP_validate_10, TMP_input_filters_11;

        
        
        Opal.defn(self, '$create_attr_methods', TMP_create_attr_methods_1 = function $$create_attr_methods(meth) {
          var TMP_2, self = this, $iter = TMP_create_attr_methods_1.$$p, block = $iter || nil, keys = nil;

          if ($iter) TMP_create_attr_methods_1.$$p = null;
          
          $send(self.$input_filters(), 'send', [meth], block.$to_proc());
          keys = self.$input_filters().$send("" + (meth) + "_keys");
          return $send(keys, 'each', [], (TMP_2 = function(key){var self = TMP_2.$$s || this, TMP_3, TMP_4, TMP_5;
if (key == null) key = nil;
          
            $send(self, 'define_method', [key], (TMP_3 = function(){var self = TMP_3.$$s || this;
              if (self.inputs == null) self.inputs = nil;

            return self.inputs['$[]'](key)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3));
            $send(self, 'define_method', ["" + (key) + "_present?"], (TMP_4 = function(){var self = TMP_4.$$s || this;
              if (self.inputs == null) self.inputs = nil;

            return self.inputs['$has_key?'](key)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
            return $send(self, 'define_method', ["" + (key) + "="], (TMP_5 = function(v){var self = TMP_5.$$s || this, $writer = nil;
              if (self.inputs == null) self.inputs = nil;
if (v == null) v = nil;
            
              $writer = [key, v];
              $send(self.inputs, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
        }, TMP_create_attr_methods_1.$$arity = 1);
        self.$private("create_attr_methods");
        
        Opal.defn(self, '$required', TMP_required_6 = function $$required() {
          var self = this, $iter = TMP_required_6.$$p, block = $iter || nil;

          if ($iter) TMP_required_6.$$p = null;
          return $send(self, 'create_attr_methods', ["required"], block.$to_proc())
        }, TMP_required_6.$$arity = 0);
        
        Opal.defn(self, '$optional', TMP_optional_7 = function $$optional() {
          var self = this, $iter = TMP_optional_7.$$p, block = $iter || nil;

          if ($iter) TMP_optional_7.$$p = null;
          return $send(self, 'create_attr_methods', ["optional"], block.$to_proc())
        }, TMP_optional_7.$$arity = 0);
        
        Opal.defn(self, '$run', TMP_run_8 = function $$run($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(self, 'new', Opal.to_a(args)).$run()
        }, TMP_run_8.$$arity = -1);
        
        Opal.defn(self, '$run!', TMP_run$B_9 = function($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(self, 'new', Opal.to_a(args))['$run!']()
        }, TMP_run$B_9.$$arity = -1);
        
        Opal.defn(self, '$validate', TMP_validate_10 = function $$validate($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(self, 'new', Opal.to_a(args)).$validation_outcome()
        }, TMP_validate_10.$$arity = -1);
        return (Opal.defn(self, '$input_filters', TMP_input_filters_11 = function $$input_filters() {
          var $a, self = this;
          if (self.input_filters == null) self.input_filters = nil;

          return (self.input_filters = ($truthy($a = self.input_filters) ? $a : (function() {if (Opal.const_get_relative($nesting, 'Command')['$=='](self.$superclass())) {
            return Opal.const_get_relative($nesting, 'HashFilter').$new()
            } else {
            return self.$superclass().$input_filters().$dup()
          }; return nil; })()))
        }, TMP_input_filters_11.$$arity = 0), nil) && 'input_filters';
      })(Opal.get_singleton_class(self), $nesting);
      
      Opal.defn(self, '$initialize', TMP_Command_initialize_13 = function $$initialize($a_rest) {
        var TMP_12, $b, $c, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        self.raw_inputs = $send(args, 'inject', [$hash2([], {}).$with_indifferent_access()], (TMP_12 = function(h, arg){var self = TMP_12.$$s || this;
if (h == null) h = nil;if (arg == null) arg = nil;
        
          if ($truthy(arg['$respond_to?']("to_hash"))) {
            } else {
            self.$raise(Opal.const_get_relative($nesting, 'ArgumentError').$new("All arguments must be hashes"))
          };
          return h['$merge!'](arg);}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12));
        $c = self.$input_filters().$filter(self.raw_inputs), $b = Opal.to_ary($c), (self.inputs = ($b[0] == null ? nil : $b[0])), (self.errors = ($b[1] == null ? nil : $b[1])), $c;
        if ($truthy(self['$has_errors?']())) {
          return nil
          } else {
          return self.$validate()
        };
      }, TMP_Command_initialize_13.$$arity = -1);
      
      Opal.defn(self, '$input_filters', TMP_Command_input_filters_14 = function $$input_filters() {
        var self = this;

        return self.$class().$input_filters()
      }, TMP_Command_input_filters_14.$$arity = 0);
      
      Opal.defn(self, '$has_errors?', TMP_Command_has_errors$q_15 = function() {
        var self = this;

        return self.errors['$nil?']()['$!']()
      }, TMP_Command_has_errors$q_15.$$arity = 0);
      
      Opal.defn(self, '$run', TMP_Command_run_16 = function $$run() {
        var self = this;

        
        if ($truthy(self['$has_errors?']())) {
          return self.$validation_outcome()};
        return self.$validation_outcome(self.$execute());
      }, TMP_Command_run_16.$$arity = 0);
      
      Opal.defn(self, '$run!', TMP_Command_run$B_17 = function() {
        var self = this, outcome = nil;

        
        outcome = self.$run();
        if ($truthy(outcome['$success?']())) {
          return outcome.$result()
          } else {
          return self.$raise(Opal.const_get_relative($nesting, 'ValidationException').$new(outcome.$errors()))
        };
      }, TMP_Command_run$B_17.$$arity = 0);
      
      Opal.defn(self, '$validation_outcome', TMP_Command_validation_outcome_18 = function $$validation_outcome(result) {
        var self = this;

        if (result == null) {
          result = nil;
        }
        return Opal.const_get_relative($nesting, 'Outcome').$new(self['$has_errors?']()['$!'](), (function() {if ($truthy(self['$has_errors?']())) {
          return nil
          } else {
          return result
        }; return nil; })(), self.errors, self.inputs)
      }, TMP_Command_validation_outcome_18.$$arity = -1);
      self.$protected();
      self.$attr_reader("inputs", "raw_inputs");
      
      Opal.defn(self, '$validate', TMP_Command_validate_19 = function $$validate() {
        var self = this;

        return nil
      }, TMP_Command_validate_19.$$arity = 0);
      
      Opal.defn(self, '$execute', TMP_Command_execute_20 = function $$execute() {
        var self = this;

        return nil
      }, TMP_Command_execute_20.$$arity = 0);
      
      Opal.defn(self, '$add_error', TMP_Command_add_error_23 = function $$add_error(key, kind, message) {
        var $a, TMP_21, self = this;

        if (message == null) {
          message = nil;
        }
        
        if ($truthy(kind['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError').$new("Invalid kind"))
        };
        self.errors = ($truthy($a = self.errors) ? $a : Opal.const_get_relative($nesting, 'ErrorHash').$new());
        return $send(self.errors, 'tap', [], (TMP_21 = function(errs){var self = TMP_21.$$s || this, TMP_22, path = nil, last = nil, inner = nil, $writer = nil;
if (errs == null) errs = nil;
        
          path = key.$to_s().$split(".");
          last = path.$pop();
          inner = $send(path, 'inject', [errs], (TMP_22 = function(cur_errors, part){var self = TMP_22.$$s || this, $b, $writer = nil;
if (cur_errors == null) cur_errors = nil;if (part == null) part = nil;
          return ($truthy($b = cur_errors['$[]'](part.$to_sym())) ? $b : (($writer = [part.$to_sym(), Opal.const_get_relative($nesting, 'ErrorHash').$new()]), $send(cur_errors, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}, TMP_22.$$s = self, TMP_22.$$arity = 2, TMP_22));
          
          $writer = [last, Opal.const_get_relative($nesting, 'ErrorAtom').$new(key, kind, $hash2(["message"], {"message": message}))];
          $send(inner, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21));
      }, TMP_Command_add_error_23.$$arity = -3);
      return (Opal.defn(self, '$merge_errors', TMP_Command_merge_errors_24 = function $$merge_errors(hash) {
        var $a, self = this;

        if ($truthy(hash['$any?']())) {
          
          self.errors = ($truthy($a = self.errors) ? $a : Opal.const_get_relative($nesting, 'ErrorHash').$new());
          return self.errors['$merge!'](hash);
          } else {
          return nil
        }
      }, TMP_Command_merge_errors_24.$$arity = 1), nil) && 'merge_errors';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["mutations"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $writer = nil;

  Opal.add_stubs(['$require', '$new', '$cache_constants=', '$-']);
  
  self.$require("active_support/core_ext/hash/indifferent_access");
  self.$require("active_support/core_ext/string/inflections");
  self.$require("date");
  self.$require("time");
  self.$require("bigdecimal");
  self.$require("mutations/version");
  self.$require("mutations/exception");
  self.$require("mutations/errors");
  self.$require("mutations/input_filter");
  self.$require("mutations/additional_filter");
  self.$require("mutations/string_filter");
  self.$require("mutations/integer_filter");
  self.$require("mutations/float_filter");
  self.$require("mutations/boolean_filter");
  self.$require("mutations/duck_filter");
  self.$require("mutations/date_filter");
  self.$require("mutations/time_filter");
  self.$require("mutations/file_filter");
  self.$require("mutations/model_filter");
  self.$require("mutations/array_filter");
  self.$require("mutations/hash_filter");
  self.$require("mutations/symbol_filter");
  self.$require("mutations/outcome");
  self.$require("mutations/command");
  (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_error_message_creator_1, TMP_error_message_creator$eq_2, TMP_cache_constants$eq_3, TMP_cache_constants$q_4;

      
      
      Opal.defn(self, '$error_message_creator', TMP_error_message_creator_1 = function $$error_message_creator() {
        var $a, self = this;
        if (self.error_message_creator == null) self.error_message_creator = nil;

        return (self.error_message_creator = ($truthy($a = self.error_message_creator) ? $a : Opal.const_get_relative($nesting, 'DefaultErrorMessageCreator').$new()))
      }, TMP_error_message_creator_1.$$arity = 0);
      
      Opal.defn(self, '$error_message_creator=', TMP_error_message_creator$eq_2 = function(creator) {
        var self = this;

        return (self.error_message_creator = creator)
      }, TMP_error_message_creator$eq_2.$$arity = 1);
      
      Opal.defn(self, '$cache_constants=', TMP_cache_constants$eq_3 = function(val) {
        var self = this;

        return (self.cache_constants = val)
      }, TMP_cache_constants$eq_3.$$arity = 1);
      return (Opal.defn(self, '$cache_constants?', TMP_cache_constants$q_4 = function() {
        var self = this;
        if (self.cache_constants == null) self.cache_constants = nil;

        return self.cache_constants
      }, TMP_cache_constants$q_4.$$arity = 0), nil) && 'cache_constants?';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], $nesting);
  
  $writer = [true];
  $send(Opal.const_get_relative($nesting, 'Mutations'), 'cache_constants=', Opal.to_a($writer));
  return $writer[$rb_minus($writer["length"], 1)];;
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/filters/outbound_filter"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  return (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $OutboundFilter(){};
      var self = $OutboundFilter = $klass($base, $super, 'OutboundFilter', $OutboundFilter);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_OutboundFilter_filter_1;

      
      self.default_options = $hash2([], {});
      return (Opal.defn(self, '$filter', TMP_OutboundFilter_filter_1 = function $$filter(data) {
        var self = this;

        return [data, "outbound"]
      }, TMP_OutboundFilter_filter_1.$$arity = 1), nil) && 'filter';
    })($nesting[0], Opal.const_get_relative($nesting, 'AdditionalFilter'), $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/http"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$each', '$define_singleton_method', '$send', '$new', '$define_method', '$attr_reader', '$>', '$+', '$-', '$<', '$delete', '$succeed', '$fail', '$promise', '$parse', '$private', '$tap', '$proc', '$ok?', '$resolve', '$reject', '$from_object', '$call']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $HTTP(){};
      var self = $HTTP = $klass($base, $super, 'HTTP', $HTTP);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_HTTP_1, TMP_HTTP_initialize_4, TMP_HTTP_active$q_5, TMP_HTTP_active_requests_6, TMP_HTTP_incr_active_requests_7, TMP_HTTP_decr_active_requests_8, TMP_HTTP_send_9, TMP_HTTP_json_10, TMP_HTTP_ok$q_11, TMP_HTTP_get_header_12, TMP_HTTP_inspect_13, TMP_HTTP_promise_16, TMP_HTTP_succeed_17, TMP_HTTP_fail_18;

      def.handler = def.json = def.body = def.ok = def.xhr = def.url = def.method = def.promise = def.status_code = nil;
      
      Opal.const_set($nesting[0], 'ACTIONS', ["get", "post", "put", "delete", "patch", "head"]);
      $send(Opal.const_get_relative($nesting, 'ACTIONS'), 'each', [], (TMP_HTTP_1 = function(action){var self = TMP_HTTP_1.$$s || this, TMP_2, TMP_3;
if (action == null) action = nil;
      
        $send(self, 'define_singleton_method', [action], (TMP_2 = function(url, options){var self = TMP_2.$$s || this, block;

          block = TMP_2.$$p || nil;
          if (block) TMP_2.$$p = null;
          if (options == null) {
            options = $hash2([], {});
          }if (url == null) url = nil;
        return self.$new().$send(action, url, options, block)}, TMP_2.$$s = self, TMP_2.$$arity = -2, TMP_2));
        return $send(self, 'define_method', [action], (TMP_3 = function(url, options){var self = TMP_3.$$s || this, block;

          block = TMP_3.$$p || nil;
          if (block) TMP_3.$$p = null;
          if (options == null) {
            options = $hash2([], {});
          }if (url == null) url = nil;
        return self.$send(action, url, options, block)}, TMP_3.$$s = self, TMP_3.$$arity = -2, TMP_3));}, TMP_HTTP_1.$$s = self, TMP_HTTP_1.$$arity = 1, TMP_HTTP_1));
      self.$attr_reader("body", "error_message", "method", "status_code", "url", "xhr");
      
      Opal.defn(self, '$initialize', TMP_HTTP_initialize_4 = function $$initialize() {
        var self = this;

        return (self.ok = true)
      }, TMP_HTTP_initialize_4.$$arity = 0);
      Opal.defs(self, '$active?', TMP_HTTP_active$q_5 = function() {
        var self = this, jquery_active_requests = nil;
        if (self.active_requests == null) self.active_requests = nil;

        
        jquery_active_requests = 0;
        
        if (typeof jQuery !== "undefined" && typeof jQuery.active !== "undefined" && jQuery.active !== null) {
          jquery_active_requests = jQuery.active;
        }
      ;
        return $rb_gt($rb_plus(jquery_active_requests, self.active_requests), 0);
      }, TMP_HTTP_active$q_5.$$arity = 0);
      Opal.defs(self, '$active_requests', TMP_HTTP_active_requests_6 = function $$active_requests() {
        var $a, self = this;
        if (self.active_requests == null) self.active_requests = nil;

        
        self.active_requests = ($truthy($a = self.active_requests) ? $a : 0);
        return self.active_requests;
      }, TMP_HTTP_active_requests_6.$$arity = 0);
      Opal.defs(self, '$incr_active_requests', TMP_HTTP_incr_active_requests_7 = function $$incr_active_requests() {
        var $a, self = this;
        if (self.active_requests == null) self.active_requests = nil;

        
        self.active_requests = ($truthy($a = self.active_requests) ? $a : 0);
        return (self.active_requests = $rb_plus(self.active_requests, 1));
      }, TMP_HTTP_incr_active_requests_7.$$arity = 0);
      Opal.defs(self, '$decr_active_requests', TMP_HTTP_decr_active_requests_8 = function $$decr_active_requests() {
        var $a, self = this;
        if (self.active_requests == null) self.active_requests = nil;

        
        self.active_requests = ($truthy($a = self.active_requests) ? $a : 0);
        self.active_requests = $rb_minus(self.active_requests, 1);
        if ($truthy($rb_lt(self.active_requests, 0))) {
          
          console.log("Ooops, Hyperstack::HTTP active_requests out of sync!");
          return (self.active_requests = 0);
          } else {
          return nil
        };
      }, TMP_HTTP_decr_active_requests_8.$$arity = 0);
      
      Opal.defn(self, '$send', TMP_HTTP_send_9 = function $$send(method, url, options, block) {
        var self = this;

        
        self.method = method;
        self.url = url;
        self.payload = options.$delete("payload");
        self.handler = block;
        
        var payload_to_send = null;
        var content_type = null;
        if (typeof(this.payload) === 'string') {
          payload_to_send = this.payload;
        }
        else if (this.payload != nil) {
          payload_to_send = this.payload.$to_json();
          content_type = 'application/json';
        }

        var xhr = new XMLHttpRequest();

        xhr.onreadystatechange = function() {
          if(xhr.readyState === XMLHttpRequest.DONE) {
            self.$class().$decr_active_requests();
            if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {
              return self.$succeed(xhr.responseText, xhr.status, xhr);
            } else {
              return self.$fail(xhr, xhr.status, xhr.statusText);
            }
          }
        }
        xhr.open(this.method.toUpperCase(), this.url);
        if (payload_to_send !== null && content_type !== null) {
          xhr.setRequestHeader("Content-Type", content_type);
        }
        if (options["$has_key?"]("headers")) {
          var headers = options['$[]']("headers");
          var keys = headers.$keys();
          var keys_length = keys.length;
          for (var i=0; i < keys_length; i++) {
            xhr.setRequestHeader( keys[i], headers['$[]'](keys[i]) );
          }
        }
        if (payload_to_send !== null) {
          self.$class().$incr_active_requests();
          xhr.send(payload_to_send);
        } else {
          self.$class().$incr_active_requests();
          xhr.send();
        }
      ;
        if ($truthy(self.handler)) {
          return self
          } else {
          return self.$promise()
        };
      }, TMP_HTTP_send_9.$$arity = 4);
      
      Opal.defn(self, '$json', TMP_HTTP_json_10 = function $$json() {
        var $a, self = this;

        return (self.json = ($truthy($a = self.json) ? $a : Opal.const_get_relative($nesting, 'JSON').$parse(self.body)))
      }, TMP_HTTP_json_10.$$arity = 0);
      
      Opal.defn(self, '$ok?', TMP_HTTP_ok$q_11 = function() {
        var self = this;

        return self.ok
      }, TMP_HTTP_ok$q_11.$$arity = 0);
      
      Opal.defn(self, '$get_header', TMP_HTTP_get_header_12 = function $$get_header(key) {
        var self = this;

        
        var value = self.xhr.getResponseHeader(key);
        return (value === null) ? nil : value;
      
      }, TMP_HTTP_get_header_12.$$arity = 1);
      
      Opal.defn(self, '$inspect', TMP_HTTP_inspect_13 = function $$inspect() {
        var self = this;

        return "" + "#<HTTP @url=" + (self.url) + " @method=" + (self.method) + ">"
      }, TMP_HTTP_inspect_13.$$arity = 0);
      self.$private();
      
      Opal.defn(self, '$promise', TMP_HTTP_promise_16 = function $$promise() {
        var TMP_14, self = this;

        
        if ($truthy(self.promise)) {
          return self.promise};
        return (self.promise = $send(Opal.const_get_relative($nesting, 'Promise').$new(), 'tap', [], (TMP_14 = function(promise){var self = TMP_14.$$s || this, TMP_15;
if (promise == null) promise = nil;
        return (self.handler = $send(self, 'proc', [], (TMP_15 = function(res){var self = TMP_15.$$s || this;
if (res == null) res = nil;
          if ($truthy(res['$ok?']())) {
              return promise.$resolve(res)
              } else {
              return promise.$reject(res)
            }}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15)))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14)));
      }, TMP_HTTP_promise_16.$$arity = 0);
      
      Opal.defn(self, '$succeed', TMP_HTTP_succeed_17 = function $$succeed(data, status, xhr) {
        var self = this;

        
        
        self.body = data;
        self.xhr  = xhr;
        self.status_code = xhr.status;

        if (typeof(data) === 'object') {
          self.json = Opal.const_get_relative($nesting, 'JSON').$from_object(data);
        }
      ;
        if ($truthy(self.handler)) {
          return self.handler.$call(self)
          } else {
          return nil
        };
      }, TMP_HTTP_succeed_17.$$arity = 3);
      return (Opal.defn(self, '$fail', TMP_HTTP_fail_18 = function $$fail(xhr, status, error) {
        var self = this;

        
        
        self.body = xhr.responseText;
        self.xhr = xhr;
        self.status_code = xhr.status;
      ;
        self.ok = false;
        if ($truthy(self.handler)) {
          return self.handler.$call(self)
          } else {
          return nil
        };
      }, TMP_HTTP_fail_18.$$arity = 3), nil) && 'fail';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/transport/client_drivers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]', '$opts', '$extend', '$on_opal_client?', '$client_drivers_get_acting_user_id', '$env', '$==', '$respond_to?', '$tap', '$new', '$resolve', '$each', '$is_a?', '$connect_to', '$name', '$then', '$load', '$id', '$raise', '$inspect', '$class', '$connect', '$last', '$split', '$+', '$to_s', '$include?', '$open_channels', '$<<', '$add_connection', '$gsub', '$lambda', '$get_queued_data', '$post', '$polling_path', '$action_cable_consumer', '$json', '$complete_connection', '$sync_dispatch', '$parse', '$get', '$include', '$dispatch_from_server', '$constantize', '$!=', '$attr_reader', '$isomorphic_method', '$send_to_server', '$when_on_server', '$acting_user', '$controller', '$when_on_client', '$fail', '$zero?', '$after', '$-', '$[]=', '$every']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_anti_csrf_token_1, TMP_Hyperstack_connect_11, TMP_Hyperstack_connect_session_12, TMP_Hyperstack_action_cable_consumer_13;

    
    Opal.defs(self, '$anti_csrf_token', TMP_Hyperstack_anti_csrf_token_1 = function $$anti_csrf_token() {
      var self = this;

      return Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("form_authenticity_token")
    }, TMP_Hyperstack_anti_csrf_token_1.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      function $Application(){};
      var self = $Application = $klass($base, $super, 'Application', $Application);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Application_acting_user_id_2, TMP_Application_acting_user_id_3, TMP_Application_env_4, TMP_Application_production$q_5;

      
      self.$extend(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Component'), 'IsomorphicHelpers'), 'ClassMethods'));
      if ($truthy(self['$on_opal_client?']())) {
        Opal.defs(self, '$acting_user_id', TMP_Application_acting_user_id_2 = function $$acting_user_id() {
          var self = this;

          return Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("acting_user_id")
        }, TMP_Application_acting_user_id_2.$$arity = 0)
        } else {
        Opal.defs(self, '$acting_user_id', TMP_Application_acting_user_id_3 = function $$acting_user_id() {
          var self = this;

          return Opal.const_get_relative($nesting, 'ClientDrivers').$client_drivers_get_acting_user_id()
        }, TMP_Application_acting_user_id_3.$$arity = 0)
      };
      Opal.defs(self, '$env', TMP_Application_env_4 = function $$env() {
        var self = this;
        if (self.env == null) self.env = nil;

        
        if ($truthy(self.env)) {
          } else {
          self.env = Opal.const_get_relative($nesting, 'ClientDrivers').$env()
        };
        return self.env;
      }, TMP_Application_env_4.$$arity = 0);
      return Opal.defs(self, '$production?', TMP_Application_production$q_5 = function() {
        var self = this;

        return self.$env()['$==']("production")
      }, TMP_Application_production$q_5.$$arity = 0);
    })($nesting[0], null, $nesting);
    if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      
      (function($base, $parent_nesting) {
        var $Model, self = $Model = $module($base, 'Model');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Model_load_7;

        if ($truthy(self['$respond_to?']("load"))) {
          } else {
          Opal.defs(self, '$load', TMP_Model_load_7 = function $$load() {
            var TMP_6, self = this, $iter = TMP_Model_load_7.$$p, $yield = $iter || nil;

            if ($iter) TMP_Model_load_7.$$p = null;
            return $send(Opal.const_get_relative($nesting, 'Promise').$new(), 'tap', [], (TMP_6 = function(promise){var self = TMP_6.$$s || this;
if (promise == null) promise = nil;
            return promise.$resolve(Opal.yieldX($yield, []))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
          }, TMP_Model_load_7.$$arity = 0)
        }
      })($nesting[0], $nesting);
      Opal.defs(self, '$connect', TMP_Hyperstack_connect_11 = function $$connect($a_rest) {
        var TMP_8, self = this, channels;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        channels = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          channels[$arg_idx - 0] = arguments[$arg_idx];
        }
        return $send(channels, 'each', [], (TMP_8 = function(channel){var self = TMP_8.$$s || this, $a, TMP_9, TMP_10;
if (channel == null) channel = nil;
        if ($truthy(channel['$is_a?'](Opal.const_get_relative($nesting, 'Class')))) {
            return Opal.const_get_relative($nesting, 'IncomingBroadcast').$connect_to(channel.$name())
          } else if ($truthy(($truthy($a = channel['$is_a?'](Opal.const_get_relative($nesting, 'String'))) ? $a : channel['$is_a?'](Opal.const_get_relative($nesting, 'Array'))))) {
            return $send(Opal.const_get_relative($nesting, 'IncomingBroadcast'), 'connect_to', Opal.to_a(channel))
          } else if ($truthy(channel['$respond_to?']("id"))) {
            return $send($send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Model'), 'load', [], (TMP_9 = function(){var self = TMP_9.$$s || this;

            return channel.$id()}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9)), 'then', [], (TMP_10 = function(id){var self = TMP_10.$$s || this;
if (id == null) id = nil;
            
              if ($truthy(id)) {
                } else {
                self.$raise("" + ("" + "Hyperstack.connect cannot connect to " + (channel.$inspect()) + ".  ") + "The id is nil. This can be caused by connecting to a model " + "that is not saved, or that does not exist.")
              };
              return Opal.const_get_relative($nesting, 'IncomingBroadcast').$connect_to(channel.$class().$name(), id);}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10))
            } else {
            return self.$raise("" + ("" + "Hyperstack.connect cannot connect to " + (channel.$inspect()) + ".\n") + "Channels must be either a class, or a class name,\n" + "a string in the form 'ClassName-id',\n" + "an array in the form [class, id] or [class-name, id],\n" + "or an object that responds to the id method with a non-nil value")
          }}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
      }, TMP_Hyperstack_connect_11.$$arity = -1);
      Opal.defs(self, '$connect_session', TMP_Hyperstack_connect_session_12 = function $$connect_session() {
        var self = this;

        return self.$connect(["Hyperstack::Session", Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("id").$split("-").$last()])
      }, TMP_Hyperstack_connect_session_12.$$arity = 0);
      Opal.defs(self, '$action_cable_consumer', TMP_Hyperstack_action_cable_consumer_13 = function $$action_cable_consumer() {
        var self = this;

        return Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("action_cable_consumer")
      }, TMP_Hyperstack_action_cable_consumer_13.$$arity = 0);
      (function($base, $super, $parent_nesting) {
        function $IncomingBroadcast(){};
        var self = $IncomingBroadcast = $klass($base, $super, 'IncomingBroadcast', $IncomingBroadcast);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_IncomingBroadcast_open_channels_14, TMP_IncomingBroadcast_add_connection_15, TMP_IncomingBroadcast_connect_to_18;

        
        Opal.defs(self, '$open_channels', TMP_IncomingBroadcast_open_channels_14 = function $$open_channels() {
          var $a, self = this;
          if (self.open_channels == null) self.open_channels = nil;

          return (self.open_channels = ($truthy($a = self.open_channels) ? $a : Opal.const_get_relative($nesting, 'Set').$new()))
        }, TMP_IncomingBroadcast_open_channels_14.$$arity = 0);
        Opal.defs(self, '$add_connection', TMP_IncomingBroadcast_add_connection_15 = function $$add_connection(channel_name, id) {
          var self = this, channel_string = nil;

          if (id == null) {
            id = nil;
          }
          
          channel_string = "" + (channel_name) + ((function() {if ($truthy(id)) {
            return $rb_plus("-", id.$to_s())
            } else {
            return nil
          }; return nil; })());
          if ($truthy(self.$open_channels()['$include?'](channel_string))) {
            return nil};
          self.$open_channels()['$<<'](channel_string);
          return channel_string;
        }, TMP_IncomingBroadcast_add_connection_15.$$arity = -2);
        return Opal.defs(self, '$connect_to', TMP_IncomingBroadcast_connect_to_18 = function $$connect_to(channel_name, id) {
          var TMP_16, TMP_17, self = this, channel_string = nil, channel = nil;

          if (id == null) {
            id = nil;
          }
          
          channel_string = self.$add_connection(channel_name, id);
          if ($truthy(channel_string)) {
            } else {
            return nil
          };
          if (Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("transport")['$==']("pusher")) {
            
            channel = "" + (Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("channel")) + "-" + (channel_string);
            
            var channel = Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("pusher_api").subscribe(channel.$gsub("::", "=="));
            channel.bind('dispatch', Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("dispatch"))
            channel.bind('pusher:subscription_succeeded', $send(self, 'lambda', [], (TMP_16 = function(){var self = TMP_16.$$s || this;

            return Opal.const_get_relative($nesting, 'ClientDrivers').$get_queued_data("connect-to-transport", channel_string)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16)))
          ;
            return (self.pusher_dispatcher_registered = true);
          } else if (Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("transport")['$==']("action_cable")) {
            
            channel = "" + (Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("channel")) + "-" + (channel_string);
            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'HTTP').$post(Opal.const_get_relative($nesting, 'ClientDrivers').$polling_path("action-cable-auth", channel), $hash2(["headers"], {"headers": $hash2(["X-CSRF-Token"], {"X-CSRF-Token": Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("form_authenticity_token")})})), 'then', [], (TMP_17 = function(response){var self = TMP_17.$$s || this;
if (response == null) response = nil;
            
              var fix_opal_0110 = 'return';
              Opal.const_get_relative($nesting, 'Hyperstack').$action_cable_consumer().subscriptions.create(
                {
                  channel: "Hyperstack::ActionCableChannel",
                  client_id: Opal.const_get_relative($nesting, 'ClientDrivers').$opts()['$[]']("id"),
                  hyperstack_channel: channel_string,
                  authorization: response.$json()['$[]']("authorization"),
                  salt: response.$json()['$[]']("salt")
                },
                {
                  connected: function() {
                    if (Opal.const_get_relative($nesting, 'ClientDrivers').$env()['$==']("development")) { console.log("ActionCable connected to: ", channel_string); }
                    Opal.const_get_relative($nesting, 'ClientDrivers').$complete_connection(channel_string)
                  },
                  received: function(data) {
                    if (Opal.const_get_relative($nesting, 'ClientDrivers').$env()['$==']("development")) { console.log("ActionCable received: ", data); }
                    Opal.const_get_relative($nesting, 'ClientDrivers').$sync_dispatch(Opal.const_get_relative($nesting, 'JSON').$parse(JSON.stringify(data))['$[]']("data"))
                  }
                }
              )
            }, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
            } else {
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'HTTP').$get(Opal.const_get_relative($nesting, 'ClientDrivers').$polling_path("subscribe", channel_string))
          };
        }, TMP_IncomingBroadcast_connect_to_18.$$arity = -2);
      })($nesting[0], null, $nesting);
      } else {
      nil
    };
    (function($base, $super, $parent_nesting) {
      function $ClientDrivers(){};
      var self = $ClientDrivers = $klass($base, $super, 'ClientDrivers', $ClientDrivers);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ClientDrivers_sync_dispatch_19, TMP_ClientDrivers_20, TMP_ClientDrivers_22, TMP_ClientDrivers_complete_connection_27, TMP_ClientDrivers_get_queued_data_30, TMP_ClientDrivers_initialize_client_drivers_on_boot_35, TMP_ClientDrivers_polling_path_36;

      
      self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers'));
      Opal.defs(self, '$sync_dispatch', TMP_ClientDrivers_sync_dispatch_19 = function $$sync_dispatch(data) {
        var self = this;

        return data['$[]']("operation").$constantize().$dispatch_from_server(data['$[]']("params"))
      }, TMP_ClientDrivers_sync_dispatch_19.$$arity = 1);
      if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
        nil};
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting);

        return self.$attr_reader("opts")
      })(Opal.get_singleton_class(self), $nesting);
      $send(self, 'isomorphic_method', ["client_drivers_get_acting_user_id"], (TMP_ClientDrivers_20 = function(f){var self = TMP_ClientDrivers_20.$$s || this, TMP_21;
if (f == null) f = nil;
      
        if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          f.$send_to_server()
          } else {
          nil
        };
        return $send(f, 'when_on_server', [], (TMP_21 = function(){var self = TMP_21.$$s || this, $a;

        
          return ($truthy($a = self.$controller().$acting_user()) ? self.$controller().$acting_user().$id() : $a);}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21));}, TMP_ClientDrivers_20.$$s = self, TMP_ClientDrivers_20.$$arity = 1, TMP_ClientDrivers_20));
      $send(self, 'isomorphic_method', ["env"], (TMP_ClientDrivers_22 = function(f){var self = TMP_ClientDrivers_22.$$s || this, TMP_23, TMP_24;
if (f == null) f = nil;
      
        $send(f, 'when_on_client', [], (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$opts()['$[]']("env")}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23));
        f.$send_to_server();
        return $send(f, 'when_on_server', [], (TMP_24 = function(){var self = TMP_24.$$s || this;

        return Opal.const_get_qualified('::', 'Rails').$env()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24));}, TMP_ClientDrivers_22.$$s = self, TMP_ClientDrivers_22.$$arity = 1, TMP_ClientDrivers_22));
      Opal.defs(self, '$complete_connection', TMP_ClientDrivers_complete_connection_27 = function $$complete_connection(channel, retries) {
        var TMP_25, self = this;

        if (retries == null) {
          retries = 10;
        }
        return $send(self.$get_queued_data("connect-to-transport", channel), 'fail', [], (TMP_25 = function(){var self = TMP_25.$$s || this, TMP_26;

        if ($truthy(retries['$zero?']())) {
            return nil
            } else {
            return $send(self, 'after', [0.25], (TMP_26 = function(){var self = TMP_26.$$s || this;

            return self.$complete_connection(channel, $rb_minus(retries, 1))}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26))
          }}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))
      }, TMP_ClientDrivers_complete_connection_27.$$arity = -2);
      Opal.defs(self, '$get_queued_data', TMP_ClientDrivers_get_queued_data_30 = function $$get_queued_data(operation, channel, opts) {
        var TMP_28, self = this;

        if (channel == null) {
          channel = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'HTTP').$get(self.$polling_path(operation, channel), opts), 'then', [], (TMP_28 = function(response){var self = TMP_28.$$s || this, TMP_29;
if (response == null) response = nil;
        return $send(response.$json(), 'each', [], (TMP_29 = function(data){var self = TMP_29.$$s || this;
if (data == null) data = nil;
          
            if (Opal.const_get_relative($nesting, 'ClientDrivers').$env()['$==']("development")) {
              console.log("simple_poller received: ", data)};
            return self.$sync_dispatch(data['$[]'](1));}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29))}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28))
      }, TMP_ClientDrivers_get_queued_data_30.$$arity = -2);
      Opal.defs(self, '$initialize_client_drivers_on_boot', TMP_ClientDrivers_initialize_client_drivers_on_boot_35 = function $$initialize_client_drivers_on_boot() {
        var $a, TMP_31, TMP_32, TMP_33, TMP_34, self = this, $writer = nil, h = nil, pusher_api = nil;
        if (self.initialized == null) self.initialized = nil;

        
        if ($truthy(self.initialized)) {
          
          if ($truthy(($truthy($a = self['$on_opal_client?']()) ? Opal.const_get_relative($nesting, 'Hyperstack').$action_cable_consumer() : $a))) {
            $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'HTTP'), 'get', ["" + (window.HyperstackEnginePath) + "/server_up"], (TMP_31 = function(){var self = TMP_31.$$s || this;

            if ($truthy(Opal.const_get_relative($nesting, 'Hyperstack').$action_cable_consumer().connection.disconnected)) {
                return Opal.const_get_relative($nesting, 'Hyperstack').$action_cable_consumer().connection.open()
                } else {
                return nil
              }}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31))};
          return nil;};
        self.initialized = true;
        self.opts = $hash2([], {});
        if ($truthy(self['$on_opal_client?']())) {
          
          self.opts = Opal.const_get_relative($nesting, 'Hash').$new(window.HyperstackOpts);
          if ($truthy(($truthy($a = self.$opts()['$[]']("transport")['$!=']("none")) ? typeof(window.HyperstackEnginePath) == 'undefined' : $a))) {
            self.$raise("No hyperstack mount point found!\nCheck your Rails routes.rb file")};
          if (self.$opts()['$[]']("transport")['$==']("pusher")) {
            
            
            $writer = ["dispatch", $send(self, 'lambda', [], (TMP_32 = function(data){var self = TMP_32.$$s || this;
if (data == null) data = nil;
            return self.$sync_dispatch(Opal.const_get_relative($nesting, 'JSON').$parse(JSON.stringify(data)))}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32))];
            $send(self.$opts(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(($truthy($a = self.$opts()['$[]']("client_logging")) ? window.console && window.console.log : $a))) {
              Pusher.log = function(message) {window.console.log(message);}};
            if ($truthy(self.$opts()['$[]']("pusher_fake_js"))) {
              
              $writer = ["pusher_api", eval(self.$opts()['$[]']("pusher_fake_js"))];
              $send(self.$opts(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
              } else {
              
              h = nil;
              pusher_api = nil;
              
              h = {
                encrypted: self.$opts()['$[]']("encrypted"),
                cluster: self.$opts()['$[]']("cluster"),
                authEndpoint: window.HyperstackEnginePath+'/hyperstack-pusher-auth',
                auth: {headers: {'X-CSRF-Token': self.$opts()['$[]']("form_authenticity_token")}}
              };
              pusher_api = new Pusher(self.$opts()['$[]']("key"), h)
            ;
              
              $writer = ["pusher_api", pusher_api];
              $send(self.$opts(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            return $send(Opal.const_get_relative($nesting, 'Hyperstack'), 'connect', Opal.to_a(self.$opts()['$[]']("auto_connect")));
          } else if (self.$opts()['$[]']("transport")['$==']("action_cable")) {
            
            
            $writer = ["action_cable_consumer", ActionCable.createConsumer.apply(ActionCable, [].concat(Opal.to_a(self.$opts()['$[]']("action_cable_consumer_url"))))];
            $send(self.$opts(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(Opal.const_get_relative($nesting, 'Hyperstack'), 'connect', Opal.to_a(self.$opts()['$[]']("auto_connect")));
          } else if (self.$opts()['$[]']("transport")['$==']("simple_poller")) {
            
            $send(self.$opts()['$[]']("auto_connect"), 'each', [], (TMP_33 = function(channel){var self = TMP_33.$$s || this;
if (channel == null) channel = nil;
            return $send(Opal.const_get_relative($nesting, 'IncomingBroadcast'), 'add_connection', Opal.to_a(channel))}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33));
            return $send(self, 'every', [self.$opts()['$[]']("seconds_between_poll")], (TMP_34 = function(){var self = TMP_34.$$s || this;

            return self.$get_queued_data("read", nil)}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34));
            } else {
            return nil
          };
          } else {
          return nil
        };
      }, TMP_ClientDrivers_initialize_client_drivers_on_boot_35.$$arity = 0);
      return Opal.defs(self, '$polling_path', TMP_ClientDrivers_polling_path_36 = function $$polling_path(to, id) {
        var self = this, s = nil;

        if (id == null) {
          id = nil;
        }
        
        s = "" + (window.HyperstackEnginePath) + "/hyperstack-" + (to) + "/" + (self.$opts()['$[]']("id"));
        if ($truthy(id)) {
          s = "" + (s) + "/" + (id)};
        return s;
      }, TMP_ClientDrivers_polling_path_36.$$arity = -2);
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/exception"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$collect', '$[]', '$attr_accessor', '$+', '$to_s', '$on_error', '$as_json', '$errors', '$is_a?', '$new_from_error_hash']);
  
  (function($base, $parent_nesting) {
    var $Mutations, self = $Mutations = $module($base, 'Mutations');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $ErrorArray(){};
      var self = $ErrorArray = $klass($base, $super, 'ErrorArray', $ErrorArray);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ErrorArray_new_from_error_hash_2;

      return Opal.defs(self, '$new_from_error_hash', TMP_ErrorArray_new_from_error_hash_2 = function $$new_from_error_hash(errors) {
        var TMP_1, self = this;

        return self.$new($send(errors, 'collect', [], (TMP_1 = function(key, values){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (values == null) values = nil;
        return Opal.const_get_relative($nesting, 'ErrorAtom').$new(key, values['$[]']("symbol"), values)}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1)))
      }, TMP_ErrorArray_new_from_error_hash_2.$$arity = 1)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $AccessViolation(){};
      var self = $AccessViolation = $klass($base, $super, 'AccessViolation', $AccessViolation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_AccessViolation_initialize_3, TMP_AccessViolation___hyperstack_on_error_4;

      
      self.$attr_accessor("details");
      
      Opal.defn(self, '$initialize', TMP_AccessViolation_initialize_3 = function $$initialize(message, details) {
        var self = this, $iter = TMP_AccessViolation_initialize_3.$$p, $yield = $iter || nil;

        if (message == null) {
          message = nil;
        }
        if (details == null) {
          details = nil;
        }
        if ($iter) TMP_AccessViolation_initialize_3.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_AccessViolation_initialize_3, false), ["" + "Hyperstack::AccessViolation" + ((function() {if ($truthy(message)) {
          return $rb_plus(":", message.$to_s())
          } else {
          return nil
        }; return nil; })())], null);
        return (self.details = details);
      }, TMP_AccessViolation_initialize_3.$$arity = -1);
      return (Opal.defn(self, '$__hyperstack_on_error', TMP_AccessViolation___hyperstack_on_error_4 = function $$__hyperstack_on_error(operation, params, fmted_message) {
        var self = this;

        return Opal.const_get_relative($nesting, 'Hyperstack').$on_error(operation, self, params, fmted_message)
      }, TMP_AccessViolation___hyperstack_on_error_4.$$arity = 3), nil) && '__hyperstack_on_error';
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $ValidationException(){};
        var self = $ValidationException = $klass($base, $super, 'ValidationException', $ValidationException);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ValidationException_as_json_5, TMP_ValidationException_initialize_6;

        
        
        Opal.defn(self, '$as_json', TMP_ValidationException_as_json_5 = function $$as_json($a_rest) {
          var self = this;

          return self.$errors().$as_json()
        }, TMP_ValidationException_as_json_5.$$arity = -1);
        return (Opal.defn(self, '$initialize', TMP_ValidationException_initialize_6 = function $$initialize(errors) {
          var self = this, $iter = TMP_ValidationException_initialize_6.$$p, $yield = $iter || nil;

          if ($iter) TMP_ValidationException_initialize_6.$$p = null;
          
          if ($truthy(errors['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'ErrorHash')))) {
            } else {
            errors = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'ErrorArray').$new_from_error_hash(errors)
          };
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_ValidationException_initialize_6, false), [errors], null);
        }, TMP_ValidationException_initialize_6.$$arity = 1), nil) && 'initialize';
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'ValidationException'), $nesting)
    })($nesting[0], null, $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/promise"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$resolve', '$new', '$reject', '$attr_reader', '$===', '$value', '$has_key?', '$keys', '$!', '$==', '$realized?', '$<<', '$>>', '$exception?', '$[]', '$resolved?', '$rejected?', '$error', '$include?', '$action', '$raise', '$^', '$call', '$resolve!', '$exception!', '$any?', '$each', '$reject!', '$is_a?', '$result', '$there_can_be_only_one!', '$then', '$to_proc', '$fail', '$always', '$trace', '$class', '$object_id', '$+', '$inspect', '$act?', '$nil?', '$prev', '$push', '$concat', '$it', '$proc', '$reverse', '$pop', '$<=', '$length', '$shift', '$-', '$wait', '$map', '$reduce', '$try', '$tap', '$all?', '$find']);
  return (function($base, $super, $parent_nesting) {
    function $Promise(){};
    var self = $Promise = $klass($base, $super, 'Promise', $Promise);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Promise_value_1, TMP_Promise_error_2, TMP_Promise_when_3, TMP_Promise_initialize_5, TMP_Promise_value_6, TMP_Promise_act$q_7, TMP_Promise_action_8, TMP_Promise_exception$q_9, TMP_Promise_realized$q_10, TMP_Promise_resolved$q_11, TMP_Promise_rejected$q_12, TMP_Promise_pending$q_13, TMP_Promise_$_14, TMP_Promise_$lt$lt_15, TMP_Promise_$gt$gt_16, TMP_Promise_resolve_17, TMP_Promise_resolve$B_19, TMP_Promise_reject_20, TMP_Promise_reject$B_22, TMP_Promise_exception$B_23, TMP_Promise_then_24, TMP_Promise_then$B_25, TMP_Promise_fail_26, TMP_Promise_fail$B_27, TMP_Promise_always_28, TMP_Promise_always$B_29, TMP_Promise_trace_30, TMP_Promise_trace$B_31, TMP_Promise_there_can_be_only_one$B_32, TMP_Promise_inspect_33;

    def.value = def.action = def.exception = def.realized = def.next = def.delayed = def.error = def.prev = nil;
    
    Opal.defs(self, '$value', TMP_Promise_value_1 = function $$value(value) {
      var self = this;

      return self.$new().$resolve(value)
    }, TMP_Promise_value_1.$$arity = 1);
    Opal.defs(self, '$error', TMP_Promise_error_2 = function $$error(value) {
      var self = this;

      return self.$new().$reject(value)
    }, TMP_Promise_error_2.$$arity = 1);
    Opal.defs(self, '$when', TMP_Promise_when_3 = function $$when($a_rest) {
      var self = this, promises;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      promises = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        promises[$arg_idx - 0] = arguments[$arg_idx];
      }
      return Opal.const_get_relative($nesting, 'When').$new(promises)
    }, TMP_Promise_when_3.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      function $Fail(){};
      var self = $Fail = $klass($base, $super, 'Fail', $Fail);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Fail_initialize_4;

      
      self.$attr_reader("result");
      return (Opal.defn(self, '$initialize', TMP_Fail_initialize_4 = function $$initialize(result) {
        var self = this;

        return (self.result = result)
      }, TMP_Fail_initialize_4.$$arity = 1), nil) && 'initialize';
    })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
    self.$attr_reader("error", "prev", "next");
    
    Opal.defn(self, '$initialize', TMP_Promise_initialize_5 = function $$initialize(action) {
      var self = this;

      if (action == null) {
        action = $hash2([], {});
      }
      
      self.action = action;
      self.realized = false;
      self.exception = false;
      self.value = nil;
      self.error = nil;
      self.delayed = false;
      self.prev = nil;
      return (self.next = []);
    }, TMP_Promise_initialize_5.$$arity = -1);
    
    Opal.defn(self, '$value', TMP_Promise_value_6 = function $$value() {
      var self = this;

      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](self.value))) {
        return self.value.$value()
        } else {
        return self.value
      }
    }, TMP_Promise_value_6.$$arity = 0);
    
    Opal.defn(self, '$act?', TMP_Promise_act$q_7 = function() {
      var $a, self = this;

      return ($truthy($a = self.action['$has_key?']("success")) ? $a : self.action['$has_key?']("always"))
    }, TMP_Promise_act$q_7.$$arity = 0);
    
    Opal.defn(self, '$action', TMP_Promise_action_8 = function $$action() {
      var self = this;

      return self.action.$keys()
    }, TMP_Promise_action_8.$$arity = 0);
    
    Opal.defn(self, '$exception?', TMP_Promise_exception$q_9 = function() {
      var self = this;

      return self.exception
    }, TMP_Promise_exception$q_9.$$arity = 0);
    
    Opal.defn(self, '$realized?', TMP_Promise_realized$q_10 = function() {
      var self = this;

      return self.realized['$!']()['$!']()
    }, TMP_Promise_realized$q_10.$$arity = 0);
    
    Opal.defn(self, '$resolved?', TMP_Promise_resolved$q_11 = function() {
      var self = this;

      return self.realized['$==']("resolve")
    }, TMP_Promise_resolved$q_11.$$arity = 0);
    
    Opal.defn(self, '$rejected?', TMP_Promise_rejected$q_12 = function() {
      var self = this;

      return self.realized['$==']("reject")
    }, TMP_Promise_rejected$q_12.$$arity = 0);
    
    Opal.defn(self, '$pending?', TMP_Promise_pending$q_13 = function() {
      var self = this;

      return self['$realized?']()['$!']()
    }, TMP_Promise_pending$q_13.$$arity = 0);
    
    Opal.defn(self, '$^', TMP_Promise_$_14 = function(promise) {
      var self = this;

      
      promise['$<<'](self);
      self['$>>'](promise);
      return promise;
    }, TMP_Promise_$_14.$$arity = 1);
    
    Opal.defn(self, '$<<', TMP_Promise_$lt$lt_15 = function(promise) {
      var self = this;

      
      self.prev = promise;
      return self;
    }, TMP_Promise_$lt$lt_15.$$arity = 1);
    
    Opal.defn(self, '$>>', TMP_Promise_$gt$gt_16 = function(promise) {
      var $a, self = this;

      
      self.next['$<<'](promise);
      if ($truthy(self['$exception?']())) {
        promise.$reject(self.delayed['$[]'](0))
      } else if ($truthy(self['$resolved?']())) {
        promise.$resolve((function() {if ($truthy(self.delayed)) {
          return self.delayed['$[]'](0)
          } else {
          return self.$value()
        }; return nil; })())
      } else if ($truthy(self['$rejected?']())) {
        if ($truthy(($truthy($a = self.action['$has_key?']("failure")['$!']()) ? $a : Opal.const_get_relative($nesting, 'Promise')['$===']((function() {if ($truthy(self.delayed)) {
          return self.delayed['$[]'](0)
          } else {
          return self.error
        }; return nil; })())))) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())
        } else if ($truthy(promise.$action()['$include?']("always"))) {
          promise.$reject((function() {if ($truthy(self.delayed)) {
            return self.delayed['$[]'](0)
            } else {
            return self.$error()
          }; return nil; })())}};
      return self;
    }, TMP_Promise_$gt$gt_16.$$arity = 1);
    
    Opal.defn(self, '$resolve', TMP_Promise_resolve_17 = function $$resolve(value) {
      var $a, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      
      if ($truthy(self['$realized?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        if ($truthy((block = ($truthy($a = self.action['$[]']("success")) ? $a : self.action['$[]']("always"))))) {
          value = block.$call(value)};
        self['$resolve!'](value);
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self;
    }, TMP_Promise_resolve_17.$$arity = -1);
    
    Opal.defn(self, '$resolve!', TMP_Promise_resolve$B_19 = function(value) {
      var TMP_18, self = this;

      
      self.realized = "resolve";
      self.value = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], (TMP_18 = function(p){var self = TMP_18.$$s || this;
if (p == null) p = nil;
        return p.$resolve(value)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18))
        } else {
        return (self.delayed = [value])
      };
    }, TMP_Promise_resolve$B_19.$$arity = 1);
    
    Opal.defn(self, '$reject', TMP_Promise_reject_20 = function $$reject(value) {
      var $a, self = this, block = nil, e = nil;

      if (value == null) {
        value = nil;
      }
      
      if ($truthy(self['$realized?']())) {
        self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "the promise has already been realized")};
      if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](value))) {
        return value['$<<'](self.prev)['$^'](self)};
      
      try {
        
        if ($truthy((block = ($truthy($a = self.action['$[]']("failure")) ? $a : self.action['$[]']("always"))))) {
          value = block.$call(value)};
        if ($truthy(self.action['$has_key?']("always"))) {
          self['$resolve!'](value)
          } else {
          self['$reject!'](value)
        };
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
          try {
            self['$exception!'](e)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return self;
    }, TMP_Promise_reject_20.$$arity = -1);
    
    Opal.defn(self, '$reject!', TMP_Promise_reject$B_22 = function(value) {
      var TMP_21, self = this;

      
      self.realized = "reject";
      self.error = value;
      if ($truthy(self.next['$any?']())) {
        return $send(self.next, 'each', [], (TMP_21 = function(p){var self = TMP_21.$$s || this;
if (p == null) p = nil;
        return p.$reject(value)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21))
        } else {
        return (self.delayed = [value])
      };
    }, TMP_Promise_reject$B_22.$$arity = 1);
    
    Opal.defn(self, '$exception!', TMP_Promise_exception$B_23 = function(error) {
      var self = this;

      
      if ($truthy(error['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Promise'), 'Fail')))) {
        error = error.$result()
        } else {
        self.exception = true
      };
      return self['$reject!'](error);
    }, TMP_Promise_exception$B_23.$$arity = 1);
    
    Opal.defn(self, '$then', TMP_Promise_then_24 = function $$then() {
      var self = this, $iter = TMP_Promise_then_24.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_then_24.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["success"], {"success": block})))
    }, TMP_Promise_then_24.$$arity = 0);
    
    Opal.defn(self, '$then!', TMP_Promise_then$B_25 = function() {
      var self = this, $iter = TMP_Promise_then$B_25.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_then$B_25.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'then', [], block.$to_proc());
    }, TMP_Promise_then$B_25.$$arity = 0);
    Opal.alias(self, "do", "then");
    Opal.alias(self, "do!", "then!");
    
    Opal.defn(self, '$fail', TMP_Promise_fail_26 = function $$fail() {
      var self = this, $iter = TMP_Promise_fail_26.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_fail_26.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["failure"], {"failure": block})))
    }, TMP_Promise_fail_26.$$arity = 0);
    
    Opal.defn(self, '$fail!', TMP_Promise_fail$B_27 = function() {
      var self = this, $iter = TMP_Promise_fail$B_27.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_fail$B_27.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'fail', [], block.$to_proc());
    }, TMP_Promise_fail$B_27.$$arity = 0);
    Opal.alias(self, "rescue", "fail");
    Opal.alias(self, "catch", "fail");
    Opal.alias(self, "rescue!", "fail!");
    Opal.alias(self, "catch!", "fail!");
    
    Opal.defn(self, '$always', TMP_Promise_always_28 = function $$always() {
      var self = this, $iter = TMP_Promise_always_28.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_always_28.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Promise').$new($hash2(["always"], {"always": block})))
    }, TMP_Promise_always_28.$$arity = 0);
    
    Opal.defn(self, '$always!', TMP_Promise_always$B_29 = function() {
      var self = this, $iter = TMP_Promise_always$B_29.$$p, block = $iter || nil;

      if ($iter) TMP_Promise_always$B_29.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'always', [], block.$to_proc());
    }, TMP_Promise_always$B_29.$$arity = 0);
    Opal.alias(self, "finally", "always");
    Opal.alias(self, "ensure", "always");
    Opal.alias(self, "finally!", "always!");
    Opal.alias(self, "ensure!", "always!");
    
    Opal.defn(self, '$trace', TMP_Promise_trace_30 = function $$trace(depth) {
      var self = this, $iter = TMP_Promise_trace_30.$$p, block = $iter || nil;

      if (depth == null) {
        depth = nil;
      }
      if ($iter) TMP_Promise_trace_30.$$p = null;
      return self['$^'](Opal.const_get_relative($nesting, 'Trace').$new(depth, block))
    }, TMP_Promise_trace_30.$$arity = -1);
    
    Opal.defn(self, '$trace!', TMP_Promise_trace$B_31 = function($a_rest) {
      var self = this, args, $iter = TMP_Promise_trace$B_31.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ($iter) TMP_Promise_trace$B_31.$$p = null;
      
      self['$there_can_be_only_one!']();
      return $send(self, 'trace', Opal.to_a(args), block.$to_proc());
    }, TMP_Promise_trace$B_31.$$arity = -1);
    
    Opal.defn(self, '$there_can_be_only_one!', TMP_Promise_there_can_be_only_one$B_32 = function() {
      var self = this;

      if ($truthy(self.next['$any?']())) {
        return self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "a promise has already been chained")
        } else {
        return nil
      }
    }, TMP_Promise_there_can_be_only_one$B_32.$$arity = 0);
    
    Opal.defn(self, '$inspect', TMP_Promise_inspect_33 = function $$inspect() {
      var $a, self = this, result = nil;

      
      result = "" + "#<" + (self.$class()) + "(" + (self.$object_id()) + ")";
      if ($truthy(self.next['$any?']())) {
        result = $rb_plus(result, "" + " >> " + (self.next.$inspect()))};
      if ($truthy(self['$realized?']())) {
        result = $rb_plus(result, "" + ": " + (($truthy($a = self.value) ? $a : self.error).$inspect()) + ">")
        } else {
        result = $rb_plus(result, ">")
      };
      return result;
    }, TMP_Promise_inspect_33.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      function $Trace(){};
      var self = $Trace = $klass($base, $super, 'Trace', $Trace);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Trace_it_34, TMP_Trace_initialize_35;

      
      Opal.defs(self, '$it', TMP_Trace_it_34 = function $$it(promise) {
        var $a, self = this, current = nil, prev = nil;

        
        current = [];
        if ($truthy(($truthy($a = promise['$act?']()) ? $a : promise.$prev()['$nil?']()))) {
          current.$push(promise.$value())};
        if ($truthy((prev = promise.$prev()))) {
          return current.$concat(self.$it(prev))
          } else {
          return current
        };
      }, TMP_Trace_it_34.$$arity = 1);
      return (Opal.defn(self, '$initialize', TMP_Trace_initialize_35 = function $$initialize(depth, block) {
        var TMP_36, self = this, $iter = TMP_Trace_initialize_35.$$p, $yield = $iter || nil;

        if ($iter) TMP_Trace_initialize_35.$$p = null;
        
        self.depth = depth;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Trace_initialize_35, false), [$hash2(["success"], {"success": $send(self, 'proc', [], (TMP_36 = function(){var self = TMP_36.$$s || this, $a, trace = nil;

        
          trace = Opal.const_get_relative($nesting, 'Trace').$it(self).$reverse();
          trace.$pop();
          if ($truthy(($truthy($a = depth) ? $rb_le(depth, trace.$length()) : $a))) {
            trace.$shift($rb_minus(trace.$length(), depth))};
          return $send(block, 'call', Opal.to_a(trace));}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36))})], null);
      }, TMP_Trace_initialize_35.$$arity = 2), nil) && 'initialize';
    })($nesting[0], self, $nesting);
    return (function($base, $super, $parent_nesting) {
      function $When(){};
      var self = $When = $klass($base, $super, 'When', $When);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_When_initialize_37, TMP_When_each_39, TMP_When_collect_41, TMP_When_inject_43, TMP_When_wait_46, TMP_When_$gt$gt_47, TMP_When_try_49;

      def.wait = nil;
      
      
      Opal.defn(self, '$initialize', TMP_When_initialize_37 = function $$initialize(promises) {
        var TMP_38, self = this, $iter = TMP_When_initialize_37.$$p, $yield = $iter || nil;

        if (promises == null) {
          promises = [];
        }
        if ($iter) TMP_When_initialize_37.$$p = null;
        
        $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_When_initialize_37, false), [], null);
        self.wait = [];
        return $send(promises, 'each', [], (TMP_38 = function(promise){var self = TMP_38.$$s || this;
if (promise == null) promise = nil;
        return self.$wait(promise)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
      }, TMP_When_initialize_37.$$arity = -1);
      
      Opal.defn(self, '$each', TMP_When_each_39 = function $$each() {
        var TMP_40, self = this, $iter = TMP_When_each_39.$$p, block = $iter || nil;

        if ($iter) TMP_When_each_39.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], (TMP_40 = function(values){var self = TMP_40.$$s || this;
if (values == null) values = nil;
        return $send(values, 'each', [], block.$to_proc())}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
      }, TMP_When_each_39.$$arity = 0);
      
      Opal.defn(self, '$collect', TMP_When_collect_41 = function $$collect() {
        var TMP_42, self = this, $iter = TMP_When_collect_41.$$p, block = $iter || nil;

        if ($iter) TMP_When_collect_41.$$p = null;
        
        if ($truthy(block)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block given")
        };
        return $send(self, 'then', [], (TMP_42 = function(values){var self = TMP_42.$$s || this;
if (values == null) values = nil;
        return Opal.const_get_relative($nesting, 'When').$new($send(values, 'map', [], block.$to_proc()))}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42));
      }, TMP_When_collect_41.$$arity = 0);
      
      Opal.defn(self, '$inject', TMP_When_inject_43 = function $$inject($a_rest) {
        var TMP_44, self = this, args, $iter = TMP_When_inject_43.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ($iter) TMP_When_inject_43.$$p = null;
        return $send(self, 'then', [], (TMP_44 = function(values){var self = TMP_44.$$s || this;
if (values == null) values = nil;
        return $send(values, 'reduce', Opal.to_a(args), block.$to_proc())}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44))
      }, TMP_When_inject_43.$$arity = -1);
      Opal.alias(self, "map", "collect");
      Opal.alias(self, "reduce", "inject");
      
      Opal.defn(self, '$wait', TMP_When_wait_46 = function $$wait(promise) {
        var TMP_45, self = this;

        
        if ($truthy(Opal.const_get_relative($nesting, 'Promise')['$==='](promise))) {
          } else {
          promise = Opal.const_get_relative($nesting, 'Promise').$value(promise)
        };
        if ($truthy(promise['$act?']())) {
          promise = promise.$then()};
        self.wait['$<<'](promise);
        $send(promise, 'always', [], (TMP_45 = function(){var self = TMP_45.$$s || this;
          if (self.next == null) self.next = nil;

        if ($truthy(self.next['$any?']())) {
            return self.$try()
            } else {
            return nil
          }}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45));
        return self;
      }, TMP_When_wait_46.$$arity = 1);
      Opal.alias(self, "and", "wait");
      
      Opal.defn(self, '$>>', TMP_When_$gt$gt_47 = function($a_rest) {
        var TMP_48, self = this, $iter = TMP_When_$gt$gt_47.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_When_$gt$gt_47.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return $send($send(self, Opal.find_super_dispatcher(self, '>>', TMP_When_$gt$gt_47, false), $zuper, $iter), 'tap', [], (TMP_48 = function(){var self = TMP_48.$$s || this;

        return self.$try()}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48))
      }, TMP_When_$gt$gt_47.$$arity = -1);
      return (Opal.defn(self, '$try', TMP_When_try_49 = function() {
        var self = this, promise = nil;

        if ($truthy($send(self.wait, 'all?', [], "realized?".$to_proc()))) {
          if ($truthy((promise = $send(self.wait, 'find', [], "rejected?".$to_proc())))) {
            return self.$reject(promise.$error())
            } else {
            return self.$resolve($send(self.wait, 'map', [], "value".$to_proc()))
          }
          } else {
          return nil
        }
      }, TMP_When_try_49.$$arity = 0), nil) && 'try';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/railway"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/api"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$is_a?', '$raise', '$new', '$tap', '$split', '$to_s', '$pop', '$inject', '$[]', '$to_sym', '$[]=', '$-', '$!', '$nil?', '$abort!', '$succeed!', '$_Railway', '$class', '$_run', '$instance_eval', '$process_params', '$process_validations', '$run', '$dispatch', '$result', '$then', '$to_proc', '$fail', '$add_param', '$get_name_and_opts', '$merge', '$each', '$add_validation', '$add_error', '$add_step', '$add_failed', '$add_async', '$add_receiver', '$singleton_class', '$define_singleton_method', '$set_var', '$superclass', '$==', '$instance_variable_get', '$instance_variable_set', '$dup']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Operation_add_error_3, TMP_Operation_has_errors$q_4, TMP_Operation_params_5, TMP_Operation_abort$B_6, TMP_Operation_succeed$B_7, TMP_Operation_initialize_8;

      def.errors = def.params = nil;
      
      
      Opal.defn(self, '$add_error', TMP_Operation_add_error_3 = function $$add_error(key, kind, message) {
        var $a, TMP_1, self = this;

        if (message == null) {
          message = nil;
        }
        
        if ($truthy(kind['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError').$new("Invalid kind"))
        };
        self.errors = ($truthy($a = self.errors) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'ErrorHash').$new());
        return $send(self.errors, 'tap', [], (TMP_1 = function(errs){var self = TMP_1.$$s || this, TMP_2, path = nil, last = nil, inner = nil, $writer = nil;
if (errs == null) errs = nil;
        
          path = key.$to_s().$split(".");
          last = path.$pop();
          inner = $send(path, 'inject', [errs], (TMP_2 = function(cur_errors, part){var self = TMP_2.$$s || this, $b, $writer = nil;
if (cur_errors == null) cur_errors = nil;if (part == null) part = nil;
          return ($truthy($b = cur_errors['$[]'](part.$to_sym())) ? $b : (($writer = [part.$to_sym(), Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'ErrorHash').$new()]), $send(cur_errors, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2));
          
          $writer = [last, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'ErrorAtom').$new(key, kind, $hash2(["message"], {"message": message}))];
          $send(inner, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
      }, TMP_Operation_add_error_3.$$arity = -3);
      
      Opal.defn(self, '$has_errors?', TMP_Operation_has_errors$q_4 = function() {
        var self = this;

        return self.errors['$nil?']()['$!']()
      }, TMP_Operation_has_errors$q_4.$$arity = 0);
      
      Opal.defn(self, '$params', TMP_Operation_params_5 = function $$params() {
        var self = this;

        return self.params
      }, TMP_Operation_params_5.$$arity = 0);
      
      Opal.defn(self, '$abort!', TMP_Operation_abort$B_6 = function(arg) {
        var self = this;

        if (arg == null) {
          arg = nil;
        }
        return Opal.const_get_relative($nesting, 'Railway')['$abort!'](arg)
      }, TMP_Operation_abort$B_6.$$arity = -1);
      
      Opal.defn(self, '$succeed!', TMP_Operation_succeed$B_7 = function(arg) {
        var self = this;

        if (arg == null) {
          arg = nil;
        }
        return Opal.const_get_relative($nesting, 'Railway')['$succeed!'](arg)
      }, TMP_Operation_succeed$B_7.$$arity = -1);
      
      Opal.defn(self, '$initialize', TMP_Operation_initialize_8 = function $$initialize() {
        var self = this;

        return (self._railway = self.$class().$_Railway().$new(self))
      }, TMP_Operation_initialize_8.$$arity = 0);
      (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_run_9, TMP__run_11, TMP_then_12, TMP_fail_13, TMP_param_14, TMP_inbound_15, TMP_outbound_17, TMP_validate_18, TMP_add_error_19, TMP_step_20, TMP_failed_21, TMP_async_22, TMP_on_dispatch_23, TMP__Railway_24, TMP_inherited_38;

        
        
        Opal.defn(self, '$run', TMP_run_9 = function $$run($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(self, '_run', Opal.to_a(args))
        }, TMP_run_9.$$arity = -1);
        
        Opal.defn(self, '$_run', TMP__run_11 = function $$_run($a_rest) {
          var TMP_10, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(self.$new(), 'instance_eval', [], (TMP_10 = function(){var self = TMP_10.$$s || this;
            if (self._railway == null) self._railway = nil;

          
            self._railway.$process_params(args);
            self._railway.$process_validations();
            self._railway.$run();
            self._railway.$dispatch();
            return self._railway.$result();}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10))
        }, TMP__run_11.$$arity = -1);
        
        Opal.defn(self, '$then', TMP_then_12 = function $$then($a_rest) {
          var self = this, args, $iter = TMP_then_12.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_then_12.$$p = null;
          return $send($send(self, 'run', Opal.to_a(args)), 'then', [], block.$to_proc())
        }, TMP_then_12.$$arity = -1);
        
        Opal.defn(self, '$fail', TMP_fail_13 = function $$fail($a_rest) {
          var self = this, args, $iter = TMP_fail_13.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_fail_13.$$p = null;
          return $send($send(self, 'run', Opal.to_a(args)), 'fail', [], block.$to_proc())
        }, TMP_fail_13.$$arity = -1);
        
        Opal.defn(self, '$param', TMP_param_14 = function $$param($a_rest) {
          var self = this, args, $iter = TMP_param_14.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_param_14.$$p = null;
          return $send(self.$_Railway(), 'add_param', Opal.to_a(args), block.$to_proc())
        }, TMP_param_14.$$arity = -1);
        
        Opal.defn(self, '$inbound', TMP_inbound_15 = function $$inbound($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_inbound_15.$$p, block = $iter || nil, name = nil, opts = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_inbound_15.$$p = null;
          
          $c = $send(Opal.const_get_relative($nesting, 'ParamsWrapper'), 'get_name_and_opts', Opal.to_a(args)), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (opts = ($b[1] == null ? nil : $b[1])), $c;
          return $send(self.$_Railway(), 'add_param', [name, opts.$merge($hash2(["inbound"], {"inbound": "true"}))], block.$to_proc());
        }, TMP_inbound_15.$$arity = -1);
        
        Opal.defn(self, '$outbound', TMP_outbound_17 = function $$outbound($a_rest) {
          var TMP_16, self = this, keys;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          keys = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            keys[$arg_idx - 0] = arguments[$arg_idx];
          }
          return $send(keys, 'each', [], (TMP_16 = function(key){var self = TMP_16.$$s || this;
if (key == null) key = nil;
          return self.$_Railway().$add_param($hash(key, nil, "type", "outbound"))}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))
        }, TMP_outbound_17.$$arity = -1);
        
        Opal.defn(self, '$validate', TMP_validate_18 = function $$validate($a_rest) {
          var self = this, args, $iter = TMP_validate_18.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_validate_18.$$p = null;
          return $send(self.$_Railway(), 'add_validation', Opal.to_a(args), block.$to_proc())
        }, TMP_validate_18.$$arity = -1);
        
        Opal.defn(self, '$add_error', TMP_add_error_19 = function $$add_error(param, symbol, message, $a_rest) {
          var self = this, args, $iter = TMP_add_error_19.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 3;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 3] = arguments[$arg_idx];
          }
          if ($iter) TMP_add_error_19.$$p = null;
          return $send(self.$_Railway(), 'add_error', [param, symbol, message].concat(Opal.to_a(args)), block.$to_proc())
        }, TMP_add_error_19.$$arity = -4);
        
        Opal.defn(self, '$step', TMP_step_20 = function $$step($a_rest) {
          var self = this, args, $iter = TMP_step_20.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_step_20.$$p = null;
          return $send(self.$_Railway(), 'add_step', Opal.to_a(args), block.$to_proc())
        }, TMP_step_20.$$arity = -1);
        
        Opal.defn(self, '$failed', TMP_failed_21 = function $$failed($a_rest) {
          var self = this, args, $iter = TMP_failed_21.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_failed_21.$$p = null;
          return $send(self.$_Railway(), 'add_failed', Opal.to_a(args), block.$to_proc())
        }, TMP_failed_21.$$arity = -1);
        
        Opal.defn(self, '$async', TMP_async_22 = function $$async($a_rest) {
          var self = this, args, $iter = TMP_async_22.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_async_22.$$p = null;
          return $send(self.$_Railway(), 'add_async', Opal.to_a(args), block.$to_proc())
        }, TMP_async_22.$$arity = -1);
        
        Opal.defn(self, '$on_dispatch', TMP_on_dispatch_23 = function $$on_dispatch() {
          var self = this, $iter = TMP_on_dispatch_23.$$p, block = $iter || nil;

          if ($iter) TMP_on_dispatch_23.$$p = null;
          return $send(self.$_Railway(), 'add_receiver', [], block.$to_proc())
        }, TMP_on_dispatch_23.$$arity = 0);
        
        Opal.defn(self, '$_Railway', TMP__Railway_24 = function $$_Railway() {
          var self = this;

          return self.$singleton_class().$_Railway()
        }, TMP__Railway_24.$$arity = 0);
        return (Opal.defn(self, '$inherited', TMP_inherited_38 = function $$inherited(child) {
          var TMP_25, TMP_26, TMP_27, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, self = this;

          
          $send(child.$singleton_class(), 'define_singleton_method', ["param"], (TMP_25 = function($a_rest){var self = TMP_25.$$s || this, block, args;

            block = TMP_25.$$p || nil;
            if (block) TMP_25.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(self.$_Railway(), 'add_param', Opal.to_a(args), block.$to_proc())}, TMP_25.$$s = self, TMP_25.$$arity = -1, TMP_25));
          $send(child.$singleton_class(), 'define_singleton_method', ["inbound"], (TMP_26 = function($a_rest){var self = TMP_26.$$s || this, block, args, $b, $c, name = nil, opts = nil;

            block = TMP_26.$$p || nil;
            if (block) TMP_26.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          
            $c = $send(Opal.const_get_relative($nesting, 'ParamsWrapper'), 'get_name_and_opts', Opal.to_a(args)), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (opts = ($b[1] == null ? nil : $b[1])), $c;
            return $send(self.$_Railway(), 'add_param', [name, opts.$merge($hash2(["inbound"], {"inbound": "true"}))], block.$to_proc());}, TMP_26.$$s = self, TMP_26.$$arity = -1, TMP_26));
          $send(child.$singleton_class(), 'define_singleton_method', ["outbound"], (TMP_27 = function($a_rest){var self = TMP_27.$$s || this, keys, TMP_28;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            keys = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              keys[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(keys, 'each', [], (TMP_28 = function(key){var self = TMP_28.$$s || this;
if (key == null) key = nil;
            return self.$_Railway().$add_param($hash(key, nil, "type", "outbound"))}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28))}, TMP_27.$$s = self, TMP_27.$$arity = -1, TMP_27));
          $send(child.$singleton_class(), 'define_singleton_method', ["validate"], (TMP_29 = function($a_rest){var self = TMP_29.$$s || this, block, args;

            block = TMP_29.$$p || nil;
            if (block) TMP_29.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(self.$_Railway(), 'add_validation', Opal.to_a(args), block.$to_proc())}, TMP_29.$$s = self, TMP_29.$$arity = -1, TMP_29));
          $send(child.$singleton_class(), 'define_singleton_method', ["add_error"], (TMP_30 = function(param, symbol, message, $a_rest){var self = TMP_30.$$s || this, block, args;

            block = TMP_30.$$p || nil;
            if (block) TMP_30.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 3;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 3] = arguments[$arg_idx];
            }if (param == null) param = nil;if (symbol == null) symbol = nil;if (message == null) message = nil;
          return $send(self.$_Railway(), 'add_error', [param, symbol, message].concat(Opal.to_a(args)), block.$to_proc())}, TMP_30.$$s = self, TMP_30.$$arity = -4, TMP_30));
          $send(child.$singleton_class(), 'define_singleton_method', ["step"], (TMP_31 = function($a_rest){var self = TMP_31.$$s || this, block, args;

            block = TMP_31.$$p || nil;
            if (block) TMP_31.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(self.$_Railway(), 'add_step', [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)), block.$to_proc())}, TMP_31.$$s = self, TMP_31.$$arity = -1, TMP_31));
          $send(child.$singleton_class(), 'define_singleton_method', ["failed"], (TMP_32 = function($a_rest){var self = TMP_32.$$s || this, block, args;

            block = TMP_32.$$p || nil;
            if (block) TMP_32.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(self.$_Railway(), 'add_failed', [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)), block.$to_proc())}, TMP_32.$$s = self, TMP_32.$$arity = -1, TMP_32));
          $send(child.$singleton_class(), 'define_singleton_method', ["async"], (TMP_33 = function($a_rest){var self = TMP_33.$$s || this, block, args;

            block = TMP_33.$$p || nil;
            if (block) TMP_33.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return $send(self.$_Railway(), 'add_async', [$hash2(["scope"], {"scope": "class"})].concat(Opal.to_a(args)), block.$to_proc())}, TMP_33.$$s = self, TMP_33.$$arity = -1, TMP_33));
          return $send(child.$singleton_class(), 'define_singleton_method', ["_Railway"], (TMP_34 = function(){var self = TMP_34.$$s || this, TMP_35;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@_railway"], (TMP_35 = function(){var self = TMP_35.$$s || this, $a, TMP_36, my_super = nil;

            
              my_super = ($truthy($a = self.$superclass()) ? $a : (self.$$singleton_of).$superclass().$singleton_class());
              if (my_super['$=='](Opal.const_get_relative($nesting, 'Operation').$singleton_class())) {
                return Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'Railway'))
                } else {
                return $send(Opal.const_get_relative($nesting, 'Class').$new(my_super.$_Railway()), 'tap', [], (TMP_36 = function(wrapper){var self = TMP_36.$$s || this, TMP_37;
if (wrapper == null) wrapper = nil;
                return $send(["@validations", "@tracks", "@receivers"], 'each', [], (TMP_37 = function(var$){var self = TMP_37.$$s || this, $b, value = nil;
if (var$ == null) var$ = nil;
                  
                    value = my_super.$_Railway().$instance_variable_get(var$);
                    return wrapper.$instance_variable_set(var$, ($truthy($b = value) ? value.$dup() : $b));}, TMP_37.$$s = self, TMP_37.$$arity = 1, TMP_37))}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36))
              };}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35))}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34));
        }, TMP_inherited_38.$$arity = 1), nil) && 'inherited';
      })(Opal.get_singleton_class(self), $nesting);
      return (function($base, $super, $parent_nesting) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Railway_initialize_39;

        return (Opal.defn(self, '$initialize', TMP_Railway_initialize_39 = function $$initialize(operation) {
          var self = this;

          return (self.operation = operation)
        }, TMP_Railway_initialize_39.$$arity = 1), nil) && 'initialize'
      })($nesting[0], null, $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/railway/dispatcher"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$receivers', '$class', '$set_var', '$lambda', '$call', '$to_proc', '$define_singleton_method', '$delete', '$<<', '$then', '$result', '$each', '$dispatch_params', '$params_wrapper', '$params']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Railway_receivers_1, TMP_Railway_dispatch_9;

        
        
        Opal.defn(self, '$receivers', TMP_Railway_receivers_1 = function $$receivers() {
          var self = this;

          return self.$class().$receivers()
        }, TMP_Railway_receivers_1.$$arity = 0);
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_receivers_3, TMP_add_receiver_4;

          
          
          Opal.defn(self, '$receivers', TMP_receivers_3 = function $$receivers() {
            var TMP_2, self = this;

            return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@receivers", $hash2(["force"], {"force": true})], (TMP_2 = function(){var self = TMP_2.$$s || this;

            return []}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
          }, TMP_receivers_3.$$arity = 0);
          return (Opal.defn(self, '$add_receiver', TMP_add_receiver_4 = function $$add_receiver() {
            var TMP_5, TMP_6, self = this, $iter = TMP_add_receiver_4.$$p, block = $iter || nil, cloned_block = nil, operation = nil;

            if ($iter) TMP_add_receiver_4.$$p = null;
            
            cloned_block = $send(self, 'lambda', [], (TMP_5 = function($a_rest){var self = TMP_5.$$s || this, b, args;

              b = TMP_5.$$p || nil;
              if (b) TMP_5.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return $send(block, 'call', Opal.to_a(args), b.$to_proc())}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5));
            operation = self;
            $send(cloned_block, 'define_singleton_method', ["unmount"], (TMP_6 = function(){var self = TMP_6.$$s || this;

            return operation.$receivers().$delete(cloned_block)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
            self.$receivers()['$<<'](cloned_block);
            return cloned_block;
          }, TMP_add_receiver_4.$$arity = 0), nil) && 'add_receiver';
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.defn(self, '$dispatch', TMP_Railway_dispatch_9 = function $$dispatch() {
          var TMP_7, self = this;

          return $send(self.$result(), 'then', [], (TMP_7 = function(){var self = TMP_7.$$s || this, TMP_8;

          return $send(self.$receivers(), 'each', [], (TMP_8 = function(receiver){var self = TMP_8.$$s || this;
              if (self.operation == null) self.operation = nil;
if (receiver == null) receiver = nil;
            return receiver.$call(self.$class().$params_wrapper().$dispatch_params(self.operation.$params()), self.operation)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7))
        }, TMP_Railway_dispatch_9.$$arity = 0), nil) && 'dispatch';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/railway/params_wrapper"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$dup', '$each', '$inbound_params', '$class', '$delete', '$with_indifferent_access', '$to_s', '$to_h', '$inject', '$respond_to?', '$raise', '$new', '$merge!', '$combine_arg_array', '$filter', '$hash_filter', '$instance_eval', '$translate_args', '$to_proc', '$<<', '$key?', '$optional', '$send', '$required', '$define_method', '$[]', '$method_missing', '$[]=', '$-', '$lock', '$get_name_and_opts', '$is_a?', '$>', '$count', '$first', '$==', '$proc', '$duck', '$underscore', '$last', '$process_params', '$params_wrapper', '$add_param', '$set_var', '$superclass', '$tap', '$instance_variable_set']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        function $ParamsWrapper(){};
        var self = $ParamsWrapper = $klass($base, $super, 'ParamsWrapper', $ParamsWrapper);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ParamsWrapper_initialize_1, TMP_ParamsWrapper_lock_2, TMP_ParamsWrapper_to_h_4, TMP_ParamsWrapper_to_s_5;

        def.inputs = def.locked = nil;
        
        
        Opal.defn(self, '$initialize', TMP_ParamsWrapper_initialize_1 = function $$initialize(inputs) {
          var self = this;

          return (self.inputs = inputs)
        }, TMP_ParamsWrapper_initialize_1.$$arity = 1);
        
        Opal.defn(self, '$lock', TMP_ParamsWrapper_lock_2 = function $$lock() {
          var self = this;

          
          self.locked = true;
          return self;
        }, TMP_ParamsWrapper_lock_2.$$arity = 0);
        
        Opal.defn(self, '$to_h', TMP_ParamsWrapper_to_h_4 = function $$to_h() {
          var TMP_3, self = this, inputs = nil;

          
          inputs = self.inputs;
          if ($truthy(self.locked)) {
            
            inputs = inputs.$dup();
            $send(self.$class().$inbound_params(), 'each', [], (TMP_3 = function(name){var self = TMP_3.$$s || this;
if (name == null) name = nil;
            return inputs.$delete("" + (name))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));};
          return inputs.$with_indifferent_access();
        }, TMP_ParamsWrapper_to_h_4.$$arity = 0);
        
        Opal.defn(self, '$to_s', TMP_ParamsWrapper_to_s_5 = function $$to_s() {
          var self = this;

          return self.$to_h().$to_s()
        }, TMP_ParamsWrapper_to_s_5.$$arity = 0);
        return (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_combine_arg_array_7, TMP_process_params_9, TMP_add_param_10, TMP_dispatch_params_17, TMP_hash_filter_18, TMP_inbound_params_19, TMP_translate_args_20, TMP_get_name_and_opts_23;

          
          
          Opal.defn(self, '$combine_arg_array', TMP_combine_arg_array_7 = function $$combine_arg_array(args) {
            var TMP_6, self = this, hash = nil;

            return (hash = $send(args, 'inject', [$hash2([], {}).$with_indifferent_access()], (TMP_6 = function(h, arg){var self = TMP_6.$$s || this;
if (h == null) h = nil;if (arg == null) arg = nil;
            
              if ($truthy(arg['$respond_to?']("to_h"))) {
                } else {
                self.$raise(Opal.const_get_relative($nesting, 'ArgumentError').$new("All arguments must be hashes"))
              };
              return h['$merge!'](arg.$to_h());}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6)))
          }, TMP_combine_arg_array_7.$$arity = 1);
          
          Opal.defn(self, '$process_params', TMP_process_params_9 = function $$process_params(operation, args) {
            var $a, $b, TMP_8, self = this, raw_inputs = nil, inputs = nil, errors = nil, params_wrapper = nil;

            
            raw_inputs = self.$combine_arg_array(args);
            $b = self.$hash_filter().$filter(raw_inputs), $a = Opal.to_ary($b), (inputs = ($a[0] == null ? nil : $a[0])), (errors = ($a[1] == null ? nil : $a[1])), $b;
            params_wrapper = self.$new(inputs);
            return $send(operation, 'instance_eval', [], (TMP_8 = function(){var self = TMP_8.$$s || this, $c;

            return $c = [raw_inputs, params_wrapper, errors], (self.raw_inputs = $c[0]), (self.params = $c[1]), (self.errors = $c[2]), $c}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));
          }, TMP_process_params_9.$$arity = 2);
          
          Opal.defn(self, '$add_param', TMP_add_param_10 = function $$add_param($a_rest) {
            var $b, $c, TMP_11, TMP_12, TMP_13, TMP_14, self = this, args, $iter = TMP_add_param_10.$$p, block = $iter || nil, type_method = nil, name = nil, opts = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_add_param_10.$$p = null;
            
            $c = $send(self, 'translate_args', Opal.to_a(args), block.$to_proc()), $b = Opal.to_ary($c), (type_method = ($b[0] == null ? nil : $b[0])), (name = ($b[1] == null ? nil : $b[1])), (opts = ($b[2] == null ? nil : $b[2])), (block = ($b[3] == null ? nil : $b[3])), $c;
            if ($truthy(opts.$delete("inbound"))) {
              self.$inbound_params()['$<<']("" + (name))};
            if ($truthy(opts['$key?']("default"))) {
              $send(self.$hash_filter(), 'optional', [], (TMP_11 = function(){var self = TMP_11.$$s || this;

              return $send(self, 'send', [type_method, name, opts], block.$to_proc())}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11))
              } else {
              $send(self.$hash_filter(), 'required', [], (TMP_12 = function(){var self = TMP_12.$$s || this;

              return $send(self, 'send', [type_method, name, opts], block.$to_proc())}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12))
            };
            $send(self, 'define_method', [name], (TMP_13 = function(){var self = TMP_13.$$s || this;
              if (self.inputs == null) self.inputs = nil;

            return self.inputs['$[]'](name)}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13));
            return $send(self, 'define_method', ["" + (name) + "="], (TMP_14 = function(x){var self = TMP_14.$$s || this, $writer = nil;
              if (self.locked == null) self.locked = nil;
              if (self.inputs == null) self.inputs = nil;
if (x == null) x = nil;
            
              if ($truthy(self.locked)) {
                self.$method_missing("" + (name) + "=", x)};
              
              $writer = [name, x];
              $send(self.inputs, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
          }, TMP_add_param_10.$$arity = -1);
          
          Opal.defn(self, '$dispatch_params', TMP_dispatch_params_17 = function $$dispatch_params(params, hashes) {
            var TMP_15, self = this;

            if (hashes == null) {
              hashes = $hash2([], {});
            }
            
            params = params.$dup();
            $send(hashes, 'each', [], (TMP_15 = function(hash){var self = TMP_15.$$s || this, TMP_16;
if (hash == null) hash = nil;
            return $send(hash, 'each', [], (TMP_16 = function(k, v){var self = TMP_16.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
              return params.$send("" + (k) + "=", v)}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15));
            return params.$lock();
          }, TMP_dispatch_params_17.$$arity = -2);
          
          Opal.defn(self, '$hash_filter', TMP_hash_filter_18 = function $$hash_filter() {
            var $a, self = this;
            if (self.hash_filter == null) self.hash_filter = nil;

            return (self.hash_filter = ($truthy($a = self.hash_filter) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'HashFilter').$new()))
          }, TMP_hash_filter_18.$$arity = 0);
          
          Opal.defn(self, '$inbound_params', TMP_inbound_params_19 = function $$inbound_params() {
            var $a, self = this;
            if (self.inbound_params == null) self.inbound_params = nil;

            return (self.inbound_params = ($truthy($a = self.inbound_params) ? $a : Opal.const_get_relative($nesting, 'Set').$new()))
          }, TMP_inbound_params_19.$$arity = 0);
          
          Opal.defn(self, '$translate_args', TMP_translate_args_20 = function $$translate_args($a_rest) {
            var $b, $c, TMP_21, TMP_22, self = this, args, $iter = TMP_translate_args_20.$$p, block = $iter || nil, name = nil, opts = nil, type_method = nil, $writer = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_translate_args_20.$$p = null;
            
            $c = $send(self, 'get_name_and_opts', Opal.to_a(args)), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (opts = ($b[1] == null ? nil : $b[1])), $c;
            if ($truthy(opts['$key?']("type"))) {
              
              type_method = opts.$delete("type");
              if ($truthy(type_method['$is_a?'](Opal.const_get_relative($nesting, 'Array')))) {
                
                if ($truthy($rb_gt(type_method.$count(), 0))) {
                  
                  $writer = ["class", type_method.$first()];
                  $send(opts, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                type_method = Opal.const_get_relative($nesting, 'Array');
              } else if ($truthy(($truthy($b = type_method['$is_a?'](Opal.const_get_relative($nesting, 'Hash'))) ? $b : type_method['$=='](Opal.const_get_relative($nesting, 'Hash'))))) {
                
                type_method = Opal.const_get_relative($nesting, 'Hash');
                block = ($truthy($b = block) ? $b : $send(self, 'proc', [], (TMP_21 = function(){var self = TMP_21.$$s || this;

                return self.$duck("*")}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21)));};
              type_method = type_method.$to_s().$underscore();
              } else {
              type_method = "duck"
            };
            return [type_method, name, opts, ($truthy($b = block) ? $b : $send(self, 'proc', [], (TMP_22 = function(){var self = TMP_22.$$s || this;

            return nil}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22)))];
          }, TMP_translate_args_20.$$arity = -1);
          return (Opal.defn(self, '$get_name_and_opts', TMP_get_name_and_opts_23 = function $$get_name_and_opts($a_rest) {
            var $b, self = this, args, opts = nil, name = nil, $writer = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            
            if ($truthy(args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              
              opts = args['$[]'](0);
              name = opts.$first().$first();
              
              $writer = ["default", opts.$first().$last()];
              $send(opts, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              opts.$delete(name);
              } else {
              
              name = args['$[]'](0);
              opts = ($truthy($b = args['$[]'](1)) ? $b : $hash2([], {}));
            };
            return [name, opts];
          }, TMP_get_name_and_opts_23.$$arity = -1), nil) && 'get_name_and_opts';
        })(Opal.get_singleton_class(self), $nesting);
      })($nesting[0], null, $nesting);
      return (function($base, $super, $parent_nesting) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Railway_process_params_24, TMP_Railway_add_param_25, TMP_Railway_params_wrapper_28;

        def.operation = nil;
        
        
        Opal.defn(self, '$process_params', TMP_Railway_process_params_24 = function $$process_params(args) {
          var self = this;

          return self.$class().$params_wrapper().$process_params(self.operation, args)
        }, TMP_Railway_process_params_24.$$arity = 1);
        Opal.defs(self, '$add_param', TMP_Railway_add_param_25 = function $$add_param($a_rest) {
          var self = this, args, $iter = TMP_Railway_add_param_25.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_Railway_add_param_25.$$p = null;
          return $send(self.$params_wrapper(), 'add_param', Opal.to_a(args), block.$to_proc())
        }, TMP_Railway_add_param_25.$$arity = -1);
        return Opal.defs(self, '$params_wrapper', TMP_Railway_params_wrapper_28 = function $$params_wrapper() {
          var TMP_26, self = this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Context'), 'set_var', [self, "@params_wrapper"], (TMP_26 = function(){var self = TMP_26.$$s || this, TMP_27;

          if (Opal.const_get_relative($nesting, 'Railway')['$=='](self.$superclass())) {
              return Opal.const_get_relative($nesting, 'Class').$new(Opal.const_get_relative($nesting, 'ParamsWrapper'))
              } else {
              return $send(Opal.const_get_relative($nesting, 'Class').$new(self.$superclass().$params_wrapper()), 'tap', [], (TMP_27 = function(wrapper){var self = TMP_27.$$s || this, $a, hash_filter = nil, inbound_params = nil;
if (wrapper == null) wrapper = nil;
              
                hash_filter = self.$superclass().$params_wrapper().$hash_filter();
                wrapper.$instance_variable_set("@hash_filter", ($truthy($a = hash_filter) ? hash_filter.$dup() : $a));
                inbound_params = self.$superclass().$params_wrapper().$inbound_params();
                return wrapper.$instance_variable_set("@inbound_params", ($truthy($a = inbound_params) ? inbound_params.$dup() : $a));}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27))
            }}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26))
        }, TMP_Railway_params_wrapper_28.$$arity = 0);
      })($nesting[0], null, $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/railway/run"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$tracks', '$class', '$merge', '$zero?', '$count', '$is_a?', '$[]', '$==', '$<', '$proc', '$run', '$params', '$instance_method', '$each', '$define_method', '$<<', '$build_tie', '$raise', '$new', '$then', '$apply', '$always', '$resolve', '$step', '$method', '$arity', '$instance_exec', '$to_proc', '$state', '$result', '$call', '$bind', '$include?']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        function $Exit(){};
        var self = $Exit = $klass($base, $super, 'Exit', $Exit);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Exit_initialize_1;

        
        self.$attr_reader("state");
        self.$attr_reader("result");
        return (Opal.defn(self, '$initialize', TMP_Exit_initialize_1 = function $$initialize(state, result) {
          var self = this;

          
          self.state = state;
          return (self.result = result);
        }, TMP_Exit_initialize_1.$$arity = 2), nil) && 'initialize';
      })($nesting[0], Opal.const_get_relative($nesting, 'StandardError'), $nesting);
      return (function($base, $super, $parent_nesting) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Railway_tracks_2, TMP_Railway_step_11, TMP_Railway_failed_13, TMP_Railway_async_14, TMP_Railway_apply_15, TMP_Railway_run_17, TMP_Railway_result_19;

        def.promise_chain = def.last_async_result = def.state = def.operation = def.promise_chain_start = def.last_result = def.result = nil;
        
        
        Opal.defn(self, '$tracks', TMP_Railway_tracks_2 = function $$tracks() {
          var self = this;

          return self.$class().$tracks()
        }, TMP_Railway_tracks_2.$$arity = 0);
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_tracks_3, TMP_build_tie_5, TMP_6, TMP_abort$B_8, TMP_succeed$B_9;

          
          
          Opal.defn(self, '$tracks', TMP_tracks_3 = function $$tracks() {
            var $a, self = this;
            if (self.tracks == null) self.tracks = nil;

            return (self.tracks = ($truthy($a = self.tracks) ? $a : []))
          }, TMP_tracks_3.$$arity = 0);
          
          Opal.defn(self, '$build_tie', TMP_build_tie_5 = function $$build_tie(tie, args, block) {
            var $a, $b, TMP_4, self = this, scope = nil;

            return (function() {if ($truthy(args.$count()['$zero?']())) {
              return $hash2(["run"], {"run": block})
            } else if ($truthy(args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
              return $hash2(["scope", "run"], {"scope": (function() {if ($truthy(args['$[]'](0)['$[]']("class"))) {
                return "class"
                } else {
                return args['$[]'](0)['$[]']("scope")
              }; return nil; })(), "run": ($truthy($a = ($truthy($b = args['$[]'](0)['$[]']("class")) ? $b : args['$[]'](0)['$[]']("run"))) ? $a : block)})
            } else if ($truthy((($a = args['$[]'](0)['$==']("class")) ? block : args['$[]'](0)['$==']("class")))) {
              return $hash2(["run", "scope"], {"run": block, "scope": "class"})
            } else if ($truthy(($truthy($a = args['$[]'](0)['$is_a?'](Opal.const_get_relative($nesting, 'Class'))) ? $rb_lt(args['$[]'](0), Opal.const_get_relative($nesting, 'Operation')) : $a))) {
              return $hash2(["run"], {"run": $send(self, 'proc', [], (TMP_4 = function(){var self = TMP_4.$$s || this;

              return args['$[]'](0).$run(self.$params())}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4))})
              } else {
              
              if ($truthy(args['$[]'](1)['$is_a?'](Opal.const_get_relative($nesting, 'Hash')))) {
                scope = args['$[]'](1)['$[]']("scope")};
              return $hash2(["run", "scope"], {"run": args['$[]'](0), "scope": scope});
            }; return nil; })().$merge($hash2(["tie"], {"tie": self.$instance_method(tie)}))
          }, TMP_build_tie_5.$$arity = 3);
          $send(["step", "failed", "async"], 'each', [], (TMP_6 = function(tie){var self = TMP_6.$$s || this, TMP_7;
if (tie == null) tie = nil;
          return $send(self, 'define_method', ["" + "add_" + (tie)], (TMP_7 = function($a_rest){var self = TMP_7.$$s || this, block, args;

              block = TMP_7.$$p || nil;
              if (block) TMP_7.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return self.$tracks()['$<<'](self.$build_tie(tie, args, block))}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
          
          Opal.defn(self, '$abort!', TMP_abort$B_8 = function(arg) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'Exit').$new("failed", arg))
          }, TMP_abort$B_8.$$arity = 1);
          return (Opal.defn(self, '$succeed!', TMP_succeed$B_9 = function(arg) {
            var self = this;

            return self.$raise(Opal.const_get_relative($nesting, 'Exit').$new("success", arg))
          }, TMP_succeed$B_9.$$arity = 1), nil) && 'succeed!';
        })(Opal.get_singleton_class(self), $nesting);
        
        Opal.defn(self, '$step', TMP_Railway_step_11 = function $$step(opts) {
          var TMP_10, self = this;

          return (self.promise_chain = $send(self.promise_chain, 'then', [], (TMP_10 = function(result){var self = TMP_10.$$s || this;
if (result == null) result = nil;
          return self.$apply(result, "success", opts)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10)))
        }, TMP_Railway_step_11.$$arity = 1);
        
        Opal.defn(self, '$failed', TMP_Railway_failed_13 = function $$failed(opts) {
          var TMP_12, self = this;

          return (self.promise_chain = $send(self.promise_chain, 'always', [], (TMP_12 = function(result){var self = TMP_12.$$s || this;
if (result == null) result = nil;
          return self.$apply(result, "failed", opts)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12)))
        }, TMP_Railway_failed_13.$$arity = 1);
        
        Opal.defn(self, '$async', TMP_Railway_async_14 = function $$async(opts) {
          var self = this;

          
          self.promise_chain = (self.promise_chain_start = Opal.const_get_relative($nesting, 'Promise').$new());
          self.promise_chain.$resolve(self.last_async_result);
          return self.$step(opts);
        }, TMP_Railway_async_14.$$arity = 1);
        
        Opal.defn(self, '$apply', TMP_Railway_apply_15 = function $$apply(result, state, opts) {
          var $a, self = this, args = nil, instance = nil, block = nil, last_result = nil, e = nil;

          try {
            
            if (self.state['$=='](state)) {
              } else {
              return result
            };
            if (opts['$[]']("scope")['$==']("class")) {
              
              args = [self.operation].concat(Opal.to_a(result));
              instance = self.operation.$class();
              } else {
              
              args = result;
              instance = self.operation;
            };
            block = opts['$[]']("run");
            if ($truthy(block['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
              block = instance.$method(block)};
            last_result = (function() {if ($truthy(block.$arity()['$zero?']())) {
              return $send(instance, 'instance_exec', [], block.$to_proc())
            } else if ($truthy(($truthy($a = args['$is_a?'](Opal.const_get_relative($nesting, 'Array'))) ? block.$arity()['$=='](args.$count()) : $a))) {
              return $send(instance, 'instance_exec', Opal.to_a(args), block.$to_proc())
              } else {
              return $send(instance, 'instance_exec', [args], block.$to_proc())
            }; return nil; })();
            if ($truthy(last_result['$is_a?'](Opal.const_get_relative($nesting, 'Promise')))) {
              } else {
              self.last_async_result = last_result
            };
            return last_result;
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exit')])) {e = $err;
              try {
                if (e.$state()['$==']("failed")) {
                  
                  self.state = "abort";
                  return self.$raise((function() {if ($truthy(e.$result()['$is_a?'](Opal.const_get_relative($nesting, 'Exception')))) {
                    return e.$result()
                    } else {
                    return e
                  }; return nil; })());
                  } else {
                  
                  self.state = "succeed";
                  return e.$result();
                }
              } finally { Opal.pop_exception() }
            } else 
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
              try {
                
                self.state = "failed";
                return self.$raise(e);
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, TMP_Railway_apply_15.$$arity = 3);
        
        Opal.defn(self, '$run', TMP_Railway_run_17 = function $$run() {
          var $a, TMP_16, self = this;

          
          self.state = ($truthy($a = self.state) ? $a : "success");
          self.promise_chain_start = (self.promise_chain = Opal.const_get_relative($nesting, 'Promise').$new());
          self.promise_chain_start.$resolve(self.last_result);
          if (self.state['$==']("abort")) {
            return nil
            } else {
            return $send(self.$tracks(), 'each', [], (TMP_16 = function(opts){var self = TMP_16.$$s || this;
if (opts == null) opts = nil;
            return opts['$[]']("tie").$bind(self).$call(opts)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16))
          };
        }, TMP_Railway_run_17.$$arity = 0);
        return (Opal.defn(self, '$result', TMP_Railway_result_19 = function $$result() {
          var $a, TMP_18, self = this;

          return (self.result = ($truthy($a = self.result) ? $a : $send(self.promise_chain, 'always', [], (TMP_18 = function(e){var self = TMP_18.$$s || this;
            if (self.state == null) self.state = nil;
if (e == null) e = nil;
          if ($truthy(["abort", "failed"]['$include?'](self.state))) {
              if ($truthy(e['$is_a?'](Opal.const_get_relative($nesting, 'Exception')))) {
                return self.$raise(e)
                } else {
                return self.$raise(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Promise'), 'Fail').$new(e))
              }
              } else {
              return e
            }}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18))))
        }, TMP_Railway_result_19.$$arity = 0), nil) && 'result';
      })($nesting[0], null, $nesting);
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/railway/validations"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$validations', '$class', '$add_error', '$+', '$to_s', '$[]', '$<<', '$add_validation', '$instance_eval', '$to_proc', '$==', '$state', '$raise', '$new', '$result', '$each_with_index', '$is_a?', '$method', '$instance_exec', '$add_validation_error', '$===', '$has_errors?', '$instance_variable_get']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $super, $parent_nesting) {
        function $Railway(){};
        var self = $Railway = $klass($base, $super, 'Railway', $Railway);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Railway_validations_1, TMP_Railway_add_validation_error_2, TMP_Railway_process_validations_8;

        def.operation = def.last_result = def.state = nil;
        
        
        Opal.defn(self, '$validations', TMP_Railway_validations_1 = function $$validations() {
          var self = this;

          return self.$class().$validations()
        }, TMP_Railway_validations_1.$$arity = 0);
        
        Opal.defn(self, '$add_validation_error', TMP_Railway_add_validation_error_2 = function $$add_validation_error(i, e) {
          var self = this;

          return self.operation.$add_error("" + "param validation " + ($rb_plus(i, 1)), "validation_error", e.$to_s())
        }, TMP_Railway_add_validation_error_2.$$arity = 2);
        (function(self, $parent_nesting) {
          var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_validations_3, TMP_add_validation_4, TMP_add_error_5;

          
          
          Opal.defn(self, '$validations', TMP_validations_3 = function $$validations() {
            var $a, self = this;
            if (self.validations == null) self.validations = nil;

            return (self.validations = ($truthy($a = self.validations) ? $a : []))
          }, TMP_validations_3.$$arity = 0);
          
          Opal.defn(self, '$add_validation', TMP_add_validation_4 = function $$add_validation($a_rest) {
            var self = this, args, $iter = TMP_add_validation_4.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            if ($iter) TMP_add_validation_4.$$p = null;
            
            if ($truthy(args['$[]'](0))) {
              block = args['$[]'](0)};
            return self.$validations()['$<<'](block);
          }, TMP_add_validation_4.$$arity = -1);
          return (Opal.defn(self, '$add_error', TMP_add_error_5 = function $$add_error(param, symbol, message, $a_rest) {
            var TMP_6, self = this, args, $iter = TMP_add_error_5.$$p, block = $iter || nil;

            var $args_len = arguments.length, $rest_len = $args_len - 3;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 3] = arguments[$arg_idx];
            }
            if ($iter) TMP_add_error_5.$$p = null;
            return $send(self, 'add_validation', [], (TMP_6 = function(){var self = TMP_6.$$s || this, e = nil;

            
              try {
                
                if ($truthy($send(self, 'instance_eval', [], block.$to_proc()))) {
                  self.$add_error(param, symbol, message)};
                return true;
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exit')])) {e = $err;
                  try {
                    
                    if (e.$state()['$==']("failed")) {
                      } else {
                      self.$raise(e)
                    };
                    self.$add_error(param, symbol, message);
                    return self.$raise(Opal.const_get_relative($nesting, 'Exit').$new("abort_from_add_error", e.$result()));
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6))
          }, TMP_add_error_5.$$arity = -4), nil) && 'add_error';
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.defn(self, '$process_validations', TMP_Railway_process_validations_8 = function $$process_validations() {try {

          var TMP_7, $a, self = this;

          return (function() { try {
          return $send(self.$validations(), 'each_with_index', [], (TMP_7 = function(validator, i){var self = TMP_7.$$s || this, e = nil, $case = nil;
            if (self.operation == null) self.operation = nil;
if (validator == null) validator = nil;if (i == null) i = nil;
          
            try {
              
              if ($truthy(validator['$is_a?'](Opal.const_get_relative($nesting, 'Symbol')))) {
                validator = self.operation.$method(validator)};
              if ($truthy($send(self.operation, 'instance_exec', [], validator.$to_proc()))) {
                return nil;};
              return self.$add_validation_error(i, "" + "param validation " + ($rb_plus(i, 1)) + " failed");
            } catch ($err) {
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exit')])) {e = $err;
                try {
                  
                  $case = e.$state();
                  if ("success"['$===']($case)) {self.$add_validation_error(i, "illegal use of succeed! in validation")}
                  else if ("failed"['$===']($case)) {self.$add_validation_error(i, "" + "param validation " + ($rb_plus(i, 1)) + " aborted")};
                  self.state = "abort";
                  Opal.ret(nil);
                } finally { Opal.pop_exception() }
              } else 
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'AccessViolation')])) {e = $err;
                try {
                  
                  self.$add_validation_error(i, e);
                  self.state = "abort";
                  self.last_result = e;
                  Opal.ret(nil);
                } finally { Opal.pop_exception() }
              } else 
              if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
                try {
                  return self.$add_validation_error(i, e)
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7))
          } finally {
            (function() {if ($truthy(self.operation['$has_errors?']())) {
              
              self.last_result = ($truthy($a = self.last_result) ? $a : Opal.const_get_relative($nesting, 'ValidationException').$new(self.operation.$instance_variable_get("@errors")));
              return (self.state = ($truthy($a = self.state) ? $a : "failed"));
              } else {
              return nil
            }; return nil; })()
          }; })()
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_Railway_process_validations_8.$$arity = 0), nil) && 'process_validations';
      })($nesting[0], null, $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/server_op"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$include', '$on_opal_client?', '$combine_arg_array', '$params_wrapper', '$_Railway', '$serialize_params', '$fail', '$then', '$post', '$to_json', '$name', '$merge', '$headers', '$[]', '$opts', '$deserialize_response', '$json', '$new', '$const_get', '$on_opal_server?', '$internal_iso_run', '$resolve', '$reject', '$isomorphic_method', '$send_to_server', '$when_on_server', '$run_from_client', '$controller', '$map', '$descendants', '$to_proc', '$production?', '$env', '$include?', '$descendants_map_cache', '$raise_operation_access_violation', '$<', '$class_eval', '$constantize', '$method_defined?', '$[]=', '$-', '$!', '$raise', '$run', '$deserialize_params', '$serialize_response', '$handle_exception', '$is_a?', '$respond_to?', '$to_h', '$<<', '$red', '$inspect', '$each', '$truncate', '$details', '$__hyperstack_on_error', '$join', '$to_s', '$class', '$status', '$URI', '$host', '$port', '$path', '$scheme', '$use_ssl=', '$body=', '$request', '$!=', '$lock', '$deserialize_dispatch', '$receivers', '$call', '$inbound', '$params', '$send', '$pre_controller_op_method_missing']);
  
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
    nil
  };
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    
    (function($base, $super, $parent_nesting) {
      function $ServerOp(){};
      var self = $ServerOp = $klass($base, $super, 'ServerOp', $ServerOp);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function(self, $parent_nesting) {
        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_run_3, TMP_run_4, TMP_5, TMP_descendants_map_cache_7, TMP_run_from_client_11, TMP_status_12, TMP_handle_exception_14, TMP_remote_15, TMP_headers_16, TMP_serialize_params_17, TMP_deserialize_params_18, TMP_serialize_response_19, TMP_deserialize_response_20, TMP_serialize_dispatch_21, TMP_deserialize_dispatch_22, TMP_dispatch_to_23, TMP_dispatch_from_server_25;

        
        self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Component'), 'IsomorphicHelpers'));
        if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          if ($truthy(self['$on_opal_client?']())) {
            
            Opal.defn(self, '$run', TMP_run_3 = function $$run($a_rest) {
              var TMP_1, TMP_2, self = this, args, hash = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              
              hash = self.$_Railway().$params_wrapper().$combine_arg_array(args);
              hash = self.$serialize_params(hash);
              return $send($send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'HTTP').$post("" + (window.HyperstackEnginePath) + "/execute_remote", $hash2(["payload", "headers"], {"payload": $hash2(["hyperstack_secured_json"], {"hyperstack_secured_json": $hash2(["operation", "params"], {"operation": self.$name(), "params": hash}).$to_json()}), "headers": self.$headers().$merge($hash2(["X-CSRF-Token"], {"X-CSRF-Token": Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'ClientDrivers').$opts()['$[]']("form_authenticity_token")}))})), 'then', [], (TMP_1 = function(response){var self = TMP_1.$$s || this;
if (response == null) response = nil;
              return self.$deserialize_response(response.$json()['$[]']("response"))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1)), 'fail', [], (TMP_2 = function(response){var self = TMP_2.$$s || this;
if (response == null) response = nil;
              
                try {
                  return self.$const_get(response.$json()['$[]']("error_class")).$new(response.$json()['$[]']("error"))
                } catch ($err) {
                  if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {
                    try {
                      return Opal.const_get_relative($nesting, 'Exception').$new(response.$json()['$[]']("error"))
                    } finally { Opal.pop_exception() }
                  } else { throw $err; }
                };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
            }, TMP_run_3.$$arity = -1)
          } else if ($truthy(self['$on_opal_server?']())) {
            
            Opal.defn(self, '$run', TMP_run_4 = function $$run($a_rest) {
              var self = this, args, promise = nil, response = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
              
              promise = Opal.const_get_relative($nesting, 'Promise').$new();
              response = self.$internal_iso_run(self.$name(), args);
              if ($truthy(response['$[]']("json")['$[]']("response"))) {
                promise.$resolve(response['$[]']("json")['$[]']("response"))
                } else {
                promise.$reject(Opal.const_get_relative($nesting, 'Exception').$new(response['$[]']("json")['$[]']("error")))
              };
              return promise;
            }, TMP_run_4.$$arity = -1)}
          } else {
          nil
        };
        $send(self, 'isomorphic_method', ["internal_iso_run"], (TMP_5 = function(f, klass_name, op_params){var self = TMP_5.$$s || this, TMP_6;
if (f == null) f = nil;if (klass_name == null) klass_name = nil;if (op_params == null) op_params = nil;
        
          f.$send_to_server(klass_name, op_params);
          return $send(f, 'when_on_server', [], (TMP_6 = function(){var self = TMP_6.$$s || this;

          return $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'ServerOp'), 'run_from_client', ["acting_user", self.$controller(), klass_name].concat(Opal.to_a(op_params)))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));}, TMP_5.$$s = self, TMP_5.$$arity = 3, TMP_5));
        
        Opal.defn(self, '$descendants_map_cache', TMP_descendants_map_cache_7 = function $$descendants_map_cache() {
          var $a, self = this;
          if (self.cached_descendants == null) self.cached_descendants = nil;

          return (self.cached_descendants = ($truthy($a = self.cached_descendants) ? $a : $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'ServerOp').$descendants(), 'map', [], "to_s".$to_proc())))
        }, TMP_descendants_map_cache_7.$$arity = 0);
        
        Opal.defn(self, '$run_from_client', TMP_run_from_client_11 = function $$run_from_client(security_param, controller, operation, params) {try {

          var TMP_8, self = this, const$ = nil, e = nil;

          try {
            
            if ($truthy(Opal.const_get_relative($nesting, 'Rails').$env()['$production?']())) {
              if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'ServerOp').$descendants_map_cache()['$include?'](operation))) {
                } else {
                Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'InternalPolicy').$raise_operation_access_violation("illegal_remote_op_call", "" + "Operation: " + (operation) + " (in production)")
              }
              } else {
              
              
              try {
                const$ = Opal.const_get_relative($nesting, 'Object').$const_get(operation)
              } catch ($err) {
                if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'NameError')])) {
                  try {
                    Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'InternalPolicy').$raise_operation_access_violation("illegal_remote_op_call", "" + "Operation: " + (operation) + " (const not found)")
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };;
              if ($truthy($rb_lt(const$, Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'ServerOp')))) {
                } else {
                Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'InternalPolicy').$raise_operation_access_violation("illegal_remote_op_call", "" + "Operation: " + (operation) + " (not a ServerOp subclass)")
              };
            };
            return $send(operation.$constantize(), 'class_eval', [], (TMP_8 = function(){var self = TMP_8.$$s || this, TMP_9, TMP_10, $writer = nil;

            
              if ($truthy(self.$_Railway().$params_wrapper()['$method_defined?']("controller"))) {
                
                $writer = ["controller", controller];
                $send(params, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              } else if ($truthy(self.$_Railway().$params_wrapper()['$method_defined?'](security_param)['$!']())) {
                self.$raise(Opal.const_get_relative($nesting, 'AccessViolation').$new("remote_access_not_allowed"))};
              return $send($send(self.$run(self.$deserialize_params(params)), 'then', [], (TMP_9 = function(r){var self = TMP_9.$$s || this;
if (r == null) r = nil;
              Opal.ret($hash2(["json"], {"json": $hash2(["response"], {"response": self.$serialize_response(r)})}))}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9)), 'fail', [], (TMP_10 = function(e){var self = TMP_10.$$s || this;
if (e == null) e = nil;
              Opal.ret(self.$handle_exception(e, operation, params))}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8));
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
              try {
                return self.$handle_exception(e, operation, params)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
          } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
        }, TMP_run_from_client_11.$$arity = 4);
        
        Opal.defn(self, '$status', TMP_status_12 = function $$status(e) {
          var self = this;

          if ($truthy(e['$is_a?'](Opal.const_get_relative($nesting, 'AccessViolation')))) {
            return 403
          } else if ($truthy(e['$is_a?'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Operation'), 'ValidationException')))) {
            return 400
            } else {
            return 500
          }
        }, TMP_status_12.$$arity = 1);
        
        Opal.defn(self, '$handle_exception', TMP_handle_exception_14 = function $$handle_exception(e, operation, params) {
          var TMP_13, self = this, message = nil;

          
          if ($truthy(e['$respond_to?']("__hyperstack_on_error"))) {
            
            params = params.$to_h();
            message = [];
            message['$<<'](Opal.const_get_relative($nesting, 'Pastel').$new().$red("" + "HYPERSTACK ERROR during " + (operation) + " " + (e.$inspect())));
            $send(params, 'each', [], (TMP_13 = function(param, value){var self = TMP_13.$$s || this;
if (param == null) param = nil;if (value == null) value = nil;
            return message['$<<']("" + "  " + (param) + " => " + (value.$inspect().$truncate(120, $hash2(["separator"], {"separator": "..."}))))}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13));
            if ($truthy(e['$respond_to?']("details"))) {
              message['$<<']("" + "\n" + (e.$details()))};
            e.$__hyperstack_on_error(operation, params, message.$join("\n"));};
          return $hash2(["json", "status"], {"json": $hash2(["error_class", "error"], {"error_class": e.$class().$to_s(), "error": e}), "status": self.$status(e)});
        }, TMP_handle_exception_14.$$arity = 3);
        
        Opal.defn(self, '$remote', TMP_remote_15 = function $$remote(path, $a_rest) {
          var self = this, args, promise = nil, uri = nil, http = nil, request = nil, $writer = nil, e = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          try {
            
            promise = Opal.const_get_relative($nesting, 'Promise').$new();
            uri = self.$URI("" + (path) + "execute_remote_api");
            http = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Net'), 'HTTP').$new(uri.$host(), uri.$port());
            request = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Net'), 'HTTP'), 'Post').$new(uri.$path(), $hash2(["Content-Type"], {"Content-Type": "application/json"}));
            if (uri.$scheme()['$==']("https")) {
              
              $writer = [true];
              $send(http, 'use_ssl=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            
            $writer = [$hash2(["operation", "params"], {"operation": self.$name(), "params": Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Hyperstack'), 'Operation'), 'ParamsWrapper').$combine_arg_array(args)}).$to_json()];
            $send(request, 'body=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return promise.$resolve(http.$request(request));
          } catch ($err) {
            if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'Exception')])) {e = $err;
              try {
                return promise.$reject(e)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, TMP_remote_15.$$arity = -2);
        
        Opal.defn(self, '$headers', TMP_headers_16 = function $$headers() {
          var self = this;

          return $hash2([], {})
        }, TMP_headers_16.$$arity = 0);
        
        Opal.defn(self, '$serialize_params', TMP_serialize_params_17 = function $$serialize_params(hash) {
          var self = this;

          return hash
        }, TMP_serialize_params_17.$$arity = 1);
        
        Opal.defn(self, '$deserialize_params', TMP_deserialize_params_18 = function $$deserialize_params(hash) {
          var self = this;

          return hash
        }, TMP_deserialize_params_18.$$arity = 1);
        
        Opal.defn(self, '$serialize_response', TMP_serialize_response_19 = function $$serialize_response(hash) {
          var self = this;

          return hash
        }, TMP_serialize_response_19.$$arity = 1);
        
        Opal.defn(self, '$deserialize_response', TMP_deserialize_response_20 = function $$deserialize_response(hash) {
          var self = this;

          return hash
        }, TMP_deserialize_response_20.$$arity = 1);
        
        Opal.defn(self, '$serialize_dispatch', TMP_serialize_dispatch_21 = function $$serialize_dispatch(hash) {
          var self = this;

          return hash
        }, TMP_serialize_dispatch_21.$$arity = 1);
        
        Opal.defn(self, '$deserialize_dispatch', TMP_deserialize_dispatch_22 = function $$deserialize_dispatch(hash) {
          var self = this;

          return hash
        }, TMP_deserialize_dispatch_22.$$arity = 1);
        
        Opal.defn(self, '$dispatch_to', TMP_dispatch_to_23 = function $$dispatch_to($a_rest) {
          var self = this, args, $iter = TMP_dispatch_to_23.$$p, regulation = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ($iter) TMP_dispatch_to_23.$$p = null;
          if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
            return nil
            } else {
            return nil
          }
        }, TMP_dispatch_to_23.$$arity = -1);
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil};
        return (Opal.defn(self, '$dispatch_from_server', TMP_dispatch_from_server_25 = function $$dispatch_from_server(params_hash) {
          var TMP_24, self = this, params = nil;

          
          params = self.$_Railway().$params_wrapper().$new(self.$deserialize_dispatch(params_hash)).$lock();
          return $send(self.$_Railway().$receivers(), 'each', [], (TMP_24 = function(receiver){var self = TMP_24.$$s || this;
if (receiver == null) receiver = nil;
          return receiver.$call(params)}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24));
        }, TMP_dispatch_from_server_25.$$arity = 1), nil) && 'dispatch_from_server';
      })(Opal.get_singleton_class(self), $nesting)
    })($nesting[0], Opal.const_get_relative($nesting, 'Operation'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $ControllerOp(){};
      var self = $ControllerOp = $klass($base, $super, 'ControllerOp', $ControllerOp);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_ControllerOp_method_missing_26;

      
      self.$inbound("controller");
      Opal.alias(self, "pre_controller_op_method_missing", "method_missing");
      return (Opal.defn(self, '$method_missing', TMP_ControllerOp_method_missing_26 = function $$method_missing(name, $a_rest) {
        var self = this, args, $iter = TMP_ControllerOp_method_missing_26.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_ControllerOp_method_missing_26.$$p = null;
        if ($truthy(self.$params().$controller()['$respond_to?'](name))) {
          return $send(self.$params().$controller(), 'send', [name].concat(Opal.to_a(args)), block.$to_proc())
          } else {
          return $send(self, 'pre_controller_op_method_missing', [name].concat(Opal.to_a(args)), block.$to_proc())
        }
      }, TMP_ControllerOp_method_missing_26.$$arity = -2), nil) && 'method_missing';
    })($nesting[0], Opal.const_get_relative($nesting, 'ServerOp'), $nesting);
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation/boot"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$inherited', '$add_receiver', '$_Railway', '$to_proc', '$initialize_client_drivers_on_boot', '$_run', '$respond_to?', '$each', '$receivers', '$on_dispatch']);
  return (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      function $Application(){};
      var self = $Application = $klass($base, $super, 'Application', $Application);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), $a, TMP_Application_3;

      
      if ($truthy((($a = Opal.const_get_relative($nesting, 'Boot', 'skip_raise')) ? 'constant' : nil))) {
        Opal.const_get_relative($nesting, 'Operation').$inherited(Opal.const_get_relative($nesting, 'Boot'))};
      (function($base, $super, $parent_nesting) {
        function $Boot(){};
        var self = $Boot = $klass($base, $super, 'Boot', $Boot);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Boot_on_dispatch_1, TMP_Boot_run_2;

        
        Opal.defs(self, '$on_dispatch', TMP_Boot_on_dispatch_1 = function $$on_dispatch() {
          var self = this, $iter = TMP_Boot_on_dispatch_1.$$p, block = $iter || nil;

          if ($iter) TMP_Boot_on_dispatch_1.$$p = null;
          return $send(self.$_Railway(), 'add_receiver', [], block.$to_proc())
        }, TMP_Boot_on_dispatch_1.$$arity = 0);
        return Opal.defs(self, '$run', TMP_Boot_run_2 = function $$run($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          
          Opal.const_get_relative($nesting, 'ClientDrivers').$initialize_client_drivers_on_boot();
          return $send(self, '_run', Opal.to_a(args));
        }, TMP_Boot_run_2.$$arity = -1);
      })($nesting[0], Opal.const_get_relative($nesting, 'Operation'), $nesting);
      if ($truthy(Opal.const_get_relative($nesting, 'Boot')['$respond_to?']("receivers"))) {
        return $send(Opal.const_get_relative($nesting, 'Boot').$receivers(), 'each', [], (TMP_Application_3 = function(r){var self = TMP_Application_3.$$s || this;
if (r == null) r = nil;
        return $send(Opal.const_get_relative($nesting, 'Boot'), 'on_dispatch', [], r.$to_proc())}, TMP_Application_3.$$s = self, TMP_Application_3.$$arity = 1, TMP_Application_3))
        } else {
        return nil
      };
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["hyper-operation"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$==', '$register_additional_filter']);
  
  self.$require("hyper-operation/version");
  self.$require("hyperstack-config");
  Opal.const_get_relative($nesting, 'Hyperstack').$import("hyper-operation");
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("active_support/core_ext/string");
    self.$require("mutations");
    Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'HashFilter').$register_additional_filter(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Mutations'), 'DuckFilter'), "duck");
    self.$require("hyper-operation/filters/outbound_filter");
    self.$require("hyper-component");
    self.$require("hyper-operation/http");
    self.$require("hyper-operation/transport/client_drivers");
    (function($base, $super, $parent_nesting) {
      function $HashWithIndifferentAccess(){};
      var self = $HashWithIndifferentAccess = $klass($base, $super, 'HashWithIndifferentAccess', $HashWithIndifferentAccess);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], Opal.const_get_relative($nesting, 'Hash'), $nesting);
    (function($base, $super, $parent_nesting) {
      function $String(){};
      var self = $String = $klass($base, $super, 'String', $String);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_String_titleize_1;

      return (Opal.defn(self, '$titleize', TMP_String_titleize_1 = function $$titleize() {
        var self = this;

        return self
      }, TMP_String_titleize_1.$$arity = 0), nil) && 'titleize'
    })($nesting[0], null, $nesting);
    self.$require("hyper-operation/exception");
    self.$require("hyper-operation/promise");
    self.$require("hyper-operation/railway");
    self.$require("hyper-operation/api");
    self.$require("hyper-operation/railway/dispatcher");
    self.$require("hyper-operation/railway/params_wrapper");
    self.$require("hyper-operation/railway/run");
    self.$require("hyper-operation/railway/validations");
    self.$require("hyper-operation/server_op");
    return self.$require("hyper-operation/boot");
    } else {
    return nil
  };
};

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$new']);
  
  self.$require("active_support");
  self.$require("time");
  self.$require("date");
  self.$require("opal-jquery");
  self.$require("browser");
  self.$require("browser/interval");
  self.$require("browser/delay");
  self.$require("hyperstack-config");
  (function($base, $parent_nesting) {
    var $Hyperstack, self = $Hyperstack = $module($base, 'Hyperstack');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Hyperstack_env_1;

    Opal.defs(self, '$env', TMP_Hyperstack_env_1 = function $$env() {
      var $a, self = this;
      if (self.environment == null) self.environment = nil;

      return (self.environment = ($truthy($a = self.environment) ? $a : Opal.const_get_qualified(Opal.const_get_relative($nesting, 'ActiveSupport'), 'StringInquirer').$new("express")))
    }, TMP_Hyperstack_env_1.$$arity = 0)
  })($nesting[0], $nesting);
  self.$require("hyperstack/autoloader");
  self.$require("hyperstack/autoloader_starter");
  self.$require("hyper-component");
  self.$require("hyperstack/component/auto-import");
  self.$require("hyper-state");
  return self.$require("hyper-operation");
})(Opal);
